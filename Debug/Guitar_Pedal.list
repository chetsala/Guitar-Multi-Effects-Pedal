
Guitar_Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004464  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800462c  0800462c  0000562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004644  08004644  00006018  2**0
                  CONTENTS
  4 .ARM          00000008  08004644  08004644  00005644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800464c  0800464c  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800464c  0800464c  0000564c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004650  08004650  00005650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08004654  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000018  0800466c  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  0800466c  00006444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfaf  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f4  00000000  00000000  00013ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000162f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3b  00000000  00000000  00017030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026245  00000000  00000000  00017a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001141e  00000000  00000000  0003dcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eca27  00000000  00000000  0004f0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013baf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ec  00000000  00000000  0013bb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0013f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004614 	.word	0x08004614

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	08004614 	.word	0x08004614

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <processData>:
	outBufPtr = &dacData[BUFFER_SIZE/2];

	dataReadyFlag = 1;
}

void processData(){
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0

	static float leftIn, leftOut;
	static float rightIn, rightOut;

	for (uint8_t n = 0; n < (BUFFER_SIZE/2) - 1; n += 2){
 80004fe:	2300      	movs	r3, #0
 8000500:	71fb      	strb	r3, [r7, #7]
 8000502:	e087      	b.n	8000614 <processData+0x11c>
		/*
		 * Left channel
		 */

		/* Get ADC input and convert to float*/
		leftIn = INT16_TO_FLOAT * inBufPtr[n];
 8000504:	4b4a      	ldr	r3, [pc, #296]	@ (8000630 <processData+0x138>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	4413      	add	r3, r2
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	b21b      	sxth	r3, r3
 8000512:	ee07 3a90 	vmov	s15, r3
 8000516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800051a:	4b46      	ldr	r3, [pc, #280]	@ (8000634 <processData+0x13c>)
 800051c:	edd3 7a00 	vldr	s15, [r3]
 8000520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000524:	4b44      	ldr	r3, [pc, #272]	@ (8000638 <processData+0x140>)
 8000526:	edc3 7a00 	vstr	s15, [r3]
		if (leftIn > 1.0f){
 800052a:	4b43      	ldr	r3, [pc, #268]	@ (8000638 <processData+0x140>)
 800052c:	edd3 7a00 	vldr	s15, [r3]
 8000530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800053c:	dd09      	ble.n	8000552 <processData+0x5a>
			leftIn -= 2.0f;
 800053e:	4b3e      	ldr	r3, [pc, #248]	@ (8000638 <processData+0x140>)
 8000540:	edd3 7a00 	vldr	s15, [r3]
 8000544:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800054c:	4b3a      	ldr	r3, [pc, #232]	@ (8000638 <processData+0x140>)
 800054e:	edc3 7a00 	vstr	s15, [r3]
		}

		/* Compute new output sample */

		leftOut = leftIn;
 8000552:	4b39      	ldr	r3, [pc, #228]	@ (8000638 <processData+0x140>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a39      	ldr	r2, [pc, #228]	@ (800063c <processData+0x144>)
 8000558:	6013      	str	r3, [r2, #0]

		/* Convert back to signed int and set DAC output */
		outBufPtr[n] = (int16_t)(FLOAT_TO_INT16 * leftOut);
 800055a:	4b39      	ldr	r3, [pc, #228]	@ (8000640 <processData+0x148>)
 800055c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000560:	ee07 3a90 	vmov	s15, r3
 8000564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000568:	4b34      	ldr	r3, [pc, #208]	@ (800063c <processData+0x144>)
 800056a:	edd3 7a00 	vldr	s15, [r3]
 800056e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000572:	4b34      	ldr	r3, [pc, #208]	@ (8000644 <processData+0x14c>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	4413      	add	r3, r2
 800057c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000580:	ee17 2a90 	vmov	r2, s15
 8000584:	b212      	sxth	r2, r2
 8000586:	801a      	strh	r2, [r3, #0]
		/*
		 * Right channel
		 */

		/* Get ADC input and convert to float*/
		rightIn = INT16_TO_FLOAT = inBufPtr[n+1];
 8000588:	4b29      	ldr	r3, [pc, #164]	@ (8000630 <processData+0x138>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	3301      	adds	r3, #1
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	4413      	add	r3, r2
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	b21b      	sxth	r3, r3
 8000598:	ee07 3a90 	vmov	s15, r3
 800059c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a0:	4b24      	ldr	r3, [pc, #144]	@ (8000634 <processData+0x13c>)
 80005a2:	edc3 7a00 	vstr	s15, [r3]
 80005a6:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <processData+0x13c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a27      	ldr	r2, [pc, #156]	@ (8000648 <processData+0x150>)
 80005ac:	6013      	str	r3, [r2, #0]
		if (rightIn > 1.0f){
 80005ae:	4b26      	ldr	r3, [pc, #152]	@ (8000648 <processData+0x150>)
 80005b0:	edd3 7a00 	vldr	s15, [r3]
 80005b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80005b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c0:	dd09      	ble.n	80005d6 <processData+0xde>
			rightIn -= 2.0f;
 80005c2:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <processData+0x150>)
 80005c4:	edd3 7a00 	vldr	s15, [r3]
 80005c8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80005cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <processData+0x150>)
 80005d2:	edc3 7a00 	vstr	s15, [r3]
		}

		rightOut = rightIn;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <processData+0x150>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a1c      	ldr	r2, [pc, #112]	@ (800064c <processData+0x154>)
 80005dc:	6013      	str	r3, [r2, #0]

		// Convert back to signed int and set DAC output
		outBufPtr[n+1] = (int16_t)(FLOAT_TO_INT16 * rightOut);
 80005de:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <processData+0x148>)
 80005e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005e4:	ee07 3a90 	vmov	s15, r3
 80005e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005ec:	4b17      	ldr	r3, [pc, #92]	@ (800064c <processData+0x154>)
 80005ee:	edd3 7a00 	vldr	s15, [r3]
 80005f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005f6:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <processData+0x14c>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	3301      	adds	r3, #1
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000606:	ee17 2a90 	vmov	r2, s15
 800060a:	b212      	sxth	r2, r2
 800060c:	801a      	strh	r2, [r3, #0]
	for (uint8_t n = 0; n < (BUFFER_SIZE/2) - 1; n += 2){
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	3302      	adds	r3, #2
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b3a      	cmp	r3, #58	@ 0x3a
 8000618:	f67f af74 	bls.w	8000504 <processData+0xc>
	}

	dataReadyFlag = 0;
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <processData+0x158>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000424 	.word	0x20000424
 8000634:	20000000 	.word	0x20000000
 8000638:	2000042c 	.word	0x2000042c
 800063c:	20000430 	.word	0x20000430
 8000640:	20000004 	.word	0x20000004
 8000644:	20000008 	.word	0x20000008
 8000648:	20000434 	.word	0x20000434
 800064c:	20000438 	.word	0x20000438
 8000650:	20000428 	.word	0x20000428

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f001 f991 	bl	800197e <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f81a 	bl	8000694 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000660:	f000 f886 	bl	8000770 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fa26 	bl	8000ab4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000668:	f000 f9f2 	bl	8000a50 <MX_DMA_Init>
  MX_I2C2_Init();
 800066c:	f000 f8b4 	bl	80007d8 <MX_I2C2_Init>
  MX_SAI2_Init();
 8000670:	f000 f948 	bl	8000904 <MX_SAI2_Init>
  MX_SPI2_Init();
 8000674:	f000 f9ae 	bl	80009d4 <MX_SPI2_Init>
  MX_I2S3_Init();
 8000678:	f000 f918 	bl	80008ac <MX_I2S3_Init>
  MX_I2S1_Init();
 800067c:	f000 f8ec 	bl	8000858 <MX_I2S1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (dataReadyFlag){
 8000680:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <main+0x3c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0fb      	beq.n	8000680 <main+0x2c>

		  processData();
 8000688:	f7ff ff36 	bl	80004f8 <processData>
	  if (dataReadyFlag){
 800068c:	e7f8      	b.n	8000680 <main+0x2c>
 800068e:	bf00      	nop
 8000690:	20000428 	.word	0x20000428

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	@ 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	@ 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 ff89 	bl	80045ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <SystemClock_Config+0xd4>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000768 <SystemClock_Config+0xd4>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <SystemClock_Config+0xd4>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	4b26      	ldr	r3, [pc, #152]	@ (800076c <SystemClock_Config+0xd8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a25      	ldr	r2, [pc, #148]	@ (800076c <SystemClock_Config+0xd8>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b23      	ldr	r3, [pc, #140]	@ (800076c <SystemClock_Config+0xd8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006fc:	2319      	movs	r3, #25
 80006fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000700:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000704:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	4618      	mov	r0, r3
 8000714:	f002 fa08 	bl	8002b28 <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800071e:	f000 fde7 	bl	80012f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000722:	f002 f9b1 	bl	8002a88 <HAL_PWREx_EnableOverDrive>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800072c:	f000 fde0 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2106      	movs	r1, #6
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fc8e 	bl	8003070 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800075a:	f000 fdc9 	bl	80012f0 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b0a2      	sub	sp, #136	@ 0x88
 8000774:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2284      	movs	r2, #132	@ 0x84
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f003 ff1c 	bl	80045ba <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2S;
 8000782:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <PeriphCommonClock_Config+0x64>)
 8000784:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000786:	23c0      	movs	r3, #192	@ 0xc0
 8000788:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000796:	23c0      	movs	r3, #192	@ 0xc0
 8000798:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80007ae:	2300      	movs	r3, #0
 80007b0:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 80007b2:	2300      	movs	r3, #0
 80007b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80007b6:	2300      	movs	r3, #0
 80007b8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fe09 	bl	80033d4 <HAL_RCCEx_PeriphCLKConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80007c8:	f000 fd92 	bl	80012f0 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3788      	adds	r7, #136	@ 0x88
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	00100001 	.word	0x00100001

080007d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <MX_I2C2_Init+0x74>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	@ (8000850 <MX_I2C2_Init+0x78>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <MX_I2C2_Init+0x74>)
 80007e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000854 <MX_I2C2_Init+0x7c>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007e8:	4b18      	ldr	r3, [pc, #96]	@ (800084c <MX_I2C2_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_I2C2_Init+0x74>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b15      	ldr	r3, [pc, #84]	@ (800084c <MX_I2C2_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_I2C2_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_I2C2_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_I2C2_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_I2C2_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000812:	480e      	ldr	r0, [pc, #56]	@ (800084c <MX_I2C2_Init+0x74>)
 8000814:	f001 fed2 	bl	80025bc <HAL_I2C_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800081e:	f000 fd67 	bl	80012f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000822:	2100      	movs	r1, #0
 8000824:	4809      	ldr	r0, [pc, #36]	@ (800084c <MX_I2C2_Init+0x74>)
 8000826:	f001 ff65 	bl	80026f4 <HAL_I2CEx_ConfigAnalogFilter>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000830:	f000 fd5e 	bl	80012f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000834:	2100      	movs	r1, #0
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_I2C2_Init+0x74>)
 8000838:	f001 ffa7 	bl	800278a <HAL_I2CEx_ConfigDigitalFilter>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000842:	f000 fd55 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000034 	.word	0x20000034
 8000850:	40005800 	.word	0x40005800
 8000854:	00c0eaff 	.word	0x00c0eaff

08000858 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_I2S1_Init+0x4c>)
 800085e:	4a12      	ldr	r2, [pc, #72]	@ (80008a8 <MX_I2S1_Init+0x50>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <MX_I2S1_Init+0x4c>)
 8000864:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000868:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_I2S1_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_I2S1_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_I2S1_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_I2S1_Init+0x4c>)
 800087e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000882:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000884:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <MX_I2S1_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_I2S1_Init+0x4c>)
 800088c:	2202      	movs	r2, #2
 800088e:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <MX_I2S1_Init+0x4c>)
 8000892:	f001 ffc7 	bl	8002824 <HAL_I2S_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 800089c:	f000 fd28 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000088 	.word	0x20000088
 80008a8:	40013000 	.word	0x40013000

080008ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_I2S3_Init+0x50>)
 80008b2:	4a13      	ldr	r2, [pc, #76]	@ (8000900 <MX_I2S3_Init+0x54>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_I2S3_Init+0x50>)
 80008b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_I2S3_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008c4:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <MX_I2S3_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_I2S3_Init+0x50>)
 80008cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <MX_I2S3_Init+0x50>)
 80008d4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80008d8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_I2S3_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_I2S3_Init+0x50>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_I2S3_Init+0x50>)
 80008e8:	f001 ff9c 	bl	8002824 <HAL_I2S_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2S3_Init+0x4a>
  {
    Error_Handler();
 80008f2:	f000 fcfd 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000c8 	.word	0x200000c8
 8000900:	40003c00 	.word	0x40003c00

08000904 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000908:	4b2d      	ldr	r3, [pc, #180]	@ (80009c0 <MX_SAI2_Init+0xbc>)
 800090a:	4a2e      	ldr	r2, [pc, #184]	@ (80009c4 <MX_SAI2_Init+0xc0>)
 800090c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800090e:	4b2c      	ldr	r3, [pc, #176]	@ (80009c0 <MX_SAI2_Init+0xbc>)
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000914:	4b2a      	ldr	r3, [pc, #168]	@ (80009c0 <MX_SAI2_Init+0xbc>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800091a:	4b29      	ldr	r3, [pc, #164]	@ (80009c0 <MX_SAI2_Init+0xbc>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000920:	4b27      	ldr	r3, [pc, #156]	@ (80009c0 <MX_SAI2_Init+0xbc>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000926:	4b26      	ldr	r3, [pc, #152]	@ (80009c0 <MX_SAI2_Init+0xbc>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800092c:	4b24      	ldr	r3, [pc, #144]	@ (80009c0 <MX_SAI2_Init+0xbc>)
 800092e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000932:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000934:	4b22      	ldr	r3, [pc, #136]	@ (80009c0 <MX_SAI2_Init+0xbc>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800093a:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <MX_SAI2_Init+0xbc>)
 800093c:	2200      	movs	r2, #0
 800093e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <MX_SAI2_Init+0xbc>)
 8000942:	2200      	movs	r2, #0
 8000944:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000946:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <MX_SAI2_Init+0xbc>)
 8000948:	2200      	movs	r2, #0
 800094a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800094c:	2302      	movs	r3, #2
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	481b      	ldr	r0, [pc, #108]	@ (80009c0 <MX_SAI2_Init+0xbc>)
 8000954:	f003 fa6e 	bl	8003e34 <HAL_SAI_InitProtocol>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 800095e:	f000 fcc7 	bl	80012f0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000962:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_SAI2_Init+0xc4>)
 8000964:	4a19      	ldr	r2, [pc, #100]	@ (80009cc <MX_SAI2_Init+0xc8>)
 8000966:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_SAI2_Init+0xc4>)
 800096a:	2200      	movs	r2, #0
 800096c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_SAI2_Init+0xc4>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_SAI2_Init+0xc4>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_SAI2_Init+0xc4>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_SAI2_Init+0xc4>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_SAI2_Init+0xc4>)
 8000988:	4a11      	ldr	r2, [pc, #68]	@ (80009d0 <MX_SAI2_Init+0xcc>)
 800098a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_SAI2_Init+0xc4>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <MX_SAI2_Init+0xc4>)
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_SAI2_Init+0xc4>)
 800099a:	2200      	movs	r2, #0
 800099c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800099e:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <MX_SAI2_Init+0xc4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80009a4:	2302      	movs	r3, #2
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	4807      	ldr	r0, [pc, #28]	@ (80009c8 <MX_SAI2_Init+0xc4>)
 80009ac:	f003 fa42 	bl	8003e34 <HAL_SAI_InitProtocol>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_SAI2_Init+0xb6>
  {
    Error_Handler();
 80009b6:	f000 fc9b 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200001c8 	.word	0x200001c8
 80009c4:	40015c04 	.word	0x40015c04
 80009c8:	2000024c 	.word	0x2000024c
 80009cc:	40015c24 	.word	0x40015c24
 80009d0:	0002ee00 	.word	0x0002ee00

080009d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <MX_SPI2_Init+0x74>)
 80009da:	4a1c      	ldr	r2, [pc, #112]	@ (8000a4c <MX_SPI2_Init+0x78>)
 80009dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009de:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_SPI2_Init+0x74>)
 80009e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009e6:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <MX_SPI2_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <MX_SPI2_Init+0x74>)
 80009ee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80009f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <MX_SPI2_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009fa:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <MX_SPI2_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <MX_SPI2_Init+0x74>)
 8000a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a06:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <MX_SPI2_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <MX_SPI2_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <MX_SPI2_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <MX_SPI2_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a20:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_SPI2_Init+0x74>)
 8000a22:	2207      	movs	r2, #7
 8000a24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <MX_SPI2_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_SPI2_Init+0x74>)
 8000a2e:	2208      	movs	r2, #8
 8000a30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_SPI2_Init+0x74>)
 8000a34:	f003 fd16 	bl	8004464 <HAL_SPI_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 fc57 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200002d0 	.word	0x200002d0
 8000a4c:	40003800 	.word	0x40003800

08000a50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a56:	4b16      	ldr	r3, [pc, #88]	@ (8000ab0 <MX_DMA_Init+0x60>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a15      	ldr	r2, [pc, #84]	@ (8000ab0 <MX_DMA_Init+0x60>)
 8000a5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <MX_DMA_Init+0x60>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <MX_DMA_Init+0x60>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <MX_DMA_Init+0x60>)
 8000a74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <MX_DMA_Init+0x60>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2010      	movs	r0, #16
 8000a8c:	f001 f8af 	bl	8001bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a90:	2010      	movs	r0, #16
 8000a92:	f001 f8c8 	bl	8001c26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2038      	movs	r0, #56	@ 0x38
 8000a9c:	f001 f8a7 	bl	8001bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000aa0:	2038      	movs	r0, #56	@ 0x38
 8000aa2:	f001 f8c0 	bl	8001c26 <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b090      	sub	sp, #64	@ 0x40
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aca:	4bad      	ldr	r3, [pc, #692]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4aac      	ldr	r2, [pc, #688]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4baa      	ldr	r3, [pc, #680]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0310 	and.w	r3, r3, #16
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4ba7      	ldr	r3, [pc, #668]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4aa6      	ldr	r2, [pc, #664]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4ba4      	ldr	r3, [pc, #656]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4ba1      	ldr	r3, [pc, #644]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4aa0      	ldr	r2, [pc, #640]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b9e      	ldr	r3, [pc, #632]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	623b      	str	r3, [r7, #32]
 8000b10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	4b9b      	ldr	r3, [pc, #620]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a9a      	ldr	r2, [pc, #616]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b98      	ldr	r3, [pc, #608]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	61fb      	str	r3, [r7, #28]
 8000b28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	4b95      	ldr	r3, [pc, #596]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a94      	ldr	r2, [pc, #592]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b92      	ldr	r3, [pc, #584]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	61bb      	str	r3, [r7, #24]
 8000b40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b8f      	ldr	r3, [pc, #572]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a8e      	ldr	r2, [pc, #568]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b8c      	ldr	r3, [pc, #560]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b5a:	4b89      	ldr	r3, [pc, #548]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a88      	ldr	r2, [pc, #544]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b86      	ldr	r3, [pc, #536]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b72:	4b83      	ldr	r3, [pc, #524]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a82      	ldr	r2, [pc, #520]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b80      	ldr	r3, [pc, #512]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b8a:	4b7d      	ldr	r3, [pc, #500]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a7c      	ldr	r2, [pc, #496]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b7a      	ldr	r3, [pc, #488]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ba2:	4b77      	ldr	r3, [pc, #476]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a76      	ldr	r2, [pc, #472]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000ba8:	f043 0320 	orr.w	r3, r3, #32
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b74      	ldr	r3, [pc, #464]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0320 	and.w	r3, r3, #32
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	4b71      	ldr	r3, [pc, #452]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a70      	ldr	r2, [pc, #448]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b6e      	ldr	r3, [pc, #440]	@ (8000d80 <MX_GPIO_Init+0x2cc>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	486b      	ldr	r0, [pc, #428]	@ (8000d84 <MX_GPIO_Init+0x2d0>)
 8000bd8:	f001 fcd6 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000be2:	4869      	ldr	r0, [pc, #420]	@ (8000d88 <MX_GPIO_Init+0x2d4>)
 8000be4:	f001 fcd0 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2108      	movs	r1, #8
 8000bec:	4867      	ldr	r0, [pc, #412]	@ (8000d8c <MX_GPIO_Init+0x2d8>)
 8000bee:	f001 fccb 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf8:	4865      	ldr	r0, [pc, #404]	@ (8000d90 <MX_GPIO_Init+0x2dc>)
 8000bfa:	f001 fcc5 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	21c8      	movs	r1, #200	@ 0xc8
 8000c02:	4864      	ldr	r0, [pc, #400]	@ (8000d94 <MX_GPIO_Init+0x2e0>)
 8000c04:	f001 fcc0 	bl	8002588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000c08:	2310      	movs	r3, #16
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c18:	230e      	movs	r3, #14
 8000c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c20:	4619      	mov	r1, r3
 8000c22:	485d      	ldr	r0, [pc, #372]	@ (8000d98 <MX_GPIO_Init+0x2e4>)
 8000c24:	f001 fb04 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4857      	ldr	r0, [pc, #348]	@ (8000d98 <MX_GPIO_Init+0x2e4>)
 8000c3c:	f001 faf8 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000c40:	2304      	movs	r3, #4
 8000c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c50:	2309      	movs	r3, #9
 8000c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c58:	4619      	mov	r1, r3
 8000c5a:	484f      	ldr	r0, [pc, #316]	@ (8000d98 <MX_GPIO_Init+0x2e4>)
 8000c5c:	f001 fae8 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000c60:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c72:	230b      	movs	r3, #11
 8000c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4845      	ldr	r0, [pc, #276]	@ (8000d94 <MX_GPIO_Init+0x2e0>)
 8000c7e:	f001 fad7 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000c82:	f64d 7383 	movw	r3, #57219	@ 0xdf83
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c94:	230c      	movs	r3, #12
 8000c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	483e      	ldr	r0, [pc, #248]	@ (8000d98 <MX_GPIO_Init+0x2e4>)
 8000ca0:	f001 fac6 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000ca4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000caa:	2312      	movs	r3, #18
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4836      	ldr	r0, [pc, #216]	@ (8000d9c <MX_GPIO_Init+0x2e8>)
 8000cc2:	f001 fab5 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D3_Pin ULPI_D2_Pin ULPI_D1_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D2_Pin|ULPI_D1_Pin;
 8000cc6:	f240 4323 	movw	r3, #1059	@ 0x423
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cd8:	230a      	movs	r3, #10
 8000cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	482e      	ldr	r0, [pc, #184]	@ (8000d9c <MX_GPIO_Init+0x2e8>)
 8000ce4:	f001 faa4 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ce8:	2310      	movs	r3, #16
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d00:	4619      	mov	r1, r3
 8000d02:	4826      	ldr	r0, [pc, #152]	@ (8000d9c <MX_GPIO_Init+0x2e8>)
 8000d04:	f001 fa94 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000d08:	2380      	movs	r3, #128	@ 0x80
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d20:	4619      	mov	r1, r3
 8000d22:	4818      	ldr	r0, [pc, #96]	@ (8000d84 <MX_GPIO_Init+0x2d0>)
 8000d24:	f001 fa84 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D6_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8000d28:	2320      	movs	r3, #32
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d38:	230d      	movs	r3, #13
 8000d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d40:	4619      	mov	r1, r3
 8000d42:	4815      	ldr	r0, [pc, #84]	@ (8000d98 <MX_GPIO_Init+0x2e4>)
 8000d44:	f001 fa74 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000d48:	2380      	movs	r3, #128	@ 0x80
 8000d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d60:	4619      	mov	r1, r3
 8000d62:	480e      	ldr	r0, [pc, #56]	@ (8000d9c <MX_GPIO_Init+0x2e8>)
 8000d64:	f001 fa64 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000d68:	2340      	movs	r3, #64	@ 0x40
 8000d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d78:	230a      	movs	r3, #10
 8000d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d7c:	e010      	b.n	8000da0 <MX_GPIO_Init+0x2ec>
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020c00 	.word	0x40020c00
 8000d88:	40022000 	.word	0x40022000
 8000d8c:	40022800 	.word	0x40022800
 8000d90:	40021c00 	.word	0x40021c00
 8000d94:	40021800 	.word	0x40021800
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40020400 	.word	0x40020400
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da4:	4619      	mov	r1, r3
 8000da6:	48bd      	ldr	r0, [pc, #756]	@ (800109c <MX_GPIO_Init+0x5e8>)
 8000da8:	f001 fa42 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000dac:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	48b5      	ldr	r0, [pc, #724]	@ (80010a0 <MX_GPIO_Init+0x5ec>)
 8000dca:	f001 fa31 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000dce:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000de0:	230e      	movs	r3, #14
 8000de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	48ae      	ldr	r0, [pc, #696]	@ (80010a4 <MX_GPIO_Init+0x5f0>)
 8000dec:	f001 fa20 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e02:	4619      	mov	r1, r3
 8000e04:	48a7      	ldr	r0, [pc, #668]	@ (80010a4 <MX_GPIO_Init+0x5f0>)
 8000e06:	f001 fa13 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000e0a:	2340      	movs	r3, #64	@ 0x40
 8000e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e0e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	48a2      	ldr	r0, [pc, #648]	@ (80010a8 <MX_GPIO_Init+0x5f4>)
 8000e20:	f001 fa06 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000e24:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e36:	230c      	movs	r3, #12
 8000e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4899      	ldr	r0, [pc, #612]	@ (80010a8 <MX_GPIO_Init+0x5f4>)
 8000e42:	f001 f9f5 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin PC8 */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|GPIO_PIN_8;
 8000e46:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e58:	230c      	movs	r3, #12
 8000e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e60:	4619      	mov	r1, r3
 8000e62:	4892      	ldr	r0, [pc, #584]	@ (80010ac <MX_GPIO_Init+0x5f8>)
 8000e64:	f001 f9e4 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000e68:	23f7      	movs	r3, #247	@ 0xf7
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e78:	230e      	movs	r3, #14
 8000e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e80:	4619      	mov	r1, r3
 8000e82:	488b      	ldr	r0, [pc, #556]	@ (80010b0 <MX_GPIO_Init+0x5fc>)
 8000e84:	f001 f9d4 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000e88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e9a:	2309      	movs	r3, #9
 8000e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	487e      	ldr	r0, [pc, #504]	@ (80010a0 <MX_GPIO_Init+0x5ec>)
 8000ea6:	f001 f9c3 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000eaa:	2320      	movs	r3, #32
 8000eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4879      	ldr	r0, [pc, #484]	@ (80010a8 <MX_GPIO_Init+0x5f4>)
 8000ec2:	f001 f9b5 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000ec6:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ed8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000edc:	4619      	mov	r1, r3
 8000ede:	4875      	ldr	r0, [pc, #468]	@ (80010b4 <MX_GPIO_Init+0x600>)
 8000ee0:	f001 f9a6 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000ee4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efe:	4619      	mov	r1, r3
 8000f00:	486d      	ldr	r0, [pc, #436]	@ (80010b8 <MX_GPIO_Init+0x604>)
 8000f02:	f001 f995 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000f06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4864      	ldr	r0, [pc, #400]	@ (80010ac <MX_GPIO_Init+0x5f8>)
 8000f1c:	f001 f988 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000f20:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f32:	230e      	movs	r3, #14
 8000f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	485d      	ldr	r0, [pc, #372]	@ (80010b4 <MX_GPIO_Init+0x600>)
 8000f3e:	f001 f977 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000f42:	2308      	movs	r3, #8
 8000f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f56:	4619      	mov	r1, r3
 8000f58:	4855      	ldr	r0, [pc, #340]	@ (80010b0 <MX_GPIO_Init+0x5fc>)
 8000f5a:	f001 f969 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f5e:	2310      	movs	r3, #16
 8000f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	484d      	ldr	r0, [pc, #308]	@ (80010a8 <MX_GPIO_Init+0x5f4>)
 8000f72:	f001 f95d 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000f76:	2304      	movs	r3, #4
 8000f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f86:	230c      	movs	r3, #12
 8000f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4845      	ldr	r0, [pc, #276]	@ (80010a8 <MX_GPIO_Init+0x5f4>)
 8000f92:	f001 f94d 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP3_Pin */
  GPIO_InitStruct.Pin = TP3_Pin;
 8000f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TP3_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4844      	ldr	r0, [pc, #272]	@ (80010bc <MX_GPIO_Init+0x608>)
 8000fac:	f001 f940 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A1_Pin FMC_A3_Pin FMC_A4_Pin FMC_A5_Pin
                           FMC_A6_Pin FMC_A9_Pin FMC_A7_Pin FMC_A8_Pin
                           FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A1_Pin|FMC_A3_Pin|FMC_A4_Pin|FMC_A5_Pin
 8000fb0:	f64f 033a 	movw	r3, #63546	@ 0xf83a
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_A7_Pin|FMC_A8_Pin
                          |FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fc2:	230c      	movs	r3, #12
 8000fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fca:	4619      	mov	r1, r3
 8000fcc:	483c      	ldr	r0, [pc, #240]	@ (80010c0 <MX_GPIO_Init+0x60c>)
 8000fce:	f001 f92f 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000fd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4834      	ldr	r0, [pc, #208]	@ (80010bc <MX_GPIO_Init+0x608>)
 8000fec:	f001 f920 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000ff0:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001002:	230d      	movs	r3, #13
 8001004:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001006:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800100a:	4619      	mov	r1, r3
 800100c:	482b      	ldr	r0, [pc, #172]	@ (80010bc <MX_GPIO_Init+0x608>)
 800100e:	f001 f90f 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001012:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001024:	2307      	movs	r3, #7
 8001026:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800102c:	4619      	mov	r1, r3
 800102e:	4822      	ldr	r0, [pc, #136]	@ (80010b8 <MX_GPIO_Init+0x604>)
 8001030:	f001 f8fe 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001034:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001046:	2305      	movs	r3, #5
 8001048:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800104e:	4619      	mov	r1, r3
 8001050:	4816      	ldr	r0, [pc, #88]	@ (80010ac <MX_GPIO_Init+0x5f8>)
 8001052:	f001 f8ed 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001056:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800105a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001068:	2301      	movs	r3, #1
 800106a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001070:	4619      	mov	r1, r3
 8001072:	4811      	ldr	r0, [pc, #68]	@ (80010b8 <MX_GPIO_Init+0x604>)
 8001074:	f001 f8dc 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001078:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800107e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001082:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800108c:	4619      	mov	r1, r3
 800108e:	4809      	ldr	r0, [pc, #36]	@ (80010b4 <MX_GPIO_Init+0x600>)
 8001090:	f001 f8ce 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8001094:	2348      	movs	r3, #72	@ 0x48
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	e013      	b.n	80010c4 <MX_GPIO_Init+0x610>
 800109c:	40020400 	.word	0x40020400
 80010a0:	40021800 	.word	0x40021800
 80010a4:	40022400 	.word	0x40022400
 80010a8:	40020c00 	.word	0x40020c00
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40022800 	.word	0x40022800
 80010b4:	40022000 	.word	0x40022000
 80010b8:	40020000 	.word	0x40020000
 80010bc:	40021c00 	.word	0x40021c00
 80010c0:	40021400 	.word	0x40021400
 80010c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ce:	2305      	movs	r3, #5
 80010d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d6:	4619      	mov	r1, r3
 80010d8:	487e      	ldr	r0, [pc, #504]	@ (80012d4 <MX_GPIO_Init+0x820>)
 80010da:	f001 f8a9 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80010de:	2328      	movs	r3, #40	@ 0x28
 80010e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010ee:	230c      	movs	r3, #12
 80010f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f6:	4619      	mov	r1, r3
 80010f8:	4877      	ldr	r0, [pc, #476]	@ (80012d8 <MX_GPIO_Init+0x824>)
 80010fa:	f001 f899 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80010fe:	23c8      	movs	r3, #200	@ 0xc8
 8001100:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001112:	4619      	mov	r1, r3
 8001114:	4871      	ldr	r0, [pc, #452]	@ (80012dc <MX_GPIO_Init+0x828>)
 8001116:	f001 f88b 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A3_Pin;
 800111a:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001120:	2303      	movs	r3, #3
 8001122:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800112c:	4619      	mov	r1, r3
 800112e:	486c      	ldr	r0, [pc, #432]	@ (80012e0 <MX_GPIO_Init+0x82c>)
 8001130:	f001 f87e 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001134:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001146:	2305      	movs	r3, #5
 8001148:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800114e:	4619      	mov	r1, r3
 8001150:	4864      	ldr	r0, [pc, #400]	@ (80012e4 <MX_GPIO_Init+0x830>)
 8001152:	f001 f86d 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001156:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001168:	2306      	movs	r3, #6
 800116a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800116c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001170:	4619      	mov	r1, r3
 8001172:	485b      	ldr	r0, [pc, #364]	@ (80012e0 <MX_GPIO_Init+0x82c>)
 8001174:	f001 f85c 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001178:	2305      	movs	r3, #5
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001188:	230a      	movs	r3, #10
 800118a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001190:	4619      	mov	r1, r3
 8001192:	4850      	ldr	r0, [pc, #320]	@ (80012d4 <MX_GPIO_Init+0x820>)
 8001194:	f001 f84c 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin;
 8001198:	2322      	movs	r3, #34	@ 0x22
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011a8:	230b      	movs	r3, #11
 80011aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011b0:	4619      	mov	r1, r3
 80011b2:	4848      	ldr	r0, [pc, #288]	@ (80012d4 <MX_GPIO_Init+0x820>)
 80011b4:	f001 f83c 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011b8:	2304      	movs	r3, #4
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011c8:	2309      	movs	r3, #9
 80011ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011d0:	4619      	mov	r1, r3
 80011d2:	4844      	ldr	r0, [pc, #272]	@ (80012e4 <MX_GPIO_Init+0x830>)
 80011d4:	f001 f82c 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80011d8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80011dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011ea:	2309      	movs	r3, #9
 80011ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011f2:	4619      	mov	r1, r3
 80011f4:	483c      	ldr	r0, [pc, #240]	@ (80012e8 <MX_GPIO_Init+0x834>)
 80011f6:	f001 f81b 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80011fa:	2304      	movs	r3, #4
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800120a:	4619      	mov	r1, r3
 800120c:	4833      	ldr	r0, [pc, #204]	@ (80012dc <MX_GPIO_Init+0x828>)
 800120e:	f001 f80f 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_REF_CLK_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin;
 8001212:	2302      	movs	r3, #2
 8001214:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001222:	230b      	movs	r3, #11
 8001224:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(RMII_REF_CLK_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800122a:	4619      	mov	r1, r3
 800122c:	482f      	ldr	r0, [pc, #188]	@ (80012ec <MX_GPIO_Init+0x838>)
 800122e:	f000 ffff 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001232:	2301      	movs	r3, #1
 8001234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001242:	4619      	mov	r1, r3
 8001244:	4829      	ldr	r0, [pc, #164]	@ (80012ec <MX_GPIO_Init+0x838>)
 8001246:	f000 fff3 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800124a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800124e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001250:	2312      	movs	r3, #18
 8001252:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800125c:	2304      	movs	r3, #4
 800125e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001260:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001264:	4619      	mov	r1, r3
 8001266:	481c      	ldr	r0, [pc, #112]	@ (80012d8 <MX_GPIO_Init+0x824>)
 8001268:	f000 ffe2 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800126c:	2340      	movs	r3, #64	@ 0x40
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800127c:	230d      	movs	r3, #13
 800127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	4819      	ldr	r0, [pc, #100]	@ (80012ec <MX_GPIO_Init+0x838>)
 8001288:	f000 ffd2 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800128c:	2340      	movs	r3, #64	@ 0x40
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800129c:	2309      	movs	r3, #9
 800129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012a4:	4619      	mov	r1, r3
 80012a6:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <MX_GPIO_Init+0x824>)
 80012a8:	f000 ffc2 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_D0_Pin;
 80012ac:	2308      	movs	r3, #8
 80012ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80012bc:	230a      	movs	r3, #10
 80012be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D0_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012c4:	4619      	mov	r1, r3
 80012c6:	4809      	ldr	r0, [pc, #36]	@ (80012ec <MX_GPIO_Init+0x838>)
 80012c8:	f000 ffb2 	bl	8002230 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012cc:	bf00      	nop
 80012ce:	3740      	adds	r7, #64	@ 0x40
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40021c00 	.word	0x40021c00
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40020000 	.word	0x40020000

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <Error_Handler+0x8>

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <HAL_MspInit+0x44>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	4a0e      	ldr	r2, [pc, #56]	@ (8001340 <HAL_MspInit+0x44>)
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	@ 0x40
 800130e:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <HAL_MspInit+0x44>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_MspInit+0x44>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <HAL_MspInit+0x44>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001324:	6453      	str	r3, [r2, #68]	@ 0x44
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_MspInit+0x44>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800

08001344 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0ac      	sub	sp, #176	@ 0xb0
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800135c:	f107 0318 	add.w	r3, r7, #24
 8001360:	2284      	movs	r2, #132	@ 0x84
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f003 f928 	bl	80045ba <memset>
  if(hi2c->Instance==I2C2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a32      	ldr	r2, [pc, #200]	@ (8001438 <HAL_I2C_MspInit+0xf4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d15d      	bne.n	8001430 <HAL_I2C_MspInit+0xec>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001374:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001378:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4618      	mov	r0, r3
 8001386:	f002 f825 	bl	80033d4 <HAL_RCCEx_PeriphCLKConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001390:	f7ff ffae 	bl	80012f0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001394:	4b29      	ldr	r3, [pc, #164]	@ (800143c <HAL_I2C_MspInit+0xf8>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001398:	4a28      	ldr	r2, [pc, #160]	@ (800143c <HAL_I2C_MspInit+0xf8>)
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a0:	4b26      	ldr	r3, [pc, #152]	@ (800143c <HAL_I2C_MspInit+0xf8>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a4:	f003 0320 	and.w	r3, r3, #32
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ac:	4b23      	ldr	r3, [pc, #140]	@ (800143c <HAL_I2C_MspInit+0xf8>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b0:	4a22      	ldr	r2, [pc, #136]	@ (800143c <HAL_I2C_MspInit+0xf8>)
 80013b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b8:	4b20      	ldr	r3, [pc, #128]	@ (800143c <HAL_I2C_MspInit+0xf8>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF2     ------> I2C2_SMBA
    PH4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80013c4:	2305      	movs	r3, #5
 80013c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ca:	2312      	movs	r3, #18
 80013cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013dc:	2304      	movs	r3, #4
 80013de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013e6:	4619      	mov	r1, r3
 80013e8:	4815      	ldr	r0, [pc, #84]	@ (8001440 <HAL_I2C_MspInit+0xfc>)
 80013ea:	f000 ff21 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013ee:	2310      	movs	r3, #16
 80013f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f4:	2312      	movs	r3, #18
 80013f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001406:	2304      	movs	r3, #4
 8001408:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800140c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001410:	4619      	mov	r1, r3
 8001412:	480c      	ldr	r0, [pc, #48]	@ (8001444 <HAL_I2C_MspInit+0x100>)
 8001414:	f000 ff0c 	bl	8002230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <HAL_I2C_MspInit+0xf8>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	4a07      	ldr	r2, [pc, #28]	@ (800143c <HAL_I2C_MspInit+0xf8>)
 800141e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001422:	6413      	str	r3, [r2, #64]	@ 0x40
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_I2C_MspInit+0xf8>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001430:	bf00      	nop
 8001432:	37b0      	adds	r7, #176	@ 0xb0
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40005800 	.word	0x40005800
 800143c:	40023800 	.word	0x40023800
 8001440:	40021400 	.word	0x40021400
 8001444:	40021c00 	.word	0x40021c00

08001448 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	@ 0x38
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a7c      	ldr	r2, [pc, #496]	@ (8001658 <HAL_I2S_MspInit+0x210>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d176      	bne.n	8001558 <HAL_I2S_MspInit+0x110>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800146a:	4b7c      	ldr	r3, [pc, #496]	@ (800165c <HAL_I2S_MspInit+0x214>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	4a7b      	ldr	r2, [pc, #492]	@ (800165c <HAL_I2S_MspInit+0x214>)
 8001470:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001474:	6453      	str	r3, [r2, #68]	@ 0x44
 8001476:	4b79      	ldr	r3, [pc, #484]	@ (800165c <HAL_I2S_MspInit+0x214>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800147e:	623b      	str	r3, [r7, #32]
 8001480:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b76      	ldr	r3, [pc, #472]	@ (800165c <HAL_I2S_MspInit+0x214>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a75      	ldr	r2, [pc, #468]	@ (800165c <HAL_I2S_MspInit+0x214>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b73      	ldr	r3, [pc, #460]	@ (800165c <HAL_I2S_MspInit+0x214>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	4b70      	ldr	r3, [pc, #448]	@ (800165c <HAL_I2S_MspInit+0x214>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a6f      	ldr	r2, [pc, #444]	@ (800165c <HAL_I2S_MspInit+0x214>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b6d      	ldr	r3, [pc, #436]	@ (800165c <HAL_I2S_MspInit+0x214>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
    PA15     ------> I2S1_WS
    PC4     ------> I2S1_MCK
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 80014b2:	f248 03a0 	movw	r3, #32928	@ 0x80a0
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c4:	2305      	movs	r3, #5
 80014c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	4864      	ldr	r0, [pc, #400]	@ (8001660 <HAL_I2S_MspInit+0x218>)
 80014d0:	f000 feae 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014d4:	2310      	movs	r3, #16
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014e4:	2305      	movs	r3, #5
 80014e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	485d      	ldr	r0, [pc, #372]	@ (8001664 <HAL_I2S_MspInit+0x21c>)
 80014f0:	f000 fe9e 	bl	8002230 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80014f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001668 <HAL_I2S_MspInit+0x220>)
 80014f6:	4a5d      	ldr	r2, [pc, #372]	@ (800166c <HAL_I2S_MspInit+0x224>)
 80014f8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80014fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001668 <HAL_I2S_MspInit+0x220>)
 80014fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001500:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001502:	4b59      	ldr	r3, [pc, #356]	@ (8001668 <HAL_I2S_MspInit+0x220>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001508:	4b57      	ldr	r3, [pc, #348]	@ (8001668 <HAL_I2S_MspInit+0x220>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800150e:	4b56      	ldr	r3, [pc, #344]	@ (8001668 <HAL_I2S_MspInit+0x220>)
 8001510:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001514:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001516:	4b54      	ldr	r3, [pc, #336]	@ (8001668 <HAL_I2S_MspInit+0x220>)
 8001518:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800151c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800151e:	4b52      	ldr	r3, [pc, #328]	@ (8001668 <HAL_I2S_MspInit+0x220>)
 8001520:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001524:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001526:	4b50      	ldr	r3, [pc, #320]	@ (8001668 <HAL_I2S_MspInit+0x220>)
 8001528:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800152c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800152e:	4b4e      	ldr	r3, [pc, #312]	@ (8001668 <HAL_I2S_MspInit+0x220>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001534:	4b4c      	ldr	r3, [pc, #304]	@ (8001668 <HAL_I2S_MspInit+0x220>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800153a:	484b      	ldr	r0, [pc, #300]	@ (8001668 <HAL_I2S_MspInit+0x220>)
 800153c:	f000 fb8e 	bl	8001c5c <HAL_DMA_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_I2S_MspInit+0x102>
    {
      Error_Handler();
 8001546:	f7ff fed3 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a46      	ldr	r2, [pc, #280]	@ (8001668 <HAL_I2S_MspInit+0x220>)
 800154e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001550:	4a45      	ldr	r2, [pc, #276]	@ (8001668 <HAL_I2S_MspInit+0x220>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001556:	e07a      	b.n	800164e <HAL_I2S_MspInit+0x206>
  else if(hi2s->Instance==SPI3)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a44      	ldr	r2, [pc, #272]	@ (8001670 <HAL_I2S_MspInit+0x228>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d175      	bne.n	800164e <HAL_I2S_MspInit+0x206>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001562:	4b3e      	ldr	r3, [pc, #248]	@ (800165c <HAL_I2S_MspInit+0x214>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	4a3d      	ldr	r2, [pc, #244]	@ (800165c <HAL_I2S_MspInit+0x214>)
 8001568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800156c:	6413      	str	r3, [r2, #64]	@ 0x40
 800156e:	4b3b      	ldr	r3, [pc, #236]	@ (800165c <HAL_I2S_MspInit+0x214>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4b38      	ldr	r3, [pc, #224]	@ (800165c <HAL_I2S_MspInit+0x214>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a37      	ldr	r2, [pc, #220]	@ (800165c <HAL_I2S_MspInit+0x214>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b35      	ldr	r3, [pc, #212]	@ (800165c <HAL_I2S_MspInit+0x214>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b32      	ldr	r3, [pc, #200]	@ (800165c <HAL_I2S_MspInit+0x214>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a31      	ldr	r2, [pc, #196]	@ (800165c <HAL_I2S_MspInit+0x214>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b2f      	ldr	r3, [pc, #188]	@ (800165c <HAL_I2S_MspInit+0x214>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_7;
 80015aa:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015bc:	2306      	movs	r3, #6
 80015be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4827      	ldr	r0, [pc, #156]	@ (8001664 <HAL_I2S_MspInit+0x21c>)
 80015c8:	f000 fe32 	bl	8002230 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015cc:	2310      	movs	r3, #16
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015dc:	2306      	movs	r3, #6
 80015de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	481e      	ldr	r0, [pc, #120]	@ (8001660 <HAL_I2S_MspInit+0x218>)
 80015e8:	f000 fe22 	bl	8002230 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80015ec:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <HAL_I2S_MspInit+0x22c>)
 80015ee:	4a22      	ldr	r2, [pc, #136]	@ (8001678 <HAL_I2S_MspInit+0x230>)
 80015f0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80015f2:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <HAL_I2S_MspInit+0x22c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <HAL_I2S_MspInit+0x22c>)
 80015fa:	2240      	movs	r2, #64	@ 0x40
 80015fc:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <HAL_I2S_MspInit+0x22c>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001604:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <HAL_I2S_MspInit+0x22c>)
 8001606:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800160a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800160c:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_I2S_MspInit+0x22c>)
 800160e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001612:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001614:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <HAL_I2S_MspInit+0x22c>)
 8001616:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800161a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800161c:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_I2S_MspInit+0x22c>)
 800161e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001622:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001624:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <HAL_I2S_MspInit+0x22c>)
 8001626:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800162a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_I2S_MspInit+0x22c>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001632:	4810      	ldr	r0, [pc, #64]	@ (8001674 <HAL_I2S_MspInit+0x22c>)
 8001634:	f000 fb12 	bl	8001c5c <HAL_DMA_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2S_MspInit+0x1fa>
      Error_Handler();
 800163e:	f7ff fe57 	bl	80012f0 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <HAL_I2S_MspInit+0x22c>)
 8001646:	631a      	str	r2, [r3, #48]	@ 0x30
 8001648:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <HAL_I2S_MspInit+0x22c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800164e:	bf00      	nop
 8001650:	3738      	adds	r7, #56	@ 0x38
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40013000 	.word	0x40013000
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000
 8001664:	40020800 	.word	0x40020800
 8001668:	20000108 	.word	0x20000108
 800166c:	40026410 	.word	0x40026410
 8001670:	40003c00 	.word	0x40003c00
 8001674:	20000168 	.word	0x20000168
 8001678:	40026088 	.word	0x40026088

0800167c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	@ 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a25      	ldr	r2, [pc, #148]	@ (8001730 <HAL_SPI_MspInit+0xb4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d144      	bne.n	8001728 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800169e:	4b25      	ldr	r3, [pc, #148]	@ (8001734 <HAL_SPI_MspInit+0xb8>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	4a24      	ldr	r2, [pc, #144]	@ (8001734 <HAL_SPI_MspInit+0xb8>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016aa:	4b22      	ldr	r3, [pc, #136]	@ (8001734 <HAL_SPI_MspInit+0xb8>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80016b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <HAL_SPI_MspInit+0xb8>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001734 <HAL_SPI_MspInit+0xb8>)
 80016bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <HAL_SPI_MspInit+0xb8>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <HAL_SPI_MspInit+0xb8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a18      	ldr	r2, [pc, #96]	@ (8001734 <HAL_SPI_MspInit+0xb8>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <HAL_SPI_MspInit+0xb8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80016e6:	2302      	movs	r3, #2
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016f6:	2305      	movs	r3, #5
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	480d      	ldr	r0, [pc, #52]	@ (8001738 <HAL_SPI_MspInit+0xbc>)
 8001702:	f000 fd95 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001706:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001718:	2305      	movs	r3, #5
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4806      	ldr	r0, [pc, #24]	@ (800173c <HAL_SPI_MspInit+0xc0>)
 8001724:	f000 fd84 	bl	8002230 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	@ 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40003800 	.word	0x40003800
 8001734:	40023800 	.word	0x40023800
 8001738:	40022000 	.word	0x40022000
 800173c:	40020400 	.word	0x40020400

08001740 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	@ 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a43      	ldr	r2, [pc, #268]	@ (800185c <HAL_SAI_MspInit+0x11c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d124      	bne.n	800179c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8001752:	4b43      	ldr	r3, [pc, #268]	@ (8001860 <HAL_SAI_MspInit+0x120>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10b      	bne.n	8001772 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800175a:	4b42      	ldr	r3, [pc, #264]	@ (8001864 <HAL_SAI_MspInit+0x124>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175e:	4a41      	ldr	r2, [pc, #260]	@ (8001864 <HAL_SAI_MspInit+0x124>)
 8001760:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001764:	6453      	str	r3, [r2, #68]	@ 0x44
 8001766:	4b3f      	ldr	r3, [pc, #252]	@ (8001864 <HAL_SAI_MspInit+0x124>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001772:	4b3b      	ldr	r3, [pc, #236]	@ (8001860 <HAL_SAI_MspInit+0x120>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	4a39      	ldr	r2, [pc, #228]	@ (8001860 <HAL_SAI_MspInit+0x120>)
 800177a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800177c:	23f0      	movs	r3, #240	@ 0xf0
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800178c:	230a      	movs	r3, #10
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	4834      	ldr	r0, [pc, #208]	@ (8001868 <HAL_SAI_MspInit+0x128>)
 8001798:	f000 fd4a 	bl	8002230 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a32      	ldr	r2, [pc, #200]	@ (800186c <HAL_SAI_MspInit+0x12c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d156      	bne.n	8001854 <HAL_SAI_MspInit+0x114>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80017a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001860 <HAL_SAI_MspInit+0x120>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10b      	bne.n	80017c6 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80017ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001864 <HAL_SAI_MspInit+0x124>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001864 <HAL_SAI_MspInit+0x124>)
 80017b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001864 <HAL_SAI_MspInit+0x124>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <HAL_SAI_MspInit+0x120>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	3301      	adds	r3, #1
 80017cc:	4a24      	ldr	r2, [pc, #144]	@ (8001860 <HAL_SAI_MspInit+0x120>)
 80017ce:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PA12     ------> SAI2_FS_B
    PG10     ------> SAI2_SD_B
    PH2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d0:	2340      	movs	r3, #64	@ 0x40
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80017e0:	230a      	movs	r3, #10
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4821      	ldr	r0, [pc, #132]	@ (8001870 <HAL_SAI_MspInit+0x130>)
 80017ec:	f000 fd20 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001802:	2308      	movs	r3, #8
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4819      	ldr	r0, [pc, #100]	@ (8001874 <HAL_SAI_MspInit+0x134>)
 800180e:	f000 fd0f 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001824:	230a      	movs	r3, #10
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	4812      	ldr	r0, [pc, #72]	@ (8001878 <HAL_SAI_MspInit+0x138>)
 8001830:	f000 fcfe 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001834:	2304      	movs	r3, #4
 8001836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001844:	230a      	movs	r3, #10
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	480b      	ldr	r0, [pc, #44]	@ (800187c <HAL_SAI_MspInit+0x13c>)
 8001850:	f000 fcee 	bl	8002230 <HAL_GPIO_Init>

    }
}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	@ 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40015c04 	.word	0x40015c04
 8001860:	2000043c 	.word	0x2000043c
 8001864:	40023800 	.word	0x40023800
 8001868:	40022000 	.word	0x40022000
 800186c:	40015c24 	.word	0x40015c24
 8001870:	40021000 	.word	0x40021000
 8001874:	40020000 	.word	0x40020000
 8001878:	40021800 	.word	0x40021800
 800187c:	40021c00 	.word	0x40021c00

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <NMI_Handler+0x4>

08001888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <MemManage_Handler+0x4>

08001898 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d6:	f000 f88f 	bl	80019f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <DMA1_Stream5_IRQHandler+0x10>)
 80018e6:	f000 fa67 	bl	8001db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000168 	.word	0x20000168

080018f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80018f8:	4802      	ldr	r0, [pc, #8]	@ (8001904 <DMA2_Stream0_IRQHandler+0x10>)
 80018fa:	f000 fa5d 	bl	8001db8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000108 	.word	0x20000108

08001908 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <SystemInit+0x20>)
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001912:	4a05      	ldr	r2, [pc, #20]	@ (8001928 <SystemInit+0x20>)
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800192c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001964 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001930:	f7ff ffea 	bl	8001908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001934:	480c      	ldr	r0, [pc, #48]	@ (8001968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001936:	490d      	ldr	r1, [pc, #52]	@ (800196c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001938:	4a0d      	ldr	r2, [pc, #52]	@ (8001970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800193c:	e002      	b.n	8001944 <LoopCopyDataInit>

0800193e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001942:	3304      	adds	r3, #4

08001944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001948:	d3f9      	bcc.n	800193e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194a:	4a0a      	ldr	r2, [pc, #40]	@ (8001974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800194c:	4c0a      	ldr	r4, [pc, #40]	@ (8001978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001950:	e001      	b.n	8001956 <LoopFillZerobss>

08001952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001954:	3204      	adds	r2, #4

08001956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001958:	d3fb      	bcc.n	8001952 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800195a:	f002 fe37 	bl	80045cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195e:	f7fe fe79 	bl	8000654 <main>
  bx  lr    
 8001962:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001964:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800196c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001970:	08004654 	.word	0x08004654
  ldr r2, =_sbss
 8001974:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001978:	20000444 	.word	0x20000444

0800197c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC_IRQHandler>

0800197e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001982:	2003      	movs	r0, #3
 8001984:	f000 f928 	bl	8001bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001988:	2000      	movs	r0, #0
 800198a:	f000 f805 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800198e:	f7ff fcb5 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_InitTick+0x54>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b12      	ldr	r3, [pc, #72]	@ (80019f0 <HAL_InitTick+0x58>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f943 	bl	8001c42 <HAL_SYSTICK_Config>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00e      	b.n	80019e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b0f      	cmp	r3, #15
 80019ca:	d80a      	bhi.n	80019e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019cc:	2200      	movs	r2, #0
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f000 f90b 	bl	8001bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d8:	4a06      	ldr	r2, [pc, #24]	@ (80019f4 <HAL_InitTick+0x5c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e000      	b.n	80019e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	2000000c 	.word	0x2000000c
 80019f0:	20000014 	.word	0x20000014
 80019f4:	20000010 	.word	0x20000010

080019f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <HAL_IncTick+0x20>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_IncTick+0x24>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a04      	ldr	r2, [pc, #16]	@ (8001a1c <HAL_IncTick+0x24>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000014 	.word	0x20000014
 8001a1c:	20000440 	.word	0x20000440

08001a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b03      	ldr	r3, [pc, #12]	@ (8001a34 <HAL_GetTick+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000440 	.word	0x20000440

08001a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <__NVIC_SetPriorityGrouping+0x40>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a54:	4013      	ands	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	@ (8001a78 <__NVIC_SetPriorityGrouping+0x40>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00
 8001a7c:	05fa0000 	.word	0x05fa0000

08001a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a84:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <__NVIC_GetPriorityGrouping+0x18>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 0307 	and.w	r3, r3, #7
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	db0b      	blt.n	8001ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	f003 021f 	and.w	r2, r3, #31
 8001ab4:	4907      	ldr	r1, [pc, #28]	@ (8001ad4 <__NVIC_EnableIRQ+0x38>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	2001      	movs	r0, #1
 8001abe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000e100 	.word	0xe000e100

08001ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	db0a      	blt.n	8001b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	490c      	ldr	r1, [pc, #48]	@ (8001b24 <__NVIC_SetPriority+0x4c>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	440b      	add	r3, r1
 8001afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b00:	e00a      	b.n	8001b18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4908      	ldr	r1, [pc, #32]	@ (8001b28 <__NVIC_SetPriority+0x50>)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	3b04      	subs	r3, #4
 8001b10:	0112      	lsls	r2, r2, #4
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	440b      	add	r3, r1
 8001b16:	761a      	strb	r2, [r3, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000e100 	.word	0xe000e100
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	@ 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f1c3 0307 	rsb	r3, r3, #7
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	bf28      	it	cs
 8001b4a:	2304      	movcs	r3, #4
 8001b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3304      	adds	r3, #4
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d902      	bls.n	8001b5c <NVIC_EncodePriority+0x30>
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3b03      	subs	r3, #3
 8001b5a:	e000      	b.n	8001b5e <NVIC_EncodePriority+0x32>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	f04f 32ff 	mov.w	r2, #4294967295
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	401a      	ands	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	43d9      	mvns	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	4313      	orrs	r3, r2
         );
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3724      	adds	r7, #36	@ 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba4:	d301      	bcc.n	8001baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00f      	b.n	8001bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb2:	210f      	movs	r1, #15
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f7ff ff8e 	bl	8001ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc2:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <SysTick_Config+0x40>)
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	e000e010 	.word	0xe000e010

08001bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff29 	bl	8001a38 <__NVIC_SetPriorityGrouping>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c00:	f7ff ff3e 	bl	8001a80 <__NVIC_GetPriorityGrouping>
 8001c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	6978      	ldr	r0, [r7, #20]
 8001c0c:	f7ff ff8e 	bl	8001b2c <NVIC_EncodePriority>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff5d 	bl	8001ad8 <__NVIC_SetPriority>
}
 8001c1e:	bf00      	nop
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff31 	bl	8001a9c <__NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffa2 	bl	8001b94 <SysTick_Config>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff feda 	bl	8001a20 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e099      	b.n	8001dac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c98:	e00f      	b.n	8001cba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c9a:	f7ff fec1 	bl	8001a20 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b05      	cmp	r3, #5
 8001ca6:	d908      	bls.n	8001cba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2220      	movs	r2, #32
 8001cac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e078      	b.n	8001dac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e8      	bne.n	8001c9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	4b38      	ldr	r3, [pc, #224]	@ (8001db4 <HAL_DMA_Init+0x158>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d107      	bne.n	8001d24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f023 0307 	bic.w	r3, r3, #7
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d117      	bne.n	8001d7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00e      	beq.n	8001d7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f9e9 	bl	8002138 <DMA_CheckFifoParam>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2240      	movs	r2, #64	@ 0x40
 8001d70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e016      	b.n	8001dac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f9a0 	bl	80020cc <DMA_CalcBaseAndBitshift>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d94:	223f      	movs	r2, #63	@ 0x3f
 8001d96:	409a      	lsls	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	f010803f 	.word	0xf010803f

08001db8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001dc4:	4b8e      	ldr	r3, [pc, #568]	@ (8002000 <HAL_DMA_IRQHandler+0x248>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a8e      	ldr	r2, [pc, #568]	@ (8002004 <HAL_DMA_IRQHandler+0x24c>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0a9b      	lsrs	r3, r3, #10
 8001dd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de2:	2208      	movs	r2, #8
 8001de4:	409a      	lsls	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01a      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d013      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0204 	bic.w	r2, r2, #4
 8001e0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e10:	2208      	movs	r2, #8
 8001e12:	409a      	lsls	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1c:	f043 0201 	orr.w	r2, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e28:	2201      	movs	r2, #1
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d012      	beq.n	8001e5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e46:	2201      	movs	r2, #1
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e52:	f043 0202 	orr.w	r2, r3, #2
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5e:	2204      	movs	r2, #4
 8001e60:	409a      	lsls	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d012      	beq.n	8001e90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00b      	beq.n	8001e90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e88:	f043 0204 	orr.w	r2, r3, #4
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e94:	2210      	movs	r2, #16
 8001e96:	409a      	lsls	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d043      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d03c      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb2:	2210      	movs	r2, #16
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d018      	beq.n	8001efa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d108      	bne.n	8001ee8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d024      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	4798      	blx	r3
 8001ee6:	e01f      	b.n	8001f28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01b      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
 8001ef8:	e016      	b.n	8001f28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d107      	bne.n	8001f18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0208 	bic.w	r2, r2, #8
 8001f16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 808f 	beq.w	8002058 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 8087 	beq.w	8002058 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4e:	2220      	movs	r2, #32
 8001f50:	409a      	lsls	r2, r3
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d136      	bne.n	8001fd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0216 	bic.w	r2, r2, #22
 8001f70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d103      	bne.n	8001f92 <HAL_DMA_IRQHandler+0x1da>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0208 	bic.w	r2, r2, #8
 8001fa0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa6:	223f      	movs	r2, #63	@ 0x3f
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d07e      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	4798      	blx	r3
        }
        return;
 8001fce:	e079      	b.n	80020c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01d      	beq.n	800201a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10d      	bne.n	8002008 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d031      	beq.n	8002058 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
 8001ffc:	e02c      	b.n	8002058 <HAL_DMA_IRQHandler+0x2a0>
 8001ffe:	bf00      	nop
 8002000:	2000000c 	.word	0x2000000c
 8002004:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d023      	beq.n	8002058 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
 8002018:	e01e      	b.n	8002058 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10f      	bne.n	8002048 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0210 	bic.w	r2, r2, #16
 8002036:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205c:	2b00      	cmp	r3, #0
 800205e:	d032      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d022      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2205      	movs	r2, #5
 8002070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3301      	adds	r3, #1
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	429a      	cmp	r2, r3
 800208e:	d307      	bcc.n	80020a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f2      	bne.n	8002084 <HAL_DMA_IRQHandler+0x2cc>
 800209e:	e000      	b.n	80020a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	4798      	blx	r3
 80020c2:	e000      	b.n	80020c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020c4:	bf00      	nop
    }
  }
}
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	3b10      	subs	r3, #16
 80020dc:	4a13      	ldr	r2, [pc, #76]	@ (800212c <DMA_CalcBaseAndBitshift+0x60>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020e6:	4a12      	ldr	r2, [pc, #72]	@ (8002130 <DMA_CalcBaseAndBitshift+0x64>)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d908      	bls.n	800210c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	4b0c      	ldr	r3, [pc, #48]	@ (8002134 <DMA_CalcBaseAndBitshift+0x68>)
 8002102:	4013      	ands	r3, r2
 8002104:	1d1a      	adds	r2, r3, #4
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	659a      	str	r2, [r3, #88]	@ 0x58
 800210a:	e006      	b.n	800211a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b08      	ldr	r3, [pc, #32]	@ (8002134 <DMA_CalcBaseAndBitshift+0x68>)
 8002114:	4013      	ands	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	aaaaaaab 	.word	0xaaaaaaab
 8002130:	0800463c 	.word	0x0800463c
 8002134:	fffffc00 	.word	0xfffffc00

08002138 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002148:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d11f      	bne.n	8002192 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d856      	bhi.n	8002206 <DMA_CheckFifoParam+0xce>
 8002158:	a201      	add	r2, pc, #4	@ (adr r2, 8002160 <DMA_CheckFifoParam+0x28>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	08002171 	.word	0x08002171
 8002164:	08002183 	.word	0x08002183
 8002168:	08002171 	.word	0x08002171
 800216c:	08002207 	.word	0x08002207
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002174:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d046      	beq.n	800220a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002180:	e043      	b.n	800220a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002186:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800218a:	d140      	bne.n	800220e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002190:	e03d      	b.n	800220e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800219a:	d121      	bne.n	80021e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d837      	bhi.n	8002212 <DMA_CheckFifoParam+0xda>
 80021a2:	a201      	add	r2, pc, #4	@ (adr r2, 80021a8 <DMA_CheckFifoParam+0x70>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021bf 	.word	0x080021bf
 80021b0:	080021b9 	.word	0x080021b9
 80021b4:	080021d1 	.word	0x080021d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      break;
 80021bc:	e030      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d025      	beq.n	8002216 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ce:	e022      	b.n	8002216 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021d8:	d11f      	bne.n	800221a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021de:	e01c      	b.n	800221a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d903      	bls.n	80021ee <DMA_CheckFifoParam+0xb6>
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d003      	beq.n	80021f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021ec:	e018      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
      break;
 80021f2:	e015      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00e      	beq.n	800221e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
      break;
 8002204:	e00b      	b.n	800221e <DMA_CheckFifoParam+0xe6>
      break;
 8002206:	bf00      	nop
 8002208:	e00a      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 800220a:	bf00      	nop
 800220c:	e008      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 800220e:	bf00      	nop
 8002210:	e006      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 8002212:	bf00      	nop
 8002214:	e004      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 8002216:	bf00      	nop
 8002218:	e002      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;   
 800221a:	bf00      	nop
 800221c:	e000      	b.n	8002220 <DMA_CheckFifoParam+0xe8>
      break;
 800221e:	bf00      	nop
    }
  } 
  
  return status; 
 8002220:	7bfb      	ldrb	r3, [r7, #15]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	@ 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	e175      	b.n	800253c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002250:	2201      	movs	r2, #1
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	429a      	cmp	r2, r3
 800226a:	f040 8164 	bne.w	8002536 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b01      	cmp	r3, #1
 8002278:	d005      	beq.n	8002286 <HAL_GPIO_Init+0x56>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d130      	bne.n	80022e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	2203      	movs	r2, #3
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022bc:	2201      	movs	r2, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 0201 	and.w	r2, r3, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d017      	beq.n	8002324 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d123      	bne.n	8002378 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3208      	adds	r2, #8
 8002338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	220f      	movs	r2, #15
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	08da      	lsrs	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3208      	adds	r2, #8
 8002372:	69b9      	ldr	r1, [r7, #24]
 8002374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0203 	and.w	r2, r3, #3
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80be 	beq.w	8002536 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ba:	4b66      	ldr	r3, [pc, #408]	@ (8002554 <HAL_GPIO_Init+0x324>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	4a65      	ldr	r2, [pc, #404]	@ (8002554 <HAL_GPIO_Init+0x324>)
 80023c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023c6:	4b63      	ldr	r3, [pc, #396]	@ (8002554 <HAL_GPIO_Init+0x324>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023d2:	4a61      	ldr	r2, [pc, #388]	@ (8002558 <HAL_GPIO_Init+0x328>)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a58      	ldr	r2, [pc, #352]	@ (800255c <HAL_GPIO_Init+0x32c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d037      	beq.n	800246e <HAL_GPIO_Init+0x23e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a57      	ldr	r2, [pc, #348]	@ (8002560 <HAL_GPIO_Init+0x330>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d031      	beq.n	800246a <HAL_GPIO_Init+0x23a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a56      	ldr	r2, [pc, #344]	@ (8002564 <HAL_GPIO_Init+0x334>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d02b      	beq.n	8002466 <HAL_GPIO_Init+0x236>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a55      	ldr	r2, [pc, #340]	@ (8002568 <HAL_GPIO_Init+0x338>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d025      	beq.n	8002462 <HAL_GPIO_Init+0x232>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a54      	ldr	r2, [pc, #336]	@ (800256c <HAL_GPIO_Init+0x33c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d01f      	beq.n	800245e <HAL_GPIO_Init+0x22e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a53      	ldr	r2, [pc, #332]	@ (8002570 <HAL_GPIO_Init+0x340>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d019      	beq.n	800245a <HAL_GPIO_Init+0x22a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a52      	ldr	r2, [pc, #328]	@ (8002574 <HAL_GPIO_Init+0x344>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <HAL_GPIO_Init+0x226>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a51      	ldr	r2, [pc, #324]	@ (8002578 <HAL_GPIO_Init+0x348>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00d      	beq.n	8002452 <HAL_GPIO_Init+0x222>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a50      	ldr	r2, [pc, #320]	@ (800257c <HAL_GPIO_Init+0x34c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <HAL_GPIO_Init+0x21e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4f      	ldr	r2, [pc, #316]	@ (8002580 <HAL_GPIO_Init+0x350>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_GPIO_Init+0x21a>
 8002446:	2309      	movs	r3, #9
 8002448:	e012      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800244a:	230a      	movs	r3, #10
 800244c:	e010      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800244e:	2308      	movs	r3, #8
 8002450:	e00e      	b.n	8002470 <HAL_GPIO_Init+0x240>
 8002452:	2307      	movs	r3, #7
 8002454:	e00c      	b.n	8002470 <HAL_GPIO_Init+0x240>
 8002456:	2306      	movs	r3, #6
 8002458:	e00a      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800245a:	2305      	movs	r3, #5
 800245c:	e008      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800245e:	2304      	movs	r3, #4
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x240>
 8002462:	2303      	movs	r3, #3
 8002464:	e004      	b.n	8002470 <HAL_GPIO_Init+0x240>
 8002466:	2302      	movs	r3, #2
 8002468:	e002      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_GPIO_Init+0x240>
 800246e:	2300      	movs	r3, #0
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	f002 0203 	and.w	r2, r2, #3
 8002476:	0092      	lsls	r2, r2, #2
 8002478:	4093      	lsls	r3, r2
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002480:	4935      	ldr	r1, [pc, #212]	@ (8002558 <HAL_GPIO_Init+0x328>)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3302      	adds	r3, #2
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248e:	4b3d      	ldr	r3, [pc, #244]	@ (8002584 <HAL_GPIO_Init+0x354>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b2:	4a34      	ldr	r2, [pc, #208]	@ (8002584 <HAL_GPIO_Init+0x354>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b8:	4b32      	ldr	r3, [pc, #200]	@ (8002584 <HAL_GPIO_Init+0x354>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024dc:	4a29      	ldr	r2, [pc, #164]	@ (8002584 <HAL_GPIO_Init+0x354>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024e2:	4b28      	ldr	r3, [pc, #160]	@ (8002584 <HAL_GPIO_Init+0x354>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002506:	4a1f      	ldr	r2, [pc, #124]	@ (8002584 <HAL_GPIO_Init+0x354>)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800250c:	4b1d      	ldr	r3, [pc, #116]	@ (8002584 <HAL_GPIO_Init+0x354>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002530:	4a14      	ldr	r2, [pc, #80]	@ (8002584 <HAL_GPIO_Init+0x354>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3301      	adds	r3, #1
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	2b0f      	cmp	r3, #15
 8002540:	f67f ae86 	bls.w	8002250 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3724      	adds	r7, #36	@ 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40013800 	.word	0x40013800
 800255c:	40020000 	.word	0x40020000
 8002560:	40020400 	.word	0x40020400
 8002564:	40020800 	.word	0x40020800
 8002568:	40020c00 	.word	0x40020c00
 800256c:	40021000 	.word	0x40021000
 8002570:	40021400 	.word	0x40021400
 8002574:	40021800 	.word	0x40021800
 8002578:	40021c00 	.word	0x40021c00
 800257c:	40022000 	.word	0x40022000
 8002580:	40022400 	.word	0x40022400
 8002584:	40013c00 	.word	0x40013c00

08002588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
 8002594:	4613      	mov	r3, r2
 8002596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002598:	787b      	ldrb	r3, [r7, #1]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259e:	887a      	ldrh	r2, [r7, #2]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80025a4:	e003      	b.n	80025ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80025a6:	887b      	ldrh	r3, [r7, #2]
 80025a8:	041a      	lsls	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	619a      	str	r2, [r3, #24]
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e08b      	b.n	80026e6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe feae 	bl	8001344 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2224      	movs	r2, #36	@ 0x24
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800260c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800261c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d107      	bne.n	8002636 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	e006      	b.n	8002644 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002642:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d108      	bne.n	800265e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	e007      	b.n	800266e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800266c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b1d      	ldr	r3, [pc, #116]	@ (80026f0 <HAL_I2C_Init+0x134>)
 800267a:	430b      	orrs	r3, r1
 800267c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800268c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69d9      	ldr	r1, [r3, #28]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1a      	ldr	r2, [r3, #32]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0201 	orr.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	02008000 	.word	0x02008000

080026f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b20      	cmp	r3, #32
 8002708:	d138      	bne.n	800277c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002714:	2302      	movs	r3, #2
 8002716:	e032      	b.n	800277e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2224      	movs	r2, #36	@ 0x24
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002746:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
  }
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800278a:	b480      	push	{r7}
 800278c:	b085      	sub	sp, #20
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b20      	cmp	r3, #32
 800279e:	d139      	bne.n	8002814 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e033      	b.n	8002816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2224      	movs	r2, #36	@ 0x24
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e000      	b.n	8002816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e0d2      	b.n	80029dc <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe fdfc 	bl	8001448 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	69d9      	ldr	r1, [r3, #28]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b60      	ldr	r3, [pc, #384]	@ (80029e4 <HAL_I2S_Init+0x1c0>)
 8002864:	400b      	ands	r3, r1
 8002866:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2202      	movs	r2, #2
 800286e:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d067      	beq.n	8002948 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d102      	bne.n	8002886 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002880:	2310      	movs	r3, #16
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	e001      	b.n	800288a <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002886:	2320      	movs	r3, #32
 8002888:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b20      	cmp	r3, #32
 8002890:	d802      	bhi.n	8002898 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d102      	bne.n	80028a6 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 80028a0:	4b51      	ldr	r3, [pc, #324]	@ (80029e8 <HAL_I2S_Init+0x1c4>)
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	e003      	b.n	80028ae <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f8a2 	bl	80029f0 <I2S_GetClockFreq>
 80028ac:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028b6:	d125      	bne.n	8002904 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d010      	beq.n	80028e2 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	461a      	mov	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	3305      	adds	r3, #5
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e01f      	b.n	8002922 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	461a      	mov	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fe:	3305      	adds	r3, #5
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	e00e      	b.n	8002922 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	fbb2 f2f3 	udiv	r2, r2, r3
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	461a      	mov	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	3305      	adds	r3, #5
 8002920:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4a31      	ldr	r2, [pc, #196]	@ (80029ec <HAL_I2S_Init+0x1c8>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	08db      	lsrs	r3, r3, #3
 800292c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	e003      	b.n	8002950 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002948:	2302      	movs	r3, #2
 800294a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d902      	bls.n	800295c <HAL_I2S_Init+0x138>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	2bff      	cmp	r3, #255	@ 0xff
 800295a:	d907      	bls.n	800296c <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002960:	f043 0210 	orr.w	r2, r3, #16
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e037      	b.n	80029dc <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	ea42 0103 	orr.w	r1, r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	430a      	orrs	r2, r1
 800297e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	4b17      	ldr	r3, [pc, #92]	@ (80029e4 <HAL_I2S_Init+0x1c0>)
 8002988:	4013      	ands	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6851      	ldr	r1, [r2, #4]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6892      	ldr	r2, [r2, #8]
 8002992:	4311      	orrs	r1, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68d2      	ldr	r2, [r2, #12]
 8002998:	4311      	orrs	r1, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6992      	ldr	r2, [r2, #24]
 800299e:	430a      	orrs	r2, r1
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029aa:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b30      	cmp	r3, #48	@ 0x30
 80029b2:	d003      	beq.n	80029bc <HAL_I2S_Init+0x198>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2bb0      	cmp	r3, #176	@ 0xb0
 80029ba:	d107      	bne.n	80029cc <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69da      	ldr	r2, [r3, #28]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	fffff040 	.word	0xfffff040
 80029e8:	00bb8000 	.word	0x00bb8000
 80029ec:	cccccccd 	.word	0xcccccccd

080029f0 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d02d      	beq.n	8002a5c <I2S_GetClockFreq+0x6c>
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d12e      	bne.n	8002a62 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002a04:	4b1c      	ldr	r3, [pc, #112]	@ (8002a78 <I2S_GetClockFreq+0x88>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d108      	bne.n	8002a22 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002a10:	4b19      	ldr	r3, [pc, #100]	@ (8002a78 <I2S_GetClockFreq+0x88>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a18:	4a18      	ldr	r2, [pc, #96]	@ (8002a7c <I2S_GetClockFreq+0x8c>)
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	e007      	b.n	8002a32 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002a22:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <I2S_GetClockFreq+0x88>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a2a:	4a15      	ldr	r2, [pc, #84]	@ (8002a80 <I2S_GetClockFreq+0x90>)
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8002a32:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <I2S_GetClockFreq+0x88>)
 8002a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a38:	0f1b      	lsrs	r3, r3, #28
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8002a40:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <I2S_GetClockFreq+0x88>)
 8002a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	fb03 f202 	mul.w	r2, r3, r2
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a58:	613b      	str	r3, [r7, #16]

      break;
 8002a5a:	e005      	b.n	8002a68 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8002a5c:	4b09      	ldr	r3, [pc, #36]	@ (8002a84 <I2S_GetClockFreq+0x94>)
 8002a5e:	613b      	str	r3, [r7, #16]
      break;
 8002a60:	e002      	b.n	8002a68 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
      break;
 8002a66:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8002a68:	693b      	ldr	r3, [r7, #16]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	017d7840 	.word	0x017d7840
 8002a84:	00bb8000 	.word	0x00bb8000

08002a88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a92:	4b23      	ldr	r3, [pc, #140]	@ (8002b20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	4a22      	ldr	r2, [pc, #136]	@ (8002b20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a9e:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1d      	ldr	r2, [pc, #116]	@ (8002b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab6:	f7fe ffb3 	bl	8001a20 <HAL_GetTick>
 8002aba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002abc:	e009      	b.n	8002ad2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002abe:	f7fe ffaf 	bl	8001a20 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002acc:	d901      	bls.n	8002ad2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e022      	b.n	8002b18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ad2:	4b14      	ldr	r3, [pc, #80]	@ (8002b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ade:	d1ee      	bne.n	8002abe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ae0:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8002b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aec:	f7fe ff98 	bl	8001a20 <HAL_GetTick>
 8002af0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002af2:	e009      	b.n	8002b08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002af4:	f7fe ff94 	bl	8001a20 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b02:	d901      	bls.n	8002b08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e007      	b.n	8002b18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b14:	d1ee      	bne.n	8002af4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40007000 	.word	0x40007000

08002b28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b30:	2300      	movs	r3, #0
 8002b32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e291      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8087 	beq.w	8002c5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b4c:	4b96      	ldr	r3, [pc, #600]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d00c      	beq.n	8002b72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b58:	4b93      	ldr	r3, [pc, #588]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d112      	bne.n	8002b8a <HAL_RCC_OscConfig+0x62>
 8002b64:	4b90      	ldr	r3, [pc, #576]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b70:	d10b      	bne.n	8002b8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b72:	4b8d      	ldr	r3, [pc, #564]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d06c      	beq.n	8002c58 <HAL_RCC_OscConfig+0x130>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d168      	bne.n	8002c58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e26b      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x7a>
 8002b94:	4b84      	ldr	r3, [pc, #528]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a83      	ldr	r2, [pc, #524]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	e02e      	b.n	8002c00 <HAL_RCC_OscConfig+0xd8>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x9c>
 8002baa:	4b7f      	ldr	r3, [pc, #508]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a7e      	ldr	r2, [pc, #504]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b7c      	ldr	r3, [pc, #496]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7b      	ldr	r2, [pc, #492]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e01d      	b.n	8002c00 <HAL_RCC_OscConfig+0xd8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0xc0>
 8002bce:	4b76      	ldr	r3, [pc, #472]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a75      	ldr	r2, [pc, #468]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b73      	ldr	r3, [pc, #460]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a72      	ldr	r2, [pc, #456]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0xd8>
 8002be8:	4b6f      	ldr	r3, [pc, #444]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a6e      	ldr	r2, [pc, #440]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b6c      	ldr	r3, [pc, #432]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6b      	ldr	r2, [pc, #428]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002bfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d013      	beq.n	8002c30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe ff0a 	bl	8001a20 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fe ff06 	bl	8001a20 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	@ 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e21f      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	4b61      	ldr	r3, [pc, #388]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0xe8>
 8002c2e:	e014      	b.n	8002c5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe fef6 	bl	8001a20 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fe fef2 	bl	8001a20 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	@ 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e20b      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	4b57      	ldr	r3, [pc, #348]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x110>
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d069      	beq.n	8002d3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c66:	4b50      	ldr	r3, [pc, #320]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c72:	4b4d      	ldr	r3, [pc, #308]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d11c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x190>
 8002c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d116      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8a:	4b47      	ldr	r3, [pc, #284]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x17a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d001      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e1df      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca2:	4b41      	ldr	r3, [pc, #260]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	493d      	ldr	r1, [pc, #244]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb6:	e040      	b.n	8002d3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d023      	beq.n	8002d08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc0:	4b39      	ldr	r3, [pc, #228]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a38      	ldr	r2, [pc, #224]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fea8 	bl	8001a20 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd4:	f7fe fea4 	bl	8001a20 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e1bd      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	4b30      	ldr	r3, [pc, #192]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4929      	ldr	r1, [pc, #164]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]
 8002d06:	e018      	b.n	8002d3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d08:	4b27      	ldr	r3, [pc, #156]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a26      	ldr	r2, [pc, #152]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fe84 	bl	8001a20 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fe fe80 	bl	8001a20 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e199      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d038      	beq.n	8002db8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d019      	beq.n	8002d82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d52:	4a15      	ldr	r2, [pc, #84]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fe61 	bl	8001a20 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d62:	f7fe fe5d 	bl	8001a20 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e176      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d74:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x23a>
 8002d80:	e01a      	b.n	8002db8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d82:	4b09      	ldr	r3, [pc, #36]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d86:	4a08      	ldr	r2, [pc, #32]	@ (8002da8 <HAL_RCC_OscConfig+0x280>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8e:	f7fe fe47 	bl	8001a20 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	e00a      	b.n	8002dac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d96:	f7fe fe43 	bl	8001a20 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d903      	bls.n	8002dac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e15c      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
 8002da8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dac:	4b91      	ldr	r3, [pc, #580]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1ee      	bne.n	8002d96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a4 	beq.w	8002f0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b8b      	ldr	r3, [pc, #556]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	4b88      	ldr	r3, [pc, #544]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	4a87      	ldr	r2, [pc, #540]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dde:	4b85      	ldr	r3, [pc, #532]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dea:	2301      	movs	r3, #1
 8002dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dee:	4b82      	ldr	r3, [pc, #520]	@ (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d118      	bne.n	8002e2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a7e      	ldr	r2, [pc, #504]	@ (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e06:	f7fe fe0b 	bl	8001a20 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0e:	f7fe fe07 	bl	8001a20 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b64      	cmp	r3, #100	@ 0x64
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e120      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e20:	4b75      	ldr	r3, [pc, #468]	@ (8002ff8 <HAL_RCC_OscConfig+0x4d0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d106      	bne.n	8002e42 <HAL_RCC_OscConfig+0x31a>
 8002e34:	4b6f      	ldr	r3, [pc, #444]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e38:	4a6e      	ldr	r2, [pc, #440]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e40:	e02d      	b.n	8002e9e <HAL_RCC_OscConfig+0x376>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x33c>
 8002e4a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4e:	4a69      	ldr	r2, [pc, #420]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e56:	4b67      	ldr	r3, [pc, #412]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5a:	4a66      	ldr	r2, [pc, #408]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002e5c:	f023 0304 	bic.w	r3, r3, #4
 8002e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e62:	e01c      	b.n	8002e9e <HAL_RCC_OscConfig+0x376>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b05      	cmp	r3, #5
 8002e6a:	d10c      	bne.n	8002e86 <HAL_RCC_OscConfig+0x35e>
 8002e6c:	4b61      	ldr	r3, [pc, #388]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e70:	4a60      	ldr	r2, [pc, #384]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002e72:	f043 0304 	orr.w	r3, r3, #4
 8002e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e78:	4b5e      	ldr	r3, [pc, #376]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e84:	e00b      	b.n	8002e9e <HAL_RCC_OscConfig+0x376>
 8002e86:	4b5b      	ldr	r3, [pc, #364]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e92:	4b58      	ldr	r3, [pc, #352]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e96:	4a57      	ldr	r2, [pc, #348]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002e98:	f023 0304 	bic.w	r3, r3, #4
 8002e9c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d015      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7fe fdbb 	bl	8001a20 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7fe fdb7 	bl	8001a20 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0ce      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ee      	beq.n	8002eae <HAL_RCC_OscConfig+0x386>
 8002ed0:	e014      	b.n	8002efc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fda5 	bl	8001a20 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fe fda1 	bl	8001a20 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0b8      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef0:	4b40      	ldr	r3, [pc, #256]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ee      	bne.n	8002eda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f02:	4b3c      	ldr	r3, [pc, #240]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	4a3b      	ldr	r2, [pc, #236]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002f08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f0c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80a4 	beq.w	8003060 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f18:	4b36      	ldr	r3, [pc, #216]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d06b      	beq.n	8002ffc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d149      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2c:	4b31      	ldr	r3, [pc, #196]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a30      	ldr	r2, [pc, #192]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002f32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fe fd72 	bl	8001a20 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f40:	f7fe fd6e 	bl	8001a20 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e087      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	4b28      	ldr	r3, [pc, #160]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	019b      	lsls	r3, r3, #6
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	3b01      	subs	r3, #1
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	4313      	orrs	r3, r2
 8002f84:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002f86:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f8a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a18      	ldr	r2, [pc, #96]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fd42 	bl	8001a20 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe fd3e 	bl	8001a20 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e057      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x478>
 8002fbe:	e04f      	b.n	8003060 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002fc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fd28 	bl	8001a20 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fe fd24 	bl	8001a20 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e03d      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	4b03      	ldr	r3, [pc, #12]	@ (8002ff4 <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4ac>
 8002ff2:	e035      	b.n	8003060 <HAL_RCC_OscConfig+0x538>
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800306c <HAL_RCC_OscConfig+0x544>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d028      	beq.n	800305c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d121      	bne.n	800305c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d11a      	bne.n	800305c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800302c:	4013      	ands	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003032:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003034:	4293      	cmp	r3, r2
 8003036:	d111      	bne.n	800305c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	3b01      	subs	r3, #1
 8003046:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003056:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0d0      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003088:	4b6a      	ldr	r3, [pc, #424]	@ (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d910      	bls.n	80030b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b67      	ldr	r3, [pc, #412]	@ (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 020f 	bic.w	r2, r3, #15
 800309e:	4965      	ldr	r1, [pc, #404]	@ (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b63      	ldr	r3, [pc, #396]	@ (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0b8      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d020      	beq.n	8003106 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d0:	4b59      	ldr	r3, [pc, #356]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a58      	ldr	r2, [pc, #352]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e8:	4b53      	ldr	r3, [pc, #332]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a52      	ldr	r2, [pc, #328]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f4:	4b50      	ldr	r3, [pc, #320]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	494d      	ldr	r1, [pc, #308]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d040      	beq.n	8003194 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b47      	ldr	r3, [pc, #284]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d115      	bne.n	8003152 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e07f      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003132:	4b41      	ldr	r3, [pc, #260]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e073      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003142:	4b3d      	ldr	r3, [pc, #244]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06b      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003152:	4b39      	ldr	r3, [pc, #228]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 0203 	bic.w	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4936      	ldr	r1, [pc, #216]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7fe fc5c 	bl	8001a20 <HAL_GetTick>
 8003168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	e00a      	b.n	8003182 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316c:	f7fe fc58 	bl	8001a20 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e053      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	4b2d      	ldr	r3, [pc, #180]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 020c 	and.w	r2, r3, #12
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	429a      	cmp	r2, r3
 8003192:	d1eb      	bne.n	800316c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003194:	4b27      	ldr	r3, [pc, #156]	@ (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d210      	bcs.n	80031c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a2:	4b24      	ldr	r3, [pc, #144]	@ (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 020f 	bic.w	r2, r3, #15
 80031aa:	4922      	ldr	r1, [pc, #136]	@ (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b20      	ldr	r3, [pc, #128]	@ (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e032      	b.n	800322a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d0:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4916      	ldr	r1, [pc, #88]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ee:	4b12      	ldr	r3, [pc, #72]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	490e      	ldr	r1, [pc, #56]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003202:	f000 f821 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8003206:	4602      	mov	r2, r0
 8003208:	4b0b      	ldr	r3, [pc, #44]	@ (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	490a      	ldr	r1, [pc, #40]	@ (800323c <HAL_RCC_ClockConfig+0x1cc>)
 8003214:	5ccb      	ldrb	r3, [r1, r3]
 8003216:	fa22 f303 	lsr.w	r3, r2, r3
 800321a:	4a09      	ldr	r2, [pc, #36]	@ (8003240 <HAL_RCC_ClockConfig+0x1d0>)
 800321c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800321e:	4b09      	ldr	r3, [pc, #36]	@ (8003244 <HAL_RCC_ClockConfig+0x1d4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe fbb8 	bl	8001998 <HAL_InitTick>

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40023c00 	.word	0x40023c00
 8003238:	40023800 	.word	0x40023800
 800323c:	0800462c 	.word	0x0800462c
 8003240:	2000000c 	.word	0x2000000c
 8003244:	20000010 	.word	0x20000010

08003248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800324c:	b090      	sub	sp, #64	@ 0x40
 800324e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	637b      	str	r3, [r7, #52]	@ 0x34
 8003254:	2300      	movs	r3, #0
 8003256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003258:	2300      	movs	r3, #0
 800325a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003260:	4b59      	ldr	r3, [pc, #356]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d00d      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x40>
 800326c:	2b08      	cmp	r3, #8
 800326e:	f200 80a1 	bhi.w	80033b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x34>
 8003276:	2b04      	cmp	r3, #4
 8003278:	d003      	beq.n	8003282 <HAL_RCC_GetSysClockFreq+0x3a>
 800327a:	e09b      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800327c:	4b53      	ldr	r3, [pc, #332]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x184>)
 800327e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003280:	e09b      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003282:	4b53      	ldr	r3, [pc, #332]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003284:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003286:	e098      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003288:	4b4f      	ldr	r3, [pc, #316]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003290:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003292:	4b4d      	ldr	r3, [pc, #308]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d028      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329e:	4b4a      	ldr	r3, [pc, #296]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	099b      	lsrs	r3, r3, #6
 80032a4:	2200      	movs	r2, #0
 80032a6:	623b      	str	r3, [r7, #32]
 80032a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032b0:	2100      	movs	r1, #0
 80032b2:	4b47      	ldr	r3, [pc, #284]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80032b4:	fb03 f201 	mul.w	r2, r3, r1
 80032b8:	2300      	movs	r3, #0
 80032ba:	fb00 f303 	mul.w	r3, r0, r3
 80032be:	4413      	add	r3, r2
 80032c0:	4a43      	ldr	r2, [pc, #268]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80032c2:	fba0 1202 	umull	r1, r2, r0, r2
 80032c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032c8:	460a      	mov	r2, r1
 80032ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032ce:	4413      	add	r3, r2
 80032d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d4:	2200      	movs	r2, #0
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	61fa      	str	r2, [r7, #28]
 80032da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032e2:	f7fc ff91 	bl	8000208 <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4613      	mov	r3, r2
 80032ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ee:	e053      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f0:	4b35      	ldr	r3, [pc, #212]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	099b      	lsrs	r3, r3, #6
 80032f6:	2200      	movs	r2, #0
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	617a      	str	r2, [r7, #20]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003302:	f04f 0b00 	mov.w	fp, #0
 8003306:	4652      	mov	r2, sl
 8003308:	465b      	mov	r3, fp
 800330a:	f04f 0000 	mov.w	r0, #0
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	0159      	lsls	r1, r3, #5
 8003314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003318:	0150      	lsls	r0, r2, #5
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	ebb2 080a 	subs.w	r8, r2, sl
 8003322:	eb63 090b 	sbc.w	r9, r3, fp
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003332:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003336:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800333a:	ebb2 0408 	subs.w	r4, r2, r8
 800333e:	eb63 0509 	sbc.w	r5, r3, r9
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	00eb      	lsls	r3, r5, #3
 800334c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003350:	00e2      	lsls	r2, r4, #3
 8003352:	4614      	mov	r4, r2
 8003354:	461d      	mov	r5, r3
 8003356:	eb14 030a 	adds.w	r3, r4, sl
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	eb45 030b 	adc.w	r3, r5, fp
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800336e:	4629      	mov	r1, r5
 8003370:	028b      	lsls	r3, r1, #10
 8003372:	4621      	mov	r1, r4
 8003374:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003378:	4621      	mov	r1, r4
 800337a:	028a      	lsls	r2, r1, #10
 800337c:	4610      	mov	r0, r2
 800337e:	4619      	mov	r1, r3
 8003380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003382:	2200      	movs	r2, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	60fa      	str	r2, [r7, #12]
 8003388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800338c:	f7fc ff3c 	bl	8000208 <__aeabi_uldivmod>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4613      	mov	r3, r2
 8003396:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003398:	4b0b      	ldr	r3, [pc, #44]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	3301      	adds	r3, #1
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80033a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033b2:	e002      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033b4:	4b05      	ldr	r3, [pc, #20]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x184>)
 80033b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3740      	adds	r7, #64	@ 0x40
 80033c0:	46bd      	mov	sp, r7
 80033c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800
 80033cc:	00f42400 	.word	0x00f42400
 80033d0:	017d7840 	.word	0x017d7840

080033d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d012      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033fc:	4b69      	ldr	r3, [pc, #420]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a68      	ldr	r2, [pc, #416]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003402:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003406:	6093      	str	r3, [r2, #8]
 8003408:	4b66      	ldr	r3, [pc, #408]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003410:	4964      	ldr	r1, [pc, #400]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800341e:	2301      	movs	r3, #1
 8003420:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d017      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800342e:	4b5d      	ldr	r3, [pc, #372]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003434:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343c:	4959      	ldr	r1, [pc, #356]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003448:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800344c:	d101      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800344e:	2301      	movs	r3, #1
 8003450:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800345a:	2301      	movs	r3, #1
 800345c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d017      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800346a:	4b4e      	ldr	r3, [pc, #312]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003470:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	494a      	ldr	r1, [pc, #296]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003488:	d101      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800348a:	2301      	movs	r3, #1
 800348c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003496:	2301      	movs	r3, #1
 8003498:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80034a6:	2301      	movs	r3, #1
 80034a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 808b 	beq.w	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034b8:	4b3a      	ldr	r3, [pc, #232]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	4a39      	ldr	r2, [pc, #228]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80034c4:	4b37      	ldr	r3, [pc, #220]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034d0:	4b35      	ldr	r3, [pc, #212]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a34      	ldr	r2, [pc, #208]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034dc:	f7fe faa0 	bl	8001a20 <HAL_GetTick>
 80034e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e4:	f7fe fa9c 	bl	8001a20 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	@ 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e357      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034f6:	4b2c      	ldr	r3, [pc, #176]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003502:	4b28      	ldr	r3, [pc, #160]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800350a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d035      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	429a      	cmp	r2, r3
 800351e:	d02e      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003520:	4b20      	ldr	r3, [pc, #128]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003524:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003528:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800352a:	4b1e      	ldr	r3, [pc, #120]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352e:	4a1d      	ldr	r2, [pc, #116]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003534:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003536:	4b1b      	ldr	r3, [pc, #108]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353a:	4a1a      	ldr	r2, [pc, #104]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003540:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003542:	4a18      	ldr	r2, [pc, #96]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003548:	4b16      	ldr	r3, [pc, #88]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	d114      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe fa64 	bl	8001a20 <HAL_GetTick>
 8003558:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355a:	e00a      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fe fa60 	bl	8001a20 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e319      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003572:	4b0c      	ldr	r3, [pc, #48]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0ee      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003586:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800358a:	d111      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800358c:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003598:	4b04      	ldr	r3, [pc, #16]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800359a:	400b      	ands	r3, r1
 800359c:	4901      	ldr	r1, [pc, #4]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
 80035a2:	e00b      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40007000 	.word	0x40007000
 80035ac:	0ffffcff 	.word	0x0ffffcff
 80035b0:	4baa      	ldr	r3, [pc, #680]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4aa9      	ldr	r2, [pc, #676]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80035ba:	6093      	str	r3, [r2, #8]
 80035bc:	4ba7      	ldr	r3, [pc, #668]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c8:	49a4      	ldr	r1, [pc, #656]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d010      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035da:	4ba0      	ldr	r3, [pc, #640]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035e0:	4a9e      	ldr	r2, [pc, #632]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80035ea:	4b9c      	ldr	r3, [pc, #624]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f4:	4999      	ldr	r1, [pc, #612]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003608:	4b94      	ldr	r3, [pc, #592]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003616:	4991      	ldr	r1, [pc, #580]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003618:	4313      	orrs	r3, r2
 800361a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800362a:	4b8c      	ldr	r3, [pc, #560]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003630:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003638:	4988      	ldr	r1, [pc, #544]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800364c:	4b83      	ldr	r3, [pc, #524]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003652:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800365a:	4980      	ldr	r1, [pc, #512]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800366e:	4b7b      	ldr	r3, [pc, #492]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003674:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800367c:	4977      	ldr	r1, [pc, #476]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003690:	4b72      	ldr	r3, [pc, #456]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003696:	f023 0203 	bic.w	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	496f      	ldr	r1, [pc, #444]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036b2:	4b6a      	ldr	r3, [pc, #424]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b8:	f023 020c 	bic.w	r2, r3, #12
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036c0:	4966      	ldr	r1, [pc, #408]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036d4:	4b61      	ldr	r3, [pc, #388]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036da:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e2:	495e      	ldr	r1, [pc, #376]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036f6:	4b59      	ldr	r3, [pc, #356]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003704:	4955      	ldr	r1, [pc, #340]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003718:	4b50      	ldr	r3, [pc, #320]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003726:	494d      	ldr	r1, [pc, #308]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800373a:	4b48      	ldr	r3, [pc, #288]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003740:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003748:	4944      	ldr	r1, [pc, #272]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800375c:	4b3f      	ldr	r3, [pc, #252]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003762:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376a:	493c      	ldr	r1, [pc, #240]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800377e:	4b37      	ldr	r3, [pc, #220]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003784:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378c:	4933      	ldr	r1, [pc, #204]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037a0:	4b2e      	ldr	r3, [pc, #184]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ae:	492b      	ldr	r1, [pc, #172]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d011      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037c2:	4b26      	ldr	r3, [pc, #152]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037d0:	4922      	ldr	r1, [pc, #136]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037e0:	d101      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037e2:	2301      	movs	r3, #1
 80037e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037f2:	2301      	movs	r3, #1
 80037f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003802:	4b16      	ldr	r3, [pc, #88]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003808:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003810:	4912      	ldr	r1, [pc, #72]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003824:	4b0d      	ldr	r3, [pc, #52]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003834:	4909      	ldr	r1, [pc, #36]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d006      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 80d9 	beq.w	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003850:	4b02      	ldr	r3, [pc, #8]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a01      	ldr	r2, [pc, #4]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003856:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800385a:	e001      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800385c:	40023800 	.word	0x40023800
 8003860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003862:	f7fe f8dd 	bl	8001a20 <HAL_GetTick>
 8003866:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003868:	e008      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800386a:	f7fe f8d9 	bl	8001a20 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b64      	cmp	r3, #100	@ 0x64
 8003876:	d901      	bls.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e194      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800387c:	4b6c      	ldr	r3, [pc, #432]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f0      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d021      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003898:	2b00      	cmp	r3, #0
 800389a:	d11d      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800389c:	4b64      	ldr	r3, [pc, #400]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800389e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038a2:	0c1b      	lsrs	r3, r3, #16
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038aa:	4b61      	ldr	r3, [pc, #388]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038b0:	0e1b      	lsrs	r3, r3, #24
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	019a      	lsls	r2, r3, #6
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	041b      	lsls	r3, r3, #16
 80038c2:	431a      	orrs	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	061b      	lsls	r3, r3, #24
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	071b      	lsls	r3, r3, #28
 80038d0:	4957      	ldr	r1, [pc, #348]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d02e      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003902:	d129      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003904:	4b4a      	ldr	r3, [pc, #296]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003906:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800390a:	0c1b      	lsrs	r3, r3, #16
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003912:	4b47      	ldr	r3, [pc, #284]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003918:	0f1b      	lsrs	r3, r3, #28
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	019a      	lsls	r2, r3, #6
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	041b      	lsls	r3, r3, #16
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	061b      	lsls	r3, r3, #24
 8003932:	431a      	orrs	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	071b      	lsls	r3, r3, #28
 8003938:	493d      	ldr	r1, [pc, #244]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003940:	4b3b      	ldr	r3, [pc, #236]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003942:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003946:	f023 021f 	bic.w	r2, r3, #31
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394e:	3b01      	subs	r3, #1
 8003950:	4937      	ldr	r1, [pc, #220]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01d      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003964:	4b32      	ldr	r3, [pc, #200]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800396a:	0e1b      	lsrs	r3, r3, #24
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003972:	4b2f      	ldr	r3, [pc, #188]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003978:	0f1b      	lsrs	r3, r3, #28
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	019a      	lsls	r2, r3, #6
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	041b      	lsls	r3, r3, #16
 800398c:	431a      	orrs	r2, r3
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	061b      	lsls	r3, r3, #24
 8003992:	431a      	orrs	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	071b      	lsls	r3, r3, #28
 8003998:	4925      	ldr	r1, [pc, #148]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d011      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	019a      	lsls	r2, r3, #6
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	041b      	lsls	r3, r3, #16
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	061b      	lsls	r3, r3, #24
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	071b      	lsls	r3, r3, #28
 80039c8:	4919      	ldr	r1, [pc, #100]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039d0:	4b17      	ldr	r3, [pc, #92]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a16      	ldr	r2, [pc, #88]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039dc:	f7fe f820 	bl	8001a20 <HAL_GetTick>
 80039e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039e4:	f7fe f81c 	bl	8001a20 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	@ 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e0d7      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	f040 80cd 	bne.w	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a0a:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a08      	ldr	r2, [pc, #32]	@ (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a16:	f7fe f803 	bl	8001a20 <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a1c:	e00a      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a1e:	f7fd ffff 	bl	8001a20 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b64      	cmp	r3, #100	@ 0x64
 8003a2a:	d903      	bls.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e0ba      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a34:	4b5e      	ldr	r3, [pc, #376]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a40:	d0ed      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d02e      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d12a      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a6a:	4b51      	ldr	r3, [pc, #324]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a78:	4b4d      	ldr	r3, [pc, #308]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7e:	0f1b      	lsrs	r3, r3, #28
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	019a      	lsls	r2, r3, #6
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	041b      	lsls	r3, r3, #16
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	061b      	lsls	r3, r3, #24
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	071b      	lsls	r3, r3, #28
 8003a9e:	4944      	ldr	r1, [pc, #272]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003aa6:	4b42      	ldr	r3, [pc, #264]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	493d      	ldr	r1, [pc, #244]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d022      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ad0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ad4:	d11d      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ad6:	4b36      	ldr	r3, [pc, #216]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003adc:	0e1b      	lsrs	r3, r3, #24
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ae4:	4b32      	ldr	r3, [pc, #200]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aea:	0f1b      	lsrs	r3, r3, #28
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	019a      	lsls	r2, r3, #6
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	431a      	orrs	r2, r3
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	431a      	orrs	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	071b      	lsls	r3, r3, #28
 8003b0a:	4929      	ldr	r1, [pc, #164]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d028      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b1e:	4b24      	ldr	r3, [pc, #144]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b24:	0e1b      	lsrs	r3, r3, #24
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b2c:	4b20      	ldr	r3, [pc, #128]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	019a      	lsls	r2, r3, #6
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	041b      	lsls	r3, r3, #16
 8003b44:	431a      	orrs	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	061b      	lsls	r3, r3, #24
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	071b      	lsls	r3, r3, #28
 8003b52:	4917      	ldr	r1, [pc, #92]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b5a:	4b15      	ldr	r3, [pc, #84]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	4911      	ldr	r1, [pc, #68]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b70:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a0e      	ldr	r2, [pc, #56]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b7c:	f7fd ff50 	bl	8001a20 <HAL_GetTick>
 8003b80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b84:	f7fd ff4c 	bl	8001a20 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	@ 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e007      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b96:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ba2:	d1ef      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800

08003bb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bd2:	f040 808d 	bne.w	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003bd6:	4b93      	ldr	r3, [pc, #588]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bdc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003be4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bec:	d07c      	beq.n	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bf4:	d87b      	bhi.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d004      	beq.n	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c02:	d039      	beq.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003c04:	e073      	b.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003c06:	4b87      	ldr	r3, [pc, #540]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d108      	bne.n	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c12:	4b84      	ldr	r3, [pc, #528]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c1a:	4a83      	ldr	r2, [pc, #524]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	e007      	b.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003c24:	4b7f      	ldr	r3, [pc, #508]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c2c:	4a7f      	ldr	r2, [pc, #508]	@ (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003c34:	4b7b      	ldr	r3, [pc, #492]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3a:	0e1b      	lsrs	r3, r3, #24
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003c42:	4b78      	ldr	r3, [pc, #480]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c48:	099b      	lsrs	r3, r3, #6
 8003c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	fb03 f202 	mul.w	r2, r3, r2
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003c5c:	4b71      	ldr	r3, [pc, #452]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	3301      	adds	r3, #1
 8003c6a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	617b      	str	r3, [r7, #20]
        break;
 8003c76:	e03b      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003c78:	4b6a      	ldr	r3, [pc, #424]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d108      	bne.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c84:	4b67      	ldr	r3, [pc, #412]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c8c:	4a66      	ldr	r2, [pc, #408]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	e007      	b.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003c96:	4b63      	ldr	r3, [pc, #396]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c9e:	4a63      	ldr	r2, [pc, #396]	@ (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003ca6:	4b5f      	ldr	r3, [pc, #380]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cac:	0e1b      	lsrs	r3, r3, #24
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003cb4:	4b5b      	ldr	r3, [pc, #364]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	fb03 f202 	mul.w	r2, r3, r2
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003cce:	4b55      	ldr	r3, [pc, #340]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	3301      	adds	r3, #1
 8003cda:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]
        break;
 8003ce6:	e003      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003ce8:	4b51      	ldr	r3, [pc, #324]	@ (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003cea:	617b      	str	r3, [r7, #20]
        break;
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8003cee:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cf6:	f040 808d 	bne.w	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d00:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003d08:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d10:	d07c      	beq.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d18:	d87b      	bhi.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d26:	d039      	beq.n	8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003d28:	e073      	b.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d108      	bne.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d36:	4b3b      	ldr	r3, [pc, #236]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d3e:	4a3a      	ldr	r2, [pc, #232]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	e007      	b.n	8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003d48:	4b36      	ldr	r3, [pc, #216]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d50:	4a36      	ldr	r2, [pc, #216]	@ (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d56:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003d58:	4b32      	ldr	r3, [pc, #200]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5e:	0e1b      	lsrs	r3, r3, #24
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003d66:	4b2f      	ldr	r3, [pc, #188]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6c:	099b      	lsrs	r3, r3, #6
 8003d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	fb03 f202 	mul.w	r2, r3, r2
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003d80:	4b28      	ldr	r3, [pc, #160]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	617b      	str	r3, [r7, #20]
        break;
 8003d9a:	e03b      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003d9c:	4b21      	ldr	r3, [pc, #132]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d108      	bne.n	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003da8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003db0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	e007      	b.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003dba:	4b1a      	ldr	r3, [pc, #104]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003dca:	4b16      	ldr	r3, [pc, #88]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd0:	0e1b      	lsrs	r3, r3, #24
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003dd8:	4b12      	ldr	r3, [pc, #72]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	fb03 f202 	mul.w	r2, r3, r2
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003df2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e08:	617b      	str	r3, [r7, #20]
        break;
 8003e0a:	e003      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003e0c:	4b08      	ldr	r3, [pc, #32]	@ (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003e0e:	617b      	str	r3, [r7, #20]
        break;
 8003e10:	e000      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8003e12:	bf00      	nop
      }
    }
  }

  return frequency;
 8003e14:	697b      	ldr	r3, [r7, #20]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	00f42400 	.word	0x00f42400
 8003e2c:	017d7840 	.word	0x017d7840
 8003e30:	00bb8000 	.word	0x00bb8000

08003e34 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d904      	bls.n	8003e56 <HAL_SAI_InitProtocol+0x22>
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	3b03      	subs	r3, #3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d812      	bhi.n	8003e7a <HAL_SAI_InitProtocol+0x46>
 8003e54:	e008      	b.n	8003e68 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f99b 	bl	8004198 <SAI_InitI2S>
 8003e62:	4603      	mov	r3, r0
 8003e64:	75fb      	strb	r3, [r7, #23]
      break;
 8003e66:	e00b      	b.n	8003e80 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fa40 	bl	80042f4 <SAI_InitPCM>
 8003e74:	4603      	mov	r3, r0
 8003e76:	75fb      	strb	r3, [r7, #23]
      break;
 8003e78:	e002      	b.n	8003e80 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e7e:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f808 	bl	8003e9c <HAL_SAI_Init>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e156      	b.n	8004168 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd fc36 	bl	8001740 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fa89 	bl	80043f4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d00c      	beq.n	8003f04 <HAL_SAI_Init+0x68>
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d80d      	bhi.n	8003f0a <HAL_SAI_Init+0x6e>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_SAI_Init+0x5c>
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d003      	beq.n	8003efe <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8003ef6:	e008      	b.n	8003f0a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
      break;
 8003efc:	e006      	b.n	8003f0c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003efe:	2310      	movs	r3, #16
 8003f00:	61fb      	str	r3, [r7, #28]
      break;
 8003f02:	e003      	b.n	8003f0c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003f04:	2320      	movs	r3, #32
 8003f06:	61fb      	str	r3, [r7, #28]
      break;
 8003f08:	e000      	b.n	8003f0c <HAL_SAI_Init+0x70>
      break;
 8003f0a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d81e      	bhi.n	8003f52 <HAL_SAI_Init+0xb6>
 8003f14:	a201      	add	r2, pc, #4	@ (adr r2, 8003f1c <HAL_SAI_Init+0x80>)
 8003f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1a:	bf00      	nop
 8003f1c:	08003f2d 	.word	0x08003f2d
 8003f20:	08003f33 	.word	0x08003f33
 8003f24:	08003f3b 	.word	0x08003f3b
 8003f28:	08003f43 	.word	0x08003f43
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
    }
    break;
 8003f30:	e010      	b.n	8003f54 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003f32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f36:	617b      	str	r3, [r7, #20]
    }
    break;
 8003f38:	e00c      	b.n	8003f54 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003f3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f3e:	617b      	str	r3, [r7, #20]
    }
    break;
 8003f40:	e008      	b.n	8003f54 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003f42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f46:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8003f50:	e000      	b.n	8003f54 <HAL_SAI_Init+0xb8>
    default:
      break;
 8003f52:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a85      	ldr	r2, [pc, #532]	@ (8004170 <HAL_SAI_Init+0x2d4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <HAL_SAI_Init+0xcc>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a84      	ldr	r2, [pc, #528]	@ (8004174 <HAL_SAI_Init+0x2d8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d103      	bne.n	8003f70 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8003f68:	4a83      	ldr	r2, [pc, #524]	@ (8004178 <HAL_SAI_Init+0x2dc>)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e002      	b.n	8003f76 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003f70:	4a82      	ldr	r2, [pc, #520]	@ (800417c <HAL_SAI_Init+0x2e0>)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d04c      	beq.n	8004018 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a7a      	ldr	r2, [pc, #488]	@ (8004170 <HAL_SAI_Init+0x2d4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d004      	beq.n	8003f96 <HAL_SAI_Init+0xfa>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a78      	ldr	r2, [pc, #480]	@ (8004174 <HAL_SAI_Init+0x2d8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d104      	bne.n	8003fa0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003f96:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003f9a:	f7ff fe0b 	bl	8003bb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f9e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a76      	ldr	r2, [pc, #472]	@ (8004180 <HAL_SAI_Init+0x2e4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_SAI_Init+0x118>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a75      	ldr	r2, [pc, #468]	@ (8004184 <HAL_SAI_Init+0x2e8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d104      	bne.n	8003fbe <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003fb4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003fb8:	f7ff fdfc 	bl	8003bb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fbc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	461a      	mov	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	025b      	lsls	r3, r3, #9
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a6b      	ldr	r2, [pc, #428]	@ (8004188 <HAL_SAI_Init+0x2ec>)
 8003fda:	fba2 2303 	umull	r2, r3, r2, r3
 8003fde:	08da      	lsrs	r2, r3, #3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8003fe4:	68f9      	ldr	r1, [r7, #12]
 8003fe6:	4b68      	ldr	r3, [pc, #416]	@ (8004188 <HAL_SAI_Init+0x2ec>)
 8003fe8:	fba3 2301 	umull	r2, r3, r3, r1
 8003fec:	08da      	lsrs	r2, r3, #3
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	1aca      	subs	r2, r1, r3
 8003ff8:	2a08      	cmp	r2, #8
 8003ffa:	d904      	bls.n	8004006 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400a:	2b04      	cmp	r3, #4
 800400c:	d104      	bne.n	8004018 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	085a      	lsrs	r2, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_SAI_Init+0x18c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d109      	bne.n	800403c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_SAI_Init+0x198>
 8004030:	2300      	movs	r3, #0
 8004032:	e001      	b.n	8004038 <HAL_SAI_Init+0x19c>
 8004034:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	e008      	b.n	800404e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d102      	bne.n	800404a <HAL_SAI_Init+0x1ae>
 8004044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004048:	e000      	b.n	800404c <HAL_SAI_Init+0x1b0>
 800404a:	2300      	movs	r3, #0
 800404c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b4c      	ldr	r3, [pc, #304]	@ (800418c <HAL_SAI_Init+0x2f0>)
 800405a:	400b      	ands	r3, r1
 800405c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6819      	ldr	r1, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004072:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004078:	431a      	orrs	r2, r3
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8004086:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004092:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	051b      	lsls	r3, r3, #20
 800409a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b38      	ldr	r3, [pc, #224]	@ (8004190 <HAL_SAI_Init+0x2f4>)
 80040b0:	400b      	ands	r3, r1
 80040b2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6859      	ldr	r1, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6899      	ldr	r1, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004194 <HAL_SAI_Init+0x2f8>)
 80040de:	400b      	ands	r3, r1
 80040e0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6899      	ldr	r1, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ec:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80040f2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80040f8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80040fe:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004104:	3b01      	subs	r3, #1
 8004106:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004108:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68d9      	ldr	r1, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8004120:	400b      	ands	r3, r1
 8004122:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68d9      	ldr	r1, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004132:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004140:	3b01      	subs	r3, #1
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40015804 	.word	0x40015804
 8004174:	40015824 	.word	0x40015824
 8004178:	40015800 	.word	0x40015800
 800417c:	40015c00 	.word	0x40015c00
 8004180:	40015c04 	.word	0x40015c04
 8004184:	40015c24 	.word	0x40015c24
 8004188:	cccccccd 	.word	0xcccccccd
 800418c:	ff05c010 	.word	0xff05c010
 8004190:	ffff1ff0 	.word	0xffff1ff0
 8004194:	fff88000 	.word	0xfff88000

08004198 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <SAI_InitI2S+0x2a>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d103      	bne.n	80041ca <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80041c8:	e002      	b.n	80041d0 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80041d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041de:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e076      	b.n	80042e8 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d107      	bne.n	8004210 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800420c:	651a      	str	r2, [r3, #80]	@ 0x50
 800420e:	e006      	b.n	800421e <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004216:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d84f      	bhi.n	80042c4 <SAI_InitI2S+0x12c>
 8004224:	a201      	add	r2, pc, #4	@ (adr r2, 800422c <SAI_InitI2S+0x94>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	0800423d 	.word	0x0800423d
 8004230:	0800425f 	.word	0x0800425f
 8004234:	08004281 	.word	0x08004281
 8004238:	080042a3 	.word	0x080042a3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2280      	movs	r2, #128	@ 0x80
 8004240:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	085b      	lsrs	r3, r3, #1
 8004250:	011a      	lsls	r2, r3, #4
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2240      	movs	r2, #64	@ 0x40
 800425a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800425c:	e034      	b.n	80042c8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2280      	movs	r2, #128	@ 0x80
 8004262:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	019a      	lsls	r2, r3, #6
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	085b      	lsrs	r3, r3, #1
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2280      	movs	r2, #128	@ 0x80
 800427c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800427e:	e023      	b.n	80042c8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	22c0      	movs	r2, #192	@ 0xc0
 8004284:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	085b      	lsrs	r3, r3, #1
 800428a:	019a      	lsls	r2, r3, #6
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2280      	movs	r2, #128	@ 0x80
 800429e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80042a0:	e012      	b.n	80042c8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	22e0      	movs	r2, #224	@ 0xe0
 80042a6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	019a      	lsls	r2, r3, #6
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2280      	movs	r2, #128	@ 0x80
 80042c0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80042c2:	e001      	b.n	80042c8 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e00f      	b.n	80042e8 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d10b      	bne.n	80042e6 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d102      	bne.n	80042da <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2210      	movs	r2, #16
 80042d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d102      	bne.n	80042e6 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2208      	movs	r2, #8
 80042e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <SAI_InitPCM+0x2a>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d103      	bne.n	8004326 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004324:	e002      	b.n	800432c <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004338:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004340:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004354:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b04      	cmp	r3, #4
 800435a:	d103      	bne.n	8004364 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	645a      	str	r2, [r3, #68]	@ 0x44
 8004362:	e002      	b.n	800436a <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	220d      	movs	r2, #13
 8004368:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b03      	cmp	r3, #3
 800436e:	d837      	bhi.n	80043e0 <SAI_InitPCM+0xec>
 8004370:	a201      	add	r2, pc, #4	@ (adr r2, 8004378 <SAI_InitPCM+0x84>)
 8004372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004376:	bf00      	nop
 8004378:	08004389 	.word	0x08004389
 800437c:	0800439f 	.word	0x0800439f
 8004380:	080043b5 	.word	0x080043b5
 8004384:	080043cb 	.word	0x080043cb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2280      	movs	r2, #128	@ 0x80
 800438c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	011a      	lsls	r2, r3, #4
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2240      	movs	r2, #64	@ 0x40
 800439a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800439c:	e022      	b.n	80043e4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2280      	movs	r2, #128	@ 0x80
 80043a2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2280      	movs	r2, #128	@ 0x80
 80043b0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80043b2:	e017      	b.n	80043e4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	22c0      	movs	r2, #192	@ 0xc0
 80043b8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2280      	movs	r2, #128	@ 0x80
 80043c6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80043c8:	e00c      	b.n	80043e4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	22e0      	movs	r2, #224	@ 0xe0
 80043ce:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2280      	movs	r2, #128	@ 0x80
 80043dc:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80043de:	e001      	b.n	80043e4 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e000      	b.n	80043e6 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop

080043f4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80043fc:	4b17      	ldr	r3, [pc, #92]	@ (800445c <SAI_Disable+0x68>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a17      	ldr	r2, [pc, #92]	@ (8004460 <SAI_Disable+0x6c>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	0b1b      	lsrs	r3, r3, #12
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800441e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1e5a      	subs	r2, r3, #1
 8004424:	60fa      	str	r2, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004430:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	72fb      	strb	r3, [r7, #11]
      break;
 800443e:	e006      	b.n	800444e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e8      	bne.n	8004420 <SAI_Disable+0x2c>

  return status;
 800444e:	7afb      	ldrb	r3, [r7, #11]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	2000000c 	.word	0x2000000c
 8004460:	95cbec1b 	.word	0x95cbec1b

08004464 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e09d      	b.n	80045b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	2b00      	cmp	r3, #0
 800447c:	d108      	bne.n	8004490 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004486:	d009      	beq.n	800449c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	61da      	str	r2, [r3, #28]
 800448e:	e005      	b.n	800449c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fd f8e0 	bl	800167c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044dc:	d902      	bls.n	80044e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	e002      	b.n	80044ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80044f2:	d007      	beq.n	8004504 <HAL_SPI_Init+0xa0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044fc:	d002      	beq.n	8004504 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004546:	ea42 0103 	orr.w	r1, r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	0c1b      	lsrs	r3, r3, #16
 8004560:	f003 0204 	and.w	r2, r3, #4
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004580:	ea42 0103 	orr.w	r1, r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <memset>:
 80045ba:	4402      	add	r2, r0
 80045bc:	4603      	mov	r3, r0
 80045be:	4293      	cmp	r3, r2
 80045c0:	d100      	bne.n	80045c4 <memset+0xa>
 80045c2:	4770      	bx	lr
 80045c4:	f803 1b01 	strb.w	r1, [r3], #1
 80045c8:	e7f9      	b.n	80045be <memset+0x4>
	...

080045cc <__libc_init_array>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004604 <__libc_init_array+0x38>)
 80045d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004608 <__libc_init_array+0x3c>)
 80045d2:	1b64      	subs	r4, r4, r5
 80045d4:	10a4      	asrs	r4, r4, #2
 80045d6:	2600      	movs	r6, #0
 80045d8:	42a6      	cmp	r6, r4
 80045da:	d109      	bne.n	80045f0 <__libc_init_array+0x24>
 80045dc:	4d0b      	ldr	r5, [pc, #44]	@ (800460c <__libc_init_array+0x40>)
 80045de:	4c0c      	ldr	r4, [pc, #48]	@ (8004610 <__libc_init_array+0x44>)
 80045e0:	f000 f818 	bl	8004614 <_init>
 80045e4:	1b64      	subs	r4, r4, r5
 80045e6:	10a4      	asrs	r4, r4, #2
 80045e8:	2600      	movs	r6, #0
 80045ea:	42a6      	cmp	r6, r4
 80045ec:	d105      	bne.n	80045fa <__libc_init_array+0x2e>
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f4:	4798      	blx	r3
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7ee      	b.n	80045d8 <__libc_init_array+0xc>
 80045fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fe:	4798      	blx	r3
 8004600:	3601      	adds	r6, #1
 8004602:	e7f2      	b.n	80045ea <__libc_init_array+0x1e>
 8004604:	0800464c 	.word	0x0800464c
 8004608:	0800464c 	.word	0x0800464c
 800460c:	0800464c 	.word	0x0800464c
 8004610:	08004650 	.word	0x08004650

08004614 <_init>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr

08004620 <_fini>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	bf00      	nop
 8004624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004626:	bc08      	pop	{r3}
 8004628:	469e      	mov	lr, r3
 800462a:	4770      	bx	lr
