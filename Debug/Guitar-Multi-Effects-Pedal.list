
Guitar-Multi-Effects-Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e8  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080045b0  080045b0  000055b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c8  080045c8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080045c8  080045c8  000055c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045d0  080045d0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045d0  080045d0  000055d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045d4  080045d4  000055d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080045d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  2000000c  080045e4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  080045e4  00006384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de7b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229b  00000000  00000000  00013eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00016158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2e  00000000  00000000  00016e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002795  00000000  00000000  000178b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113f4  00000000  00000000  0001a04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec9d9  00000000  00000000  0002b43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117e18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000368c  00000000  00000000  00117e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0011b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004598 	.word	0x08004598

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004598 	.word	0x08004598

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f001 fa01 	bl	8001902 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f814 	bl	800052c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000504:	f000 f880 	bl	8000608 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fa50 	bl	80009ac <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 fa28 	bl	8000960 <MX_DMA_Init>
  MX_I2C2_Init();
 8000510:	f000 f8ae 	bl	8000670 <MX_I2C2_Init>
  MX_SAI2_Init();
 8000514:	f000 f982 	bl	800081c <MX_SAI2_Init>
  MX_SPI2_Init();
 8000518:	f000 f9e4 	bl	80008e4 <MX_SPI2_Init>
  MX_I2S3_Init();
 800051c:	f000 f952 	bl	80007c4 <MX_I2S3_Init>
  MX_I2S1_Init();
 8000520:	f000 f926 	bl	8000770 <MX_I2S1_Init>
  MX_I2C3_Init();
 8000524:	f000 f8e4 	bl	80006f0 <MX_I2C3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <main+0x30>

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	@ 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	@ 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f003 ffff 	bl	800453e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	4b2b      	ldr	r3, [pc, #172]	@ (8000600 <SystemClock_Config+0xd4>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	4a2a      	ldr	r2, [pc, #168]	@ (8000600 <SystemClock_Config+0xd4>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	@ 0x40
 800055c:	4b28      	ldr	r3, [pc, #160]	@ (8000600 <SystemClock_Config+0xd4>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	4b26      	ldr	r3, [pc, #152]	@ (8000604 <SystemClock_Config+0xd8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a25      	ldr	r2, [pc, #148]	@ (8000604 <SystemClock_Config+0xd8>)
 800056e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <SystemClock_Config+0xd8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000588:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000594:	2319      	movs	r3, #25
 8000596:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000598:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800059c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fa7e 	bl	8002aac <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005b6:	f000 fe07 	bl	80011c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005ba:	f002 fa27 	bl	8002a0c <HAL_PWREx_EnableOverDrive>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005c4:	f000 fe00 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2106      	movs	r1, #6
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fd04 	bl	8002ff4 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005f2:	f000 fde9 	bl	80011c8 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	@ 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b0a2      	sub	sp, #136	@ 0x88
 800060c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2284      	movs	r2, #132	@ 0x84
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f003 ff92 	bl	800453e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2S;
 800061a:	4b14      	ldr	r3, [pc, #80]	@ (800066c <PeriphCommonClock_Config+0x64>)
 800061c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800061e:	23c0      	movs	r3, #192	@ 0xc0
 8000620:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800062a:	2302      	movs	r3, #2
 800062c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800062e:	23c0      	movs	r3, #192	@ 0xc0
 8000630:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000632:	2302      	movs	r3, #2
 8000634:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000636:	2302      	movs	r3, #2
 8000638:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800063e:	2301      	movs	r3, #1
 8000640:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000646:	2300      	movs	r3, #0
 8000648:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 800064a:	2300      	movs	r3, #0
 800064c:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800064e:	2300      	movs	r3, #0
 8000650:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fe7f 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000660:	f000 fdb2 	bl	80011c8 <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3788      	adds	r7, #136	@ 0x88
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	00100001 	.word	0x00100001

08000670 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000674:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <MX_I2C2_Init+0x74>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	@ (80006e8 <MX_I2C2_Init+0x78>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 800067a:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_I2C2_Init+0x74>)
 800067c:	4a1b      	ldr	r2, [pc, #108]	@ (80006ec <MX_I2C2_Init+0x7c>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000680:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <MX_I2C2_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_I2C2_Init+0x74>)
 8000688:	2201      	movs	r2, #1
 800068a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_I2C2_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_I2C2_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_I2C2_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_I2C2_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_I2C2_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006aa:	480e      	ldr	r0, [pc, #56]	@ (80006e4 <MX_I2C2_Init+0x74>)
 80006ac:	f001 ff48 	bl	8002540 <HAL_I2C_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006b6:	f000 fd87 	bl	80011c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ba:	2100      	movs	r1, #0
 80006bc:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <MX_I2C2_Init+0x74>)
 80006be:	f001 ffdb 	bl	8002678 <HAL_I2CEx_ConfigAnalogFilter>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006c8:	f000 fd7e 	bl	80011c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_I2C2_Init+0x74>)
 80006d0:	f002 f81d 	bl	800270e <HAL_I2CEx_ConfigDigitalFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006da:	f000 fd75 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000028 	.word	0x20000028
 80006e8:	40005800 	.word	0x40005800
 80006ec:	00c0eaff 	.word	0x00c0eaff

080006f0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <MX_I2C3_Init+0x74>)
 80006f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000768 <MX_I2C3_Init+0x78>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <MX_I2C3_Init+0x74>)
 80006fc:	4a1b      	ldr	r2, [pc, #108]	@ (800076c <MX_I2C3_Init+0x7c>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000700:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <MX_I2C3_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <MX_I2C3_Init+0x74>)
 8000708:	2201      	movs	r2, #1
 800070a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <MX_I2C3_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <MX_I2C3_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <MX_I2C3_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_I2C3_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MX_I2C3_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800072a:	480e      	ldr	r0, [pc, #56]	@ (8000764 <MX_I2C3_Init+0x74>)
 800072c:	f001 ff08 	bl	8002540 <HAL_I2C_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000736:	f000 fd47 	bl	80011c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073a:	2100      	movs	r1, #0
 800073c:	4809      	ldr	r0, [pc, #36]	@ (8000764 <MX_I2C3_Init+0x74>)
 800073e:	f001 ff9b 	bl	8002678 <HAL_I2CEx_ConfigAnalogFilter>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000748:	f000 fd3e 	bl	80011c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_I2C3_Init+0x74>)
 8000750:	f001 ffdd 	bl	800270e <HAL_I2CEx_ConfigDigitalFilter>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800075a:	f000 fd35 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000007c 	.word	0x2000007c
 8000768:	40005c00 	.word	0x40005c00
 800076c:	00c0eaff 	.word	0x00c0eaff

08000770 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_I2S1_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <MX_I2S1_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_I2S1_Init+0x4c>)
 800077c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000780:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_I2S1_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_I2S1_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_I2S1_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_I2S1_Init+0x4c>)
 8000796:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800079a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <MX_I2S1_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_I2S1_Init+0x4c>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_I2S1_Init+0x4c>)
 80007aa:	f001 fffd 	bl	80027a8 <HAL_I2S_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 80007b4:	f000 fd08 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000d0 	.word	0x200000d0
 80007c0:	40013000 	.word	0x40013000

080007c4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_I2S3_Init+0x50>)
 80007ca:	4a13      	ldr	r2, [pc, #76]	@ (8000818 <MX_I2S3_Init+0x54>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_I2S3_Init+0x50>)
 80007d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_I2S3_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <MX_I2S3_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_I2S3_Init+0x50>)
 80007e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007e8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80007ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <MX_I2S3_Init+0x50>)
 80007ec:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80007f0:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_I2S3_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_I2S3_Init+0x50>)
 80007fa:	2202      	movs	r2, #2
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_I2S3_Init+0x50>)
 8000800:	f001 ffd2 	bl	80027a8 <HAL_I2S_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2S3_Init+0x4a>
  {
    Error_Handler();
 800080a:	f000 fcdd 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000110 	.word	0x20000110
 8000818:	40003c00 	.word	0x40003c00

0800081c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000820:	4b2c      	ldr	r3, [pc, #176]	@ (80008d4 <MX_SAI2_Init+0xb8>)
 8000822:	4a2d      	ldr	r2, [pc, #180]	@ (80008d8 <MX_SAI2_Init+0xbc>)
 8000824:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
 8000826:	4b2b      	ldr	r3, [pc, #172]	@ (80008d4 <MX_SAI2_Init+0xb8>)
 8000828:	2201      	movs	r2, #1
 800082a:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800082c:	4b29      	ldr	r3, [pc, #164]	@ (80008d4 <MX_SAI2_Init+0xb8>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000832:	4b28      	ldr	r3, [pc, #160]	@ (80008d4 <MX_SAI2_Init+0xb8>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000838:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <MX_SAI2_Init+0xb8>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800083e:	4b25      	ldr	r3, [pc, #148]	@ (80008d4 <MX_SAI2_Init+0xb8>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000844:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <MX_SAI2_Init+0xb8>)
 8000846:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800084a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800084c:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <MX_SAI2_Init+0xb8>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000852:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <MX_SAI2_Init+0xb8>)
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000858:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <MX_SAI2_Init+0xb8>)
 800085a:	2200      	movs	r2, #0
 800085c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800085e:	2302      	movs	r3, #2
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	481b      	ldr	r0, [pc, #108]	@ (80008d4 <MX_SAI2_Init+0xb8>)
 8000866:	f003 faa7 	bl	8003db8 <HAL_SAI_InitProtocol>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_SAI2_Init+0x58>
  {
    Error_Handler();
 8000870:	f000 fcaa 	bl	80011c8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000874:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <MX_SAI2_Init+0xc0>)
 8000876:	4a1a      	ldr	r2, [pc, #104]	@ (80008e0 <MX_SAI2_Init+0xc4>)
 8000878:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <MX_SAI2_Init+0xc0>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000880:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <MX_SAI2_Init+0xc0>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_SAI2_Init+0xc0>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_SAI2_Init+0xc0>)
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_SAI2_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_SAI2_Init+0xc0>)
 800089a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800089e:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_SAI2_Init+0xc0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80008a6:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <MX_SAI2_Init+0xc0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80008ac:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_SAI2_Init+0xc0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80008b2:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <MX_SAI2_Init+0xc0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80008b8:	2302      	movs	r3, #2
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	4807      	ldr	r0, [pc, #28]	@ (80008dc <MX_SAI2_Init+0xc0>)
 80008c0:	f003 fa7a 	bl	8003db8 <HAL_SAI_InitProtocol>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_SAI2_Init+0xb2>
  {
    Error_Handler();
 80008ca:	f000 fc7d 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000150 	.word	0x20000150
 80008d8:	40015c04 	.word	0x40015c04
 80008dc:	200001d4 	.word	0x200001d4
 80008e0:	40015c24 	.word	0x40015c24

080008e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <MX_SPI2_Init+0x74>)
 80008ea:	4a1c      	ldr	r2, [pc, #112]	@ (800095c <MX_SPI2_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_SPI2_Init+0x74>)
 80008f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008f6:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <MX_SPI2_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80008fc:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <MX_SPI2_Init+0x74>)
 80008fe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000902:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000904:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_SPI2_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090a:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <MX_SPI2_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000910:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <MX_SPI2_Init+0x74>)
 8000912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000916:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_SPI2_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <MX_SPI2_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000924:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <MX_SPI2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <MX_SPI2_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000930:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <MX_SPI2_Init+0x74>)
 8000932:	2207      	movs	r2, #7
 8000934:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000936:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <MX_SPI2_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <MX_SPI2_Init+0x74>)
 800093e:	2208      	movs	r2, #8
 8000940:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_SPI2_Init+0x74>)
 8000944:	f003 fd50 	bl	80043e8 <HAL_SPI_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800094e:	f000 fc3b 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000318 	.word	0x20000318
 800095c:	40003800 	.word	0x40003800

08000960 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <MX_DMA_Init+0x48>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <MX_DMA_Init+0x48>)
 800096c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <MX_DMA_Init+0x48>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	203c      	movs	r0, #60	@ 0x3c
 8000984:	f001 f8f5 	bl	8001b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000988:	203c      	movs	r0, #60	@ 0x3c
 800098a:	f001 f90e 	bl	8001baa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	2045      	movs	r0, #69	@ 0x45
 8000994:	f001 f8ed 	bl	8001b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000998:	2045      	movs	r0, #69	@ 0x45
 800099a:	f001 f906 	bl	8001baa <HAL_NVIC_EnableIRQ>

}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b090      	sub	sp, #64	@ 0x40
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c2:	4bad      	ldr	r3, [pc, #692]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4aac      	ldr	r2, [pc, #688]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4baa      	ldr	r3, [pc, #680]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0310 	and.w	r3, r3, #16
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009da:	4ba7      	ldr	r3, [pc, #668]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4aa6      	ldr	r2, [pc, #664]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 80009e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4ba4      	ldr	r3, [pc, #656]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80009f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4ba1      	ldr	r3, [pc, #644]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4aa0      	ldr	r2, [pc, #640]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b9e      	ldr	r3, [pc, #632]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
 8000a08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	4b9b      	ldr	r3, [pc, #620]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a9a      	ldr	r2, [pc, #616]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b98      	ldr	r3, [pc, #608]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	61fb      	str	r3, [r7, #28]
 8000a20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b95      	ldr	r3, [pc, #596]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a94      	ldr	r2, [pc, #592]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b92      	ldr	r3, [pc, #584]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	61bb      	str	r3, [r7, #24]
 8000a38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b8f      	ldr	r3, [pc, #572]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a8e      	ldr	r2, [pc, #568]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b8c      	ldr	r3, [pc, #560]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a52:	4b89      	ldr	r3, [pc, #548]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a88      	ldr	r2, [pc, #544]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b86      	ldr	r3, [pc, #536]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a6a:	4b83      	ldr	r3, [pc, #524]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a82      	ldr	r2, [pc, #520]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b80      	ldr	r3, [pc, #512]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a82:	4b7d      	ldr	r3, [pc, #500]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a7c      	ldr	r2, [pc, #496]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b7a      	ldr	r3, [pc, #488]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9a:	4b77      	ldr	r3, [pc, #476]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a76      	ldr	r2, [pc, #472]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000aa0:	f043 0320 	orr.w	r3, r3, #32
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b74      	ldr	r3, [pc, #464]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0320 	and.w	r3, r3, #32
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	4b71      	ldr	r3, [pc, #452]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a70      	ldr	r2, [pc, #448]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b6e      	ldr	r3, [pc, #440]	@ (8000c78 <MX_GPIO_Init+0x2cc>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2120      	movs	r1, #32
 8000ace:	486b      	ldr	r0, [pc, #428]	@ (8000c7c <MX_GPIO_Init+0x2d0>)
 8000ad0:	f001 fd1c 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000ada:	4869      	ldr	r0, [pc, #420]	@ (8000c80 <MX_GPIO_Init+0x2d4>)
 8000adc:	f001 fd16 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2108      	movs	r1, #8
 8000ae4:	4867      	ldr	r0, [pc, #412]	@ (8000c84 <MX_GPIO_Init+0x2d8>)
 8000ae6:	f001 fd11 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af0:	4865      	ldr	r0, [pc, #404]	@ (8000c88 <MX_GPIO_Init+0x2dc>)
 8000af2:	f001 fd0b 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	21c8      	movs	r1, #200	@ 0xc8
 8000afa:	4864      	ldr	r0, [pc, #400]	@ (8000c8c <MX_GPIO_Init+0x2e0>)
 8000afc:	f001 fd06 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000b00:	2310      	movs	r3, #16
 8000b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b10:	230e      	movs	r3, #14
 8000b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	485d      	ldr	r0, [pc, #372]	@ (8000c90 <MX_GPIO_Init+0x2e4>)
 8000b1c:	f001 fb4a 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000b20:	2308      	movs	r3, #8
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b30:	4619      	mov	r1, r3
 8000b32:	4857      	ldr	r0, [pc, #348]	@ (8000c90 <MX_GPIO_Init+0x2e4>)
 8000b34:	f001 fb3e 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b48:	2309      	movs	r3, #9
 8000b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b50:	4619      	mov	r1, r3
 8000b52:	484f      	ldr	r0, [pc, #316]	@ (8000c90 <MX_GPIO_Init+0x2e4>)
 8000b54:	f001 fb2e 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000b58:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6a:	230b      	movs	r3, #11
 8000b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b72:	4619      	mov	r1, r3
 8000b74:	4845      	ldr	r0, [pc, #276]	@ (8000c8c <MX_GPIO_Init+0x2e0>)
 8000b76:	f001 fb1d 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000b7a:	f64d 7383 	movw	r3, #57219	@ 0xdf83
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b94:	4619      	mov	r1, r3
 8000b96:	483e      	ldr	r0, [pc, #248]	@ (8000c90 <MX_GPIO_Init+0x2e4>)
 8000b98:	f001 fb0c 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000b9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba2:	2312      	movs	r3, #18
 8000ba4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4836      	ldr	r0, [pc, #216]	@ (8000c94 <MX_GPIO_Init+0x2e8>)
 8000bba:	f001 fafb 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D3_Pin ULPI_D2_Pin ULPI_D1_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D2_Pin|ULPI_D1_Pin;
 8000bbe:	f240 4323 	movw	r3, #1059	@ 0x423
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000bd0:	230a      	movs	r3, #10
 8000bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	482e      	ldr	r0, [pc, #184]	@ (8000c94 <MX_GPIO_Init+0x2e8>)
 8000bdc:	f001 faea 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000be0:	2310      	movs	r3, #16
 8000be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4826      	ldr	r0, [pc, #152]	@ (8000c94 <MX_GPIO_Init+0x2e8>)
 8000bfc:	f001 fada 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000c00:	2380      	movs	r3, #128	@ 0x80
 8000c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000c10:	2308      	movs	r3, #8
 8000c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4818      	ldr	r0, [pc, #96]	@ (8000c7c <MX_GPIO_Init+0x2d0>)
 8000c1c:	f001 faca 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D6_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8000c20:	2320      	movs	r3, #32
 8000c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c30:	230d      	movs	r3, #13
 8000c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4815      	ldr	r0, [pc, #84]	@ (8000c90 <MX_GPIO_Init+0x2e4>)
 8000c3c:	f001 faba 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c40:	2380      	movs	r3, #128	@ 0x80
 8000c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c50:	2307      	movs	r3, #7
 8000c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480e      	ldr	r0, [pc, #56]	@ (8000c94 <MX_GPIO_Init+0x2e8>)
 8000c5c:	f001 faaa 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000c60:	2340      	movs	r3, #64	@ 0x40
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c70:	230a      	movs	r3, #10
 8000c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c74:	e010      	b.n	8000c98 <MX_GPIO_Init+0x2ec>
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020c00 	.word	0x40020c00
 8000c80:	40022000 	.word	0x40022000
 8000c84:	40022800 	.word	0x40022800
 8000c88:	40021c00 	.word	0x40021c00
 8000c8c:	40021800 	.word	0x40021800
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40020400 	.word	0x40020400
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	48bd      	ldr	r0, [pc, #756]	@ (8000f94 <MX_GPIO_Init+0x5e8>)
 8000ca0:	f001 fa88 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000ca4:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	48b5      	ldr	r0, [pc, #724]	@ (8000f98 <MX_GPIO_Init+0x5ec>)
 8000cc2:	f001 fa77 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000cc6:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cd8:	230e      	movs	r3, #14
 8000cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	48ae      	ldr	r0, [pc, #696]	@ (8000f9c <MX_GPIO_Init+0x5f0>)
 8000ce4:	f001 fa66 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	48a7      	ldr	r0, [pc, #668]	@ (8000f9c <MX_GPIO_Init+0x5f0>)
 8000cfe:	f001 fa59 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000d02:	2340      	movs	r3, #64	@ 0x40
 8000d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d06:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d14:	4619      	mov	r1, r3
 8000d16:	48a2      	ldr	r0, [pc, #648]	@ (8000fa0 <MX_GPIO_Init+0x5f4>)
 8000d18:	f001 fa4c 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000d1c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d36:	4619      	mov	r1, r3
 8000d38:	4899      	ldr	r0, [pc, #612]	@ (8000fa0 <MX_GPIO_Init+0x5f4>)
 8000d3a:	f001 fa3b 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin PC8 */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|GPIO_PIN_8;
 8000d3e:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d50:	230c      	movs	r3, #12
 8000d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4892      	ldr	r0, [pc, #584]	@ (8000fa4 <MX_GPIO_Init+0x5f8>)
 8000d5c:	f001 fa2a 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000d60:	23f7      	movs	r3, #247	@ 0xf7
 8000d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d70:	230e      	movs	r3, #14
 8000d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000d74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d78:	4619      	mov	r1, r3
 8000d7a:	488b      	ldr	r0, [pc, #556]	@ (8000fa8 <MX_GPIO_Init+0x5fc>)
 8000d7c:	f001 fa1a 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000d80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d92:	2309      	movs	r3, #9
 8000d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	487e      	ldr	r0, [pc, #504]	@ (8000f98 <MX_GPIO_Init+0x5ec>)
 8000d9e:	f001 fa09 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000da2:	2320      	movs	r3, #32
 8000da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db6:	4619      	mov	r1, r3
 8000db8:	4879      	ldr	r0, [pc, #484]	@ (8000fa0 <MX_GPIO_Init+0x5f4>)
 8000dba:	f001 f9fb 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000dbe:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000dd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4875      	ldr	r0, [pc, #468]	@ (8000fac <MX_GPIO_Init+0x600>)
 8000dd8:	f001 f9ec 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000ddc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dee:	230a      	movs	r3, #10
 8000df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df6:	4619      	mov	r1, r3
 8000df8:	486d      	ldr	r0, [pc, #436]	@ (8000fb0 <MX_GPIO_Init+0x604>)
 8000dfa:	f001 f9db 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000dfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e10:	4619      	mov	r1, r3
 8000e12:	4864      	ldr	r0, [pc, #400]	@ (8000fa4 <MX_GPIO_Init+0x5f8>)
 8000e14:	f001 f9ce 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000e18:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e2a:	230e      	movs	r3, #14
 8000e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e32:	4619      	mov	r1, r3
 8000e34:	485d      	ldr	r0, [pc, #372]	@ (8000fac <MX_GPIO_Init+0x600>)
 8000e36:	f001 f9bd 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4855      	ldr	r0, [pc, #340]	@ (8000fa8 <MX_GPIO_Init+0x5fc>)
 8000e52:	f001 f9af 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e56:	2310      	movs	r3, #16
 8000e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e66:	4619      	mov	r1, r3
 8000e68:	484d      	ldr	r0, [pc, #308]	@ (8000fa0 <MX_GPIO_Init+0x5f4>)
 8000e6a:	f001 f9a3 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e7e:	230c      	movs	r3, #12
 8000e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e86:	4619      	mov	r1, r3
 8000e88:	4845      	ldr	r0, [pc, #276]	@ (8000fa0 <MX_GPIO_Init+0x5f4>)
 8000e8a:	f001 f993 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP3_Pin */
  GPIO_InitStruct.Pin = TP3_Pin;
 8000e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TP3_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4844      	ldr	r0, [pc, #272]	@ (8000fb4 <MX_GPIO_Init+0x608>)
 8000ea4:	f001 f986 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A1_Pin FMC_A3_Pin FMC_A4_Pin FMC_A5_Pin
                           FMC_A6_Pin FMC_A9_Pin FMC_A7_Pin FMC_A8_Pin
                           FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A1_Pin|FMC_A3_Pin|FMC_A4_Pin|FMC_A5_Pin
 8000ea8:	f64f 033a 	movw	r3, #63546	@ 0xf83a
 8000eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_A7_Pin|FMC_A8_Pin
                          |FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eba:	230c      	movs	r3, #12
 8000ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ebe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	483c      	ldr	r0, [pc, #240]	@ (8000fb8 <MX_GPIO_Init+0x60c>)
 8000ec6:	f001 f975 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000eca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4834      	ldr	r0, [pc, #208]	@ (8000fb4 <MX_GPIO_Init+0x608>)
 8000ee4:	f001 f966 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000ee8:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000efa:	230d      	movs	r3, #13
 8000efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000efe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f02:	4619      	mov	r1, r3
 8000f04:	482b      	ldr	r0, [pc, #172]	@ (8000fb4 <MX_GPIO_Init+0x608>)
 8000f06:	f001 f955 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f24:	4619      	mov	r1, r3
 8000f26:	4822      	ldr	r0, [pc, #136]	@ (8000fb0 <MX_GPIO_Init+0x604>)
 8000f28:	f001 f944 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f46:	4619      	mov	r1, r3
 8000f48:	4816      	ldr	r0, [pc, #88]	@ (8000fa4 <MX_GPIO_Init+0x5f8>)
 8000f4a:	f001 f933 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000f4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4811      	ldr	r0, [pc, #68]	@ (8000fb0 <MX_GPIO_Init+0x604>)
 8000f6c:	f001 f922 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000f70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f76:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f84:	4619      	mov	r1, r3
 8000f86:	4809      	ldr	r0, [pc, #36]	@ (8000fac <MX_GPIO_Init+0x600>)
 8000f88:	f001 f914 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8000f8c:	2348      	movs	r3, #72	@ 0x48
 8000f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	e013      	b.n	8000fbc <MX_GPIO_Init+0x610>
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	40022400 	.word	0x40022400
 8000fa0:	40020c00 	.word	0x40020c00
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40022800 	.word	0x40022800
 8000fac:	40022000 	.word	0x40022000
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40021c00 	.word	0x40021c00
 8000fb8:	40021400 	.word	0x40021400
 8000fbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4876      	ldr	r0, [pc, #472]	@ (80011ac <MX_GPIO_Init+0x800>)
 8000fd2:	f001 f8ef 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000fd6:	2328      	movs	r3, #40	@ 0x28
 8000fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fee:	4619      	mov	r1, r3
 8000ff0:	486f      	ldr	r0, [pc, #444]	@ (80011b0 <MX_GPIO_Init+0x804>)
 8000ff2:	f001 f8df 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000ff6:	23c8      	movs	r3, #200	@ 0xc8
 8000ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001006:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800100a:	4619      	mov	r1, r3
 800100c:	4869      	ldr	r0, [pc, #420]	@ (80011b4 <MX_GPIO_Init+0x808>)
 800100e:	f001 f8d1 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A3_Pin;
 8001012:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001018:	2303      	movs	r3, #3
 800101a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001020:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001024:	4619      	mov	r1, r3
 8001026:	4864      	ldr	r0, [pc, #400]	@ (80011b8 <MX_GPIO_Init+0x80c>)
 8001028:	f001 f8c4 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800102c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800103e:	2305      	movs	r3, #5
 8001040:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001046:	4619      	mov	r1, r3
 8001048:	485c      	ldr	r0, [pc, #368]	@ (80011bc <MX_GPIO_Init+0x810>)
 800104a:	f001 f8b3 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800104e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001060:	2306      	movs	r3, #6
 8001062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001064:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001068:	4619      	mov	r1, r3
 800106a:	4853      	ldr	r0, [pc, #332]	@ (80011b8 <MX_GPIO_Init+0x80c>)
 800106c:	f001 f8a2 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001070:	2305      	movs	r3, #5
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001080:	230a      	movs	r3, #10
 8001082:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001084:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001088:	4619      	mov	r1, r3
 800108a:	4848      	ldr	r0, [pc, #288]	@ (80011ac <MX_GPIO_Init+0x800>)
 800108c:	f001 f892 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin;
 8001090:	2322      	movs	r3, #34	@ 0x22
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a0:	230b      	movs	r3, #11
 80010a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a8:	4619      	mov	r1, r3
 80010aa:	4840      	ldr	r0, [pc, #256]	@ (80011ac <MX_GPIO_Init+0x800>)
 80010ac:	f001 f882 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010b0:	2304      	movs	r3, #4
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010c0:	2309      	movs	r3, #9
 80010c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010c8:	4619      	mov	r1, r3
 80010ca:	483c      	ldr	r0, [pc, #240]	@ (80011bc <MX_GPIO_Init+0x810>)
 80010cc:	f001 f872 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80010d0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80010d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010e2:	2309      	movs	r3, #9
 80010e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ea:	4619      	mov	r1, r3
 80010ec:	4834      	ldr	r0, [pc, #208]	@ (80011c0 <MX_GPIO_Init+0x814>)
 80010ee:	f001 f861 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80010f2:	2304      	movs	r3, #4
 80010f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f6:	2300      	movs	r3, #0
 80010f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001102:	4619      	mov	r1, r3
 8001104:	482b      	ldr	r0, [pc, #172]	@ (80011b4 <MX_GPIO_Init+0x808>)
 8001106:	f001 f855 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_REF_CLK_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin;
 800110a:	2302      	movs	r3, #2
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800111a:	230b      	movs	r3, #11
 800111c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(RMII_REF_CLK_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001122:	4619      	mov	r1, r3
 8001124:	4827      	ldr	r0, [pc, #156]	@ (80011c4 <MX_GPIO_Init+0x818>)
 8001126:	f001 f845 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800112a:	2301      	movs	r3, #1
 800112c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800113a:	4619      	mov	r1, r3
 800113c:	4821      	ldr	r0, [pc, #132]	@ (80011c4 <MX_GPIO_Init+0x818>)
 800113e:	f001 f839 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001142:	2340      	movs	r3, #64	@ 0x40
 8001144:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001152:	230d      	movs	r3, #13
 8001154:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800115a:	4619      	mov	r1, r3
 800115c:	4819      	ldr	r0, [pc, #100]	@ (80011c4 <MX_GPIO_Init+0x818>)
 800115e:	f001 f829 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001162:	2340      	movs	r3, #64	@ 0x40
 8001164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001172:	2309      	movs	r3, #9
 8001174:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800117a:	4619      	mov	r1, r3
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <MX_GPIO_Init+0x804>)
 800117e:	f001 f819 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_D0_Pin;
 8001182:	2308      	movs	r3, #8
 8001184:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001192:	230a      	movs	r3, #10
 8001194:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D0_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800119a:	4619      	mov	r1, r3
 800119c:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <MX_GPIO_Init+0x818>)
 800119e:	f001 f809 	bl	80021b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a2:	bf00      	nop
 80011a4:	3740      	adds	r7, #64	@ 0x40
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40021c00 	.word	0x40021c00
 80011b4:	40021800 	.word	0x40021800
 80011b8:	40021400 	.word	0x40021400
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	40020000 	.word	0x40020000

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <Error_Handler+0x8>

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <HAL_MspInit+0x44>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <HAL_MspInit+0x44>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <HAL_MspInit+0x44>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <HAL_MspInit+0x44>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	4a08      	ldr	r2, [pc, #32]	@ (8001218 <HAL_MspInit+0x44>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_MspInit+0x44>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0ae      	sub	sp, #184	@ 0xb8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	2284      	movs	r2, #132	@ 0x84
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f003 f97e 	bl	800453e <memset>
  if(hi2c->Instance==I2C2)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a54      	ldr	r2, [pc, #336]	@ (8001398 <HAL_I2C_MspInit+0x17c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d15e      	bne.n	800130a <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800124c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001250:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001258:	f107 0320 	add.w	r3, r7, #32
 800125c:	4618      	mov	r0, r3
 800125e:	f002 f87b 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001268:	f7ff ffae 	bl	80011c8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800126c:	4b4b      	ldr	r3, [pc, #300]	@ (800139c <HAL_I2C_MspInit+0x180>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001270:	4a4a      	ldr	r2, [pc, #296]	@ (800139c <HAL_I2C_MspInit+0x180>)
 8001272:	f043 0320 	orr.w	r3, r3, #32
 8001276:	6313      	str	r3, [r2, #48]	@ 0x30
 8001278:	4b48      	ldr	r3, [pc, #288]	@ (800139c <HAL_I2C_MspInit+0x180>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127c:	f003 0320 	and.w	r3, r3, #32
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001284:	4b45      	ldr	r3, [pc, #276]	@ (800139c <HAL_I2C_MspInit+0x180>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001288:	4a44      	ldr	r2, [pc, #272]	@ (800139c <HAL_I2C_MspInit+0x180>)
 800128a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800128e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001290:	4b42      	ldr	r3, [pc, #264]	@ (800139c <HAL_I2C_MspInit+0x180>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF2     ------> I2C2_SMBA
    PH4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800129c:	2305      	movs	r3, #5
 800129e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a2:	2312      	movs	r3, #18
 80012a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012b4:	2304      	movs	r3, #4
 80012b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012be:	4619      	mov	r1, r3
 80012c0:	4837      	ldr	r0, [pc, #220]	@ (80013a0 <HAL_I2C_MspInit+0x184>)
 80012c2:	f000 ff77 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012c6:	2310      	movs	r3, #16
 80012c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012cc:	2312      	movs	r3, #18
 80012ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012de:	2304      	movs	r3, #4
 80012e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012e8:	4619      	mov	r1, r3
 80012ea:	482e      	ldr	r0, [pc, #184]	@ (80013a4 <HAL_I2C_MspInit+0x188>)
 80012ec:	f000 ff62 	bl	80021b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012f0:	4b2a      	ldr	r3, [pc, #168]	@ (800139c <HAL_I2C_MspInit+0x180>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	4a29      	ldr	r2, [pc, #164]	@ (800139c <HAL_I2C_MspInit+0x180>)
 80012f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fc:	4b27      	ldr	r3, [pc, #156]	@ (800139c <HAL_I2C_MspInit+0x180>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001308:	e042      	b.n	8001390 <HAL_I2C_MspInit+0x174>
  else if(hi2c->Instance==I2C3)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a26      	ldr	r2, [pc, #152]	@ (80013a8 <HAL_I2C_MspInit+0x18c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d13d      	bne.n	8001390 <HAL_I2C_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001314:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001318:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	4618      	mov	r0, r3
 8001326:	f002 f817 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001330:	f7ff ff4a 	bl	80011c8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001334:	4b19      	ldr	r3, [pc, #100]	@ (800139c <HAL_I2C_MspInit+0x180>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001338:	4a18      	ldr	r2, [pc, #96]	@ (800139c <HAL_I2C_MspInit+0x180>)
 800133a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800133e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001340:	4b16      	ldr	r3, [pc, #88]	@ (800139c <HAL_I2C_MspInit+0x180>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800134c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001350:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001354:	2312      	movs	r3, #18
 8001356:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001366:	2304      	movs	r3, #4
 8001368:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800136c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001370:	4619      	mov	r1, r3
 8001372:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <HAL_I2C_MspInit+0x188>)
 8001374:	f000 ff1e 	bl	80021b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001378:	4b08      	ldr	r3, [pc, #32]	@ (800139c <HAL_I2C_MspInit+0x180>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	4a07      	ldr	r2, [pc, #28]	@ (800139c <HAL_I2C_MspInit+0x180>)
 800137e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001382:	6413      	str	r3, [r2, #64]	@ 0x40
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <HAL_I2C_MspInit+0x180>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	bf00      	nop
 8001392:	37b8      	adds	r7, #184	@ 0xb8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40005800 	.word	0x40005800
 800139c:	40023800 	.word	0x40023800
 80013a0:	40021400 	.word	0x40021400
 80013a4:	40021c00 	.word	0x40021c00
 80013a8:	40005c00 	.word	0x40005c00

080013ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	@ 0x38
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a4b      	ldr	r2, [pc, #300]	@ (80014f8 <HAL_I2S_MspInit+0x14c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d145      	bne.n	800145a <HAL_I2S_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ce:	4b4b      	ldr	r3, [pc, #300]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	4a4a      	ldr	r2, [pc, #296]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 80013d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013da:	4b48      	ldr	r3, [pc, #288]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013e2:	623b      	str	r3, [r7, #32]
 80013e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b45      	ldr	r3, [pc, #276]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a44      	ldr	r2, [pc, #272]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b42      	ldr	r3, [pc, #264]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b3f      	ldr	r3, [pc, #252]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a3e      	ldr	r2, [pc, #248]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b3c      	ldr	r3, [pc, #240]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	69bb      	ldr	r3, [r7, #24]
    PA15     ------> I2S1_WS
    PC4     ------> I2S1_MCK
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8001416:	f248 03a0 	movw	r3, #32928	@ 0x80a0
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001428:	2305      	movs	r3, #5
 800142a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	4833      	ldr	r0, [pc, #204]	@ (8001500 <HAL_I2S_MspInit+0x154>)
 8001434:	f000 febe 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001438:	2310      	movs	r3, #16
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001448:	2305      	movs	r3, #5
 800144a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	482c      	ldr	r0, [pc, #176]	@ (8001504 <HAL_I2S_MspInit+0x158>)
 8001454:	f000 feae 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001458:	e049      	b.n	80014ee <HAL_I2S_MspInit+0x142>
  else if(hi2s->Instance==SPI3)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a2a      	ldr	r2, [pc, #168]	@ (8001508 <HAL_I2S_MspInit+0x15c>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d144      	bne.n	80014ee <HAL_I2S_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001464:	4b25      	ldr	r3, [pc, #148]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	4a24      	ldr	r2, [pc, #144]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 800146a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800146e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001470:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147c:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001480:	4a1e      	ldr	r2, [pc, #120]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6313      	str	r3, [r2, #48]	@ 0x30
 8001488:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001498:	4a18      	ldr	r2, [pc, #96]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <HAL_I2S_MspInit+0x150>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_7;
 80014ac:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014be:	2306      	movs	r3, #6
 80014c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	480e      	ldr	r0, [pc, #56]	@ (8001504 <HAL_I2S_MspInit+0x158>)
 80014ca:	f000 fe73 	bl	80021b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014ce:	2310      	movs	r3, #16
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014de:	2306      	movs	r3, #6
 80014e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	@ (8001500 <HAL_I2S_MspInit+0x154>)
 80014ea:	f000 fe63 	bl	80021b4 <HAL_GPIO_Init>
}
 80014ee:	bf00      	nop
 80014f0:	3738      	adds	r7, #56	@ 0x38
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40013000 	.word	0x40013000
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020800 	.word	0x40020800
 8001508:	40003c00 	.word	0x40003c00

0800150c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	@ 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a25      	ldr	r2, [pc, #148]	@ (80015c0 <HAL_SPI_MspInit+0xb4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d144      	bne.n	80015b8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800152e:	4b25      	ldr	r3, [pc, #148]	@ (80015c4 <HAL_SPI_MspInit+0xb8>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	4a24      	ldr	r2, [pc, #144]	@ (80015c4 <HAL_SPI_MspInit+0xb8>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001538:	6413      	str	r3, [r2, #64]	@ 0x40
 800153a:	4b22      	ldr	r3, [pc, #136]	@ (80015c4 <HAL_SPI_MspInit+0xb8>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001546:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <HAL_SPI_MspInit+0xb8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a1e      	ldr	r2, [pc, #120]	@ (80015c4 <HAL_SPI_MspInit+0xb8>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b1c      	ldr	r3, [pc, #112]	@ (80015c4 <HAL_SPI_MspInit+0xb8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <HAL_SPI_MspInit+0xb8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a18      	ldr	r2, [pc, #96]	@ (80015c4 <HAL_SPI_MspInit+0xb8>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <HAL_SPI_MspInit+0xb8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001576:	2302      	movs	r3, #2
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001586:	2305      	movs	r3, #5
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	480d      	ldr	r0, [pc, #52]	@ (80015c8 <HAL_SPI_MspInit+0xbc>)
 8001592:	f000 fe0f 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001596:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a8:	2305      	movs	r3, #5
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	@ (80015cc <HAL_SPI_MspInit+0xc0>)
 80015b4:	f000 fdfe 	bl	80021b4 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	@ 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40003800 	.word	0x40003800
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40022000 	.word	0x40022000
 80015cc:	40020400 	.word	0x40020400

080015d0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a7c      	ldr	r2, [pc, #496]	@ (80017d0 <HAL_SAI_MspInit+0x200>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d15c      	bne.n	800169c <HAL_SAI_MspInit+0xcc>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80015e2:	4b7c      	ldr	r3, [pc, #496]	@ (80017d4 <HAL_SAI_MspInit+0x204>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10b      	bne.n	8001602 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80015ea:	4b7b      	ldr	r3, [pc, #492]	@ (80017d8 <HAL_SAI_MspInit+0x208>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	4a7a      	ldr	r2, [pc, #488]	@ (80017d8 <HAL_SAI_MspInit+0x208>)
 80015f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f6:	4b78      	ldr	r3, [pc, #480]	@ (80017d8 <HAL_SAI_MspInit+0x208>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001602:	4b74      	ldr	r3, [pc, #464]	@ (80017d4 <HAL_SAI_MspInit+0x204>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	4a72      	ldr	r2, [pc, #456]	@ (80017d4 <HAL_SAI_MspInit+0x204>)
 800160a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800160c:	23f0      	movs	r3, #240	@ 0xf0
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800161c:	230a      	movs	r3, #10
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	486d      	ldr	r0, [pc, #436]	@ (80017dc <HAL_SAI_MspInit+0x20c>)
 8001628:	f000 fdc4 	bl	80021b4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 800162c:	4b6c      	ldr	r3, [pc, #432]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 800162e:	4a6d      	ldr	r2, [pc, #436]	@ (80017e4 <HAL_SAI_MspInit+0x214>)
 8001630:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8001632:	4b6b      	ldr	r3, [pc, #428]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 8001634:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001638:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800163a:	4b69      	ldr	r3, [pc, #420]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001640:	4b67      	ldr	r3, [pc, #412]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8001646:	4b66      	ldr	r3, [pc, #408]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 8001648:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800164c:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800164e:	4b64      	ldr	r3, [pc, #400]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 8001650:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001654:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001656:	4b62      	ldr	r3, [pc, #392]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 8001658:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800165c:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800165e:	4b60      	ldr	r3, [pc, #384]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 8001660:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001664:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001666:	4b5e      	ldr	r3, [pc, #376]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 8001668:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800166c:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800166e:	4b5c      	ldr	r3, [pc, #368]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 8001670:	2200      	movs	r2, #0
 8001672:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8001674:	485a      	ldr	r0, [pc, #360]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 8001676:	f000 fab3 	bl	8001be0 <HAL_DMA_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_SAI_MspInit+0xb4>
    {
      Error_Handler();
 8001680:	f7ff fda2 	bl	80011c8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a56      	ldr	r2, [pc, #344]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 8001688:	671a      	str	r2, [r3, #112]	@ 0x70
 800168a:	4a55      	ldr	r2, [pc, #340]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a53      	ldr	r2, [pc, #332]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 8001694:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001696:	4a52      	ldr	r2, [pc, #328]	@ (80017e0 <HAL_SAI_MspInit+0x210>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a51      	ldr	r2, [pc, #324]	@ (80017e8 <HAL_SAI_MspInit+0x218>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	f040 808f 	bne.w	80017c6 <HAL_SAI_MspInit+0x1f6>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80016a8:	4b4a      	ldr	r3, [pc, #296]	@ (80017d4 <HAL_SAI_MspInit+0x204>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10b      	bne.n	80016c8 <HAL_SAI_MspInit+0xf8>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80016b0:	4b49      	ldr	r3, [pc, #292]	@ (80017d8 <HAL_SAI_MspInit+0x208>)
 80016b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b4:	4a48      	ldr	r2, [pc, #288]	@ (80017d8 <HAL_SAI_MspInit+0x208>)
 80016b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80016bc:	4b46      	ldr	r3, [pc, #280]	@ (80017d8 <HAL_SAI_MspInit+0x208>)
 80016be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80016c8:	4b42      	ldr	r3, [pc, #264]	@ (80017d4 <HAL_SAI_MspInit+0x204>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a41      	ldr	r2, [pc, #260]	@ (80017d4 <HAL_SAI_MspInit+0x204>)
 80016d0:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PA12     ------> SAI2_FS_B
    PG10     ------> SAI2_SD_B
    PH2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016d2:	2340      	movs	r3, #64	@ 0x40
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80016e2:	230a      	movs	r3, #10
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	483f      	ldr	r0, [pc, #252]	@ (80017ec <HAL_SAI_MspInit+0x21c>)
 80016ee:	f000 fd61 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001704:	2308      	movs	r3, #8
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4838      	ldr	r0, [pc, #224]	@ (80017f0 <HAL_SAI_MspInit+0x220>)
 8001710:	f000 fd50 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001726:	230a      	movs	r3, #10
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4830      	ldr	r0, [pc, #192]	@ (80017f4 <HAL_SAI_MspInit+0x224>)
 8001732:	f000 fd3f 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001736:	2304      	movs	r3, #4
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001746:	230a      	movs	r3, #10
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4829      	ldr	r0, [pc, #164]	@ (80017f8 <HAL_SAI_MspInit+0x228>)
 8001752:	f000 fd2f 	bl	80021b4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream6;
 8001756:	4b29      	ldr	r3, [pc, #164]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 8001758:	4a29      	ldr	r2, [pc, #164]	@ (8001800 <HAL_SAI_MspInit+0x230>)
 800175a:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 800175c:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 800175e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001762:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001764:	4b25      	ldr	r3, [pc, #148]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 8001766:	2240      	movs	r2, #64	@ 0x40
 8001768:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800176a:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001770:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 8001772:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001776:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001778:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 800177a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800177e:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001780:	4b1e      	ldr	r3, [pc, #120]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 8001782:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001786:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8001788:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 800178a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800178e:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001790:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 8001792:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001796:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 800179e:	4817      	ldr	r0, [pc, #92]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 80017a0:	f000 fa1e 	bl	8001be0 <HAL_DMA_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_SAI_MspInit+0x1de>
    {
      Error_Handler();
 80017aa:	f7ff fd0d 	bl	80011c8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 80017b2:	671a      	str	r2, [r3, #112]	@ 0x70
 80017b4:	4a11      	ldr	r2, [pc, #68]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a0f      	ldr	r2, [pc, #60]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 80017be:	66da      	str	r2, [r3, #108]	@ 0x6c
 80017c0:	4a0e      	ldr	r2, [pc, #56]	@ (80017fc <HAL_SAI_MspInit+0x22c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	@ 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40015c04 	.word	0x40015c04
 80017d4:	2000037c 	.word	0x2000037c
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40022000 	.word	0x40022000
 80017e0:	20000258 	.word	0x20000258
 80017e4:	40026470 	.word	0x40026470
 80017e8:	40015c24 	.word	0x40015c24
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40021800 	.word	0x40021800
 80017f8:	40021c00 	.word	0x40021c00
 80017fc:	200002b8 	.word	0x200002b8
 8001800:	400264a0 	.word	0x400264a0

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <NMI_Handler+0x4>

0800180c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <MemManage_Handler+0x4>

0800181c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <BusFault_Handler+0x4>

08001824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <UsageFault_Handler+0x4>

0800182c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185a:	f000 f88f 	bl	800197c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <DMA2_Stream4_IRQHandler+0x10>)
 800186a:	f000 fa67 	bl	8001d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000258 	.word	0x20000258

08001878 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <DMA2_Stream6_IRQHandler+0x10>)
 800187e:	f000 fa5d 	bl	8001d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200002b8 	.word	0x200002b8

0800188c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	@ (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018b4:	f7ff ffea 	bl	800188c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b8:	480c      	ldr	r0, [pc, #48]	@ (80018ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ba:	490d      	ldr	r1, [pc, #52]	@ (80018f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018bc:	4a0d      	ldr	r2, [pc, #52]	@ (80018f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ce:	4a0a      	ldr	r2, [pc, #40]	@ (80018f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018d0:	4c0a      	ldr	r4, [pc, #40]	@ (80018fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018de:	f002 fe37 	bl	8004550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e2:	f7fe fe09 	bl	80004f8 <main>
  bx  lr    
 80018e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018f4:	080045d8 	.word	0x080045d8
  ldr r2, =_sbss
 80018f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018fc:	20000384 	.word	0x20000384

08001900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC_IRQHandler>

08001902 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001906:	2003      	movs	r0, #3
 8001908:	f000 f928 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190c:	2000      	movs	r0, #0
 800190e:	f000 f805 	bl	800191c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001912:	f7ff fc5f 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001924:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <HAL_InitTick+0x54>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_InitTick+0x58>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001932:	fbb3 f3f1 	udiv	r3, r3, r1
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f943 	bl	8001bc6 <HAL_SYSTICK_Config>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e00e      	b.n	8001968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d80a      	bhi.n	8001966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f000 f90b 	bl	8001b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800195c:	4a06      	ldr	r2, [pc, #24]	@ (8001978 <HAL_InitTick+0x5c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e000      	b.n	8001968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000000 	.word	0x20000000
 8001974:	20000008 	.word	0x20000008
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <HAL_IncTick+0x20>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_IncTick+0x24>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <HAL_IncTick+0x24>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000380 	.word	0x20000380

080019a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b03      	ldr	r3, [pc, #12]	@ (80019b8 <HAL_GetTick+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000380 	.word	0x20000380

080019bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <__NVIC_SetPriorityGrouping+0x40>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ea:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <__NVIC_SetPriorityGrouping+0x40>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	05fa0000 	.word	0x05fa0000

08001a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	@ (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	db0b      	blt.n	8001a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4907      	ldr	r1, [pc, #28]	@ (8001a58 <__NVIC_EnableIRQ+0x38>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	2001      	movs	r0, #1
 8001a42:	fa00 f202 	lsl.w	r2, r0, r2
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	@ (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	@ (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	@ 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	@ 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f7ff ff8e 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff29 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff3e 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff8e 	bl	8001ab0 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff5d 	bl	8001a5c <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff31 	bl	8001a20 <__NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffa2 	bl	8001b18 <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff feda 	bl	80019a4 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e099      	b.n	8001d30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1c:	e00f      	b.n	8001c3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c1e:	f7ff fec1 	bl	80019a4 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d908      	bls.n	8001c3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2203      	movs	r2, #3
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e078      	b.n	8001d30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e8      	bne.n	8001c1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	4b38      	ldr	r3, [pc, #224]	@ (8001d38 <HAL_DMA_Init+0x158>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d107      	bne.n	8001ca8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f023 0307 	bic.w	r3, r3, #7
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d117      	bne.n	8001d02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00e      	beq.n	8001d02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f9e9 	bl	80020bc <DMA_CheckFifoParam>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2240      	movs	r2, #64	@ 0x40
 8001cf4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e016      	b.n	8001d30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f9a0 	bl	8002050 <DMA_CalcBaseAndBitshift>
 8001d10:	4603      	mov	r3, r0
 8001d12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d18:	223f      	movs	r2, #63	@ 0x3f
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	f010803f 	.word	0xf010803f

08001d3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001d48:	4b8e      	ldr	r3, [pc, #568]	@ (8001f84 <HAL_DMA_IRQHandler+0x248>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a8e      	ldr	r2, [pc, #568]	@ (8001f88 <HAL_DMA_IRQHandler+0x24c>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	0a9b      	lsrs	r3, r3, #10
 8001d54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d66:	2208      	movs	r2, #8
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01a      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d013      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0204 	bic.w	r2, r2, #4
 8001d8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d94:	2208      	movs	r2, #8
 8001d96:	409a      	lsls	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dac:	2201      	movs	r2, #1
 8001dae:	409a      	lsls	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d012      	beq.n	8001dde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dca:	2201      	movs	r2, #1
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd6:	f043 0202 	orr.w	r2, r3, #2
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de2:	2204      	movs	r2, #4
 8001de4:	409a      	lsls	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d012      	beq.n	8001e14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00b      	beq.n	8001e14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e00:	2204      	movs	r2, #4
 8001e02:	409a      	lsls	r2, r3
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e0c:	f043 0204 	orr.w	r2, r3, #4
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e18:	2210      	movs	r2, #16
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d043      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d03c      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e36:	2210      	movs	r2, #16
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d018      	beq.n	8001e7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d108      	bne.n	8001e6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d024      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
 8001e6a:	e01f      	b.n	8001eac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01b      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	4798      	blx	r3
 8001e7c:	e016      	b.n	8001eac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d107      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0208 	bic.w	r2, r2, #8
 8001e9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 808f 	beq.w	8001fdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8087 	beq.w	8001fdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d136      	bne.n	8001f54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0216 	bic.w	r2, r2, #22
 8001ef4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d103      	bne.n	8001f16 <HAL_DMA_IRQHandler+0x1da>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d007      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0208 	bic.w	r2, r2, #8
 8001f24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2a:	223f      	movs	r2, #63	@ 0x3f
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d07e      	beq.n	8002048 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	4798      	blx	r3
        }
        return;
 8001f52:	e079      	b.n	8002048 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d01d      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10d      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d031      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	4798      	blx	r3
 8001f80:	e02c      	b.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
 8001f82:	bf00      	nop
 8001f84:	20000000 	.word	0x20000000
 8001f88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d023      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
 8001f9c:	e01e      	b.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10f      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0210 	bic.w	r2, r2, #16
 8001fba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d032      	beq.n	800204a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d022      	beq.n	8002036 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2205      	movs	r2, #5
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	3301      	adds	r3, #1
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	429a      	cmp	r2, r3
 8002012:	d307      	bcc.n	8002024 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f2      	bne.n	8002008 <HAL_DMA_IRQHandler+0x2cc>
 8002022:	e000      	b.n	8002026 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002024:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	4798      	blx	r3
 8002046:	e000      	b.n	800204a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002048:	bf00      	nop
    }
  }
}
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	3b10      	subs	r3, #16
 8002060:	4a13      	ldr	r2, [pc, #76]	@ (80020b0 <DMA_CalcBaseAndBitshift+0x60>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800206a:	4a12      	ldr	r2, [pc, #72]	@ (80020b4 <DMA_CalcBaseAndBitshift+0x64>)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b03      	cmp	r3, #3
 800207c:	d908      	bls.n	8002090 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <DMA_CalcBaseAndBitshift+0x68>)
 8002086:	4013      	ands	r3, r2
 8002088:	1d1a      	adds	r2, r3, #4
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	659a      	str	r2, [r3, #88]	@ 0x58
 800208e:	e006      	b.n	800209e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <DMA_CalcBaseAndBitshift+0x68>)
 8002098:	4013      	ands	r3, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	aaaaaaab 	.word	0xaaaaaaab
 80020b4:	080045c0 	.word	0x080045c0
 80020b8:	fffffc00 	.word	0xfffffc00

080020bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d11f      	bne.n	8002116 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d856      	bhi.n	800218a <DMA_CheckFifoParam+0xce>
 80020dc:	a201      	add	r2, pc, #4	@ (adr r2, 80020e4 <DMA_CheckFifoParam+0x28>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	080020f5 	.word	0x080020f5
 80020e8:	08002107 	.word	0x08002107
 80020ec:	080020f5 	.word	0x080020f5
 80020f0:	0800218b 	.word	0x0800218b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d046      	beq.n	800218e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002104:	e043      	b.n	800218e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800210e:	d140      	bne.n	8002192 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002114:	e03d      	b.n	8002192 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800211e:	d121      	bne.n	8002164 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d837      	bhi.n	8002196 <DMA_CheckFifoParam+0xda>
 8002126:	a201      	add	r2, pc, #4	@ (adr r2, 800212c <DMA_CheckFifoParam+0x70>)
 8002128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212c:	0800213d 	.word	0x0800213d
 8002130:	08002143 	.word	0x08002143
 8002134:	0800213d 	.word	0x0800213d
 8002138:	08002155 	.word	0x08002155
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
      break;
 8002140:	e030      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d025      	beq.n	800219a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002152:	e022      	b.n	800219a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800215c:	d11f      	bne.n	800219e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002162:	e01c      	b.n	800219e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d903      	bls.n	8002172 <DMA_CheckFifoParam+0xb6>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d003      	beq.n	8002178 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002170:	e018      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
      break;
 8002176:	e015      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00e      	beq.n	80021a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
      break;
 8002188:	e00b      	b.n	80021a2 <DMA_CheckFifoParam+0xe6>
      break;
 800218a:	bf00      	nop
 800218c:	e00a      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 800218e:	bf00      	nop
 8002190:	e008      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002192:	bf00      	nop
 8002194:	e006      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002196:	bf00      	nop
 8002198:	e004      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 800219a:	bf00      	nop
 800219c:	e002      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800219e:	bf00      	nop
 80021a0:	e000      	b.n	80021a4 <DMA_CheckFifoParam+0xe8>
      break;
 80021a2:	bf00      	nop
    }
  } 
  
  return status; 
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	e175      	b.n	80024c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021d4:	2201      	movs	r2, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	f040 8164 	bne.w	80024ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d005      	beq.n	800220a <HAL_GPIO_Init+0x56>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d130      	bne.n	800226c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 0201 	and.w	r2, r3, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b03      	cmp	r3, #3
 8002276:	d017      	beq.n	80022a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d123      	bne.n	80022fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	08da      	lsrs	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3208      	adds	r2, #8
 80022bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	08da      	lsrs	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3208      	adds	r2, #8
 80022f6:	69b9      	ldr	r1, [r7, #24]
 80022f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0203 	and.w	r2, r3, #3
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80be 	beq.w	80024ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	4b66      	ldr	r3, [pc, #408]	@ (80024d8 <HAL_GPIO_Init+0x324>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	4a65      	ldr	r2, [pc, #404]	@ (80024d8 <HAL_GPIO_Init+0x324>)
 8002344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002348:	6453      	str	r3, [r2, #68]	@ 0x44
 800234a:	4b63      	ldr	r3, [pc, #396]	@ (80024d8 <HAL_GPIO_Init+0x324>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002356:	4a61      	ldr	r2, [pc, #388]	@ (80024dc <HAL_GPIO_Init+0x328>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a58      	ldr	r2, [pc, #352]	@ (80024e0 <HAL_GPIO_Init+0x32c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d037      	beq.n	80023f2 <HAL_GPIO_Init+0x23e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a57      	ldr	r2, [pc, #348]	@ (80024e4 <HAL_GPIO_Init+0x330>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d031      	beq.n	80023ee <HAL_GPIO_Init+0x23a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a56      	ldr	r2, [pc, #344]	@ (80024e8 <HAL_GPIO_Init+0x334>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02b      	beq.n	80023ea <HAL_GPIO_Init+0x236>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a55      	ldr	r2, [pc, #340]	@ (80024ec <HAL_GPIO_Init+0x338>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d025      	beq.n	80023e6 <HAL_GPIO_Init+0x232>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a54      	ldr	r2, [pc, #336]	@ (80024f0 <HAL_GPIO_Init+0x33c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01f      	beq.n	80023e2 <HAL_GPIO_Init+0x22e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a53      	ldr	r2, [pc, #332]	@ (80024f4 <HAL_GPIO_Init+0x340>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_Init+0x22a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a52      	ldr	r2, [pc, #328]	@ (80024f8 <HAL_GPIO_Init+0x344>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_Init+0x226>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a51      	ldr	r2, [pc, #324]	@ (80024fc <HAL_GPIO_Init+0x348>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_Init+0x222>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a50      	ldr	r2, [pc, #320]	@ (8002500 <HAL_GPIO_Init+0x34c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_Init+0x21e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002504 <HAL_GPIO_Init+0x350>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_GPIO_Init+0x21a>
 80023ca:	2309      	movs	r3, #9
 80023cc:	e012      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023ce:	230a      	movs	r3, #10
 80023d0:	e010      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023d2:	2308      	movs	r3, #8
 80023d4:	e00e      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e00c      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023da:	2306      	movs	r3, #6
 80023dc:	e00a      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023de:	2305      	movs	r3, #5
 80023e0:	e008      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023e2:	2304      	movs	r3, #4
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023e6:	2303      	movs	r3, #3
 80023e8:	e004      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e002      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023f2:	2300      	movs	r3, #0
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	f002 0203 	and.w	r2, r2, #3
 80023fa:	0092      	lsls	r2, r2, #2
 80023fc:	4093      	lsls	r3, r2
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002404:	4935      	ldr	r1, [pc, #212]	@ (80024dc <HAL_GPIO_Init+0x328>)
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002412:	4b3d      	ldr	r3, [pc, #244]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002436:	4a34      	ldr	r2, [pc, #208]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800243c:	4b32      	ldr	r3, [pc, #200]	@ (8002508 <HAL_GPIO_Init+0x354>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002460:	4a29      	ldr	r2, [pc, #164]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002466:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248a:	4a1f      	ldr	r2, [pc, #124]	@ (8002508 <HAL_GPIO_Init+0x354>)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b4:	4a14      	ldr	r2, [pc, #80]	@ (8002508 <HAL_GPIO_Init+0x354>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3301      	adds	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	2b0f      	cmp	r3, #15
 80024c4:	f67f ae86 	bls.w	80021d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	3724      	adds	r7, #36	@ 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40013800 	.word	0x40013800
 80024e0:	40020000 	.word	0x40020000
 80024e4:	40020400 	.word	0x40020400
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40020c00 	.word	0x40020c00
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40021400 	.word	0x40021400
 80024f8:	40021800 	.word	0x40021800
 80024fc:	40021c00 	.word	0x40021c00
 8002500:	40022000 	.word	0x40022000
 8002504:	40022400 	.word	0x40022400
 8002508:	40013c00 	.word	0x40013c00

0800250c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800251c:	787b      	ldrb	r3, [r7, #1]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002528:	e003      	b.n	8002532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	041a      	lsls	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	619a      	str	r2, [r3, #24]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e08b      	b.n	800266a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe fe58 	bl	800121c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2224      	movs	r2, #36	@ 0x24
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002590:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d107      	bne.n	80025ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	e006      	b.n	80025c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80025c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d108      	bne.n	80025e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	e007      	b.n	80025f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <HAL_I2C_Init+0x134>)
 80025fe:	430b      	orrs	r3, r1
 8002600:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002610:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69d9      	ldr	r1, [r3, #28]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	02008000 	.word	0x02008000

08002678 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b20      	cmp	r3, #32
 800268c:	d138      	bne.n	8002700 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002698:	2302      	movs	r3, #2
 800269a:	e032      	b.n	8002702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2224      	movs	r2, #36	@ 0x24
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0201 	bic.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	e000      	b.n	8002702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002700:	2302      	movs	r3, #2
  }
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b20      	cmp	r3, #32
 8002722:	d139      	bne.n	8002798 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800272e:	2302      	movs	r3, #2
 8002730:	e033      	b.n	800279a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2224      	movs	r2, #36	@ 0x24
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002760:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	e000      	b.n	800279a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0d2      	b.n	8002960 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe fdec 	bl	80013ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69d9      	ldr	r1, [r3, #28]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	4b60      	ldr	r3, [pc, #384]	@ (8002968 <HAL_I2S_Init+0x1c0>)
 80027e8:	400b      	ands	r3, r1
 80027ea:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2202      	movs	r2, #2
 80027f2:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d067      	beq.n	80028cc <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002804:	2310      	movs	r3, #16
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	e001      	b.n	800280e <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b20      	cmp	r3, #32
 8002814:	d802      	bhi.n	800281c <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d102      	bne.n	800282a <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8002824:	4b51      	ldr	r3, [pc, #324]	@ (800296c <HAL_I2S_Init+0x1c4>)
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	e003      	b.n	8002832 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f8a2 	bl	8002974 <I2S_GetClockFreq>
 8002830:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800283a:	d125      	bne.n	8002888 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	fbb2 f2f3 	udiv	r2, r2, r3
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	461a      	mov	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	3305      	adds	r3, #5
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	e01f      	b.n	80028a6 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	461a      	mov	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	3305      	adds	r3, #5
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	e00e      	b.n	80028a6 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	461a      	mov	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	3305      	adds	r3, #5
 80028a4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4a31      	ldr	r2, [pc, #196]	@ (8002970 <HAL_I2S_Init+0x1c8>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	08db      	lsrs	r3, r3, #3
 80028b0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	085b      	lsrs	r3, r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	e003      	b.n	80028d4 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80028cc:	2302      	movs	r3, #2
 80028ce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d902      	bls.n	80028e0 <HAL_I2S_Init+0x138>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	2bff      	cmp	r3, #255	@ 0xff
 80028de:	d907      	bls.n	80028f0 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e4:	f043 0210 	orr.w	r2, r3, #16
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e037      	b.n	8002960 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	ea42 0103 	orr.w	r1, r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	430a      	orrs	r2, r1
 8002902:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	4b17      	ldr	r3, [pc, #92]	@ (8002968 <HAL_I2S_Init+0x1c0>)
 800290c:	4013      	ands	r3, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6851      	ldr	r1, [r2, #4]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6892      	ldr	r2, [r2, #8]
 8002916:	4311      	orrs	r1, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68d2      	ldr	r2, [r2, #12]
 800291c:	4311      	orrs	r1, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6992      	ldr	r2, [r2, #24]
 8002922:	430a      	orrs	r2, r1
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800292e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b30      	cmp	r3, #48	@ 0x30
 8002936:	d003      	beq.n	8002940 <HAL_I2S_Init+0x198>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2bb0      	cmp	r3, #176	@ 0xb0
 800293e:	d107      	bne.n	8002950 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800294e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3720      	adds	r7, #32
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	fffff040 	.word	0xfffff040
 800296c:	00bb8000 	.word	0x00bb8000
 8002970:	cccccccd 	.word	0xcccccccd

08002974 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d02d      	beq.n	80029e0 <I2S_GetClockFreq+0x6c>
 8002984:	2b02      	cmp	r3, #2
 8002986:	d12e      	bne.n	80029e6 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002988:	4b1c      	ldr	r3, [pc, #112]	@ (80029fc <I2S_GetClockFreq+0x88>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d108      	bne.n	80029a6 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002994:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <I2S_GetClockFreq+0x88>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800299c:	4a18      	ldr	r2, [pc, #96]	@ (8002a00 <I2S_GetClockFreq+0x8c>)
 800299e:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	e007      	b.n	80029b6 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <I2S_GetClockFreq+0x88>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029ae:	4a15      	ldr	r2, [pc, #84]	@ (8002a04 <I2S_GetClockFreq+0x90>)
 80029b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b4:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 80029b6:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <I2S_GetClockFreq+0x88>)
 80029b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029bc:	0f1b      	lsrs	r3, r3, #28
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80029c4:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <I2S_GetClockFreq+0x88>)
 80029c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	fb03 f202 	mul.w	r2, r3, r2
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	613b      	str	r3, [r7, #16]

      break;
 80029de:	e005      	b.n	80029ec <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 80029e0:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <I2S_GetClockFreq+0x94>)
 80029e2:	613b      	str	r3, [r7, #16]
      break;
 80029e4:	e002      	b.n	80029ec <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
      break;
 80029ea:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 80029ec:	693b      	ldr	r3, [r7, #16]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	00f42400 	.word	0x00f42400
 8002a04:	017d7840 	.word	0x017d7840
 8002a08:	00bb8000 	.word	0x00bb8000

08002a0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	4b23      	ldr	r3, [pc, #140]	@ (8002aa4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	4a22      	ldr	r2, [pc, #136]	@ (8002aa4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a22:	4b20      	ldr	r3, [pc, #128]	@ (8002aa4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a3a:	f7fe ffb3 	bl	80019a4 <HAL_GetTick>
 8002a3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a40:	e009      	b.n	8002a56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a42:	f7fe ffaf 	bl	80019a4 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a50:	d901      	bls.n	8002a56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e022      	b.n	8002a9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a56:	4b14      	ldr	r3, [pc, #80]	@ (8002aa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a62:	d1ee      	bne.n	8002a42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a64:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a70:	f7fe ff98 	bl	80019a4 <HAL_GetTick>
 8002a74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a76:	e009      	b.n	8002a8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a78:	f7fe ff94 	bl	80019a4 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a86:	d901      	bls.n	8002a8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e007      	b.n	8002a9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a8c:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a98:	d1ee      	bne.n	8002a78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40007000 	.word	0x40007000

08002aac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e291      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8087 	beq.w	8002bde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad0:	4b96      	ldr	r3, [pc, #600]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d00c      	beq.n	8002af6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002adc:	4b93      	ldr	r3, [pc, #588]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d112      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62>
 8002ae8:	4b90      	ldr	r3, [pc, #576]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002af4:	d10b      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af6:	4b8d      	ldr	r3, [pc, #564]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d06c      	beq.n	8002bdc <HAL_RCC_OscConfig+0x130>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d168      	bne.n	8002bdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e26b      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x7a>
 8002b18:	4b84      	ldr	r3, [pc, #528]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a83      	ldr	r2, [pc, #524]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	e02e      	b.n	8002b84 <HAL_RCC_OscConfig+0xd8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x9c>
 8002b2e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7e      	ldr	r2, [pc, #504]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a7b      	ldr	r2, [pc, #492]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e01d      	b.n	8002b84 <HAL_RCC_OscConfig+0xd8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0xc0>
 8002b52:	4b76      	ldr	r3, [pc, #472]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a75      	ldr	r2, [pc, #468]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b73      	ldr	r3, [pc, #460]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a72      	ldr	r2, [pc, #456]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0xd8>
 8002b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6e      	ldr	r2, [pc, #440]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b6c      	ldr	r3, [pc, #432]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a6b      	ldr	r2, [pc, #428]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe ff0a 	bl	80019a4 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b94:	f7fe ff06 	bl	80019a4 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e21f      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b61      	ldr	r3, [pc, #388]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0xe8>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fef6 	bl	80019a4 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7fe fef2 	bl	80019a4 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	@ 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e20b      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	4b57      	ldr	r3, [pc, #348]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x110>
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d069      	beq.n	8002cbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bea:	4b50      	ldr	r3, [pc, #320]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bf6:	4b4d      	ldr	r3, [pc, #308]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d11c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x190>
 8002c02:	4b4a      	ldr	r3, [pc, #296]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	4b47      	ldr	r3, [pc, #284]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_RCC_OscConfig+0x17a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e1df      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c26:	4b41      	ldr	r3, [pc, #260]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	493d      	ldr	r1, [pc, #244]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	e040      	b.n	8002cbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d023      	beq.n	8002c8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c44:	4b39      	ldr	r3, [pc, #228]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a38      	ldr	r2, [pc, #224]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fea8 	bl	80019a4 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c58:	f7fe fea4 	bl	80019a4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1bd      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	4b30      	ldr	r3, [pc, #192]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c76:	4b2d      	ldr	r3, [pc, #180]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4929      	ldr	r1, [pc, #164]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]
 8002c8a:	e018      	b.n	8002cbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8c:	4b27      	ldr	r3, [pc, #156]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a26      	ldr	r2, [pc, #152]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe fe84 	bl	80019a4 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca0:	f7fe fe80 	bl	80019a4 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e199      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d038      	beq.n	8002d3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d019      	beq.n	8002d06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd2:	4b16      	ldr	r3, [pc, #88]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd6:	4a15      	ldr	r2, [pc, #84]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cde:	f7fe fe61 	bl	80019a4 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce6:	f7fe fe5d 	bl	80019a4 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e176      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x23a>
 8002d04:	e01a      	b.n	8002d3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d06:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d0a:	4a08      	ldr	r2, [pc, #32]	@ (8002d2c <HAL_RCC_OscConfig+0x280>)
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d12:	f7fe fe47 	bl	80019a4 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d18:	e00a      	b.n	8002d30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1a:	f7fe fe43 	bl	80019a4 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d903      	bls.n	8002d30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e15c      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
 8002d2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	4b91      	ldr	r3, [pc, #580]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1ee      	bne.n	8002d1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80a4 	beq.w	8002e92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4a:	4b8b      	ldr	r3, [pc, #556]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10d      	bne.n	8002d72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d56:	4b88      	ldr	r3, [pc, #544]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	4a87      	ldr	r2, [pc, #540]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d62:	4b85      	ldr	r3, [pc, #532]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d72:	4b82      	ldr	r3, [pc, #520]	@ (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7e      	ldr	r2, [pc, #504]	@ (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe fe0b 	bl	80019a4 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d92:	f7fe fe07 	bl	80019a4 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b64      	cmp	r3, #100	@ 0x64
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e120      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da4:	4b75      	ldr	r3, [pc, #468]	@ (8002f7c <HAL_RCC_OscConfig+0x4d0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x31a>
 8002db8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dbc:	4a6e      	ldr	r2, [pc, #440]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc4:	e02d      	b.n	8002e22 <HAL_RCC_OscConfig+0x376>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x33c>
 8002dce:	4b6a      	ldr	r3, [pc, #424]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd2:	4a69      	ldr	r2, [pc, #420]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dda:	4b67      	ldr	r3, [pc, #412]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dde:	4a66      	ldr	r2, [pc, #408]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002de0:	f023 0304 	bic.w	r3, r3, #4
 8002de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de6:	e01c      	b.n	8002e22 <HAL_RCC_OscConfig+0x376>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	d10c      	bne.n	8002e0a <HAL_RCC_OscConfig+0x35e>
 8002df0:	4b61      	ldr	r3, [pc, #388]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df4:	4a60      	ldr	r2, [pc, #384]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e00:	4a5d      	ldr	r2, [pc, #372]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e08:	e00b      	b.n	8002e22 <HAL_RCC_OscConfig+0x376>
 8002e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0e:	4a5a      	ldr	r2, [pc, #360]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e16:	4b58      	ldr	r3, [pc, #352]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1a:	4a57      	ldr	r2, [pc, #348]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d015      	beq.n	8002e56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fdbb 	bl	80019a4 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe fdb7 	bl	80019a4 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e0ce      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e48:	4b4b      	ldr	r3, [pc, #300]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ee      	beq.n	8002e32 <HAL_RCC_OscConfig+0x386>
 8002e54:	e014      	b.n	8002e80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7fe fda5 	bl	80019a4 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7fe fda1 	bl	80019a4 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0b8      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e74:	4b40      	ldr	r3, [pc, #256]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ee      	bne.n	8002e5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d105      	bne.n	8002e92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e86:	4b3c      	ldr	r3, [pc, #240]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002e8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e90:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80a4 	beq.w	8002fe4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e9c:	4b36      	ldr	r3, [pc, #216]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d06b      	beq.n	8002f80 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d149      	bne.n	8002f44 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb0:	4b31      	ldr	r3, [pc, #196]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a30      	ldr	r2, [pc, #192]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002eb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fd72 	bl	80019a4 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fe fd6e 	bl	80019a4 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e087      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	4b28      	ldr	r3, [pc, #160]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	019b      	lsls	r3, r3, #6
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	3b01      	subs	r3, #1
 8002efc:	041b      	lsls	r3, r3, #16
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	061b      	lsls	r3, r3, #24
 8002f06:	4313      	orrs	r3, r2
 8002f08:	4a1b      	ldr	r2, [pc, #108]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002f0a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f0e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f10:	4b19      	ldr	r3, [pc, #100]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a18      	ldr	r2, [pc, #96]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002f16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fd42 	bl	80019a4 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe fd3e 	bl	80019a4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e057      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f36:	4b10      	ldr	r3, [pc, #64]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x478>
 8002f42:	e04f      	b.n	8002fe4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f44:	4b0c      	ldr	r3, [pc, #48]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a0b      	ldr	r2, [pc, #44]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002f4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe fd28 	bl	80019a4 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe fd24 	bl	80019a4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e03d      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6a:	4b03      	ldr	r3, [pc, #12]	@ (8002f78 <HAL_RCC_OscConfig+0x4cc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4ac>
 8002f76:	e035      	b.n	8002fe4 <HAL_RCC_OscConfig+0x538>
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff0 <HAL_RCC_OscConfig+0x544>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d028      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d121      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d11a      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fb6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d111      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fda:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800

08002ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0d0      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800300c:	4b6a      	ldr	r3, [pc, #424]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d910      	bls.n	800303c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b67      	ldr	r3, [pc, #412]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 020f 	bic.w	r2, r3, #15
 8003022:	4965      	ldr	r1, [pc, #404]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b63      	ldr	r3, [pc, #396]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b8      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003054:	4b59      	ldr	r3, [pc, #356]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a58      	ldr	r2, [pc, #352]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 800305a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800305e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800306c:	4b53      	ldr	r3, [pc, #332]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a52      	ldr	r2, [pc, #328]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003072:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003076:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003078:	4b50      	ldr	r3, [pc, #320]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	494d      	ldr	r1, [pc, #308]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d040      	beq.n	8003118 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b47      	ldr	r3, [pc, #284]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d115      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b6:	4b41      	ldr	r3, [pc, #260]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e073      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c6:	4b3d      	ldr	r3, [pc, #244]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e06b      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d6:	4b39      	ldr	r3, [pc, #228]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4936      	ldr	r1, [pc, #216]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e8:	f7fe fc5c 	bl	80019a4 <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f0:	f7fe fc58 	bl	80019a4 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e053      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	4b2d      	ldr	r3, [pc, #180]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 020c 	and.w	r2, r3, #12
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	429a      	cmp	r2, r3
 8003116:	d1eb      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003118:	4b27      	ldr	r3, [pc, #156]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d210      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 020f 	bic.w	r2, r3, #15
 800312e:	4922      	ldr	r1, [pc, #136]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b20      	ldr	r3, [pc, #128]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e032      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003154:	4b19      	ldr	r3, [pc, #100]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4916      	ldr	r1, [pc, #88]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003172:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	490e      	ldr	r1, [pc, #56]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003186:	f000 f821 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800318a:	4602      	mov	r2, r0
 800318c:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	490a      	ldr	r1, [pc, #40]	@ (80031c0 <HAL_RCC_ClockConfig+0x1cc>)
 8003198:	5ccb      	ldrb	r3, [r1, r3]
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	4a09      	ldr	r2, [pc, #36]	@ (80031c4 <HAL_RCC_ClockConfig+0x1d0>)
 80031a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031a2:	4b09      	ldr	r3, [pc, #36]	@ (80031c8 <HAL_RCC_ClockConfig+0x1d4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe fbb8 	bl	800191c <HAL_InitTick>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023c00 	.word	0x40023c00
 80031bc:	40023800 	.word	0x40023800
 80031c0:	080045b0 	.word	0x080045b0
 80031c4:	20000000 	.word	0x20000000
 80031c8:	20000004 	.word	0x20000004

080031cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d0:	b090      	sub	sp, #64	@ 0x40
 80031d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d8:	2300      	movs	r3, #0
 80031da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031dc:	2300      	movs	r3, #0
 80031de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e4:	4b59      	ldr	r3, [pc, #356]	@ (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d00d      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x40>
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	f200 80a1 	bhi.w	8003338 <HAL_RCC_GetSysClockFreq+0x16c>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x34>
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d003      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x3a>
 80031fe:	e09b      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003200:	4b53      	ldr	r3, [pc, #332]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x184>)
 8003202:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003204:	e09b      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003206:	4b53      	ldr	r3, [pc, #332]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x188>)
 8003208:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800320a:	e098      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800320c:	4b4f      	ldr	r3, [pc, #316]	@ (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003214:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003216:	4b4d      	ldr	r3, [pc, #308]	@ (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d028      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003222:	4b4a      	ldr	r3, [pc, #296]	@ (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	099b      	lsrs	r3, r3, #6
 8003228:	2200      	movs	r2, #0
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	627a      	str	r2, [r7, #36]	@ 0x24
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003234:	2100      	movs	r1, #0
 8003236:	4b47      	ldr	r3, [pc, #284]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x188>)
 8003238:	fb03 f201 	mul.w	r2, r3, r1
 800323c:	2300      	movs	r3, #0
 800323e:	fb00 f303 	mul.w	r3, r0, r3
 8003242:	4413      	add	r3, r2
 8003244:	4a43      	ldr	r2, [pc, #268]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x188>)
 8003246:	fba0 1202 	umull	r1, r2, r0, r2
 800324a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800324c:	460a      	mov	r2, r1
 800324e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003252:	4413      	add	r3, r2
 8003254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003258:	2200      	movs	r2, #0
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	61fa      	str	r2, [r7, #28]
 800325e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003262:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003266:	f7fc ffcf 	bl	8000208 <__aeabi_uldivmod>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4613      	mov	r3, r2
 8003270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003272:	e053      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003274:	4b35      	ldr	r3, [pc, #212]	@ (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	2200      	movs	r2, #0
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	617a      	str	r2, [r7, #20]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003286:	f04f 0b00 	mov.w	fp, #0
 800328a:	4652      	mov	r2, sl
 800328c:	465b      	mov	r3, fp
 800328e:	f04f 0000 	mov.w	r0, #0
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	0159      	lsls	r1, r3, #5
 8003298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800329c:	0150      	lsls	r0, r2, #5
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	ebb2 080a 	subs.w	r8, r2, sl
 80032a6:	eb63 090b 	sbc.w	r9, r3, fp
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032be:	ebb2 0408 	subs.w	r4, r2, r8
 80032c2:	eb63 0509 	sbc.w	r5, r3, r9
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	00eb      	lsls	r3, r5, #3
 80032d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032d4:	00e2      	lsls	r2, r4, #3
 80032d6:	4614      	mov	r4, r2
 80032d8:	461d      	mov	r5, r3
 80032da:	eb14 030a 	adds.w	r3, r4, sl
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	eb45 030b 	adc.w	r3, r5, fp
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032f2:	4629      	mov	r1, r5
 80032f4:	028b      	lsls	r3, r1, #10
 80032f6:	4621      	mov	r1, r4
 80032f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032fc:	4621      	mov	r1, r4
 80032fe:	028a      	lsls	r2, r1, #10
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003306:	2200      	movs	r2, #0
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	60fa      	str	r2, [r7, #12]
 800330c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003310:	f7fc ff7a 	bl	8000208 <__aeabi_uldivmod>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4613      	mov	r3, r2
 800331a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800331c:	4b0b      	ldr	r3, [pc, #44]	@ (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	3301      	adds	r3, #1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800332c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800332e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003336:	e002      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003338:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x184>)
 800333a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800333c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003340:	4618      	mov	r0, r3
 8003342:	3740      	adds	r7, #64	@ 0x40
 8003344:	46bd      	mov	sp, r7
 8003346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	00f42400 	.word	0x00f42400
 8003354:	017d7840 	.word	0x017d7840

08003358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d012      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003380:	4b69      	ldr	r3, [pc, #420]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a68      	ldr	r2, [pc, #416]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003386:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800338a:	6093      	str	r3, [r2, #8]
 800338c:	4b66      	ldr	r3, [pc, #408]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003394:	4964      	ldr	r1, [pc, #400]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033a2:	2301      	movs	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d017      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c0:	4959      	ldr	r1, [pc, #356]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033d0:	d101      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033d2:	2301      	movs	r3, #1
 80033d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033de:	2301      	movs	r3, #1
 80033e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d017      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	494a      	ldr	r1, [pc, #296]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800340c:	d101      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800341a:	2301      	movs	r3, #1
 800341c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800342a:	2301      	movs	r3, #1
 800342c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 808b 	beq.w	8003552 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800343c:	4b3a      	ldr	r3, [pc, #232]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	4a39      	ldr	r2, [pc, #228]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003446:	6413      	str	r3, [r2, #64]	@ 0x40
 8003448:	4b37      	ldr	r3, [pc, #220]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003454:	4b35      	ldr	r3, [pc, #212]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a34      	ldr	r2, [pc, #208]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800345a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800345e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003460:	f7fe faa0 	bl	80019a4 <HAL_GetTick>
 8003464:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003468:	f7fe fa9c 	bl	80019a4 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	@ 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e357      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800347a:	4b2c      	ldr	r3, [pc, #176]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003486:	4b28      	ldr	r3, [pc, #160]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800348e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d035      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d02e      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034a4:	4b20      	ldr	r3, [pc, #128]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034be:	4a1a      	ldr	r2, [pc, #104]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034c6:	4a18      	ldr	r2, [pc, #96]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034cc:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d114      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fe fa64 	bl	80019a4 <HAL_GetTick>
 80034dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034de:	e00a      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e0:	f7fe fa60 	bl	80019a4 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e319      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0ee      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800350a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800350e:	d111      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003510:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800351c:	4b04      	ldr	r3, [pc, #16]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800351e:	400b      	ands	r3, r1
 8003520:	4901      	ldr	r1, [pc, #4]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
 8003526:	e00b      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003528:	40023800 	.word	0x40023800
 800352c:	40007000 	.word	0x40007000
 8003530:	0ffffcff 	.word	0x0ffffcff
 8003534:	4baa      	ldr	r3, [pc, #680]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4aa9      	ldr	r2, [pc, #676]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800353a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800353e:	6093      	str	r3, [r2, #8]
 8003540:	4ba7      	ldr	r3, [pc, #668]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003542:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354c:	49a4      	ldr	r1, [pc, #656]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800354e:	4313      	orrs	r3, r2
 8003550:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d010      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800355e:	4ba0      	ldr	r3, [pc, #640]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003564:	4a9e      	ldr	r2, [pc, #632]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003566:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800356a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800356e:	4b9c      	ldr	r3, [pc, #624]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003570:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003578:	4999      	ldr	r1, [pc, #612]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800358c:	4b94      	ldr	r3, [pc, #592]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003592:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800359a:	4991      	ldr	r1, [pc, #580]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ae:	4b8c      	ldr	r3, [pc, #560]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035bc:	4988      	ldr	r1, [pc, #544]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d0:	4b83      	ldr	r3, [pc, #524]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035de:	4980      	ldr	r1, [pc, #512]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035f2:	4b7b      	ldr	r3, [pc, #492]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003600:	4977      	ldr	r1, [pc, #476]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003614:	4b72      	ldr	r3, [pc, #456]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361a:	f023 0203 	bic.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003622:	496f      	ldr	r1, [pc, #444]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003636:	4b6a      	ldr	r3, [pc, #424]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363c:	f023 020c 	bic.w	r2, r3, #12
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003644:	4966      	ldr	r1, [pc, #408]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003658:	4b61      	ldr	r3, [pc, #388]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003666:	495e      	ldr	r1, [pc, #376]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800367a:	4b59      	ldr	r3, [pc, #356]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003680:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003688:	4955      	ldr	r1, [pc, #340]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800369c:	4b50      	ldr	r3, [pc, #320]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	494d      	ldr	r1, [pc, #308]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036be:	4b48      	ldr	r3, [pc, #288]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036cc:	4944      	ldr	r1, [pc, #272]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036e0:	4b3f      	ldr	r3, [pc, #252]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ee:	493c      	ldr	r1, [pc, #240]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003702:	4b37      	ldr	r3, [pc, #220]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003708:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003710:	4933      	ldr	r1, [pc, #204]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003724:	4b2e      	ldr	r3, [pc, #184]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003732:	492b      	ldr	r1, [pc, #172]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d011      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003746:	4b26      	ldr	r3, [pc, #152]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003754:	4922      	ldr	r1, [pc, #136]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003760:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003764:	d101      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003766:	2301      	movs	r3, #1
 8003768:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003776:	2301      	movs	r3, #1
 8003778:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003786:	4b16      	ldr	r3, [pc, #88]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003794:	4912      	ldr	r1, [pc, #72]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00b      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037a8:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037b8:	4909      	ldr	r1, [pc, #36]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d006      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80d9 	beq.w	8003986 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037d4:	4b02      	ldr	r3, [pc, #8]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a01      	ldr	r2, [pc, #4]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037de:	e001      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e6:	f7fe f8dd 	bl	80019a4 <HAL_GetTick>
 80037ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037ec:	e008      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037ee:	f7fe f8d9 	bl	80019a4 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b64      	cmp	r3, #100	@ 0x64
 80037fa:	d901      	bls.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e194      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003800:	4b6c      	ldr	r3, [pc, #432]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d021      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800381c:	2b00      	cmp	r3, #0
 800381e:	d11d      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003820:	4b64      	ldr	r3, [pc, #400]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003826:	0c1b      	lsrs	r3, r3, #16
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800382e:	4b61      	ldr	r3, [pc, #388]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003834:	0e1b      	lsrs	r3, r3, #24
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	019a      	lsls	r2, r3, #6
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	431a      	orrs	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	061b      	lsls	r3, r3, #24
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	071b      	lsls	r3, r3, #28
 8003854:	4957      	ldr	r1, [pc, #348]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d004      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003870:	d00a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800387a:	2b00      	cmp	r3, #0
 800387c:	d02e      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003886:	d129      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003888:	4b4a      	ldr	r3, [pc, #296]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800388e:	0c1b      	lsrs	r3, r3, #16
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003896:	4b47      	ldr	r3, [pc, #284]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800389c:	0f1b      	lsrs	r3, r3, #28
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	019a      	lsls	r2, r3, #6
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	041b      	lsls	r3, r3, #16
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	431a      	orrs	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	071b      	lsls	r3, r3, #28
 80038bc:	493d      	ldr	r1, [pc, #244]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80038c4:	4b3b      	ldr	r3, [pc, #236]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038ca:	f023 021f 	bic.w	r2, r3, #31
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d2:	3b01      	subs	r3, #1
 80038d4:	4937      	ldr	r1, [pc, #220]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01d      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038e8:	4b32      	ldr	r3, [pc, #200]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ee:	0e1b      	lsrs	r3, r3, #24
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038f6:	4b2f      	ldr	r3, [pc, #188]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038fc:	0f1b      	lsrs	r3, r3, #28
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	019a      	lsls	r2, r3, #6
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	041b      	lsls	r3, r3, #16
 8003910:	431a      	orrs	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	431a      	orrs	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	071b      	lsls	r3, r3, #28
 800391c:	4925      	ldr	r1, [pc, #148]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d011      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	019a      	lsls	r2, r3, #6
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	041b      	lsls	r3, r3, #16
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	061b      	lsls	r3, r3, #24
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	071b      	lsls	r3, r3, #28
 800394c:	4919      	ldr	r1, [pc, #100]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003954:	4b17      	ldr	r3, [pc, #92]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a16      	ldr	r2, [pc, #88]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800395a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800395e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003960:	f7fe f820 	bl	80019a4 <HAL_GetTick>
 8003964:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003968:	f7fe f81c 	bl	80019a4 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	@ 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e0d7      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800397a:	4b0e      	ldr	r3, [pc, #56]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b01      	cmp	r3, #1
 800398a:	f040 80cd 	bne.w	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800398e:	4b09      	ldr	r3, [pc, #36]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a08      	ldr	r2, [pc, #32]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003994:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399a:	f7fe f803 	bl	80019a4 <HAL_GetTick>
 800399e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039a2:	f7fd ffff 	bl	80019a4 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b64      	cmp	r3, #100	@ 0x64
 80039ae:	d903      	bls.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e0ba      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80039b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039c4:	d0ed      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x682>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d02e      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d12a      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039ee:	4b51      	ldr	r3, [pc, #324]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f4:	0c1b      	lsrs	r3, r3, #16
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a02:	0f1b      	lsrs	r3, r3, #28
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	019a      	lsls	r2, r3, #6
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	041b      	lsls	r3, r3, #16
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	061b      	lsls	r3, r3, #24
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	071b      	lsls	r3, r3, #28
 8003a22:	4944      	ldr	r1, [pc, #272]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a2a:	4b42      	ldr	r3, [pc, #264]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a30:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	493d      	ldr	r1, [pc, #244]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d022      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a58:	d11d      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a5a:	4b36      	ldr	r3, [pc, #216]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a60:	0e1b      	lsrs	r3, r3, #24
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a68:	4b32      	ldr	r3, [pc, #200]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6e:	0f1b      	lsrs	r3, r3, #28
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	019a      	lsls	r2, r3, #6
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	041b      	lsls	r3, r3, #16
 8003a82:	431a      	orrs	r2, r3
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	061b      	lsls	r3, r3, #24
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	071b      	lsls	r3, r3, #28
 8003a8e:	4929      	ldr	r1, [pc, #164]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d028      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aa2:	4b24      	ldr	r3, [pc, #144]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa8:	0e1b      	lsrs	r3, r3, #24
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ab0:	4b20      	ldr	r3, [pc, #128]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab6:	0c1b      	lsrs	r3, r3, #16
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	019a      	lsls	r2, r3, #6
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	061b      	lsls	r3, r3, #24
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	071b      	lsls	r3, r3, #28
 8003ad6:	4917      	ldr	r1, [pc, #92]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ade:	4b15      	ldr	r3, [pc, #84]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ae4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aec:	4911      	ldr	r1, [pc, #68]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003af4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a0e      	ldr	r2, [pc, #56]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fd ff50 	bl	80019a4 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b08:	f7fd ff4c 	bl	80019a4 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	@ 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e007      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b1a:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b26:	d1ef      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800

08003b38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b56:	f040 808d 	bne.w	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003b5a:	4b93      	ldr	r3, [pc, #588]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b60:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003b68:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b70:	d07c      	beq.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b78:	d87b      	bhi.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d004      	beq.n	8003b8a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b86:	d039      	beq.n	8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003b88:	e073      	b.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003b8a:	4b87      	ldr	r3, [pc, #540]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d108      	bne.n	8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b96:	4b84      	ldr	r3, [pc, #528]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b9e:	4a83      	ldr	r2, [pc, #524]	@ (8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	e007      	b.n	8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003ba8:	4b7f      	ldr	r3, [pc, #508]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bb0:	4a7f      	ldr	r2, [pc, #508]	@ (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003bb8:	4b7b      	ldr	r3, [pc, #492]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bbe:	0e1b      	lsrs	r3, r3, #24
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003bc6:	4b78      	ldr	r3, [pc, #480]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bcc:	099b      	lsrs	r3, r3, #6
 8003bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	fb03 f202 	mul.w	r2, r3, r2
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bde:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003be0:	4b71      	ldr	r3, [pc, #452]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	3301      	adds	r3, #1
 8003bee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]
        break;
 8003bfa:	e03b      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003bfc:	4b6a      	ldr	r3, [pc, #424]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d108      	bne.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c08:	4b67      	ldr	r3, [pc, #412]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c10:	4a66      	ldr	r2, [pc, #408]	@ (8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	e007      	b.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003c1a:	4b63      	ldr	r3, [pc, #396]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c22:	4a63      	ldr	r2, [pc, #396]	@ (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003c2a:	4b5f      	ldr	r3, [pc, #380]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c30:	0e1b      	lsrs	r3, r3, #24
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003c38:	4b5b      	ldr	r3, [pc, #364]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c3e:	099b      	lsrs	r3, r3, #6
 8003c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	fb03 f202 	mul.w	r2, r3, r2
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003c52:	4b55      	ldr	r3, [pc, #340]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	617b      	str	r3, [r7, #20]
        break;
 8003c6a:	e003      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003c6c:	4b51      	ldr	r3, [pc, #324]	@ (8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003c6e:	617b      	str	r3, [r7, #20]
        break;
 8003c70:	e000      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8003c72:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c7a:	f040 808d 	bne.w	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c84:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003c8c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c94:	d07c      	beq.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c9c:	d87b      	bhi.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003caa:	d039      	beq.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003cac:	e073      	b.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003cae:	4b3e      	ldr	r3, [pc, #248]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d108      	bne.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003cba:	4b3b      	ldr	r3, [pc, #236]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cc2:	4a3a      	ldr	r2, [pc, #232]	@ (8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	e007      	b.n	8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003ccc:	4b36      	ldr	r3, [pc, #216]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cd4:	4a36      	ldr	r2, [pc, #216]	@ (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003cdc:	4b32      	ldr	r3, [pc, #200]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce2:	0e1b      	lsrs	r3, r3, #24
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003cea:	4b2f      	ldr	r3, [pc, #188]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	fb03 f202 	mul.w	r2, r3, r2
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003d04:	4b28      	ldr	r3, [pc, #160]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	3301      	adds	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]
        break;
 8003d1e:	e03b      	b.n	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003d20:	4b21      	ldr	r3, [pc, #132]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d108      	bne.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d34:	4a1d      	ldr	r2, [pc, #116]	@ (8003dac <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	e007      	b.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d46:	4a1a      	ldr	r2, [pc, #104]	@ (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003d4e:	4b16      	ldr	r3, [pc, #88]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d54:	0e1b      	lsrs	r3, r3, #24
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003d5c:	4b12      	ldr	r3, [pc, #72]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d62:	099b      	lsrs	r3, r3, #6
 8003d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	fb03 f202 	mul.w	r2, r3, r2
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d74:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003d76:	4b0c      	ldr	r3, [pc, #48]	@ (8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	3301      	adds	r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	617b      	str	r3, [r7, #20]
        break;
 8003d8e:	e003      	b.n	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003d90:	4b08      	ldr	r3, [pc, #32]	@ (8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003d92:	617b      	str	r3, [r7, #20]
        break;
 8003d94:	e000      	b.n	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8003d96:	bf00      	nop
      }
    }
  }

  return frequency;
 8003d98:	697b      	ldr	r3, [r7, #20]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	00f42400 	.word	0x00f42400
 8003db0:	017d7840 	.word	0x017d7840
 8003db4:	00bb8000 	.word	0x00bb8000

08003db8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d904      	bls.n	8003dda <HAL_SAI_InitProtocol+0x22>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	3b03      	subs	r3, #3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d812      	bhi.n	8003dfe <HAL_SAI_InitProtocol+0x46>
 8003dd8:	e008      	b.n	8003dec <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f99b 	bl	800411c <SAI_InitI2S>
 8003de6:	4603      	mov	r3, r0
 8003de8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dea:	e00b      	b.n	8003e04 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 fa40 	bl	8004278 <SAI_InitPCM>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dfc:	e002      	b.n	8003e04 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	75fb      	strb	r3, [r7, #23]
      break;
 8003e02:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f808 	bl	8003e20 <HAL_SAI_Init>
 8003e10:	4603      	mov	r3, r0
 8003e12:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e156      	b.n	80040ec <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fd fbbc 	bl	80015d0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fa89 	bl	8004378 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d00c      	beq.n	8003e88 <HAL_SAI_Init+0x68>
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d80d      	bhi.n	8003e8e <HAL_SAI_Init+0x6e>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_SAI_Init+0x5c>
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d003      	beq.n	8003e82 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8003e7a:	e008      	b.n	8003e8e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
      break;
 8003e80:	e006      	b.n	8003e90 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003e82:	2310      	movs	r3, #16
 8003e84:	61fb      	str	r3, [r7, #28]
      break;
 8003e86:	e003      	b.n	8003e90 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003e88:	2320      	movs	r3, #32
 8003e8a:	61fb      	str	r3, [r7, #28]
      break;
 8003e8c:	e000      	b.n	8003e90 <HAL_SAI_Init+0x70>
      break;
 8003e8e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d81e      	bhi.n	8003ed6 <HAL_SAI_Init+0xb6>
 8003e98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea0 <HAL_SAI_Init+0x80>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003eb7 	.word	0x08003eb7
 8003ea8:	08003ebf 	.word	0x08003ebf
 8003eac:	08003ec7 	.word	0x08003ec7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
    }
    break;
 8003eb4:	e010      	b.n	8003ed8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003eb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003eba:	617b      	str	r3, [r7, #20]
    }
    break;
 8003ebc:	e00c      	b.n	8003ed8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003ebe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ec2:	617b      	str	r3, [r7, #20]
    }
    break;
 8003ec4:	e008      	b.n	8003ed8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003ec6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003eca:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	61fb      	str	r3, [r7, #28]
    }
    break;
 8003ed4:	e000      	b.n	8003ed8 <HAL_SAI_Init+0xb8>
    default:
      break;
 8003ed6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a85      	ldr	r2, [pc, #532]	@ (80040f4 <HAL_SAI_Init+0x2d4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_SAI_Init+0xcc>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a84      	ldr	r2, [pc, #528]	@ (80040f8 <HAL_SAI_Init+0x2d8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d103      	bne.n	8003ef4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8003eec:	4a83      	ldr	r2, [pc, #524]	@ (80040fc <HAL_SAI_Init+0x2dc>)
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e002      	b.n	8003efa <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003ef4:	4a82      	ldr	r2, [pc, #520]	@ (8004100 <HAL_SAI_Init+0x2e0>)
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d04c      	beq.n	8003f9c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a7a      	ldr	r2, [pc, #488]	@ (80040f4 <HAL_SAI_Init+0x2d4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <HAL_SAI_Init+0xfa>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a78      	ldr	r2, [pc, #480]	@ (80040f8 <HAL_SAI_Init+0x2d8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d104      	bne.n	8003f24 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003f1a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003f1e:	f7ff fe0b 	bl	8003b38 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f22:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a76      	ldr	r2, [pc, #472]	@ (8004104 <HAL_SAI_Init+0x2e4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d004      	beq.n	8003f38 <HAL_SAI_Init+0x118>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a75      	ldr	r2, [pc, #468]	@ (8004108 <HAL_SAI_Init+0x2e8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d104      	bne.n	8003f42 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003f38:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003f3c:	f7ff fdfc 	bl	8003b38 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f40:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	025b      	lsls	r3, r3, #9
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a6b      	ldr	r2, [pc, #428]	@ (800410c <HAL_SAI_Init+0x2ec>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	08da      	lsrs	r2, r3, #3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8003f68:	68f9      	ldr	r1, [r7, #12]
 8003f6a:	4b68      	ldr	r3, [pc, #416]	@ (800410c <HAL_SAI_Init+0x2ec>)
 8003f6c:	fba3 2301 	umull	r2, r3, r3, r1
 8003f70:	08da      	lsrs	r2, r3, #3
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	1aca      	subs	r2, r1, r3
 8003f7c:	2a08      	cmp	r2, #8
 8003f7e:	d904      	bls.n	8003f8a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d104      	bne.n	8003f9c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	085a      	lsrs	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_SAI_Init+0x18c>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d109      	bne.n	8003fc0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_SAI_Init+0x198>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e001      	b.n	8003fbc <HAL_SAI_Init+0x19c>
 8003fb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	e008      	b.n	8003fd2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d102      	bne.n	8003fce <HAL_SAI_Init+0x1ae>
 8003fc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fcc:	e000      	b.n	8003fd0 <HAL_SAI_Init+0x1b0>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6819      	ldr	r1, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4b4c      	ldr	r3, [pc, #304]	@ (8004110 <HAL_SAI_Init+0x2f0>)
 8003fde:	400b      	ands	r3, r1
 8003fe0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6819      	ldr	r1, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003ff6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800400a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004016:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	051b      	lsls	r3, r3, #20
 800401e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6859      	ldr	r1, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4b38      	ldr	r3, [pc, #224]	@ (8004114 <HAL_SAI_Init+0x2f4>)
 8004034:	400b      	ands	r3, r1
 8004036:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6859      	ldr	r1, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6899      	ldr	r1, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b2d      	ldr	r3, [pc, #180]	@ (8004118 <HAL_SAI_Init+0x2f8>)
 8004062:	400b      	ands	r3, r1
 8004064:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6899      	ldr	r1, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004070:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004076:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800407c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004082:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004088:	3b01      	subs	r3, #1
 800408a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800408c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68d9      	ldr	r1, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80040a4:	400b      	ands	r3, r1
 80040a6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68d9      	ldr	r1, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c4:	3b01      	subs	r3, #1
 80040c6:	021b      	lsls	r3, r3, #8
 80040c8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40015804 	.word	0x40015804
 80040f8:	40015824 	.word	0x40015824
 80040fc:	40015800 	.word	0x40015800
 8004100:	40015c00 	.word	0x40015c00
 8004104:	40015c04 	.word	0x40015c04
 8004108:	40015c24 	.word	0x40015c24
 800410c:	cccccccd 	.word	0xcccccccd
 8004110:	ff05c010 	.word	0xff05c010
 8004114:	ffff1ff0 	.word	0xffff1ff0
 8004118:	fff88000 	.word	0xfff88000

0800411c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <SAI_InitI2S+0x2a>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d103      	bne.n	800414e <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800414c:	e002      	b.n	8004154 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800415a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004162:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e076      	b.n	800426c <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d107      	bne.n	8004194 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004190:	651a      	str	r2, [r3, #80]	@ 0x50
 8004192:	e006      	b.n	80041a2 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800419a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d84f      	bhi.n	8004248 <SAI_InitI2S+0x12c>
 80041a8:	a201      	add	r2, pc, #4	@ (adr r2, 80041b0 <SAI_InitI2S+0x94>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041c1 	.word	0x080041c1
 80041b4:	080041e3 	.word	0x080041e3
 80041b8:	08004205 	.word	0x08004205
 80041bc:	08004227 	.word	0x08004227
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2280      	movs	r2, #128	@ 0x80
 80041c4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	011a      	lsls	r2, r3, #4
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2240      	movs	r2, #64	@ 0x40
 80041de:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80041e0:	e034      	b.n	800424c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2280      	movs	r2, #128	@ 0x80
 80041e6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	085b      	lsrs	r3, r3, #1
 80041ec:	019a      	lsls	r2, r3, #6
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2280      	movs	r2, #128	@ 0x80
 8004200:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004202:	e023      	b.n	800424c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	22c0      	movs	r2, #192	@ 0xc0
 8004208:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	019a      	lsls	r2, r3, #6
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	085b      	lsrs	r3, r3, #1
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2280      	movs	r2, #128	@ 0x80
 8004222:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004224:	e012      	b.n	800424c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	22e0      	movs	r2, #224	@ 0xe0
 800422a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	019a      	lsls	r2, r3, #6
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	085b      	lsrs	r3, r3, #1
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2280      	movs	r2, #128	@ 0x80
 8004244:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004246:	e001      	b.n	800424c <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e00f      	b.n	800426c <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d10b      	bne.n	800426a <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d102      	bne.n	800425e <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2210      	movs	r2, #16
 800425c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d102      	bne.n	800426a <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2208      	movs	r2, #8
 8004268:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <SAI_InitPCM+0x2a>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d103      	bne.n	80042aa <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042a8:	e002      	b.n	80042b0 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80042c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042d8:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d103      	bne.n	80042e8 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80042e6:	e002      	b.n	80042ee <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	220d      	movs	r2, #13
 80042ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d837      	bhi.n	8004364 <SAI_InitPCM+0xec>
 80042f4:	a201      	add	r2, pc, #4	@ (adr r2, 80042fc <SAI_InitPCM+0x84>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	0800430d 	.word	0x0800430d
 8004300:	08004323 	.word	0x08004323
 8004304:	08004339 	.word	0x08004339
 8004308:	0800434f 	.word	0x0800434f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2280      	movs	r2, #128	@ 0x80
 8004310:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	011a      	lsls	r2, r3, #4
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2240      	movs	r2, #64	@ 0x40
 800431e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004320:	e022      	b.n	8004368 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2280      	movs	r2, #128	@ 0x80
 8004326:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2280      	movs	r2, #128	@ 0x80
 8004334:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004336:	e017      	b.n	8004368 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	22c0      	movs	r2, #192	@ 0xc0
 800433c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2280      	movs	r2, #128	@ 0x80
 800434a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800434c:	e00c      	b.n	8004368 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	22e0      	movs	r2, #224	@ 0xe0
 8004352:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2280      	movs	r2, #128	@ 0x80
 8004360:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004362:	e001      	b.n	8004368 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop

08004378 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8004380:	4b17      	ldr	r3, [pc, #92]	@ (80043e0 <SAI_Disable+0x68>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a17      	ldr	r2, [pc, #92]	@ (80043e4 <SAI_Disable+0x6c>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	0b1b      	lsrs	r3, r3, #12
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80043a2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1e5a      	subs	r2, r3, #1
 80043a8:	60fa      	str	r2, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	72fb      	strb	r3, [r7, #11]
      break;
 80043c2:	e006      	b.n	80043d2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e8      	bne.n	80043a4 <SAI_Disable+0x2c>

  return status;
 80043d2:	7afb      	ldrb	r3, [r7, #11]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	20000000 	.word	0x20000000
 80043e4:	95cbec1b 	.word	0x95cbec1b

080043e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e09d      	b.n	8004536 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d108      	bne.n	8004414 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800440a:	d009      	beq.n	8004420 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	61da      	str	r2, [r3, #28]
 8004412:	e005      	b.n	8004420 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fd f866 	bl	800150c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004456:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004460:	d902      	bls.n	8004468 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	e002      	b.n	800446e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800446c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004476:	d007      	beq.n	8004488 <HAL_SPI_Init+0xa0>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004480:	d002      	beq.n	8004488 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ca:	ea42 0103 	orr.w	r1, r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	0c1b      	lsrs	r3, r3, #16
 80044e4:	f003 0204 	and.w	r2, r3, #4
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004504:	ea42 0103 	orr.w	r1, r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004524:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <memset>:
 800453e:	4402      	add	r2, r0
 8004540:	4603      	mov	r3, r0
 8004542:	4293      	cmp	r3, r2
 8004544:	d100      	bne.n	8004548 <memset+0xa>
 8004546:	4770      	bx	lr
 8004548:	f803 1b01 	strb.w	r1, [r3], #1
 800454c:	e7f9      	b.n	8004542 <memset+0x4>
	...

08004550 <__libc_init_array>:
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	4d0d      	ldr	r5, [pc, #52]	@ (8004588 <__libc_init_array+0x38>)
 8004554:	4c0d      	ldr	r4, [pc, #52]	@ (800458c <__libc_init_array+0x3c>)
 8004556:	1b64      	subs	r4, r4, r5
 8004558:	10a4      	asrs	r4, r4, #2
 800455a:	2600      	movs	r6, #0
 800455c:	42a6      	cmp	r6, r4
 800455e:	d109      	bne.n	8004574 <__libc_init_array+0x24>
 8004560:	4d0b      	ldr	r5, [pc, #44]	@ (8004590 <__libc_init_array+0x40>)
 8004562:	4c0c      	ldr	r4, [pc, #48]	@ (8004594 <__libc_init_array+0x44>)
 8004564:	f000 f818 	bl	8004598 <_init>
 8004568:	1b64      	subs	r4, r4, r5
 800456a:	10a4      	asrs	r4, r4, #2
 800456c:	2600      	movs	r6, #0
 800456e:	42a6      	cmp	r6, r4
 8004570:	d105      	bne.n	800457e <__libc_init_array+0x2e>
 8004572:	bd70      	pop	{r4, r5, r6, pc}
 8004574:	f855 3b04 	ldr.w	r3, [r5], #4
 8004578:	4798      	blx	r3
 800457a:	3601      	adds	r6, #1
 800457c:	e7ee      	b.n	800455c <__libc_init_array+0xc>
 800457e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004582:	4798      	blx	r3
 8004584:	3601      	adds	r6, #1
 8004586:	e7f2      	b.n	800456e <__libc_init_array+0x1e>
 8004588:	080045d0 	.word	0x080045d0
 800458c:	080045d0 	.word	0x080045d0
 8004590:	080045d0 	.word	0x080045d0
 8004594:	080045d4 	.word	0x080045d4

08004598 <_init>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	bf00      	nop
 800459c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459e:	bc08      	pop	{r3}
 80045a0:	469e      	mov	lr, r3
 80045a2:	4770      	bx	lr

080045a4 <_fini>:
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	bf00      	nop
 80045a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045aa:	bc08      	pop	{r3}
 80045ac:	469e      	mov	lr, r3
 80045ae:	4770      	bx	lr
