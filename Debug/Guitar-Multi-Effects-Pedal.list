
Guitar-Multi-Effects-Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009494  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae0  0800965c  0800965c  0000a65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b13c  0800b13c  0000d04c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b13c  0800b13c  0000c13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b144  0800b144  0000d04c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b144  0800b144  0000c144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b148  0800b148  0000c148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  0800b14c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  2000004c  0800b198  0000d04c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  0800b198  0000d89c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d04c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f7f6  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f92  00000000  00000000  0002c872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  00030808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015f9  00000000  00000000  00032428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b145  00000000  00000000  00033a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000240b8  00000000  00000000  0005eb66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105bcb  00000000  00000000  00082c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001887e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077ac  00000000  00000000  0018882c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0018ffd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000004c 	.word	0x2000004c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009644 	.word	0x08009644

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000050 	.word	0x20000050
 8000204:	08009644 	.word	0x08009644

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <Display_Init>:




void Display_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
    // Initialize the display hardware
    BSP_LCD_Init();
 80004fc:	f001 fdb4 	bl	8002068 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000500:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8000504:	2000      	movs	r0, #0
 8000506:	f001 fe47 	bl	8002198 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(0);
 800050a:	2000      	movs	r0, #0
 800050c:	f001 fea4 	bl	8002258 <BSP_LCD_SelectLayer>

    // Clear the display with a default color
    BSP_LCD_Clear(LCD_COLOR_WHITE); // Clear the LCD display
 8000510:	f04f 30ff 	mov.w	r0, #4294967295
 8000514:	f001 fefc 	bl	8002310 <BSP_LCD_Clear>
    BSP_LCD_DisplayOn();
 8000518:	f002 f876 	bl	8002608 <BSP_LCD_DisplayOn>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800051c:	f04f 30ff 	mov.w	r0, #4294967295
 8000520:	f001 fec2 	bl	80022a8 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000524:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000528:	f001 fea6 	bl	8002278 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24); //set the font of the text
 800052c:	4802      	ldr	r0, [pc, #8]	@ (8000538 <Display_Init+0x40>)
 800052e:	f001 fed5 	bl	80022dc <BSP_LCD_SetFont>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000004 	.word	0x20000004

0800053c <Display_Draw_Text>:


void Display_Draw_Text(const char *text, uint16_t x, uint16_t y)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	807b      	strh	r3, [r7, #2]
 8000548:	4613      	mov	r3, r2
 800054a:	803b      	strh	r3, [r7, #0]

    BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, CENTER_MODE);
 800054c:	8839      	ldrh	r1, [r7, #0]
 800054e:	8878      	ldrh	r0, [r7, #2]
 8000550:	2301      	movs	r3, #1
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	f001 ff48 	bl	80023e8 <BSP_LCD_DisplayStringAt>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <Audio_Peripheral_Init>:
static volatile int16_t *outBufPtr = &dacData[0];

uint8_t dataReadyFlag;

uint32_t Audio_Peripheral_Init()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af02      	add	r7, sp, #8
	/* Initialize the audio in/out */
	BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1, OUTPUT_DEVICE_HEADPHONE, DEFAULT_AUDIO_IN_FREQ,DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 8000566:	2302      	movs	r3, #2
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2310      	movs	r3, #16
 800056c:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000570:	2102      	movs	r1, #2
 8000572:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8000576:	f001 fb7f 	bl	8001c78 <BSP_AUDIO_IN_OUT_Init>

	Display_Init();
 800057a:	f7ff ffbd 	bl	80004f8 <Display_Init>
	Display_Draw_Text("Test", 50, 100);
 800057e:	2264      	movs	r2, #100	@ 0x64
 8000580:	2132      	movs	r1, #50	@ 0x32
 8000582:	4803      	ldr	r0, [pc, #12]	@ (8000590 <Audio_Peripheral_Init+0x30>)
 8000584:	f7ff ffda 	bl	800053c <Display_Draw_Text>





	return 0;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	0800965c 	.word	0x0800965c

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f002 fc04 	bl	8002da4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f816 	bl	80005cc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005a0:	f000 f882 	bl	80006a8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 fb2c 	bl	8000c00 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a8:	f000 fab6 	bl	8000b18 <MX_DMA_Init>
  MX_SAI2_Init();
 80005ac:	f000 f988 	bl	80008c0 <MX_SAI2_Init>
  MX_USART1_UART_Init();
 80005b0:	f000 fa82 	bl	8000ab8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80005b4:	f000 fa2c 	bl	8000a10 <MX_TIM1_Init>
  MX_DMA2D_Init();
 80005b8:	f000 f89e 	bl	80006f8 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80005bc:	f000 f8ce 	bl	800075c <MX_LTDC_Init>
  MX_FMC_Init();
 80005c0:	f000 fad0 	bl	8000b64 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
 // Display_Init();

  Audio_Peripheral_Init();
 80005c4:	f7ff ffcc 	bl	8000560 <Audio_Peripheral_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <main+0x34>

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	@ 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f009 f805 	bl	80095ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f0:	f004 fea6 	bl	8005340 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	4b2a      	ldr	r3, [pc, #168]	@ (80006a0 <SystemClock_Config+0xd4>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a29      	ldr	r2, [pc, #164]	@ (80006a0 <SystemClock_Config+0xd4>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b27      	ldr	r3, [pc, #156]	@ (80006a0 <SystemClock_Config+0xd4>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	4b25      	ldr	r3, [pc, #148]	@ (80006a4 <SystemClock_Config+0xd8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a24      	ldr	r2, [pc, #144]	@ (80006a4 <SystemClock_Config+0xd8>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <SystemClock_Config+0xd8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000638:	2308      	movs	r3, #8
 800063a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 800063c:	23d2      	movs	r3, #210	@ 0xd2
 800063e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000644:	2302      	movs	r3, #2
 8000646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f004 fed7 	bl	8005400 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000658:	f000 fb62 	bl	8000d20 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800065c:	f004 fe80 	bl	8005360 <HAL_PWREx_EnableOverDrive>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000666:	f000 fb5b 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000676:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2106      	movs	r1, #6
 8000688:	4618      	mov	r0, r3
 800068a:	f005 f95d 	bl	8005948 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000694:	f000 fb44 	bl	8000d20 <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	@ 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b0a2      	sub	sp, #136	@ 0x88
 80006ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2284      	movs	r2, #132	@ 0x84
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f008 ff98 	bl	80095ea <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <PeriphCommonClock_Config+0x4c>)
 80006bc:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80006be:	2332      	movs	r3, #50	@ 0x32
 80006c0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80006d2:	2300      	movs	r3, #0
 80006d4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80006d6:	2300      	movs	r3, #0
 80006d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4618      	mov	r0, r3
 80006de:	f005 fb19 	bl	8005d14 <HAL_RCCEx_PeriphCLKConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <PeriphCommonClock_Config+0x44>
  {
    Error_Handler();
 80006e8:	f000 fb1a 	bl	8000d20 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3788      	adds	r7, #136	@ 0x88
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	00100008 	.word	0x00100008

080006f8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <MX_DMA2D_Init+0x5c>)
 80006fe:	4a16      	ldr	r2, [pc, #88]	@ (8000758 <MX_DMA2D_Init+0x60>)
 8000700:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000702:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_DMA2D_Init+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_DMA2D_Init+0x5c>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_DMA2D_Init+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_DMA2D_Init+0x5c>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_DMA2D_Init+0x5c>)
 800071c:	2200      	movs	r2, #0
 800071e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_DMA2D_Init+0x5c>)
 8000722:	2200      	movs	r2, #0
 8000724:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <MX_DMA2D_Init+0x5c>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800072c:	4809      	ldr	r0, [pc, #36]	@ (8000754 <MX_DMA2D_Init+0x5c>)
 800072e:	f003 f815 	bl	800375c <HAL_DMA2D_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000738:	f000 faf2 	bl	8000d20 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800073c:	2101      	movs	r1, #1
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_DMA2D_Init+0x5c>)
 8000740:	f003 f96a 	bl	8003a18 <HAL_DMA2D_ConfigLayer>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800074a:	f000 fae9 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000068 	.word	0x20000068
 8000758:	4002b000 	.word	0x4002b000

0800075c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b09a      	sub	sp, #104	@ 0x68
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000762:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000766:	2234      	movs	r2, #52	@ 0x34
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f008 ff3d 	bl	80095ea <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000770:	463b      	mov	r3, r7
 8000772:	2234      	movs	r2, #52	@ 0x34
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f008 ff37 	bl	80095ea <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800077c:	4b4e      	ldr	r3, [pc, #312]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 800077e:	4a4f      	ldr	r2, [pc, #316]	@ (80008bc <MX_LTDC_Init+0x160>)
 8000780:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000782:	4b4d      	ldr	r3, [pc, #308]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000788:	4b4b      	ldr	r3, [pc, #300]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800078e:	4b4a      	ldr	r3, [pc, #296]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000794:	4b48      	ldr	r3, [pc, #288]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800079a:	4b47      	ldr	r3, [pc, #284]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 800079c:	2207      	movs	r2, #7
 800079e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80007a0:	4b45      	ldr	r3, [pc, #276]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 80007a2:	2203      	movs	r2, #3
 80007a4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80007a6:	4b44      	ldr	r3, [pc, #272]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 80007a8:	220e      	movs	r2, #14
 80007aa:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80007ac:	4b42      	ldr	r3, [pc, #264]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 80007ae:	2205      	movs	r2, #5
 80007b0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80007b2:	4b41      	ldr	r3, [pc, #260]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 80007b4:	f240 228e 	movw	r2, #654	@ 0x28e
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80007ba:	4b3f      	ldr	r3, [pc, #252]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 80007bc:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80007c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80007c2:	4b3d      	ldr	r3, [pc, #244]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 80007c4:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80007c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80007ca:	4b3b      	ldr	r3, [pc, #236]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 80007cc:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80007d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007d2:	4b39      	ldr	r3, [pc, #228]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007da:	4b37      	ldr	r3, [pc, #220]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007e2:	4b35      	ldr	r3, [pc, #212]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007ea:	4833      	ldr	r0, [pc, #204]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 80007ec:	f004 faf2 	bl	8004dd4 <HAL_LTDC_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80007f6:	f000 fa93 	bl	8000d20 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800080a:	2300      	movs	r3, #0
 800080c:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800081a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800081c:	2305      	movs	r3, #5
 800081e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800083e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000842:	2200      	movs	r2, #0
 8000844:	4619      	mov	r1, r3
 8000846:	481c      	ldr	r0, [pc, #112]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 8000848:	f004 fb94 	bl	8004f74 <HAL_LTDC_ConfigLayer>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000852:	f000 fa65 	bl	8000d20 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000876:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000878:	2305      	movs	r3, #5
 800087a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	2201      	movs	r2, #1
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_LTDC_Init+0x15c>)
 80008a2:	f004 fb67 	bl	8004f74 <HAL_LTDC_ConfigLayer>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80008ac:	f000 fa38 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	3768      	adds	r7, #104	@ 0x68
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000a8 	.word	0x200000a8
 80008bc:	40016800 	.word	0x40016800

080008c0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80008c4:	4b4d      	ldr	r3, [pc, #308]	@ (80009fc <MX_SAI2_Init+0x13c>)
 80008c6:	4a4e      	ldr	r2, [pc, #312]	@ (8000a00 <MX_SAI2_Init+0x140>)
 80008c8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80008ca:	4b4c      	ldr	r3, [pc, #304]	@ (80009fc <MX_SAI2_Init+0x13c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80008d0:	4b4a      	ldr	r3, [pc, #296]	@ (80009fc <MX_SAI2_Init+0x13c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80008d6:	4b49      	ldr	r3, [pc, #292]	@ (80009fc <MX_SAI2_Init+0x13c>)
 80008d8:	2240      	movs	r2, #64	@ 0x40
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80008dc:	4b47      	ldr	r3, [pc, #284]	@ (80009fc <MX_SAI2_Init+0x13c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80008e2:	4b46      	ldr	r3, [pc, #280]	@ (80009fc <MX_SAI2_Init+0x13c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80008e8:	4b44      	ldr	r3, [pc, #272]	@ (80009fc <MX_SAI2_Init+0x13c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80008ee:	4b43      	ldr	r3, [pc, #268]	@ (80009fc <MX_SAI2_Init+0x13c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80008f4:	4b41      	ldr	r3, [pc, #260]	@ (80009fc <MX_SAI2_Init+0x13c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80008fa:	4b40      	ldr	r3, [pc, #256]	@ (80009fc <MX_SAI2_Init+0x13c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000900:	4b3e      	ldr	r3, [pc, #248]	@ (80009fc <MX_SAI2_Init+0x13c>)
 8000902:	4a40      	ldr	r2, [pc, #256]	@ (8000a04 <MX_SAI2_Init+0x144>)
 8000904:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000906:	4b3d      	ldr	r3, [pc, #244]	@ (80009fc <MX_SAI2_Init+0x13c>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800090c:	4b3b      	ldr	r3, [pc, #236]	@ (80009fc <MX_SAI2_Init+0x13c>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000912:	4b3a      	ldr	r3, [pc, #232]	@ (80009fc <MX_SAI2_Init+0x13c>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000918:	4b38      	ldr	r3, [pc, #224]	@ (80009fc <MX_SAI2_Init+0x13c>)
 800091a:	2200      	movs	r2, #0
 800091c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800091e:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <MX_SAI2_Init+0x13c>)
 8000920:	2208      	movs	r2, #8
 8000922:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000924:	4b35      	ldr	r3, [pc, #212]	@ (80009fc <MX_SAI2_Init+0x13c>)
 8000926:	2201      	movs	r2, #1
 8000928:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800092a:	4b34      	ldr	r3, [pc, #208]	@ (80009fc <MX_SAI2_Init+0x13c>)
 800092c:	2200      	movs	r2, #0
 800092e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000930:	4b32      	ldr	r3, [pc, #200]	@ (80009fc <MX_SAI2_Init+0x13c>)
 8000932:	2200      	movs	r2, #0
 8000934:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000936:	4b31      	ldr	r3, [pc, #196]	@ (80009fc <MX_SAI2_Init+0x13c>)
 8000938:	2200      	movs	r2, #0
 800093a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800093c:	4b2f      	ldr	r3, [pc, #188]	@ (80009fc <MX_SAI2_Init+0x13c>)
 800093e:	2200      	movs	r2, #0
 8000940:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000942:	4b2e      	ldr	r3, [pc, #184]	@ (80009fc <MX_SAI2_Init+0x13c>)
 8000944:	2200      	movs	r2, #0
 8000946:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000948:	4b2c      	ldr	r3, [pc, #176]	@ (80009fc <MX_SAI2_Init+0x13c>)
 800094a:	2201      	movs	r2, #1
 800094c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800094e:	4b2b      	ldr	r3, [pc, #172]	@ (80009fc <MX_SAI2_Init+0x13c>)
 8000950:	2200      	movs	r2, #0
 8000952:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000954:	4829      	ldr	r0, [pc, #164]	@ (80009fc <MX_SAI2_Init+0x13c>)
 8000956:	f006 f819 	bl	800698c <HAL_SAI_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000960:	f000 f9de 	bl	8000d20 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000964:	4b28      	ldr	r3, [pc, #160]	@ (8000a08 <MX_SAI2_Init+0x148>)
 8000966:	4a29      	ldr	r2, [pc, #164]	@ (8000a0c <MX_SAI2_Init+0x14c>)
 8000968:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800096a:	4b27      	ldr	r3, [pc, #156]	@ (8000a08 <MX_SAI2_Init+0x148>)
 800096c:	2200      	movs	r2, #0
 800096e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000970:	4b25      	ldr	r3, [pc, #148]	@ (8000a08 <MX_SAI2_Init+0x148>)
 8000972:	2203      	movs	r2, #3
 8000974:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000976:	4b24      	ldr	r3, [pc, #144]	@ (8000a08 <MX_SAI2_Init+0x148>)
 8000978:	2240      	movs	r2, #64	@ 0x40
 800097a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800097c:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <MX_SAI2_Init+0x148>)
 800097e:	2200      	movs	r2, #0
 8000980:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000982:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <MX_SAI2_Init+0x148>)
 8000984:	2200      	movs	r2, #0
 8000986:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000988:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <MX_SAI2_Init+0x148>)
 800098a:	2201      	movs	r2, #1
 800098c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <MX_SAI2_Init+0x148>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000994:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <MX_SAI2_Init+0x148>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800099a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <MX_SAI2_Init+0x148>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80009a0:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <MX_SAI2_Init+0x148>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80009a6:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <MX_SAI2_Init+0x148>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <MX_SAI2_Init+0x148>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <MX_SAI2_Init+0x148>)
 80009b4:	2208      	movs	r2, #8
 80009b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80009b8:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <MX_SAI2_Init+0x148>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_SAI2_Init+0x148>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80009c4:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <MX_SAI2_Init+0x148>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_SAI2_Init+0x148>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80009d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <MX_SAI2_Init+0x148>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_SAI2_Init+0x148>)
 80009d8:	2200      	movs	r2, #0
 80009da:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <MX_SAI2_Init+0x148>)
 80009de:	2201      	movs	r2, #1
 80009e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_SAI2_Init+0x148>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80009e8:	4807      	ldr	r0, [pc, #28]	@ (8000a08 <MX_SAI2_Init+0x148>)
 80009ea:	f005 ffcf 	bl	800698c <HAL_SAI_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80009f4:	f000 f994 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000150 	.word	0x20000150
 8000a00:	40015c04 	.word	0x40015c04
 8000a04:	0002ee00 	.word	0x0002ee00
 8000a08:	200001d4 	.word	0x200001d4
 8000a0c:	40015c24 	.word	0x40015c24

08000a10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	@ (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a30:	4a20      	ldr	r2, [pc, #128]	@ (8000ab4 <MX_TIM1_Init+0xa4>)
 8000a32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a48:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a54:	4b16      	ldr	r3, [pc, #88]	@ (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a5a:	4815      	ldr	r0, [pc, #84]	@ (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a5c:	f006 fa21 	bl	8006ea2 <HAL_TIM_Base_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a66:	f000 f95b 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	4619      	mov	r1, r3
 8000a76:	480e      	ldr	r0, [pc, #56]	@ (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a78:	f006 fa6a 	bl	8006f50 <HAL_TIM_ConfigClockSource>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a82:	f000 f94d 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	@ (8000ab0 <MX_TIM1_Init+0xa0>)
 8000a98:	f006 fc6a 	bl	8007370 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000aa2:	f000 f93d 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3720      	adds	r7, #32
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000318 	.word	0x20000318
 8000ab4:	40010000 	.word	0x40010000

08000ab8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000abc:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <MX_USART1_UART_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	@ (8000b14 <MX_USART1_UART_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <MX_USART1_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <MX_USART1_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <MX_USART1_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <MX_USART1_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <MX_USART1_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <MX_USART1_UART_Init+0x58>)
 8000afc:	f006 fcc6 	bl	800748c <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b06:	f000 f90b 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000364 	.word	0x20000364
 8000b14:	40011000 	.word	0x40011000

08000b18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <MX_DMA_Init+0x48>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a0f      	ldr	r2, [pc, #60]	@ (8000b60 <MX_DMA_Init+0x48>)
 8000b24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <MX_DMA_Init+0x48>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	203c      	movs	r0, #60	@ 0x3c
 8000b3c:	f002 fa8f 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000b40:	203c      	movs	r0, #60	@ 0x3c
 8000b42:	f002 faa8 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2045      	movs	r0, #69	@ 0x45
 8000b4c:	f002 fa87 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b50:	2045      	movs	r0, #69	@ 0x45
 8000b52:	f002 faa0 	bl	8003096 <HAL_NVIC_EnableIRQ>

}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	615a      	str	r2, [r3, #20]
 8000b7a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <MX_FMC_Init+0x94>)
 8000b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8000bfc <MX_FMC_Init+0x98>)
 8000b80:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b82:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <MX_FMC_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <MX_FMC_Init+0x94>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <MX_FMC_Init+0x94>)
 8000b90:	2208      	movs	r2, #8
 8000b92:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b94:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <MX_FMC_Init+0x94>)
 8000b96:	2210      	movs	r2, #16
 8000b98:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <MX_FMC_Init+0x94>)
 8000b9c:	2240      	movs	r2, #64	@ 0x40
 8000b9e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <MX_FMC_Init+0x94>)
 8000ba2:	2280      	movs	r2, #128	@ 0x80
 8000ba4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <MX_FMC_Init+0x94>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <MX_FMC_Init+0x94>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_FMC_Init+0x94>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <MX_FMC_Init+0x94>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000bbe:	2310      	movs	r3, #16
 8000bc0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000bc6:	2310      	movs	r3, #16
 8000bc8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000bca:	2310      	movs	r3, #16
 8000bcc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	@ (8000bf8 <MX_FMC_Init+0x94>)
 8000be0:	f006 f8ce 	bl	8006d80 <HAL_SDRAM_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000bea:	f000 f899 	bl	8000d20 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000bee:	bf00      	nop
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200003ec 	.word	0x200003ec
 8000bfc:	a0000140 	.word	0xa0000140

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b08d      	sub	sp, #52	@ 0x34
 8000c04:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c06:	4b45      	ldr	r3, [pc, #276]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a44      	ldr	r2, [pc, #272]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c0c:	f043 0310 	orr.w	r3, r3, #16
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b42      	ldr	r3, [pc, #264]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a3e      	ldr	r2, [pc, #248]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b39      	ldr	r3, [pc, #228]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a38      	ldr	r2, [pc, #224]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4e:	4b33      	ldr	r3, [pc, #204]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a32      	ldr	r2, [pc, #200]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b30      	ldr	r3, [pc, #192]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c62:	623b      	str	r3, [r7, #32]
 8000c64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c66:	4b2d      	ldr	r3, [pc, #180]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b2a      	ldr	r3, [pc, #168]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c7a:	61fb      	str	r3, [r7, #28]
 8000c7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7e:	4b27      	ldr	r3, [pc, #156]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a26      	ldr	r2, [pc, #152]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b24      	ldr	r3, [pc, #144]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a20      	ldr	r2, [pc, #128]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cae:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a1a      	ldr	r2, [pc, #104]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cc6:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a14      	ldr	r2, [pc, #80]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000ccc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cde:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000ce4:	f043 0320 	orr.w	r3, r3, #32
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0320 	and.w	r3, r3, #32
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a08      	ldr	r2, [pc, #32]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_GPIO_Init+0x11c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0e:	bf00      	nop
 8000d10:	3734      	adds	r7, #52	@ 0x34
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <Error_Handler+0x8>

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <HAL_MspInit+0x44>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a0e      	ldr	r2, [pc, #56]	@ (8000d70 <HAL_MspInit+0x44>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <HAL_MspInit+0x44>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <HAL_MspInit+0x44>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	4a08      	ldr	r2, [pc, #32]	@ (8000d70 <HAL_MspInit+0x44>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_MspInit+0x44>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800

08000d74 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <HAL_DMA2D_MspInit+0x38>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d10b      	bne.n	8000d9e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d86:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <HAL_DMA2D_MspInit+0x3c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a09      	ldr	r2, [pc, #36]	@ (8000db0 <HAL_DMA2D_MspInit+0x3c>)
 8000d8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <HAL_DMA2D_MspInit+0x3c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	4002b000 	.word	0x4002b000
 8000db0:	40023800 	.word	0x40023800

08000db4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b092      	sub	sp, #72	@ 0x48
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a99      	ldr	r2, [pc, #612]	@ (8001038 <HAL_LTDC_MspInit+0x284>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f040 812b 	bne.w	800102e <HAL_LTDC_MspInit+0x27a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000dd8:	4b98      	ldr	r3, [pc, #608]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ddc:	4a97      	ldr	r2, [pc, #604]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000dde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000de2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de4:	4b95      	ldr	r3, [pc, #596]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000dec:	633b      	str	r3, [r7, #48]	@ 0x30
 8000dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df0:	4b92      	ldr	r3, [pc, #584]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df4:	4a91      	ldr	r2, [pc, #580]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfc:	4b8f      	ldr	r3, [pc, #572]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e08:	4b8c      	ldr	r3, [pc, #560]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0c:	4a8b      	ldr	r2, [pc, #556]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e14:	4b89      	ldr	r3, [pc, #548]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e20:	4b86      	ldr	r3, [pc, #536]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	4a85      	ldr	r2, [pc, #532]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2c:	4b83      	ldr	r3, [pc, #524]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e38:	4b80      	ldr	r3, [pc, #512]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3c:	4a7f      	ldr	r2, [pc, #508]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e44:	4b7d      	ldr	r3, [pc, #500]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e4c:	623b      	str	r3, [r7, #32]
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e50:	4b7a      	ldr	r3, [pc, #488]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e54:	4a79      	ldr	r2, [pc, #484]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5c:	4b77      	ldr	r3, [pc, #476]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e68:	4b74      	ldr	r3, [pc, #464]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6c:	4a73      	ldr	r2, [pc, #460]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e74:	4b71      	ldr	r3, [pc, #452]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	4b6e      	ldr	r3, [pc, #440]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	4a6d      	ldr	r2, [pc, #436]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8c:	4b6b      	ldr	r3, [pc, #428]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e98:	4b68      	ldr	r3, [pc, #416]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9c:	4a67      	ldr	r2, [pc, #412]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea4:	4b65      	ldr	r3, [pc, #404]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000eb0:	4b62      	ldr	r3, [pc, #392]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	4a61      	ldr	r2, [pc, #388]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000eb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebc:	4b5f      	ldr	r3, [pc, #380]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec8:	4b5c      	ldr	r3, [pc, #368]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ecc:	4a5b      	ldr	r2, [pc, #364]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ed2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed4:	4b59      	ldr	r3, [pc, #356]	@ (800103c <HAL_LTDC_MspInit+0x288>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
    PI14     ------> LTDC_CLK
    PH3     ------> LTDC_R1
    PG6     ------> LTDC_R7
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ee0:	2370      	movs	r3, #112	@ 0x70
 8000ee2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ef0:	230e      	movs	r3, #14
 8000ef2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4851      	ldr	r0, [pc, #324]	@ (8001040 <HAL_LTDC_MspInit+0x28c>)
 8000efc:	f002 feba 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f04:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f12:	230e      	movs	r3, #14
 8000f14:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4849      	ldr	r0, [pc, #292]	@ (8001044 <HAL_LTDC_MspInit+0x290>)
 8000f1e:	f002 fea9 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_6;
 8000f22:	f44f 5321 	mov.w	r3, #10304	@ 0x2840
 8000f26:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f34:	230e      	movs	r3, #14
 8000f36:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f38:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4842      	ldr	r0, [pc, #264]	@ (8001048 <HAL_LTDC_MspInit+0x294>)
 8000f40:	f002 fe98 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f48:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f56:	230e      	movs	r3, #14
 8000f58:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f5a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f5e:	4619      	mov	r1, r3
 8000f60:	483a      	ldr	r0, [pc, #232]	@ (800104c <HAL_LTDC_MspInit+0x298>)
 8000f62:	f002 fe87 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8000f66:	2348      	movs	r3, #72	@ 0x48
 8000f68:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f76:	230e      	movs	r3, #14
 8000f78:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4833      	ldr	r0, [pc, #204]	@ (8001050 <HAL_LTDC_MspInit+0x29c>)
 8000f82:	f002 fe77 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f8a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f98:	230e      	movs	r3, #14
 8000f9a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	482c      	ldr	r0, [pc, #176]	@ (8001054 <HAL_LTDC_MspInit+0x2a0>)
 8000fa4:	f002 fe66 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8;
 8000fa8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000fac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fba:	230e      	movs	r3, #14
 8000fbc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4824      	ldr	r0, [pc, #144]	@ (8001058 <HAL_LTDC_MspInit+0x2a4>)
 8000fc6:	f002 fe55 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_9
 8000fca:	f244 6313 	movw	r3, #17939	@ 0x4613
 8000fce:	637b      	str	r3, [r7, #52]	@ 0x34
                          |GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fdc:	230e      	movs	r3, #14
 8000fde:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fe0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481d      	ldr	r0, [pc, #116]	@ (800105c <HAL_LTDC_MspInit+0x2a8>)
 8000fe8:	f002 fe44 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_4;
 8000fec:	2390      	movs	r3, #144	@ 0x90
 8000fee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ffc:	230e      	movs	r3, #14
 8000ffe:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001000:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001004:	4619      	mov	r1, r3
 8001006:	4816      	ldr	r0, [pc, #88]	@ (8001060 <HAL_LTDC_MspInit+0x2ac>)
 8001008:	f002 fe34 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 800100c:	f24e 2308 	movw	r3, #57864	@ 0xe208
 8001010:	637b      	str	r3, [r7, #52]	@ 0x34
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800101e:	230e      	movs	r3, #14
 8001020:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001022:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001026:	4619      	mov	r1, r3
 8001028:	480e      	ldr	r0, [pc, #56]	@ (8001064 <HAL_LTDC_MspInit+0x2b0>)
 800102a:	f002 fe23 	bl	8003c74 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800102e:	bf00      	nop
 8001030:	3748      	adds	r7, #72	@ 0x48
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40016800 	.word	0x40016800
 800103c:	40023800 	.word	0x40023800
 8001040:	40021000 	.word	0x40021000
 8001044:	40020400 	.word	0x40020400
 8001048:	40021800 	.word	0x40021800
 800104c:	40022400 	.word	0x40022400
 8001050:	40020c00 	.word	0x40020c00
 8001054:	40020800 	.word	0x40020800
 8001058:	40020000 	.word	0x40020000
 800105c:	40022000 	.word	0x40022000
 8001060:	40022800 	.word	0x40022800
 8001064:	40021c00 	.word	0x40021c00

08001068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <HAL_TIM_Base_MspInit+0x38>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10b      	bne.n	8001092 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_TIM_Base_MspInit+0x3c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	4a09      	ldr	r2, [pc, #36]	@ (80010a4 <HAL_TIM_Base_MspInit+0x3c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6453      	str	r3, [r2, #68]	@ 0x44
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <HAL_TIM_Base_MspInit+0x3c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40010000 	.word	0x40010000
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0ac      	sub	sp, #176	@ 0xb0
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f107 0318 	add.w	r3, r7, #24
 80010c4:	2284      	movs	r2, #132	@ 0x84
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f008 fa8e 	bl	80095ea <memset>
  if(huart->Instance==USART1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a32      	ldr	r2, [pc, #200]	@ (800119c <HAL_UART_MspInit+0xf4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d15c      	bne.n	8001192 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010d8:	2340      	movs	r3, #64	@ 0x40
 80010da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010dc:	2300      	movs	r3, #0
 80010de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	4618      	mov	r0, r3
 80010e6:	f004 fe15 	bl	8005d14 <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010f0:	f7ff fe16 	bl	8000d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f4:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <HAL_UART_MspInit+0xf8>)
 80010f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f8:	4a29      	ldr	r2, [pc, #164]	@ (80011a0 <HAL_UART_MspInit+0xf8>)
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001100:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <HAL_UART_MspInit+0xf8>)
 8001102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <HAL_UART_MspInit+0xf8>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001110:	4a23      	ldr	r2, [pc, #140]	@ (80011a0 <HAL_UART_MspInit+0xf8>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	6313      	str	r3, [r2, #48]	@ 0x30
 8001118:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <HAL_UART_MspInit+0xf8>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <HAL_UART_MspInit+0xf8>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001128:	4a1d      	ldr	r2, [pc, #116]	@ (80011a0 <HAL_UART_MspInit+0xf8>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <HAL_UART_MspInit+0xf8>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001154:	2307      	movs	r3, #7
 8001156:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800115e:	4619      	mov	r1, r3
 8001160:	4810      	ldr	r0, [pc, #64]	@ (80011a4 <HAL_UART_MspInit+0xfc>)
 8001162:	f002 fd87 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001166:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800116a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001180:	2307      	movs	r3, #7
 8001182:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800118a:	4619      	mov	r1, r3
 800118c:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <HAL_UART_MspInit+0x100>)
 800118e:	f002 fd71 	bl	8003c74 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001192:	bf00      	nop
 8001194:	37b0      	adds	r7, #176	@ 0xb0
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40011000 	.word	0x40011000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40020000 	.word	0x40020000

080011ac <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011c0:	4b3a      	ldr	r3, [pc, #232]	@ (80012ac <HAL_FMC_MspInit+0x100>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d16d      	bne.n	80012a4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80011c8:	4b38      	ldr	r3, [pc, #224]	@ (80012ac <HAL_FMC_MspInit+0x100>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80011ce:	4b38      	ldr	r3, [pc, #224]	@ (80012b0 <HAL_FMC_MspInit+0x104>)
 80011d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d2:	4a37      	ldr	r2, [pc, #220]	@ (80012b0 <HAL_FMC_MspInit+0x104>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6393      	str	r3, [r2, #56]	@ 0x38
 80011da:	4b35      	ldr	r3, [pc, #212]	@ (80012b0 <HAL_FMC_MspInit+0x104>)
 80011dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2
 80011e6:	f248 1337 	movw	r3, #33079	@ 0x8137
 80011ea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011f8:	230c      	movs	r3, #12
 80011fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4619      	mov	r1, r3
 8001200:	482c      	ldr	r0, [pc, #176]	@ (80012b4 <HAL_FMC_MspInit+0x108>)
 8001202:	f002 fd37 	bl	8003c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001206:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800120a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001218:	230c      	movs	r3, #12
 800121a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4619      	mov	r1, r3
 8001220:	4825      	ldr	r0, [pc, #148]	@ (80012b8 <HAL_FMC_MspInit+0x10c>)
 8001222:	f002 fd27 	bl	8003c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001226:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800122a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001238:	230c      	movs	r3, #12
 800123a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4619      	mov	r1, r3
 8001240:	481e      	ldr	r0, [pc, #120]	@ (80012bc <HAL_FMC_MspInit+0x110>)
 8001242:	f002 fd17 	bl	8003c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_2;
 8001246:	2324      	movs	r3, #36	@ 0x24
 8001248:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001256:	230c      	movs	r3, #12
 8001258:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4818      	ldr	r0, [pc, #96]	@ (80012c0 <HAL_FMC_MspInit+0x114>)
 8001260:	f002 fd08 	bl	8003c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001264:	2304      	movs	r3, #4
 8001266:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001274:	230c      	movs	r3, #12
 8001276:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	4811      	ldr	r0, [pc, #68]	@ (80012c4 <HAL_FMC_MspInit+0x118>)
 800127e:	f002 fcf9 	bl	8003c74 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 8001282:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001286:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001294:	230c      	movs	r3, #12
 8001296:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4619      	mov	r1, r3
 800129c:	480a      	ldr	r0, [pc, #40]	@ (80012c8 <HAL_FMC_MspInit+0x11c>)
 800129e:	f002 fce9 	bl	8003c74 <HAL_GPIO_Init>
 80012a2:	e000      	b.n	80012a6 <HAL_FMC_MspInit+0xfa>
    return;
 80012a4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000420 	.word	0x20000420
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40021800 	.word	0x40021800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40021400 	.word	0x40021400
 80012c0:	40021c00 	.word	0x40021c00
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40021000 	.word	0x40021000

080012cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012d4:	f7ff ff6a 	bl	80011ac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001498 <HAL_SAI_MspInit+0x1b8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d16a      	bne.n	80013c8 <HAL_SAI_MspInit+0xe8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80012f2:	4b6a      	ldr	r3, [pc, #424]	@ (800149c <HAL_SAI_MspInit+0x1bc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10b      	bne.n	8001312 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80012fa:	4b69      	ldr	r3, [pc, #420]	@ (80014a0 <HAL_SAI_MspInit+0x1c0>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a68      	ldr	r2, [pc, #416]	@ (80014a0 <HAL_SAI_MspInit+0x1c0>)
 8001300:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b66      	ldr	r3, [pc, #408]	@ (80014a0 <HAL_SAI_MspInit+0x1c0>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001312:	4b62      	ldr	r3, [pc, #392]	@ (800149c <HAL_SAI_MspInit+0x1bc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a60      	ldr	r2, [pc, #384]	@ (800149c <HAL_SAI_MspInit+0x1bc>)
 800131a:	6013      	str	r3, [r2, #0]
    PE0     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800131c:	2301      	movs	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800132c:	230a      	movs	r3, #10
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	485b      	ldr	r0, [pc, #364]	@ (80014a4 <HAL_SAI_MspInit+0x1c4>)
 8001338:	f002 fc9c 	bl	8003c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 800133c:	23e0      	movs	r3, #224	@ 0xe0
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800134c:	230a      	movs	r3, #10
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4854      	ldr	r0, [pc, #336]	@ (80014a8 <HAL_SAI_MspInit+0x1c8>)
 8001358:	f002 fc8c 	bl	8003c74 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 800135c:	4b53      	ldr	r3, [pc, #332]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 800135e:	4a54      	ldr	r2, [pc, #336]	@ (80014b0 <HAL_SAI_MspInit+0x1d0>)
 8001360:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8001362:	4b52      	ldr	r3, [pc, #328]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 8001364:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001368:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800136a:	4b50      	ldr	r3, [pc, #320]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 800136c:	2240      	movs	r2, #64	@ 0x40
 800136e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001370:	4b4e      	ldr	r3, [pc, #312]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8001376:	4b4d      	ldr	r3, [pc, #308]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 8001378:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800137c:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800137e:	4b4b      	ldr	r3, [pc, #300]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001384:	4b49      	ldr	r3, [pc, #292]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800138a:	4b48      	ldr	r3, [pc, #288]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 800138c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001390:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001392:	4b46      	ldr	r3, [pc, #280]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 8001394:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001398:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800139a:	4b44      	ldr	r3, [pc, #272]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80013a0:	4842      	ldr	r0, [pc, #264]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 80013a2:	f001 fe93 	bl	80030cc <HAL_DMA_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_SAI_MspInit+0xd0>
    {
      Error_Handler();
 80013ac:	f7ff fcb8 	bl	8000d20 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a3e      	ldr	r2, [pc, #248]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 80013b4:	671a      	str	r2, [r3, #112]	@ 0x70
 80013b6:	4a3d      	ldr	r2, [pc, #244]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a3b      	ldr	r2, [pc, #236]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 80013c0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80013c2:	4a3a      	ldr	r2, [pc, #232]	@ (80014ac <HAL_SAI_MspInit+0x1cc>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a39      	ldr	r2, [pc, #228]	@ (80014b4 <HAL_SAI_MspInit+0x1d4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d15d      	bne.n	800148e <HAL_SAI_MspInit+0x1ae>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80013d2:	4b32      	ldr	r3, [pc, #200]	@ (800149c <HAL_SAI_MspInit+0x1bc>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10b      	bne.n	80013f2 <HAL_SAI_MspInit+0x112>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80013da:	4b31      	ldr	r3, [pc, #196]	@ (80014a0 <HAL_SAI_MspInit+0x1c0>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	4a30      	ldr	r2, [pc, #192]	@ (80014a0 <HAL_SAI_MspInit+0x1c0>)
 80013e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e6:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <HAL_SAI_MspInit+0x1c0>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80013f2:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <HAL_SAI_MspInit+0x1bc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a28      	ldr	r2, [pc, #160]	@ (800149c <HAL_SAI_MspInit+0x1bc>)
 80013fa:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800140e:	230a      	movs	r3, #10
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4827      	ldr	r0, [pc, #156]	@ (80014b8 <HAL_SAI_MspInit+0x1d8>)
 800141a:	f002 fc2b 	bl	8003c74 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream6;
 800141e:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 8001420:	4a27      	ldr	r2, [pc, #156]	@ (80014c0 <HAL_SAI_MspInit+0x1e0>)
 8001422:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 8001424:	4b25      	ldr	r3, [pc, #148]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 8001426:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800142a:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800142c:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001432:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001438:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 800143a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800143e:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001440:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 8001442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001446:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001448:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 800144a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800144e:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8001450:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 8001452:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001456:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 800145a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800145e:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001466:	4815      	ldr	r0, [pc, #84]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 8001468:	f001 fe30 	bl	80030cc <HAL_DMA_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_SAI_MspInit+0x196>
    {
      Error_Handler();
 8001472:	f7ff fc55 	bl	8000d20 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a10      	ldr	r2, [pc, #64]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 800147a:	671a      	str	r2, [r3, #112]	@ 0x70
 800147c:	4a0f      	ldr	r2, [pc, #60]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a0d      	ldr	r2, [pc, #52]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 8001486:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001488:	4a0c      	ldr	r2, [pc, #48]	@ (80014bc <HAL_SAI_MspInit+0x1dc>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	@ 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40015c04 	.word	0x40015c04
 800149c:	20000424 	.word	0x20000424
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40022000 	.word	0x40022000
 80014ac:	20000258 	.word	0x20000258
 80014b0:	40026470 	.word	0x40026470
 80014b4:	40015c24 	.word	0x40015c24
 80014b8:	40021800 	.word	0x40021800
 80014bc:	200002b8 	.word	0x200002b8
 80014c0:	400264a0 	.word	0x400264a0

080014c4 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a25      	ldr	r2, [pc, #148]	@ (8001568 <HAL_SAI_MspDeInit+0xa4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d120      	bne.n	8001518 <HAL_SAI_MspDeInit+0x54>
    {
    SAI2_client --;
 80014d6:	4b25      	ldr	r3, [pc, #148]	@ (800156c <HAL_SAI_MspDeInit+0xa8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3b01      	subs	r3, #1
 80014dc:	4a23      	ldr	r2, [pc, #140]	@ (800156c <HAL_SAI_MspDeInit+0xa8>)
 80014de:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 80014e0:	4b22      	ldr	r3, [pc, #136]	@ (800156c <HAL_SAI_MspDeInit+0xa8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d105      	bne.n	80014f4 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 80014e8:	4b21      	ldr	r3, [pc, #132]	@ (8001570 <HAL_SAI_MspDeInit+0xac>)
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	4a20      	ldr	r2, [pc, #128]	@ (8001570 <HAL_SAI_MspDeInit+0xac>)
 80014ee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80014f2:	6453      	str	r3, [r2, #68]	@ 0x44
    PE0     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0);
 80014f4:	2101      	movs	r1, #1
 80014f6:	481f      	ldr	r0, [pc, #124]	@ (8001574 <HAL_SAI_MspDeInit+0xb0>)
 80014f8:	f002 fd68 	bl	8003fcc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6);
 80014fc:	21e0      	movs	r1, #224	@ 0xe0
 80014fe:	481e      	ldr	r0, [pc, #120]	@ (8001578 <HAL_SAI_MspDeInit+0xb4>)
 8001500:	f002 fd64 	bl	8003fcc <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001508:	4618      	mov	r0, r3
 800150a:	f001 fe8d 	bl	8003228 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001512:	4618      	mov	r0, r3
 8001514:	f001 fe88 	bl	8003228 <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a17      	ldr	r2, [pc, #92]	@ (800157c <HAL_SAI_MspDeInit+0xb8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d11d      	bne.n	800155e <HAL_SAI_MspDeInit+0x9a>
    {
    SAI2_client --;
 8001522:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_SAI_MspDeInit+0xa8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3b01      	subs	r3, #1
 8001528:	4a10      	ldr	r2, [pc, #64]	@ (800156c <HAL_SAI_MspDeInit+0xa8>)
 800152a:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <HAL_SAI_MspDeInit+0xa8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d105      	bne.n	8001540 <HAL_SAI_MspDeInit+0x7c>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8001534:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <HAL_SAI_MspDeInit+0xac>)
 8001536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <HAL_SAI_MspDeInit+0xac>)
 800153a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800153e:	6453      	str	r3, [r2, #68]	@ 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_10);
 8001540:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001544:	480e      	ldr	r0, [pc, #56]	@ (8001580 <HAL_SAI_MspDeInit+0xbc>)
 8001546:	f002 fd41 	bl	8003fcc <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154e:	4618      	mov	r0, r3
 8001550:	f001 fe6a 	bl	8003228 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001558:	4618      	mov	r0, r3
 800155a:	f001 fe65 	bl	8003228 <HAL_DMA_DeInit>
    }
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40015c04 	.word	0x40015c04
 800156c:	20000424 	.word	0x20000424
 8001570:	40023800 	.word	0x40023800
 8001574:	40021000 	.word	0x40021000
 8001578:	40022000 	.word	0x40022000
 800157c:	40015c24 	.word	0x40015c24
 8001580:	40021800 	.word	0x40021800

08001584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <NMI_Handler+0x4>

0800158c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <MemManage_Handler+0x4>

0800159c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <UsageFault_Handler+0x4>

080015ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015da:	f001 fc21 	bl	8002e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80015e8:	4802      	ldr	r0, [pc, #8]	@ (80015f4 <DMA2_Stream4_IRQHandler+0x10>)
 80015ea:	f001 fe7b 	bl	80032e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000258 	.word	0x20000258

080015f8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80015fc:	4802      	ldr	r0, [pc, #8]	@ (8001608 <DMA2_Stream6_IRQHandler+0x10>)
 80015fe:	f001 fe71 	bl	80032e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200002b8 	.word	0x200002b8

0800160c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <SystemInit+0x20>)
 8001612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001616:	4a05      	ldr	r2, [pc, #20]	@ (800162c <SystemInit+0x20>)
 8001618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800161c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001630:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001668 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001634:	f7ff ffea 	bl	800160c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001638:	480c      	ldr	r0, [pc, #48]	@ (800166c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800163a:	490d      	ldr	r1, [pc, #52]	@ (8001670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800163c:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001650:	4c0a      	ldr	r4, [pc, #40]	@ (800167c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800165e:	f007 ffcd 	bl	80095fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001662:	f7fe ff97 	bl	8000594 <main>
  bx  lr    
 8001666:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001668:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800166c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001670:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001674:	0800b14c 	.word	0x0800b14c
  ldr r2, =_sbss
 8001678:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 800167c:	2000089c 	.word	0x2000089c

08001680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <ADC_IRQHandler>
	...

08001684 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	@ 0x30
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a51      	ldr	r2, [pc, #324]	@ (80017d4 <I2Cx_MspInit+0x150>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d14d      	bne.n	8001730 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001694:	4b50      	ldr	r3, [pc, #320]	@ (80017d8 <I2Cx_MspInit+0x154>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001698:	4a4f      	ldr	r2, [pc, #316]	@ (80017d8 <I2Cx_MspInit+0x154>)
 800169a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169e:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a0:	4b4d      	ldr	r3, [pc, #308]	@ (80017d8 <I2Cx_MspInit+0x154>)
 80016a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80016b0:	2312      	movs	r3, #18
 80016b2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80016bc:	2304      	movs	r3, #4
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	4845      	ldr	r0, [pc, #276]	@ (80017dc <I2Cx_MspInit+0x158>)
 80016c8:	f002 fad4 	bl	8003c74 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80016cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	4840      	ldr	r0, [pc, #256]	@ (80017dc <I2Cx_MspInit+0x158>)
 80016da:	f002 facb 	bl	8003c74 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80016de:	4b3e      	ldr	r3, [pc, #248]	@ (80017d8 <I2Cx_MspInit+0x154>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	4a3d      	ldr	r2, [pc, #244]	@ (80017d8 <I2Cx_MspInit+0x154>)
 80016e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ea:	4b3b      	ldr	r3, [pc, #236]	@ (80017d8 <I2Cx_MspInit+0x154>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80016f6:	4b38      	ldr	r3, [pc, #224]	@ (80017d8 <I2Cx_MspInit+0x154>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	4a37      	ldr	r2, [pc, #220]	@ (80017d8 <I2Cx_MspInit+0x154>)
 80016fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001700:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001702:	4b35      	ldr	r3, [pc, #212]	@ (80017d8 <I2Cx_MspInit+0x154>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a34      	ldr	r2, [pc, #208]	@ (80017d8 <I2Cx_MspInit+0x154>)
 8001708:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800170c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	210f      	movs	r1, #15
 8001712:	2048      	movs	r0, #72	@ 0x48
 8001714:	f001 fca3 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001718:	2048      	movs	r0, #72	@ 0x48
 800171a:	f001 fcbc 	bl	8003096 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	210f      	movs	r1, #15
 8001722:	2049      	movs	r0, #73	@ 0x49
 8001724:	f001 fc9b 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001728:	2049      	movs	r0, #73	@ 0x49
 800172a:	f001 fcb4 	bl	8003096 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800172e:	e04d      	b.n	80017cc <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001730:	4b29      	ldr	r3, [pc, #164]	@ (80017d8 <I2Cx_MspInit+0x154>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001734:	4a28      	ldr	r2, [pc, #160]	@ (80017d8 <I2Cx_MspInit+0x154>)
 8001736:	f043 0302 	orr.w	r3, r3, #2
 800173a:	6313      	str	r3, [r2, #48]	@ 0x30
 800173c:	4b26      	ldr	r3, [pc, #152]	@ (80017d8 <I2Cx_MspInit+0x154>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001748:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800174c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800174e:	2312      	movs	r3, #18
 8001750:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001756:	2302      	movs	r3, #2
 8001758:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800175a:	2304      	movs	r3, #4
 800175c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	481e      	ldr	r0, [pc, #120]	@ (80017e0 <I2Cx_MspInit+0x15c>)
 8001766:	f002 fa85 	bl	8003c74 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800176a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800176e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	481a      	ldr	r0, [pc, #104]	@ (80017e0 <I2Cx_MspInit+0x15c>)
 8001778:	f002 fa7c 	bl	8003c74 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800177c:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <I2Cx_MspInit+0x154>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	4a15      	ldr	r2, [pc, #84]	@ (80017d8 <I2Cx_MspInit+0x154>)
 8001782:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001786:	6413      	str	r3, [r2, #64]	@ 0x40
 8001788:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <I2Cx_MspInit+0x154>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001794:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <I2Cx_MspInit+0x154>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4a0f      	ldr	r2, [pc, #60]	@ (80017d8 <I2Cx_MspInit+0x154>)
 800179a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800179e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80017a0:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <I2Cx_MspInit+0x154>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4a0c      	ldr	r2, [pc, #48]	@ (80017d8 <I2Cx_MspInit+0x154>)
 80017a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017aa:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	210f      	movs	r1, #15
 80017b0:	201f      	movs	r0, #31
 80017b2:	f001 fc54 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80017b6:	201f      	movs	r0, #31
 80017b8:	f001 fc6d 	bl	8003096 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	210f      	movs	r1, #15
 80017c0:	2020      	movs	r0, #32
 80017c2:	f001 fc4c 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80017c6:	2020      	movs	r0, #32
 80017c8:	f001 fc65 	bl	8003096 <HAL_NVIC_EnableIRQ>
}
 80017cc:	bf00      	nop
 80017ce:	3730      	adds	r7, #48	@ 0x30
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000428 	.word	0x20000428
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40021c00 	.word	0x40021c00
 80017e0:	40020400 	.word	0x40020400

080017e4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f003 f821 	bl	8004834 <HAL_I2C_GetState>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d125      	bne.n	8001844 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a14      	ldr	r2, [pc, #80]	@ (800184c <I2Cx_Init+0x68>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d103      	bne.n	8001808 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a13      	ldr	r2, [pc, #76]	@ (8001850 <I2Cx_Init+0x6c>)
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	e002      	b.n	800180e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a12      	ldr	r2, [pc, #72]	@ (8001854 <I2Cx_Init+0x70>)
 800180c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a11      	ldr	r2, [pc, #68]	@ (8001858 <I2Cx_Init+0x74>)
 8001812:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff23 	bl	8001684 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f002 fcea 	bl	8004218 <HAL_I2C_Init>
  }
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000428 	.word	0x20000428
 8001850:	40005c00 	.word	0x40005c00
 8001854:	40005400 	.word	0x40005400
 8001858:	40912732 	.word	0x40912732

0800185c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af04      	add	r7, sp, #16
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	4608      	mov	r0, r1
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4603      	mov	r3, r0
 800186c:	72fb      	strb	r3, [r7, #11]
 800186e:	460b      	mov	r3, r1
 8001870:	813b      	strh	r3, [r7, #8]
 8001872:	4613      	mov	r3, r2
 8001874:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800187a:	7afb      	ldrb	r3, [r7, #11]
 800187c:	b299      	uxth	r1, r3
 800187e:	88f8      	ldrh	r0, [r7, #6]
 8001880:	893a      	ldrh	r2, [r7, #8]
 8001882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	4603      	mov	r3, r0
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f002 feb4 	bl	8004600 <HAL_I2C_Mem_Read>
 8001898:	4603      	mov	r3, r0
 800189a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80018a2:	7afb      	ldrb	r3, [r7, #11]
 80018a4:	4619      	mov	r1, r3
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f832 	bl	8001910 <I2Cx_Error>
  }
  return status;    
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b08a      	sub	sp, #40	@ 0x28
 80018ba:	af04      	add	r7, sp, #16
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	4608      	mov	r0, r1
 80018c0:	4611      	mov	r1, r2
 80018c2:	461a      	mov	r2, r3
 80018c4:	4603      	mov	r3, r0
 80018c6:	72fb      	strb	r3, [r7, #11]
 80018c8:	460b      	mov	r3, r1
 80018ca:	813b      	strh	r3, [r7, #8]
 80018cc:	4613      	mov	r3, r2
 80018ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80018d4:	7afb      	ldrb	r3, [r7, #11]
 80018d6:	b299      	uxth	r1, r3
 80018d8:	88f8      	ldrh	r0, [r7, #6]
 80018da:	893a      	ldrh	r2, [r7, #8]
 80018dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	4603      	mov	r3, r0
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f002 fd73 	bl	80043d8 <HAL_I2C_Mem_Write>
 80018f2:	4603      	mov	r3, r0
 80018f4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	4619      	mov	r1, r3
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 f805 	bl	8001910 <I2Cx_Error>
  }
  return status;
 8001906:	7dfb      	ldrb	r3, [r7, #23]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f002 fd17 	bl	8004350 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff5e 	bl	80017e4 <I2Cx_Init>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <AUDIO_IO_Init+0x10>)
 8001936:	f7ff ff55 	bl	80017e4 <I2Cx_Init>
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000428 	.word	0x20000428

08001944 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af02      	add	r7, sp, #8
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
 800195e:	460b      	mov	r3, r1
 8001960:	80bb      	strh	r3, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800196a:	89fb      	ldrh	r3, [r7, #14]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	b29b      	uxth	r3, r3
 8001970:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001972:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	b21a      	sxth	r2, r3
 800197a:	887b      	ldrh	r3, [r7, #2]
 800197c:	b21b      	sxth	r3, r3
 800197e:	4313      	orrs	r3, r2
 8001980:	b21b      	sxth	r3, r3
 8001982:	b29b      	uxth	r3, r3
 8001984:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001986:	88ba      	ldrh	r2, [r7, #4]
 8001988:	79f9      	ldrb	r1, [r7, #7]
 800198a:	2302      	movs	r3, #2
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	1cbb      	adds	r3, r7, #2
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2302      	movs	r3, #2
 8001994:	4803      	ldr	r0, [pc, #12]	@ (80019a4 <AUDIO_IO_Write+0x50>)
 8001996:	f7ff ff8e 	bl	80018b6 <I2Cx_WriteMultiple>
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000428 	.word	0x20000428

080019a8 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	4603      	mov	r3, r0
 80019b0:	460a      	mov	r2, r1
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	4613      	mov	r3, r2
 80019b6:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	81bb      	strh	r3, [r7, #12]
 80019bc:	2300      	movs	r3, #0
 80019be:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80019c0:	88ba      	ldrh	r2, [r7, #4]
 80019c2:	79f9      	ldrb	r1, [r7, #7]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2302      	movs	r3, #2
 80019d0:	480a      	ldr	r0, [pc, #40]	@ (80019fc <AUDIO_IO_Read+0x54>)
 80019d2:	f7ff ff43 	bl	800185c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80019d6:	89bb      	ldrh	r3, [r7, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80019dc:	89bb      	ldrh	r3, [r7, #12]
 80019de:	b21b      	sxth	r3, r3
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80019ee:	89fb      	ldrh	r3, [r7, #14]
 80019f0:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80019f2:	89bb      	ldrh	r3, [r7, #12]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000428 	.word	0x20000428

08001a00 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f001 fa29 	bl	8002e60 <HAL_Delay>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	@ 0x30
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001a22:	4b63      	ldr	r3, [pc, #396]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	4a62      	ldr	r2, [pc, #392]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001a28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2e:	4b60      	ldr	r3, [pc, #384]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8001a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8001a52:	4b57      	ldr	r3, [pc, #348]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a56      	ldr	r2, [pc, #344]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b54      	ldr	r3, [pc, #336]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001a6a:	4b51      	ldr	r3, [pc, #324]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a50      	ldr	r2, [pc, #320]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8001a82:	2380      	movs	r3, #128	@ 0x80
 8001a84:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001a92:	230a      	movs	r3, #10
 8001a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4845      	ldr	r0, [pc, #276]	@ (8001bb4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8001a9e:	f002 f8e9 	bl	8003c74 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	483d      	ldr	r0, [pc, #244]	@ (8001bb4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8001abe:	f002 f8d9 	bl	8003c74 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8001ac2:	2340      	movs	r3, #64	@ 0x40
 8001ac4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	4835      	ldr	r0, [pc, #212]	@ (8001bb4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8001ade:	f002 f8c9 	bl	8003c74 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001ae2:	2310      	movs	r3, #16
 8001ae4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001af2:	230a      	movs	r3, #10
 8001af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	482d      	ldr	r0, [pc, #180]	@ (8001bb4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8001afe:	f002 f8b9 	bl	8003c74 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001b02:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001b08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b28      	ldr	r3, [pc, #160]	@ (8001bb0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a26      	ldr	r2, [pc, #152]	@ (8001bb8 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d138      	bne.n	8001b96 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001b24:	4b25      	ldr	r3, [pc, #148]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b26:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001b2a:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001b2c:	4b23      	ldr	r3, [pc, #140]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b2e:	2240      	movs	r2, #64	@ 0x40
 8001b30:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001b32:	4b22      	ldr	r3, [pc, #136]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001b38:	4b20      	ldr	r3, [pc, #128]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b3e:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001b40:	4b1e      	ldr	r3, [pc, #120]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b46:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8001b48:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b4e:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001b50:	4b1a      	ldr	r3, [pc, #104]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b56:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001b58:	4b18      	ldr	r3, [pc, #96]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b5e:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001b60:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b62:	2204      	movs	r2, #4
 8001b64:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001b66:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b68:	2203      	movs	r2, #3
 8001b6a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001b72:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001b78:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b7a:	4a11      	ldr	r2, [pc, #68]	@ (8001bc0 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8001b7c:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a0e      	ldr	r2, [pc, #56]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b82:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001b84:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001b8a:	480c      	ldr	r0, [pc, #48]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b8c:	f001 fb4c 	bl	8003228 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8001b90:	480a      	ldr	r0, [pc, #40]	@ (8001bbc <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001b92:	f001 fa9b 	bl	80030cc <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	210e      	movs	r1, #14
 8001b9a:	203c      	movs	r0, #60	@ 0x3c
 8001b9c:	f001 fa5f 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8001ba0:	203c      	movs	r0, #60	@ 0x3c
 8001ba2:	f001 fa78 	bl	8003096 <HAL_NVIC_EnableIRQ>
}
 8001ba6:	bf00      	nop
 8001ba8:	3730      	adds	r7, #48	@ 0x30
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40022000 	.word	0x40022000
 8001bb8:	40015c04 	.word	0x40015c04
 8001bbc:	20000588 	.word	0x20000588
 8001bc0:	40026470 	.word	0x40026470

08001bc4 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b0a6      	sub	sp, #152	@ 0x98
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f004 fc8d 	bl	80064f4 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d004      	beq.n	8001bf8 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d112      	bne.n	8001c1e <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001bf8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001bfc:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001bfe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c02:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001c04:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8001c08:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8001c0e:	2313      	movs	r3, #19
 8001c10:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4618      	mov	r0, r3
 8001c18:	f004 f87c 	bl	8005d14 <HAL_RCCEx_PeriphCLKConfig>
 8001c1c:	e012      	b.n	8001c44 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001c1e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c22:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001c24:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c28:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8001c2a:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8001c2e:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8001c30:	2307      	movs	r3, #7
 8001c32:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f004 f869 	bl	8005d14 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8001c42:	bf00      	nop
 8001c44:	bf00      	nop
 8001c46:	3798      	adds	r7, #152	@ 0x98
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001c50:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <SAIx_Out_DeInit+0x24>)
 8001c52:	4a08      	ldr	r2, [pc, #32]	@ (8001c74 <SAIx_Out_DeInit+0x28>)
 8001c54:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <SAIx_Out_DeInit+0x24>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <SAIx_Out_DeInit+0x24>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c64:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8001c66:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <SAIx_Out_DeInit+0x24>)
 8001c68:	f005 f80e 	bl	8006c88 <HAL_SAI_DeInit>
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000480 	.word	0x20000480
 8001c74:	40015c04 	.word	0x40015c04

08001c78 <BSP_AUDIO_IN_OUT_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b089      	sub	sp, #36	@ 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60ba      	str	r2, [r7, #8]
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	4603      	mov	r3, r0
 8001c84:	81fb      	strh	r3, [r7, #14]
 8001c86:	460b      	mov	r3, r1
 8001c88:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = AUDIO_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)  /* Only MICROPHONE_2 input supported */
 8001c92:	89fb      	ldrh	r3, [r7, #14]
 8001c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c98:	d002      	beq.n	8001ca0 <BSP_AUDIO_IN_OUT_Init+0x28>
  {
    ret = AUDIO_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	77fb      	strb	r3, [r7, #31]
 8001c9e:	e054      	b.n	8001d4a <BSP_AUDIO_IN_OUT_Init+0xd2>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8001ca0:	f000 f9cc 	bl	800203c <SAIx_In_DeInit>
    SAIx_Out_DeInit();
 8001ca4:	f7ff ffd2 	bl	8001c4c <SAIx_Out_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001ca8:	2200      	movs	r2, #0
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	4829      	ldr	r0, [pc, #164]	@ (8001d54 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 8001cae:	f7ff ff89 	bl	8001bc4 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001cb2:	4b28      	ldr	r3, [pc, #160]	@ (8001d54 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 8001cb4:	4a28      	ldr	r2, [pc, #160]	@ (8001d58 <BSP_AUDIO_IN_OUT_Init+0xe0>)
 8001cb6:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8001cb8:	4826      	ldr	r0, [pc, #152]	@ (8001d54 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 8001cba:	f005 f81a 	bl	8006cf2 <HAL_SAI_GetState>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d103      	bne.n	8001ccc <BSP_AUDIO_IN_OUT_Init+0x54>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4823      	ldr	r0, [pc, #140]	@ (8001d54 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 8001cc8:	f000 f850 	bl	8001d6c <BSP_AUDIO_IN_MspInit>
    }

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001ccc:	4b23      	ldr	r3, [pc, #140]	@ (8001d5c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8001cce:	4a24      	ldr	r2, [pc, #144]	@ (8001d60 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 8001cd0:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001cd2:	4822      	ldr	r0, [pc, #136]	@ (8001d5c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8001cd4:	f005 f80d 	bl	8006cf2 <HAL_SAI_GetState>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d103      	bne.n	8001ce6 <BSP_AUDIO_IN_OUT_Init+0x6e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8001cde:	2100      	movs	r1, #0
 8001ce0:	481e      	ldr	r0, [pc, #120]	@ (8001d5c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8001ce2:	f7ff fe99 	bl	8001a18 <BSP_AUDIO_OUT_MspInit>

    /* Configure SAI in master mode :
     *   - SAI2_block_A in master TX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8001ce6:	89fb      	ldrh	r3, [r7, #14]
 8001ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cec:	d102      	bne.n	8001cf4 <BSP_AUDIO_IN_OUT_Init+0x7c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8001cee:	230a      	movs	r3, #10
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	e001      	b.n	8001cf8 <BSP_AUDIO_IN_OUT_Init+0x80>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8001cf4:	2305      	movs	r3, #5
 8001cf6:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	69b9      	ldr	r1, [r7, #24]
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f000 f8e7 	bl	8001ed0 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001d02:	4b18      	ldr	r3, [pc, #96]	@ (8001d64 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2034      	movs	r0, #52	@ 0x34
 8001d08:	4798      	blx	r3
 8001d0a:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f648 1294 	movw	r2, #35220	@ 0x8994
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d109      	bne.n	8001d2a <BSP_AUDIO_IN_OUT_Init+0xb2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001d16:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8001d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1a:	2034      	movs	r0, #52	@ 0x34
 8001d1c:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8001d1e:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8001d20:	4a10      	ldr	r2, [pc, #64]	@ (8001d64 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8001d22:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	77fb      	strb	r3, [r7, #31]
 8001d28:	e001      	b.n	8001d2e <BSP_AUDIO_IN_OUT_Init+0xb6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8001d2e:	7ffb      	ldrb	r3, [r7, #31]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10a      	bne.n	8001d4a <BSP_AUDIO_IN_OUT_Init+0xd2>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100, AudioFreq);
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681c      	ldr	r4, [r3, #0]
 8001d3a:	89fa      	ldrh	r2, [r7, #14]
 8001d3c:	89bb      	ldrh	r3, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	b299      	uxth	r1, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2264      	movs	r2, #100	@ 0x64
 8001d46:	2034      	movs	r0, #52	@ 0x34
 8001d48:	47a0      	blx	r4
    }
  }
  return ret;
 8001d4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3724      	adds	r7, #36	@ 0x24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd90      	pop	{r4, r7, pc}
 8001d54:	20000504 	.word	0x20000504
 8001d58:	40015c24 	.word	0x40015c24
 8001d5c:	20000480 	.word	0x20000480
 8001d60:	40015c04 	.word	0x40015c04
 8001d64:	20000018 	.word	0x20000018
 8001d68:	2000047c 	.word	0x2000047c

08001d6c <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	@ 0x30
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001d76:	4b50      	ldr	r3, [pc, #320]	@ (8001eb8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	4a4f      	ldr	r2, [pc, #316]	@ (8001eb8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8001d7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d82:	4b4d      	ldr	r3, [pc, #308]	@ (8001eb8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8001d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a49      	ldr	r2, [pc, #292]	@ (8001eb8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8001d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b47      	ldr	r3, [pc, #284]	@ (8001eb8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8001da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001daa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001db4:	2302      	movs	r3, #2
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8001db8:	230a      	movs	r3, #10
 8001dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	483e      	ldr	r0, [pc, #248]	@ (8001ebc <BSP_AUDIO_IN_MspInit+0x150>)
 8001dc4:	f001 ff56 	bl	8003c74 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8001dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	4a3a      	ldr	r2, [pc, #232]	@ (8001eb8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8001dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd4:	4b38      	ldr	r3, [pc, #224]	@ (8001eb8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8001de0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001de4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001dee:	2302      	movs	r3, #2
 8001df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4831      	ldr	r0, [pc, #196]	@ (8001ec0 <BSP_AUDIO_IN_MspInit+0x154>)
 8001dfa:	f001 ff3b 	bl	8003c74 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a2d      	ldr	r2, [pc, #180]	@ (8001eb8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8001e04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec4 <BSP_AUDIO_IN_MspInit+0x158>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d137      	bne.n	8001e90 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8001e20:	4b29      	ldr	r3, [pc, #164]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001e26:	4b28      	ldr	r3, [pc, #160]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001e2c:	4b26      	ldr	r3, [pc, #152]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001e32:	4b25      	ldr	r3, [pc, #148]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e38:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001e3a:	4b23      	ldr	r3, [pc, #140]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e40:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8001e42:	4b21      	ldr	r3, [pc, #132]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e48:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e50:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001e52:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e54:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e58:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001e60:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e62:	2203      	movs	r2, #3
 8001e64:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001e66:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8001e6c:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001e72:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e74:	4a15      	ldr	r2, [pc, #84]	@ (8001ecc <BSP_AUDIO_IN_MspInit+0x160>)
 8001e76:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a13      	ldr	r2, [pc, #76]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e7c:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e7e:	4a12      	ldr	r2, [pc, #72]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001e84:	4810      	ldr	r0, [pc, #64]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e86:	f001 f9cf 	bl	8003228 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8001e8a:	480f      	ldr	r0, [pc, #60]	@ (8001ec8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8001e8c:	f001 f91e 	bl	80030cc <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	210f      	movs	r1, #15
 8001e94:	2046      	movs	r0, #70	@ 0x46
 8001e96:	f001 f8e2 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8001e9a:	2046      	movs	r0, #70	@ 0x46
 8001e9c:	f001 f8fb 	bl	8003096 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	210f      	movs	r1, #15
 8001ea4:	2028      	movs	r0, #40	@ 0x28
 8001ea6:	f001 f8da 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8001eaa:	2028      	movs	r0, #40	@ 0x28
 8001eac:	f001 f8f3 	bl	8003096 <HAL_NVIC_EnableIRQ>
}
 8001eb0:	bf00      	nop
 8001eb2:	3730      	adds	r7, #48	@ 0x30
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40021800 	.word	0x40021800
 8001ec0:	40021c00 	.word	0x40021c00
 8001ec4:	40015c24 	.word	0x40015c24
 8001ec8:	200005e8 	.word	0x200005e8
 8001ecc:	400264b8 	.word	0x400264b8

08001ed0 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001edc:	4b53      	ldr	r3, [pc, #332]	@ (800202c <SAIx_In_Init+0x15c>)
 8001ede:	4a54      	ldr	r2, [pc, #336]	@ (8002030 <SAIx_In_Init+0x160>)
 8001ee0:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001ee2:	4b52      	ldr	r3, [pc, #328]	@ (800202c <SAIx_In_Init+0x15c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b50      	ldr	r3, [pc, #320]	@ (800202c <SAIx_In_Init+0x15c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001ef0:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001ef2:	4a4e      	ldr	r2, [pc, #312]	@ (800202c <SAIx_In_Init+0x15c>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8001ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800202c <SAIx_In_Init+0x15c>)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001efe:	4b4b      	ldr	r3, [pc, #300]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001f04:	4b49      	ldr	r3, [pc, #292]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8001f0a:	4b48      	ldr	r3, [pc, #288]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f0c:	2280      	movs	r2, #128	@ 0x80
 8001f0e:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001f10:	4b46      	ldr	r3, [pc, #280]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001f16:	4b45      	ldr	r3, [pc, #276]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8001f1c:	4b43      	ldr	r3, [pc, #268]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001f22:	4b42      	ldr	r3, [pc, #264]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f28:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001f2a:	4b40      	ldr	r3, [pc, #256]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8001f30:	4b3e      	ldr	r3, [pc, #248]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f32:	2240      	movs	r2, #64	@ 0x40
 8001f34:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001f36:	4b3d      	ldr	r3, [pc, #244]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f38:	2220      	movs	r2, #32
 8001f3a:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f3e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f42:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001f44:	4b39      	ldr	r3, [pc, #228]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001f4a:	4b38      	ldr	r3, [pc, #224]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f4c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f50:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8001f52:	4b36      	ldr	r3, [pc, #216]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001f58:	4b34      	ldr	r3, [pc, #208]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8001f5e:	4b33      	ldr	r3, [pc, #204]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f60:	2204      	movs	r2, #4
 8001f62:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8001f64:	4a31      	ldr	r2, [pc, #196]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8001f6a:	4830      	ldr	r0, [pc, #192]	@ (800202c <SAIx_In_Init+0x15c>)
 8001f6c:	f004 fd0e 	bl	800698c <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001f70:	4b30      	ldr	r3, [pc, #192]	@ (8002034 <SAIx_In_Init+0x164>)
 8001f72:	4a31      	ldr	r2, [pc, #196]	@ (8002038 <SAIx_In_Init+0x168>)
 8001f74:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001f76:	4b2f      	ldr	r3, [pc, #188]	@ (8002034 <SAIx_In_Init+0x164>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <SAIx_In_Init+0x164>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f84:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8001f86:	4a2b      	ldr	r2, [pc, #172]	@ (8002034 <SAIx_In_Init+0x164>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8001f8c:	4b29      	ldr	r3, [pc, #164]	@ (8002034 <SAIx_In_Init+0x164>)
 8001f8e:	2203      	movs	r2, #3
 8001f90:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001f92:	4b28      	ldr	r3, [pc, #160]	@ (8002034 <SAIx_In_Init+0x164>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001f98:	4b26      	ldr	r3, [pc, #152]	@ (8002034 <SAIx_In_Init+0x164>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8001f9e:	4b25      	ldr	r3, [pc, #148]	@ (8002034 <SAIx_In_Init+0x164>)
 8001fa0:	2280      	movs	r2, #128	@ 0x80
 8001fa2:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001fa4:	4b23      	ldr	r3, [pc, #140]	@ (8002034 <SAIx_In_Init+0x164>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001faa:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <SAIx_In_Init+0x164>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8001fb0:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <SAIx_In_Init+0x164>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <SAIx_In_Init+0x164>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <SAIx_In_Init+0x164>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002034 <SAIx_In_Init+0x164>)
 8001fc4:	2240      	movs	r2, #64	@ 0x40
 8001fc6:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <SAIx_In_Init+0x164>)
 8001fca:	2220      	movs	r2, #32
 8001fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001fce:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <SAIx_In_Init+0x164>)
 8001fd0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fd4:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001fd6:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <SAIx_In_Init+0x164>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <SAIx_In_Init+0x164>)
 8001fde:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001fe2:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8001fe4:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <SAIx_In_Init+0x164>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001fea:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <SAIx_In_Init+0x164>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8001ff0:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <SAIx_In_Init+0x164>)
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8002034 <SAIx_In_Init+0x164>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8001ffc:	480d      	ldr	r0, [pc, #52]	@ (8002034 <SAIx_In_Init+0x164>)
 8001ffe:	f004 fcc5 	bl	800698c <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002002:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <SAIx_In_Init+0x15c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b08      	ldr	r3, [pc, #32]	@ (800202c <SAIx_In_Init+0x15c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002010:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <SAIx_In_Init+0x164>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <SAIx_In_Init+0x164>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002020:	601a      	str	r2, [r3, #0]
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000480 	.word	0x20000480
 8002030:	40015c04 	.word	0x40015c04
 8002034:	20000504 	.word	0x20000504
 8002038:	40015c24 	.word	0x40015c24

0800203c <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002040:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <SAIx_In_DeInit+0x24>)
 8002042:	4a08      	ldr	r2, [pc, #32]	@ (8002064 <SAIx_In_DeInit+0x28>)
 8002044:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <SAIx_In_DeInit+0x24>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b04      	ldr	r3, [pc, #16]	@ (8002060 <SAIx_In_DeInit+0x24>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002054:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8002056:	4802      	ldr	r0, [pc, #8]	@ (8002060 <SAIx_In_DeInit+0x24>)
 8002058:	f004 fe16 	bl	8006c88 <HAL_SAI_DeInit>
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000504 	.word	0x20000504
 8002064:	40015c24 	.word	0x40015c24

08002068 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800206c:	4b31      	ldr	r3, [pc, #196]	@ (8002134 <BSP_LCD_Init+0xcc>)
 800206e:	2228      	movs	r2, #40	@ 0x28
 8002070:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002072:	4b30      	ldr	r3, [pc, #192]	@ (8002134 <BSP_LCD_Init+0xcc>)
 8002074:	2209      	movs	r2, #9
 8002076:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002078:	4b2e      	ldr	r3, [pc, #184]	@ (8002134 <BSP_LCD_Init+0xcc>)
 800207a:	2235      	movs	r2, #53	@ 0x35
 800207c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800207e:	4b2d      	ldr	r3, [pc, #180]	@ (8002134 <BSP_LCD_Init+0xcc>)
 8002080:	220b      	movs	r2, #11
 8002082:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002084:	4b2b      	ldr	r3, [pc, #172]	@ (8002134 <BSP_LCD_Init+0xcc>)
 8002086:	f240 121b 	movw	r2, #283	@ 0x11b
 800208a:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800208c:	4b29      	ldr	r3, [pc, #164]	@ (8002134 <BSP_LCD_Init+0xcc>)
 800208e:	f240 2215 	movw	r2, #533	@ 0x215
 8002092:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002094:	4b27      	ldr	r3, [pc, #156]	@ (8002134 <BSP_LCD_Init+0xcc>)
 8002096:	f240 121d 	movw	r2, #285	@ 0x11d
 800209a:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800209c:	4b25      	ldr	r3, [pc, #148]	@ (8002134 <BSP_LCD_Init+0xcc>)
 800209e:	f240 2235 	movw	r2, #565	@ 0x235
 80020a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80020a4:	2100      	movs	r1, #0
 80020a6:	4823      	ldr	r0, [pc, #140]	@ (8002134 <BSP_LCD_Init+0xcc>)
 80020a8:	f000 fba6 	bl	80027f8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80020ac:	4b21      	ldr	r3, [pc, #132]	@ (8002134 <BSP_LCD_Init+0xcc>)
 80020ae:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80020b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <BSP_LCD_Init+0xcc>)
 80020b6:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80020ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80020bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002134 <BSP_LCD_Init+0xcc>)
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002134 <BSP_LCD_Init+0xcc>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80020cc:	4b19      	ldr	r3, [pc, #100]	@ (8002134 <BSP_LCD_Init+0xcc>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80020d4:	4b17      	ldr	r3, [pc, #92]	@ (8002134 <BSP_LCD_Init+0xcc>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80020da:	4b16      	ldr	r3, [pc, #88]	@ (8002134 <BSP_LCD_Init+0xcc>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80020e0:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <BSP_LCD_Init+0xcc>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80020e6:	4b13      	ldr	r3, [pc, #76]	@ (8002134 <BSP_LCD_Init+0xcc>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80020ec:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <BSP_LCD_Init+0xcc>)
 80020ee:	4a12      	ldr	r2, [pc, #72]	@ (8002138 <BSP_LCD_Init+0xd0>)
 80020f0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80020f2:	4810      	ldr	r0, [pc, #64]	@ (8002134 <BSP_LCD_Init+0xcc>)
 80020f4:	f002 ff7c 	bl	8004ff0 <HAL_LTDC_GetState>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d103      	bne.n	8002106 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80020fe:	2100      	movs	r1, #0
 8002100:	480c      	ldr	r0, [pc, #48]	@ (8002134 <BSP_LCD_Init+0xcc>)
 8002102:	f000 fa9f 	bl	8002644 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002106:	480b      	ldr	r0, [pc, #44]	@ (8002134 <BSP_LCD_Init+0xcc>)
 8002108:	f002 fe64 	bl	8004dd4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800210c:	2201      	movs	r2, #1
 800210e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002112:	480a      	ldr	r0, [pc, #40]	@ (800213c <BSP_LCD_Init+0xd4>)
 8002114:	f002 f866 	bl	80041e4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002118:	2201      	movs	r2, #1
 800211a:	2108      	movs	r1, #8
 800211c:	4808      	ldr	r0, [pc, #32]	@ (8002140 <BSP_LCD_Init+0xd8>)
 800211e:	f002 f861 	bl	80041e4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002122:	f000 fc89 	bl	8002a38 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002126:	4807      	ldr	r0, [pc, #28]	@ (8002144 <BSP_LCD_Init+0xdc>)
 8002128:	f000 f8d8 	bl	80022dc <BSP_LCD_SetFont>
  
  return LCD_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000648 	.word	0x20000648
 8002138:	40016800 	.word	0x40016800
 800213c:	40022000 	.word	0x40022000
 8002140:	40022800 	.word	0x40022800
 8002144:	20000004 	.word	0x20000004

08002148 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <BSP_LCD_GetXSize+0x20>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a06      	ldr	r2, [pc, #24]	@ (800216c <BSP_LCD_GetXSize+0x24>)
 8002152:	2134      	movs	r1, #52	@ 0x34
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3360      	adds	r3, #96	@ 0x60
 800215c:	681b      	ldr	r3, [r3, #0]
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	20000730 	.word	0x20000730
 800216c:	20000648 	.word	0x20000648

08002170 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <BSP_LCD_GetYSize+0x20>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a06      	ldr	r2, [pc, #24]	@ (8002194 <BSP_LCD_GetYSize+0x24>)
 800217a:	2134      	movs	r1, #52	@ 0x34
 800217c:	fb01 f303 	mul.w	r3, r1, r3
 8002180:	4413      	add	r3, r2
 8002182:	3364      	adds	r3, #100	@ 0x64
 8002184:	681b      	ldr	r3, [r3, #0]
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	20000730 	.word	0x20000730
 8002194:	20000648 	.word	0x20000648

08002198 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002198:	b580      	push	{r7, lr}
 800219a:	b090      	sub	sp, #64	@ 0x40
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80021a8:	f7ff ffce 	bl	8002148 <BSP_LCD_GetXSize>
 80021ac:	4603      	mov	r3, r0
 80021ae:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80021b4:	f7ff ffdc 	bl	8002170 <BSP_LCD_GetYSize>
 80021b8:	4603      	mov	r3, r0
 80021ba:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 80021c4:	23ff      	movs	r3, #255	@ 0xff
 80021c6:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80021de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80021e4:	2307      	movs	r3, #7
 80021e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80021e8:	f7ff ffae 	bl	8002148 <BSP_LCD_GetXSize>
 80021ec:	4603      	mov	r3, r0
 80021ee:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80021f0:	f7ff ffbe 	bl	8002170 <BSP_LCD_GetYSize>
 80021f4:	4603      	mov	r3, r0
 80021f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80021f8:	88fa      	ldrh	r2, [r7, #6]
 80021fa:	f107 030c 	add.w	r3, r7, #12
 80021fe:	4619      	mov	r1, r3
 8002200:	4812      	ldr	r0, [pc, #72]	@ (800224c <BSP_LCD_LayerDefaultInit+0xb4>)
 8002202:	f002 feb7 	bl	8004f74 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002206:	88fa      	ldrh	r2, [r7, #6]
 8002208:	4911      	ldr	r1, [pc, #68]	@ (8002250 <BSP_LCD_LayerDefaultInit+0xb8>)
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	3304      	adds	r3, #4
 8002216:	f04f 32ff 	mov.w	r2, #4294967295
 800221a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800221c:	88fa      	ldrh	r2, [r7, #6]
 800221e:	490c      	ldr	r1, [pc, #48]	@ (8002250 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002220:	4613      	mov	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	3308      	adds	r3, #8
 800222c:	4a09      	ldr	r2, [pc, #36]	@ (8002254 <BSP_LCD_LayerDefaultInit+0xbc>)
 800222e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002230:	88fa      	ldrh	r2, [r7, #6]
 8002232:	4907      	ldr	r1, [pc, #28]	@ (8002250 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8002242:	601a      	str	r2, [r3, #0]
}
 8002244:	bf00      	nop
 8002246:	3740      	adds	r7, #64	@ 0x40
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000648 	.word	0x20000648
 8002250:	20000734 	.word	0x20000734
 8002254:	20000004 	.word	0x20000004

08002258 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002260:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <BSP_LCD_SelectLayer+0x1c>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6013      	str	r3, [r2, #0]
} 
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000730 	.word	0x20000730

08002278 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002280:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <BSP_LCD_SetTextColor+0x28>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4907      	ldr	r1, [pc, #28]	@ (80022a4 <BSP_LCD_SetTextColor+0x2c>)
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	601a      	str	r2, [r3, #0]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	20000730 	.word	0x20000730
 80022a4:	20000734 	.word	0x20000734

080022a8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80022b0:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <BSP_LCD_SetBackColor+0x2c>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4908      	ldr	r1, [pc, #32]	@ (80022d8 <BSP_LCD_SetBackColor+0x30>)
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	3304      	adds	r3, #4
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	601a      	str	r2, [r3, #0]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000730 	.word	0x20000730
 80022d8:	20000734 	.word	0x20000734

080022dc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <BSP_LCD_SetFont+0x2c>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4908      	ldr	r1, [pc, #32]	@ (800230c <BSP_LCD_SetFont+0x30>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3308      	adds	r3, #8
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	601a      	str	r2, [r3, #0]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000730 	.word	0x20000730
 800230c:	20000734 	.word	0x20000734

08002310 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	b085      	sub	sp, #20
 8002314:	af02      	add	r7, sp, #8
 8002316:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002318:	4b0f      	ldr	r3, [pc, #60]	@ (8002358 <BSP_LCD_Clear+0x48>)
 800231a:	681c      	ldr	r4, [r3, #0]
 800231c:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <BSP_LCD_Clear+0x48>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0e      	ldr	r2, [pc, #56]	@ (800235c <BSP_LCD_Clear+0x4c>)
 8002322:	2134      	movs	r1, #52	@ 0x34
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	335c      	adds	r3, #92	@ 0x5c
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	461e      	mov	r6, r3
 8002330:	f7ff ff0a 	bl	8002148 <BSP_LCD_GetXSize>
 8002334:	4605      	mov	r5, r0
 8002336:	f7ff ff1b 	bl	8002170 <BSP_LCD_GetYSize>
 800233a:	4602      	mov	r2, r0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	2300      	movs	r3, #0
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	462a      	mov	r2, r5
 8002348:	4631      	mov	r1, r6
 800234a:	4620      	mov	r0, r4
 800234c:	f000 fb28 	bl	80029a0 <LL_FillBuffer>
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002358:	20000730 	.word	0x20000730
 800235c:	20000648 	.word	0x20000648

08002360 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	80fb      	strh	r3, [r7, #6]
 800236a:	460b      	mov	r3, r1
 800236c:	80bb      	strh	r3, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002372:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <BSP_LCD_DisplayChar+0x80>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	491b      	ldr	r1, [pc, #108]	@ (80023e4 <BSP_LCD_DisplayChar+0x84>)
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3308      	adds	r3, #8
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800238e:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <BSP_LCD_DisplayChar+0x80>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4c14      	ldr	r4, [pc, #80]	@ (80023e4 <BSP_LCD_DisplayChar+0x84>)
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4423      	add	r3, r4
 800239e:	3308      	adds	r3, #8
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80023a4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80023a8:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <BSP_LCD_DisplayChar+0x80>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4c0d      	ldr	r4, [pc, #52]	@ (80023e4 <BSP_LCD_DisplayChar+0x84>)
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4423      	add	r3, r4
 80023b8:	3308      	adds	r3, #8
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	889b      	ldrh	r3, [r3, #4]
 80023be:	3307      	adds	r3, #7
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da00      	bge.n	80023c6 <BSP_LCD_DisplayChar+0x66>
 80023c4:	3307      	adds	r3, #7
 80023c6:	10db      	asrs	r3, r3, #3
 80023c8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80023cc:	18ca      	adds	r2, r1, r3
 80023ce:	88b9      	ldrh	r1, [r7, #4]
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fa2c 	bl	8002830 <DrawChar>
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd90      	pop	{r4, r7, pc}
 80023e0:	20000730 	.word	0x20000730
 80023e4:	20000734 	.word	0x20000734

080023e8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80023e8:	b5b0      	push	{r4, r5, r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60ba      	str	r2, [r7, #8]
 80023f0:	461a      	mov	r2, r3
 80023f2:	4603      	mov	r3, r0
 80023f4:	81fb      	strh	r3, [r7, #14]
 80023f6:	460b      	mov	r3, r1
 80023f8:	81bb      	strh	r3, [r7, #12]
 80023fa:	4613      	mov	r3, r2
 80023fc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80023fe:	2301      	movs	r3, #1
 8002400:	83fb      	strh	r3, [r7, #30]
 8002402:	2300      	movs	r3, #0
 8002404:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002412:	e002      	b.n	800241a <BSP_LCD_DisplayStringAt+0x32>
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	3301      	adds	r3, #1
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	617a      	str	r2, [r7, #20]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f6      	bne.n	8002414 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002426:	f7ff fe8f 	bl	8002148 <BSP_LCD_GetXSize>
 800242a:	4601      	mov	r1, r0
 800242c:	4b50      	ldr	r3, [pc, #320]	@ (8002570 <BSP_LCD_DisplayStringAt+0x188>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4850      	ldr	r0, [pc, #320]	@ (8002574 <BSP_LCD_DisplayStringAt+0x18c>)
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4403      	add	r3, r0
 800243c:	3308      	adds	r3, #8
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	889b      	ldrh	r3, [r3, #4]
 8002442:	fbb1 f3f3 	udiv	r3, r1, r3
 8002446:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d01c      	beq.n	8002488 <BSP_LCD_DisplayStringAt+0xa0>
 800244e:	2b03      	cmp	r3, #3
 8002450:	dc33      	bgt.n	80024ba <BSP_LCD_DisplayStringAt+0xd2>
 8002452:	2b01      	cmp	r3, #1
 8002454:	d002      	beq.n	800245c <BSP_LCD_DisplayStringAt+0x74>
 8002456:	2b02      	cmp	r3, #2
 8002458:	d019      	beq.n	800248e <BSP_LCD_DisplayStringAt+0xa6>
 800245a:	e02e      	b.n	80024ba <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	1ad1      	subs	r1, r2, r3
 8002462:	4b43      	ldr	r3, [pc, #268]	@ (8002570 <BSP_LCD_DisplayStringAt+0x188>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4843      	ldr	r0, [pc, #268]	@ (8002574 <BSP_LCD_DisplayStringAt+0x18c>)
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4403      	add	r3, r0
 8002472:	3308      	adds	r3, #8
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	889b      	ldrh	r3, [r3, #4]
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	085b      	lsrs	r3, r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	89fb      	ldrh	r3, [r7, #14]
 8002482:	4413      	add	r3, r2
 8002484:	83fb      	strh	r3, [r7, #30]
      break;
 8002486:	e01b      	b.n	80024c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002488:	89fb      	ldrh	r3, [r7, #14]
 800248a:	83fb      	strh	r3, [r7, #30]
      break;
 800248c:	e018      	b.n	80024c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	b299      	uxth	r1, r3
 8002496:	4b36      	ldr	r3, [pc, #216]	@ (8002570 <BSP_LCD_DisplayStringAt+0x188>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4836      	ldr	r0, [pc, #216]	@ (8002574 <BSP_LCD_DisplayStringAt+0x18c>)
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4403      	add	r3, r0
 80024a6:	3308      	adds	r3, #8
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	889b      	ldrh	r3, [r3, #4]
 80024ac:	fb11 f303 	smulbb	r3, r1, r3
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	89fb      	ldrh	r3, [r7, #14]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	83fb      	strh	r3, [r7, #30]
      break;
 80024b8:	e002      	b.n	80024c0 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80024ba:	89fb      	ldrh	r3, [r7, #14]
 80024bc:	83fb      	strh	r3, [r7, #30]
      break;
 80024be:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80024c0:	8bfb      	ldrh	r3, [r7, #30]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <BSP_LCD_DisplayStringAt+0xe6>
 80024c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	da1d      	bge.n	800250a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80024d2:	e01a      	b.n	800250a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	781a      	ldrb	r2, [r3, #0]
 80024d8:	89b9      	ldrh	r1, [r7, #12]
 80024da:	8bfb      	ldrh	r3, [r7, #30]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff3f 	bl	8002360 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80024e2:	4b23      	ldr	r3, [pc, #140]	@ (8002570 <BSP_LCD_DisplayStringAt+0x188>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4923      	ldr	r1, [pc, #140]	@ (8002574 <BSP_LCD_DisplayStringAt+0x18c>)
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	3308      	adds	r3, #8
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	889a      	ldrh	r2, [r3, #4]
 80024f8:	8bfb      	ldrh	r3, [r7, #30]
 80024fa:	4413      	add	r3, r2
 80024fc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	3301      	adds	r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
    i++;
 8002504:	8bbb      	ldrh	r3, [r7, #28]
 8002506:	3301      	adds	r3, #1
 8002508:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	bf14      	ite	ne
 8002512:	2301      	movne	r3, #1
 8002514:	2300      	moveq	r3, #0
 8002516:	b2dc      	uxtb	r4, r3
 8002518:	f7ff fe16 	bl	8002148 <BSP_LCD_GetXSize>
 800251c:	8bb9      	ldrh	r1, [r7, #28]
 800251e:	4b14      	ldr	r3, [pc, #80]	@ (8002570 <BSP_LCD_DisplayStringAt+0x188>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4d14      	ldr	r5, [pc, #80]	@ (8002574 <BSP_LCD_DisplayStringAt+0x18c>)
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	442b      	add	r3, r5
 800252e:	3308      	adds	r3, #8
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	889b      	ldrh	r3, [r3, #4]
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	1ac3      	subs	r3, r0, r3
 800253a:	b299      	uxth	r1, r3
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <BSP_LCD_DisplayStringAt+0x188>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	480c      	ldr	r0, [pc, #48]	@ (8002574 <BSP_LCD_DisplayStringAt+0x18c>)
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4403      	add	r3, r0
 800254c:	3308      	adds	r3, #8
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	889b      	ldrh	r3, [r3, #4]
 8002552:	4299      	cmp	r1, r3
 8002554:	bf2c      	ite	cs
 8002556:	2301      	movcs	r3, #1
 8002558:	2300      	movcc	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	4023      	ands	r3, r4
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1b7      	bne.n	80024d4 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bdb0      	pop	{r4, r5, r7, pc}
 800256e:	bf00      	nop
 8002570:	20000730 	.word	0x20000730
 8002574:	20000734 	.word	0x20000734

08002578 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	603a      	str	r2, [r7, #0]
 8002582:	80fb      	strh	r3, [r7, #6]
 8002584:	460b      	mov	r3, r1
 8002586:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002588:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <BSP_LCD_DrawPixel+0x88>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1d      	ldr	r2, [pc, #116]	@ (8002604 <BSP_LCD_DrawPixel+0x8c>)
 800258e:	2134      	movs	r1, #52	@ 0x34
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	3348      	adds	r3, #72	@ 0x48
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d116      	bne.n	80025cc <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800259e:	4b18      	ldr	r3, [pc, #96]	@ (8002600 <BSP_LCD_DrawPixel+0x88>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a18      	ldr	r2, [pc, #96]	@ (8002604 <BSP_LCD_DrawPixel+0x8c>)
 80025a4:	2134      	movs	r1, #52	@ 0x34
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	335c      	adds	r3, #92	@ 0x5c
 80025ae:	681c      	ldr	r4, [r3, #0]
 80025b0:	88bd      	ldrh	r5, [r7, #4]
 80025b2:	f7ff fdc9 	bl	8002148 <BSP_LCD_GetXSize>
 80025b6:	4603      	mov	r3, r0
 80025b8:	fb03 f205 	mul.w	r2, r3, r5
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	4413      	add	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4423      	add	r3, r4
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	b292      	uxth	r2, r2
 80025c8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80025ca:	e015      	b.n	80025f8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <BSP_LCD_DrawPixel+0x88>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002604 <BSP_LCD_DrawPixel+0x8c>)
 80025d2:	2134      	movs	r1, #52	@ 0x34
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	335c      	adds	r3, #92	@ 0x5c
 80025dc:	681c      	ldr	r4, [r3, #0]
 80025de:	88bd      	ldrh	r5, [r7, #4]
 80025e0:	f7ff fdb2 	bl	8002148 <BSP_LCD_GetXSize>
 80025e4:	4603      	mov	r3, r0
 80025e6:	fb03 f205 	mul.w	r2, r3, r5
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4423      	add	r3, r4
 80025f2:	461a      	mov	r2, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002600:	20000730 	.word	0x20000730
 8002604:	20000648 	.word	0x20000648

08002608 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800260c:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <BSP_LCD_DisplayOn+0x30>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <BSP_LCD_DisplayOn+0x30>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800261c:	2201      	movs	r2, #1
 800261e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002622:	4806      	ldr	r0, [pc, #24]	@ (800263c <BSP_LCD_DisplayOn+0x34>)
 8002624:	f001 fdde 	bl	80041e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002628:	2201      	movs	r2, #1
 800262a:	2108      	movs	r1, #8
 800262c:	4804      	ldr	r0, [pc, #16]	@ (8002640 <BSP_LCD_DisplayOn+0x38>)
 800262e:	f001 fdd9 	bl	80041e4 <HAL_GPIO_WritePin>
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000648 	.word	0x20000648
 800263c:	40022000 	.word	0x40022000
 8002640:	40022800 	.word	0x40022800

08002644 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b090      	sub	sp, #64	@ 0x40
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800264e:	4b64      	ldr	r3, [pc, #400]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	4a63      	ldr	r2, [pc, #396]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 8002654:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002658:	6453      	str	r3, [r2, #68]	@ 0x44
 800265a:	4b61      	ldr	r3, [pc, #388]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002662:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002666:	4b5e      	ldr	r3, [pc, #376]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a5d      	ldr	r2, [pc, #372]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 800266c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b5b      	ldr	r3, [pc, #364]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800267e:	4b58      	ldr	r3, [pc, #352]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	4a57      	ldr	r2, [pc, #348]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 8002684:	f043 0310 	orr.w	r3, r3, #16
 8002688:	6313      	str	r3, [r2, #48]	@ 0x30
 800268a:	4b55      	ldr	r3, [pc, #340]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	623b      	str	r3, [r7, #32]
 8002694:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002696:	4b52      	ldr	r3, [pc, #328]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	4a51      	ldr	r2, [pc, #324]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 800269c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a2:	4b4f      	ldr	r3, [pc, #316]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80026ae:	4b4c      	ldr	r3, [pc, #304]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	4a4b      	ldr	r2, [pc, #300]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ba:	4b49      	ldr	r3, [pc, #292]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80026c6:	4b46      	ldr	r3, [pc, #280]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	4a45      	ldr	r2, [pc, #276]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 80026cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d2:	4b43      	ldr	r3, [pc, #268]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80026de:	4b40      	ldr	r3, [pc, #256]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	4a3f      	ldr	r2, [pc, #252]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 80026e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ea:	4b3d      	ldr	r3, [pc, #244]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80026f6:	4b3a      	ldr	r3, [pc, #232]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	4a39      	ldr	r2, [pc, #228]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002700:	6313      	str	r3, [r2, #48]	@ 0x30
 8002702:	4b37      	ldr	r3, [pc, #220]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800270e:	4b34      	ldr	r3, [pc, #208]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	4a33      	ldr	r2, [pc, #204]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 8002714:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002718:	6313      	str	r3, [r2, #48]	@ 0x30
 800271a:	4b31      	ldr	r3, [pc, #196]	@ (80027e0 <BSP_LCD_MspInit+0x19c>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002726:	2310      	movs	r3, #16
 8002728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002732:	2302      	movs	r3, #2
 8002734:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002736:	230e      	movs	r3, #14
 8002738:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800273a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800273e:	4619      	mov	r1, r3
 8002740:	4828      	ldr	r0, [pc, #160]	@ (80027e4 <BSP_LCD_MspInit+0x1a0>)
 8002742:	f001 fa97 	bl	8003c74 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800274a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002750:	2309      	movs	r3, #9
 8002752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002754:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002758:	4619      	mov	r1, r3
 800275a:	4823      	ldr	r0, [pc, #140]	@ (80027e8 <BSP_LCD_MspInit+0x1a4>)
 800275c:	f001 fa8a 	bl	8003c74 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002760:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002764:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800276a:	230e      	movs	r3, #14
 800276c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800276e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002772:	4619      	mov	r1, r3
 8002774:	481d      	ldr	r0, [pc, #116]	@ (80027ec <BSP_LCD_MspInit+0x1a8>)
 8002776:	f001 fa7d 	bl	8003c74 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800277a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800277e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002784:	230e      	movs	r3, #14
 8002786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002788:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800278c:	4619      	mov	r1, r3
 800278e:	4818      	ldr	r0, [pc, #96]	@ (80027f0 <BSP_LCD_MspInit+0x1ac>)
 8002790:	f001 fa70 	bl	8003c74 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002794:	23f7      	movs	r3, #247	@ 0xf7
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800279c:	230e      	movs	r3, #14
 800279e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80027a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027a4:	4619      	mov	r1, r3
 80027a6:	4813      	ldr	r0, [pc, #76]	@ (80027f4 <BSP_LCD_MspInit+0x1b0>)
 80027a8:	f001 fa64 	bl	8003c74 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80027ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80027b2:	2301      	movs	r3, #1
 80027b4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80027b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027ba:	4619      	mov	r1, r3
 80027bc:	480b      	ldr	r0, [pc, #44]	@ (80027ec <BSP_LCD_MspInit+0x1a8>)
 80027be:	f001 fa59 	bl	8003c74 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80027c2:	2308      	movs	r3, #8
 80027c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80027c6:	2301      	movs	r3, #1
 80027c8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80027ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027ce:	4619      	mov	r1, r3
 80027d0:	4808      	ldr	r0, [pc, #32]	@ (80027f4 <BSP_LCD_MspInit+0x1b0>)
 80027d2:	f001 fa4f 	bl	8003c74 <HAL_GPIO_Init>
}
 80027d6:	bf00      	nop
 80027d8:	3740      	adds	r7, #64	@ 0x40
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40021800 	.word	0x40021800
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40022400 	.word	0x40022400
 80027f4:	40022800 	.word	0x40022800

080027f8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002802:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <BSP_LCD_ClockConfig+0x34>)
 8002804:	2208      	movs	r2, #8
 8002806:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002808:	4b08      	ldr	r3, [pc, #32]	@ (800282c <BSP_LCD_ClockConfig+0x34>)
 800280a:	22c0      	movs	r2, #192	@ 0xc0
 800280c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800280e:	4b07      	ldr	r3, [pc, #28]	@ (800282c <BSP_LCD_ClockConfig+0x34>)
 8002810:	2205      	movs	r2, #5
 8002812:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002814:	4b05      	ldr	r3, [pc, #20]	@ (800282c <BSP_LCD_ClockConfig+0x34>)
 8002816:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800281a:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800281c:	4803      	ldr	r0, [pc, #12]	@ (800282c <BSP_LCD_ClockConfig+0x34>)
 800281e:	f003 fa79 	bl	8005d14 <HAL_RCCEx_PeriphCLKConfig>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	2000074c 	.word	0x2000074c

08002830 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	603a      	str	r2, [r7, #0]
 800283a:	80fb      	strh	r3, [r7, #6]
 800283c:	460b      	mov	r3, r1
 800283e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	2300      	movs	r3, #0
 8002846:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8002848:	4b53      	ldr	r3, [pc, #332]	@ (8002998 <DrawChar+0x168>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4953      	ldr	r1, [pc, #332]	@ (800299c <DrawChar+0x16c>)
 800284e:	4613      	mov	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3308      	adds	r3, #8
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	88db      	ldrh	r3, [r3, #6]
 800285e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002860:	4b4d      	ldr	r3, [pc, #308]	@ (8002998 <DrawChar+0x168>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	494d      	ldr	r1, [pc, #308]	@ (800299c <DrawChar+0x16c>)
 8002866:	4613      	mov	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	3308      	adds	r3, #8
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	889b      	ldrh	r3, [r3, #4]
 8002876:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002878:	8a3b      	ldrh	r3, [r7, #16]
 800287a:	3307      	adds	r3, #7
 800287c:	2b00      	cmp	r3, #0
 800287e:	da00      	bge.n	8002882 <DrawChar+0x52>
 8002880:	3307      	adds	r3, #7
 8002882:	10db      	asrs	r3, r3, #3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	b2da      	uxtb	r2, r3
 800288a:	8a3b      	ldrh	r3, [r7, #16]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	e076      	b.n	8002986 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002898:	8a3b      	ldrh	r3, [r7, #16]
 800289a:	3307      	adds	r3, #7
 800289c:	2b00      	cmp	r3, #0
 800289e:	da00      	bge.n	80028a2 <DrawChar+0x72>
 80028a0:	3307      	adds	r3, #7
 80028a2:	10db      	asrs	r3, r3, #3
 80028a4:	461a      	mov	r2, r3
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fb02 f303 	mul.w	r3, r2, r3
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80028b2:	8a3b      	ldrh	r3, [r7, #16]
 80028b4:	3307      	adds	r3, #7
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	da00      	bge.n	80028bc <DrawChar+0x8c>
 80028ba:	3307      	adds	r3, #7
 80028bc:	10db      	asrs	r3, r3, #3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d002      	beq.n	80028c8 <DrawChar+0x98>
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d004      	beq.n	80028d0 <DrawChar+0xa0>
 80028c6:	e00c      	b.n	80028e2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	617b      	str	r3, [r7, #20]
      break;
 80028ce:	e016      	b.n	80028fe <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	3201      	adds	r2, #1
 80028da:	7812      	ldrb	r2, [r2, #0]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]
      break;
 80028e0:	e00d      	b.n	80028fe <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	041a      	lsls	r2, r3, #16
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	3301      	adds	r3, #1
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	4313      	orrs	r3, r2
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	3202      	adds	r2, #2
 80028f6:	7812      	ldrb	r2, [r2, #0]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
      break;
 80028fc:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	e036      	b.n	8002972 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002904:	8a3a      	ldrh	r2, [r7, #16]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad2      	subs	r2, r2, r3
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	4413      	add	r3, r2
 800290e:	3b01      	subs	r3, #1
 8002910:	2201      	movs	r2, #1
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	461a      	mov	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d012      	beq.n	8002946 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	b29a      	uxth	r2, r3
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	4413      	add	r3, r2
 8002928:	b298      	uxth	r0, r3
 800292a:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <DrawChar+0x168>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	491b      	ldr	r1, [pc, #108]	@ (800299c <DrawChar+0x16c>)
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	88bb      	ldrh	r3, [r7, #4]
 800293e:	4619      	mov	r1, r3
 8002940:	f7ff fe1a 	bl	8002578 <BSP_LCD_DrawPixel>
 8002944:	e012      	b.n	800296c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	b29a      	uxth	r2, r3
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	4413      	add	r3, r2
 800294e:	b298      	uxth	r0, r3
 8002950:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <DrawChar+0x168>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4911      	ldr	r1, [pc, #68]	@ (800299c <DrawChar+0x16c>)
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	3304      	adds	r3, #4
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	88bb      	ldrh	r3, [r7, #4]
 8002966:	4619      	mov	r1, r3
 8002968:	f7ff fe06 	bl	8002578 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	3301      	adds	r3, #1
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	8a3b      	ldrh	r3, [r7, #16]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	429a      	cmp	r2, r3
 8002978:	d3c4      	bcc.n	8002904 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800297a:	88bb      	ldrh	r3, [r7, #4]
 800297c:	3301      	adds	r3, #1
 800297e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	3301      	adds	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	8a7b      	ldrh	r3, [r7, #18]
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	429a      	cmp	r2, r3
 800298c:	d384      	bcc.n	8002898 <DrawChar+0x68>
  }
}
 800298e:	bf00      	nop
 8002990:	bf00      	nop
 8002992:	3720      	adds	r7, #32
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000730 	.word	0x20000730
 800299c:	20000734 	.word	0x20000734

080029a0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80029ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002a28 <LL_FillBuffer+0x88>)
 80029b0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80029b4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80029b6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <LL_FillBuffer+0x8c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002a30 <LL_FillBuffer+0x90>)
 80029bc:	2134      	movs	r1, #52	@ 0x34
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3348      	adds	r3, #72	@ 0x48
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d103      	bne.n	80029d4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80029cc:	4b16      	ldr	r3, [pc, #88]	@ (8002a28 <LL_FillBuffer+0x88>)
 80029ce:	2202      	movs	r2, #2
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	e002      	b.n	80029da <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80029d4:	4b14      	ldr	r3, [pc, #80]	@ (8002a28 <LL_FillBuffer+0x88>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80029da:	4a13      	ldr	r2, [pc, #76]	@ (8002a28 <LL_FillBuffer+0x88>)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80029e0:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <LL_FillBuffer+0x88>)
 80029e2:	4a14      	ldr	r2, [pc, #80]	@ (8002a34 <LL_FillBuffer+0x94>)
 80029e4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80029e6:	4810      	ldr	r0, [pc, #64]	@ (8002a28 <LL_FillBuffer+0x88>)
 80029e8:	f000 feb8 	bl	800375c <HAL_DMA2D_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d115      	bne.n	8002a1e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80029f2:	68f9      	ldr	r1, [r7, #12]
 80029f4:	480c      	ldr	r0, [pc, #48]	@ (8002a28 <LL_FillBuffer+0x88>)
 80029f6:	f001 f80f 	bl	8003a18 <HAL_DMA2D_ConfigLayer>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10e      	bne.n	8002a1e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69f9      	ldr	r1, [r7, #28]
 8002a0a:	4807      	ldr	r0, [pc, #28]	@ (8002a28 <LL_FillBuffer+0x88>)
 8002a0c:	f000 fef0 	bl	80037f0 <HAL_DMA2D_Start>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002a16:	210a      	movs	r1, #10
 8002a18:	4803      	ldr	r0, [pc, #12]	@ (8002a28 <LL_FillBuffer+0x88>)
 8002a1a:	f000 ff14 	bl	8003846 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200006f0 	.word	0x200006f0
 8002a2c:	20000730 	.word	0x20000730
 8002a30:	20000648 	.word	0x20000648
 8002a34:	4002b000 	.word	0x4002b000

08002a38 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002a3c:	4b29      	ldr	r3, [pc, #164]	@ (8002ae4 <BSP_SDRAM_Init+0xac>)
 8002a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ae8 <BSP_SDRAM_Init+0xb0>)
 8002a40:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002a42:	4b2a      	ldr	r3, [pc, #168]	@ (8002aec <BSP_SDRAM_Init+0xb4>)
 8002a44:	2202      	movs	r2, #2
 8002a46:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002a48:	4b28      	ldr	r3, [pc, #160]	@ (8002aec <BSP_SDRAM_Init+0xb4>)
 8002a4a:	2207      	movs	r2, #7
 8002a4c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002a4e:	4b27      	ldr	r3, [pc, #156]	@ (8002aec <BSP_SDRAM_Init+0xb4>)
 8002a50:	2204      	movs	r2, #4
 8002a52:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002a54:	4b25      	ldr	r3, [pc, #148]	@ (8002aec <BSP_SDRAM_Init+0xb4>)
 8002a56:	2207      	movs	r2, #7
 8002a58:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002a5a:	4b24      	ldr	r3, [pc, #144]	@ (8002aec <BSP_SDRAM_Init+0xb4>)
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002a60:	4b22      	ldr	r3, [pc, #136]	@ (8002aec <BSP_SDRAM_Init+0xb4>)
 8002a62:	2202      	movs	r2, #2
 8002a64:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002a66:	4b21      	ldr	r3, [pc, #132]	@ (8002aec <BSP_SDRAM_Init+0xb4>)
 8002a68:	2202      	movs	r2, #2
 8002a6a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae4 <BSP_SDRAM_Init+0xac>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002a72:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae4 <BSP_SDRAM_Init+0xac>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002a78:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <BSP_SDRAM_Init+0xac>)
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002a7e:	4b19      	ldr	r3, [pc, #100]	@ (8002ae4 <BSP_SDRAM_Init+0xac>)
 8002a80:	2210      	movs	r2, #16
 8002a82:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002a84:	4b17      	ldr	r3, [pc, #92]	@ (8002ae4 <BSP_SDRAM_Init+0xac>)
 8002a86:	2240      	movs	r2, #64	@ 0x40
 8002a88:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002a8a:	4b16      	ldr	r3, [pc, #88]	@ (8002ae4 <BSP_SDRAM_Init+0xac>)
 8002a8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a90:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002a92:	4b14      	ldr	r3, [pc, #80]	@ (8002ae4 <BSP_SDRAM_Init+0xac>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002a98:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <BSP_SDRAM_Init+0xac>)
 8002a9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a9e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002aa0:	4b10      	ldr	r3, [pc, #64]	@ (8002ae4 <BSP_SDRAM_Init+0xac>)
 8002aa2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002aa6:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <BSP_SDRAM_Init+0xac>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002aae:	2100      	movs	r1, #0
 8002ab0:	480c      	ldr	r0, [pc, #48]	@ (8002ae4 <BSP_SDRAM_Init+0xac>)
 8002ab2:	f000 f87f 	bl	8002bb4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002ab6:	490d      	ldr	r1, [pc, #52]	@ (8002aec <BSP_SDRAM_Init+0xb4>)
 8002ab8:	480a      	ldr	r0, [pc, #40]	@ (8002ae4 <BSP_SDRAM_Init+0xac>)
 8002aba:	f004 f961 	bl	8006d80 <HAL_SDRAM_Init>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8002af0 <BSP_SDRAM_Init+0xb8>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e002      	b.n	8002ad2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002acc:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <BSP_SDRAM_Init+0xb8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002ad2:	f240 6003 	movw	r0, #1539	@ 0x603
 8002ad6:	f000 f80d 	bl	8002af4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002ada:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <BSP_SDRAM_Init+0xb8>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200007d0 	.word	0x200007d0
 8002ae8:	a0000140 	.word	0xa0000140
 8002aec:	20000804 	.word	0x20000804
 8002af0:	2000000c 	.word	0x2000000c

08002af4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002b00:	4b2a      	ldr	r3, [pc, #168]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b06:	4b29      	ldr	r3, [pc, #164]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b08:	2210      	movs	r2, #16
 8002b0a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002b0c:	4b27      	ldr	r3, [pc, #156]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002b12:	4b26      	ldr	r3, [pc, #152]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002b18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b1c:	4923      	ldr	r1, [pc, #140]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b1e:	4824      	ldr	r0, [pc, #144]	@ (8002bb0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b20:	f004 f962 	bl	8006de8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002b24:	2001      	movs	r0, #1
 8002b26:	f000 f99b 	bl	8002e60 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002b2a:	4b20      	ldr	r3, [pc, #128]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b30:	4b1e      	ldr	r3, [pc, #120]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b32:	2210      	movs	r2, #16
 8002b34:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002b36:	4b1d      	ldr	r3, [pc, #116]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002b42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b46:	4919      	ldr	r1, [pc, #100]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b48:	4819      	ldr	r0, [pc, #100]	@ (8002bb0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b4a:	f004 f94d 	bl	8006de8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002b4e:	4b17      	ldr	r3, [pc, #92]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b50:	2203      	movs	r2, #3
 8002b52:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b54:	4b15      	ldr	r3, [pc, #84]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b56:	2210      	movs	r2, #16
 8002b58:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002b5a:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002b60:	4b12      	ldr	r3, [pc, #72]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002b66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b6a:	4910      	ldr	r1, [pc, #64]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b6c:	4810      	ldr	r0, [pc, #64]	@ (8002bb0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b6e:	f004 f93b 	bl	8006de8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002b72:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8002b76:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002b78:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b80:	2210      	movs	r2, #16
 8002b82:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002b84:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4a07      	ldr	r2, [pc, #28]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b8e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002b90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b94:	4905      	ldr	r1, [pc, #20]	@ (8002bac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b96:	4806      	ldr	r0, [pc, #24]	@ (8002bb0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b98:	f004 f926 	bl	8006de8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4804      	ldr	r0, [pc, #16]	@ (8002bb0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ba0:	f004 f957 	bl	8006e52 <HAL_SDRAM_ProgramRefreshRate>
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000820 	.word	0x20000820
 8002bb0:	200007d0 	.word	0x200007d0

08002bb4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b090      	sub	sp, #64	@ 0x40
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002bbe:	4b70      	ldr	r3, [pc, #448]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc2:	4a6f      	ldr	r2, [pc, #444]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6393      	str	r3, [r2, #56]	@ 0x38
 8002bca:	4b6d      	ldr	r3, [pc, #436]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	4a69      	ldr	r2, [pc, #420]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002bdc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be2:	4b67      	ldr	r3, [pc, #412]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bee:	4b64      	ldr	r3, [pc, #400]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	4a63      	ldr	r2, [pc, #396]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfa:	4b61      	ldr	r3, [pc, #388]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	623b      	str	r3, [r7, #32]
 8002c04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c06:	4b5e      	ldr	r3, [pc, #376]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	4a5d      	ldr	r2, [pc, #372]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c0c:	f043 0308 	orr.w	r3, r3, #8
 8002c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c12:	4b5b      	ldr	r3, [pc, #364]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c1e:	4b58      	ldr	r3, [pc, #352]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	4a57      	ldr	r2, [pc, #348]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c24:	f043 0310 	orr.w	r3, r3, #16
 8002c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c2a:	4b55      	ldr	r3, [pc, #340]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c36:	4b52      	ldr	r3, [pc, #328]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	4a51      	ldr	r2, [pc, #324]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c3c:	f043 0320 	orr.w	r3, r3, #32
 8002c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c42:	4b4f      	ldr	r3, [pc, #316]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	4a4b      	ldr	r2, [pc, #300]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c5a:	4b49      	ldr	r3, [pc, #292]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c66:	4b46      	ldr	r3, [pc, #280]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	4a45      	ldr	r2, [pc, #276]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c72:	4b43      	ldr	r3, [pc, #268]	@ (8002d80 <BSP_SDRAM_MspInit+0x1cc>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002c82:	2301      	movs	r3, #1
 8002c84:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002c86:	2302      	movs	r3, #2
 8002c88:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002c8a:	230c      	movs	r3, #12
 8002c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002c8e:	2308      	movs	r3, #8
 8002c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002c92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c96:	4619      	mov	r1, r3
 8002c98:	483a      	ldr	r0, [pc, #232]	@ (8002d84 <BSP_SDRAM_MspInit+0x1d0>)
 8002c9a:	f000 ffeb 	bl	8003c74 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002c9e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002ca4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4837      	ldr	r0, [pc, #220]	@ (8002d88 <BSP_SDRAM_MspInit+0x1d4>)
 8002cac:	f000 ffe2 	bl	8003c74 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002cb0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4833      	ldr	r0, [pc, #204]	@ (8002d8c <BSP_SDRAM_MspInit+0x1d8>)
 8002cbe:	f000 ffd9 	bl	8003c74 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002cc2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002cc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4830      	ldr	r0, [pc, #192]	@ (8002d90 <BSP_SDRAM_MspInit+0x1dc>)
 8002cd0:	f000 ffd0 	bl	8003c74 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002cd4:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002cda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cde:	4619      	mov	r1, r3
 8002ce0:	482c      	ldr	r0, [pc, #176]	@ (8002d94 <BSP_SDRAM_MspInit+0x1e0>)
 8002ce2:	f000 ffc7 	bl	8003c74 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002ce6:	2328      	movs	r3, #40	@ 0x28
 8002ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002cea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4829      	ldr	r0, [pc, #164]	@ (8002d98 <BSP_SDRAM_MspInit+0x1e4>)
 8002cf2:	f000 ffbf 	bl	8003c74 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002cf6:	4b29      	ldr	r3, [pc, #164]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002cfc:	4b27      	ldr	r3, [pc, #156]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002cfe:	2280      	movs	r2, #128	@ 0x80
 8002d00:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002d02:	4b26      	ldr	r3, [pc, #152]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d08:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002d0a:	4b24      	ldr	r3, [pc, #144]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d10:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d12:	4b22      	ldr	r3, [pc, #136]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d18:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002d1a:	4b20      	ldr	r3, [pc, #128]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d20:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002d22:	4b1e      	ldr	r3, [pc, #120]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002d28:	4b1c      	ldr	r3, [pc, #112]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d2e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002d30:	4b1a      	ldr	r3, [pc, #104]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002d36:	4b19      	ldr	r3, [pc, #100]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d38:	2203      	movs	r2, #3
 8002d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002d3c:	4b17      	ldr	r3, [pc, #92]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002d42:	4b16      	ldr	r3, [pc, #88]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002d48:	4b14      	ldr	r3, [pc, #80]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d4a:	4a15      	ldr	r2, [pc, #84]	@ (8002da0 <BSP_SDRAM_MspInit+0x1ec>)
 8002d4c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a12      	ldr	r2, [pc, #72]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d52:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d54:	4a11      	ldr	r2, [pc, #68]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002d5a:	4810      	ldr	r0, [pc, #64]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d5c:	f000 fa64 	bl	8003228 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002d60:	480e      	ldr	r0, [pc, #56]	@ (8002d9c <BSP_SDRAM_MspInit+0x1e8>)
 8002d62:	f000 f9b3 	bl	80030cc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	210f      	movs	r1, #15
 8002d6a:	2038      	movs	r0, #56	@ 0x38
 8002d6c:	f000 f977 	bl	800305e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002d70:	2038      	movs	r0, #56	@ 0x38
 8002d72:	f000 f990 	bl	8003096 <HAL_NVIC_EnableIRQ>
}
 8002d76:	bf00      	nop
 8002d78:	3740      	adds	r7, #64	@ 0x40
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40020800 	.word	0x40020800
 8002d88:	40020c00 	.word	0x40020c00
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40021400 	.word	0x40021400
 8002d94:	40021800 	.word	0x40021800
 8002d98:	40021c00 	.word	0x40021c00
 8002d9c:	20000830 	.word	0x20000830
 8002da0:	40026410 	.word	0x40026410

08002da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da8:	2003      	movs	r0, #3
 8002daa:	f000 f94d 	bl	8003048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f000 f806 	bl	8002dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002db4:	f7fd ffba 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc8:	4b12      	ldr	r3, [pc, #72]	@ (8002e14 <HAL_InitTick+0x54>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <HAL_InitTick+0x58>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f967 	bl	80030b2 <HAL_SYSTICK_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00e      	b.n	8002e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b0f      	cmp	r3, #15
 8002df2:	d80a      	bhi.n	8002e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df4:	2200      	movs	r2, #0
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f000 f92f 	bl	800305e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e00:	4a06      	ldr	r2, [pc, #24]	@ (8002e1c <HAL_InitTick+0x5c>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000014 	.word	0x20000014
 8002e1c:	20000010 	.word	0x20000010

08002e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e24:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <HAL_IncTick+0x20>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_IncTick+0x24>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a04      	ldr	r2, [pc, #16]	@ (8002e44 <HAL_IncTick+0x24>)
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000014 	.word	0x20000014
 8002e44:	20000890 	.word	0x20000890

08002e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	@ (8002e5c <HAL_GetTick+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000890 	.word	0x20000890

08002e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e68:	f7ff ffee 	bl	8002e48 <HAL_GetTick>
 8002e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d005      	beq.n	8002e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <HAL_Delay+0x44>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e86:	bf00      	nop
 8002e88:	f7ff ffde 	bl	8002e48 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d8f7      	bhi.n	8002e88 <HAL_Delay+0x28>
  {
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000014 	.word	0x20000014

08002ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <__NVIC_SetPriorityGrouping+0x40>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ed0:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ed6:	4a04      	ldr	r2, [pc, #16]	@ (8002ee8 <__NVIC_SetPriorityGrouping+0x40>)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	60d3      	str	r3, [r2, #12]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00
 8002eec:	05fa0000 	.word	0x05fa0000

08002ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef4:	4b04      	ldr	r3, [pc, #16]	@ (8002f08 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	f003 0307 	and.w	r3, r3, #7
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db0b      	blt.n	8002f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4907      	ldr	r1, [pc, #28]	@ (8002f44 <__NVIC_EnableIRQ+0x38>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db0a      	blt.n	8002f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	@ (8002f94 <__NVIC_SetPriority+0x4c>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f70:	e00a      	b.n	8002f88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4908      	ldr	r1, [pc, #32]	@ (8002f98 <__NVIC_SetPriority+0x50>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	440b      	add	r3, r1
 8002f86:	761a      	strb	r2, [r3, #24]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	@ 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf28      	it	cs
 8002fba:	2304      	movcs	r3, #4
 8002fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <NVIC_EncodePriority+0x30>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	e000      	b.n	8002fce <NVIC_EncodePriority+0x32>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	4313      	orrs	r3, r2
         );
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	@ 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003014:	d301      	bcc.n	800301a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003016:	2301      	movs	r3, #1
 8003018:	e00f      	b.n	800303a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301a:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <SysTick_Config+0x40>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003022:	210f      	movs	r1, #15
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	f7ff ff8e 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800302c:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <SysTick_Config+0x40>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003032:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <SysTick_Config+0x40>)
 8003034:	2207      	movs	r2, #7
 8003036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	e000e010 	.word	0xe000e010

08003048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff29 	bl	8002ea8 <__NVIC_SetPriorityGrouping>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003070:	f7ff ff3e 	bl	8002ef0 <__NVIC_GetPriorityGrouping>
 8003074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f7ff ff8e 	bl	8002f9c <NVIC_EncodePriority>
 8003080:	4602      	mov	r2, r0
 8003082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff5d 	bl	8002f48 <__NVIC_SetPriority>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff31 	bl	8002f0c <__NVIC_EnableIRQ>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ffa2 	bl	8003004 <SysTick_Config>
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030d8:	f7ff feb6 	bl	8002e48 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e099      	b.n	800321c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003108:	e00f      	b.n	800312a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800310a:	f7ff fe9d 	bl	8002e48 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b05      	cmp	r3, #5
 8003116:	d908      	bls.n	800312a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2203      	movs	r2, #3
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e078      	b.n	800321c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e8      	bne.n	800310a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4b38      	ldr	r3, [pc, #224]	@ (8003224 <HAL_DMA_Init+0x158>)
 8003144:	4013      	ands	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003156:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003180:	2b04      	cmp	r3, #4
 8003182:	d107      	bne.n	8003194 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318c:	4313      	orrs	r3, r2
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f023 0307 	bic.w	r3, r3, #7
 80031aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d117      	bne.n	80031ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00e      	beq.n	80031ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fa47 	bl	8003664 <DMA_CheckFifoParam>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2240      	movs	r2, #64	@ 0x40
 80031e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80031ea:	2301      	movs	r3, #1
 80031ec:	e016      	b.n	800321c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f9fe 	bl	80035f8 <DMA_CalcBaseAndBitshift>
 80031fc:	4603      	mov	r3, r0
 80031fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003204:	223f      	movs	r2, #63	@ 0x3f
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	f010803f 	.word	0xf010803f

08003228 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e050      	b.n	80032dc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d101      	bne.n	800324a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
 8003248:	e048      	b.n	80032dc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2200      	movs	r2, #0
 8003268:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2200      	movs	r2, #0
 8003278:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2200      	movs	r2, #0
 8003280:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2221      	movs	r2, #33	@ 0x21
 8003288:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9b4 	bl	80035f8 <DMA_CalcBaseAndBitshift>
 8003290:	4603      	mov	r3, r0
 8003292:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003298:	223f      	movs	r2, #63	@ 0x3f
 800329a:	409a      	lsls	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80032f0:	4b8e      	ldr	r3, [pc, #568]	@ (800352c <HAL_DMA_IRQHandler+0x248>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a8e      	ldr	r2, [pc, #568]	@ (8003530 <HAL_DMA_IRQHandler+0x24c>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0a9b      	lsrs	r3, r3, #10
 80032fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003302:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330e:	2208      	movs	r2, #8
 8003310:	409a      	lsls	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4013      	ands	r3, r2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01a      	beq.n	8003350 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d013      	beq.n	8003350 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0204 	bic.w	r2, r2, #4
 8003336:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333c:	2208      	movs	r2, #8
 800333e:	409a      	lsls	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003348:	f043 0201 	orr.w	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003354:	2201      	movs	r2, #1
 8003356:	409a      	lsls	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d012      	beq.n	8003386 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003372:	2201      	movs	r2, #1
 8003374:	409a      	lsls	r2, r3
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337e:	f043 0202 	orr.w	r2, r3, #2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338a:	2204      	movs	r2, #4
 800338c:	409a      	lsls	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d012      	beq.n	80033bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00b      	beq.n	80033bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	2204      	movs	r2, #4
 80033aa:	409a      	lsls	r2, r3
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b4:	f043 0204 	orr.w	r2, r3, #4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c0:	2210      	movs	r2, #16
 80033c2:	409a      	lsls	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d043      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d03c      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033de:	2210      	movs	r2, #16
 80033e0:	409a      	lsls	r2, r3
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d018      	beq.n	8003426 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d024      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
 8003412:	e01f      	b.n	8003454 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01b      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4798      	blx	r3
 8003424:	e016      	b.n	8003454 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d107      	bne.n	8003444 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0208 	bic.w	r2, r2, #8
 8003442:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	2220      	movs	r2, #32
 800345a:	409a      	lsls	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 808f 	beq.w	8003584 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8087 	beq.w	8003584 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347a:	2220      	movs	r2, #32
 800347c:	409a      	lsls	r2, r3
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b05      	cmp	r3, #5
 800348c:	d136      	bne.n	80034fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0216 	bic.w	r2, r2, #22
 800349c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <HAL_DMA_IRQHandler+0x1da>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d007      	beq.n	80034ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0208 	bic.w	r2, r2, #8
 80034cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d2:	223f      	movs	r2, #63	@ 0x3f
 80034d4:	409a      	lsls	r2, r3
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d07e      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
        }
        return;
 80034fa:	e079      	b.n	80035f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01d      	beq.n	8003546 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10d      	bne.n	8003534 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351c:	2b00      	cmp	r3, #0
 800351e:	d031      	beq.n	8003584 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
 8003528:	e02c      	b.n	8003584 <HAL_DMA_IRQHandler+0x2a0>
 800352a:	bf00      	nop
 800352c:	20000000 	.word	0x20000000
 8003530:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d023      	beq.n	8003584 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
 8003544:	e01e      	b.n	8003584 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10f      	bne.n	8003574 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0210 	bic.w	r2, r2, #16
 8003562:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003588:	2b00      	cmp	r3, #0
 800358a:	d032      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d022      	beq.n	80035de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2205      	movs	r2, #5
 800359c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	3301      	adds	r3, #1
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d307      	bcc.n	80035cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f2      	bne.n	80035b0 <HAL_DMA_IRQHandler+0x2cc>
 80035ca:	e000      	b.n	80035ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
 80035ee:	e000      	b.n	80035f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80035f0:	bf00      	nop
    }
  }
}
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	3b10      	subs	r3, #16
 8003608:	4a13      	ldr	r2, [pc, #76]	@ (8003658 <DMA_CalcBaseAndBitshift+0x60>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003612:	4a12      	ldr	r2, [pc, #72]	@ (800365c <DMA_CalcBaseAndBitshift+0x64>)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d908      	bls.n	8003638 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	4b0c      	ldr	r3, [pc, #48]	@ (8003660 <DMA_CalcBaseAndBitshift+0x68>)
 800362e:	4013      	ands	r3, r2
 8003630:	1d1a      	adds	r2, r3, #4
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	659a      	str	r2, [r3, #88]	@ 0x58
 8003636:	e006      	b.n	8003646 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <DMA_CalcBaseAndBitshift+0x68>)
 8003640:	4013      	ands	r3, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	aaaaaaab 	.word	0xaaaaaaab
 800365c:	0800b134 	.word	0x0800b134
 8003660:	fffffc00 	.word	0xfffffc00

08003664 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003674:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d11f      	bne.n	80036be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d856      	bhi.n	8003732 <DMA_CheckFifoParam+0xce>
 8003684:	a201      	add	r2, pc, #4	@ (adr r2, 800368c <DMA_CheckFifoParam+0x28>)
 8003686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368a:	bf00      	nop
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036af 	.word	0x080036af
 8003694:	0800369d 	.word	0x0800369d
 8003698:	08003733 	.word	0x08003733
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d046      	beq.n	8003736 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ac:	e043      	b.n	8003736 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036b6:	d140      	bne.n	800373a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036bc:	e03d      	b.n	800373a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c6:	d121      	bne.n	800370c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d837      	bhi.n	800373e <DMA_CheckFifoParam+0xda>
 80036ce:	a201      	add	r2, pc, #4	@ (adr r2, 80036d4 <DMA_CheckFifoParam+0x70>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	080036e5 	.word	0x080036e5
 80036d8:	080036eb 	.word	0x080036eb
 80036dc:	080036e5 	.word	0x080036e5
 80036e0:	080036fd 	.word	0x080036fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      break;
 80036e8:	e030      	b.n	800374c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d025      	beq.n	8003742 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fa:	e022      	b.n	8003742 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003704:	d11f      	bne.n	8003746 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800370a:	e01c      	b.n	8003746 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d903      	bls.n	800371a <DMA_CheckFifoParam+0xb6>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d003      	beq.n	8003720 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003718:	e018      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
      break;
 800371e:	e015      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00e      	beq.n	800374a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      break;
 8003730:	e00b      	b.n	800374a <DMA_CheckFifoParam+0xe6>
      break;
 8003732:	bf00      	nop
 8003734:	e00a      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
 8003738:	e008      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 800373a:	bf00      	nop
 800373c:	e006      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 800373e:	bf00      	nop
 8003740:	e004      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 8003742:	bf00      	nop
 8003744:	e002      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;   
 8003746:	bf00      	nop
 8003748:	e000      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 800374a:	bf00      	nop
    }
  } 
  
  return status; 
 800374c:	7bfb      	ldrb	r3, [r7, #15]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop

0800375c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e039      	b.n	80037e2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd faf6 	bl	8000d74 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ac:	f023 0107 	bic.w	r1, r3, #7
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037c2:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <HAL_DMA2D_Init+0x90>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68d1      	ldr	r1, [r2, #12]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	430b      	orrs	r3, r1
 80037d0:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	ffffc000 	.word	0xffffc000

080037f0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_DMA2D_Start+0x1c>
 8003808:	2302      	movs	r3, #2
 800380a:	e018      	b.n	800383e <HAL_DMA2D_Start+0x4e>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f988 	bl	8003b3c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b086      	sub	sp, #24
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d056      	beq.n	8003910 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003862:	f7ff faf1 	bl	8002e48 <HAL_GetTick>
 8003866:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003868:	e04b      	b.n	8003902 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003878:	2b00      	cmp	r3, #0
 800387a:	d023      	beq.n	80038c4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388a:	f043 0202 	orr.w	r2, r3, #2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a0:	f043 0201 	orr.w	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2221      	movs	r2, #33	@ 0x21
 80038ae:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2204      	movs	r2, #4
 80038b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0a5      	b.n	8003a10 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ca:	d01a      	beq.n	8003902 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038cc:	f7ff fabc 	bl	8002e48 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d302      	bcc.n	80038e2 <HAL_DMA2D_PollForTransfer+0x9c>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10f      	bne.n	8003902 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e6:	f043 0220 	orr.w	r2, r3, #32
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2203      	movs	r2, #3
 80038f2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e086      	b.n	8003a10 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0ac      	beq.n	800386a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d061      	beq.n	80039f6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003932:	f7ff fa89 	bl	8002e48 <HAL_GetTick>
 8003936:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003938:	e056      	b.n	80039e8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8003948:	2b00      	cmp	r3, #0
 800394a:	d02e      	beq.n	80039aa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395a:	f043 0204 	orr.w	r2, r3, #4
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003970:	f043 0202 	orr.w	r2, r3, #2
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003986:	f043 0201 	orr.w	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2229      	movs	r2, #41	@ 0x29
 8003994:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2204      	movs	r2, #4
 800399a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e032      	b.n	8003a10 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d01a      	beq.n	80039e8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7ff fa49 	bl	8002e48 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <HAL_DMA2D_PollForTransfer+0x182>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10f      	bne.n	80039e8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2203      	movs	r2, #3
 80039d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e013      	b.n	8003a10 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0a1      	beq.n	800393a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2212      	movs	r2, #18
 80039fc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_DMA2D_ConfigLayer+0x20>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e079      	b.n	8003b2c <HAL_DMA2D_ConfigLayer+0x114>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	3318      	adds	r3, #24
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	4413      	add	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	041b      	lsls	r3, r3, #16
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003a62:	4b35      	ldr	r3, [pc, #212]	@ (8003b38 <HAL_DMA2D_ConfigLayer+0x120>)
 8003a64:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b0a      	cmp	r3, #10
 8003a6c:	d003      	beq.n	8003a76 <HAL_DMA2D_ConfigLayer+0x5e>
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b09      	cmp	r3, #9
 8003a74:	d107      	bne.n	8003a86 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	e005      	b.n	8003a92 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	061b      	lsls	r3, r3, #24
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d120      	bne.n	8003ada <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	ea02 0103 	and.w	r1, r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b0a      	cmp	r3, #10
 8003ac0:	d003      	beq.n	8003aca <HAL_DMA2D_ConfigLayer+0xb2>
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b09      	cmp	r3, #9
 8003ac8:	d127      	bne.n	8003b1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003ad6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ad8:	e01f      	b.n	8003b1a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	ea02 0103 	and.w	r1, r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b0a      	cmp	r3, #10
 8003b02:	d003      	beq.n	8003b0c <HAL_DMA2D_ConfigLayer+0xf4>
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b09      	cmp	r3, #9
 8003b0a:	d106      	bne.n	8003b1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003b18:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	ff03000f 	.word	0xff03000f

08003b3c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b08b      	sub	sp, #44	@ 0x2c
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b50:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	041a      	lsls	r2, r3, #16
 8003b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b74:	d174      	bne.n	8003c60 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003b7c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003b84:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003b8c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d108      	bne.n	8003bae <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bac:	e053      	b.n	8003c56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d106      	bne.n	8003bc4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc2:	e048      	b.n	8003c56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d111      	bne.n	8003bf0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	0cdb      	lsrs	r3, r3, #19
 8003bd0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	0a9b      	lsrs	r3, r3, #10
 8003bd6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	08db      	lsrs	r3, r3, #3
 8003bdc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	02db      	lsls	r3, r3, #11
 8003be6:	4313      	orrs	r3, r2
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bee:	e032      	b.n	8003c56 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d117      	bne.n	8003c28 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	0fdb      	lsrs	r3, r3, #31
 8003bfc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	0cdb      	lsrs	r3, r3, #19
 8003c02:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	0adb      	lsrs	r3, r3, #11
 8003c08:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	08db      	lsrs	r3, r3, #3
 8003c0e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	029b      	lsls	r3, r3, #10
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	03db      	lsls	r3, r3, #15
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c26:	e016      	b.n	8003c56 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	0f1b      	lsrs	r3, r3, #28
 8003c2c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	0d1b      	lsrs	r3, r3, #20
 8003c32:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	0b1b      	lsrs	r3, r3, #12
 8003c38:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	011a      	lsls	r2, r3, #4
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	031b      	lsls	r3, r3, #12
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003c5e:	e003      	b.n	8003c68 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	60da      	str	r2, [r3, #12]
}
 8003c68:	bf00      	nop
 8003c6a:	372c      	adds	r7, #44	@ 0x2c
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b089      	sub	sp, #36	@ 0x24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	e175      	b.n	8003f80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c94:	2201      	movs	r2, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	f040 8164 	bne.w	8003f7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d005      	beq.n	8003cca <HAL_GPIO_Init+0x56>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d130      	bne.n	8003d2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d00:	2201      	movs	r2, #1
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 0201 	and.w	r2, r3, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d017      	beq.n	8003d68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	2203      	movs	r2, #3
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d123      	bne.n	8003dbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	08da      	lsrs	r2, r3, #3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3208      	adds	r2, #8
 8003d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	08da      	lsrs	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3208      	adds	r2, #8
 8003db6:	69b9      	ldr	r1, [r7, #24]
 8003db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 0203 	and.w	r2, r3, #3
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80be 	beq.w	8003f7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dfe:	4b66      	ldr	r3, [pc, #408]	@ (8003f98 <HAL_GPIO_Init+0x324>)
 8003e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e02:	4a65      	ldr	r2, [pc, #404]	@ (8003f98 <HAL_GPIO_Init+0x324>)
 8003e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e0a:	4b63      	ldr	r3, [pc, #396]	@ (8003f98 <HAL_GPIO_Init+0x324>)
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e16:	4a61      	ldr	r2, [pc, #388]	@ (8003f9c <HAL_GPIO_Init+0x328>)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	089b      	lsrs	r3, r3, #2
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	220f      	movs	r2, #15
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a58      	ldr	r2, [pc, #352]	@ (8003fa0 <HAL_GPIO_Init+0x32c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d037      	beq.n	8003eb2 <HAL_GPIO_Init+0x23e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a57      	ldr	r2, [pc, #348]	@ (8003fa4 <HAL_GPIO_Init+0x330>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d031      	beq.n	8003eae <HAL_GPIO_Init+0x23a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a56      	ldr	r2, [pc, #344]	@ (8003fa8 <HAL_GPIO_Init+0x334>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d02b      	beq.n	8003eaa <HAL_GPIO_Init+0x236>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a55      	ldr	r2, [pc, #340]	@ (8003fac <HAL_GPIO_Init+0x338>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d025      	beq.n	8003ea6 <HAL_GPIO_Init+0x232>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a54      	ldr	r2, [pc, #336]	@ (8003fb0 <HAL_GPIO_Init+0x33c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d01f      	beq.n	8003ea2 <HAL_GPIO_Init+0x22e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a53      	ldr	r2, [pc, #332]	@ (8003fb4 <HAL_GPIO_Init+0x340>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d019      	beq.n	8003e9e <HAL_GPIO_Init+0x22a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a52      	ldr	r2, [pc, #328]	@ (8003fb8 <HAL_GPIO_Init+0x344>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <HAL_GPIO_Init+0x226>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a51      	ldr	r2, [pc, #324]	@ (8003fbc <HAL_GPIO_Init+0x348>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00d      	beq.n	8003e96 <HAL_GPIO_Init+0x222>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a50      	ldr	r2, [pc, #320]	@ (8003fc0 <HAL_GPIO_Init+0x34c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <HAL_GPIO_Init+0x21e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a4f      	ldr	r2, [pc, #316]	@ (8003fc4 <HAL_GPIO_Init+0x350>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_GPIO_Init+0x21a>
 8003e8a:	2309      	movs	r3, #9
 8003e8c:	e012      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003e8e:	230a      	movs	r3, #10
 8003e90:	e010      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003e92:	2308      	movs	r3, #8
 8003e94:	e00e      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003e96:	2307      	movs	r3, #7
 8003e98:	e00c      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003e9a:	2306      	movs	r3, #6
 8003e9c:	e00a      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003e9e:	2305      	movs	r3, #5
 8003ea0:	e008      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003ea2:	2304      	movs	r3, #4
 8003ea4:	e006      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e004      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e002      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <HAL_GPIO_Init+0x240>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	f002 0203 	and.w	r2, r2, #3
 8003eba:	0092      	lsls	r2, r2, #2
 8003ebc:	4093      	lsls	r3, r2
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ec4:	4935      	ldr	r1, [pc, #212]	@ (8003f9c <HAL_GPIO_Init+0x328>)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	089b      	lsrs	r3, r3, #2
 8003eca:	3302      	adds	r3, #2
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ef6:	4a34      	ldr	r2, [pc, #208]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003efc:	4b32      	ldr	r3, [pc, #200]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f20:	4a29      	ldr	r2, [pc, #164]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f26:	4b28      	ldr	r3, [pc, #160]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4013      	ands	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f50:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f74:	4a14      	ldr	r2, [pc, #80]	@ (8003fc8 <HAL_GPIO_Init+0x354>)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	61fb      	str	r3, [r7, #28]
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	2b0f      	cmp	r3, #15
 8003f84:	f67f ae86 	bls.w	8003c94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	3724      	adds	r7, #36	@ 0x24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40013800 	.word	0x40013800
 8003fa0:	40020000 	.word	0x40020000
 8003fa4:	40020400 	.word	0x40020400
 8003fa8:	40020800 	.word	0x40020800
 8003fac:	40020c00 	.word	0x40020c00
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40021400 	.word	0x40021400
 8003fb8:	40021800 	.word	0x40021800
 8003fbc:	40021c00 	.word	0x40021c00
 8003fc0:	40022000 	.word	0x40022000
 8003fc4:	40022400 	.word	0x40022400
 8003fc8:	40013c00 	.word	0x40013c00

08003fcc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e0d9      	b.n	800419c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003fe8:	2201      	movs	r2, #1
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	f040 80c9 	bne.w	8004196 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004004:	4a6b      	ldr	r2, [pc, #428]	@ (80041b4 <HAL_GPIO_DeInit+0x1e8>)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	089b      	lsrs	r3, r3, #2
 800400a:	3302      	adds	r3, #2
 800400c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004010:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	220f      	movs	r2, #15
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	4013      	ands	r3, r2
 8004024:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a63      	ldr	r2, [pc, #396]	@ (80041b8 <HAL_GPIO_DeInit+0x1ec>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d037      	beq.n	800409e <HAL_GPIO_DeInit+0xd2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a62      	ldr	r2, [pc, #392]	@ (80041bc <HAL_GPIO_DeInit+0x1f0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d031      	beq.n	800409a <HAL_GPIO_DeInit+0xce>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a61      	ldr	r2, [pc, #388]	@ (80041c0 <HAL_GPIO_DeInit+0x1f4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d02b      	beq.n	8004096 <HAL_GPIO_DeInit+0xca>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a60      	ldr	r2, [pc, #384]	@ (80041c4 <HAL_GPIO_DeInit+0x1f8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d025      	beq.n	8004092 <HAL_GPIO_DeInit+0xc6>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a5f      	ldr	r2, [pc, #380]	@ (80041c8 <HAL_GPIO_DeInit+0x1fc>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d01f      	beq.n	800408e <HAL_GPIO_DeInit+0xc2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a5e      	ldr	r2, [pc, #376]	@ (80041cc <HAL_GPIO_DeInit+0x200>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d019      	beq.n	800408a <HAL_GPIO_DeInit+0xbe>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a5d      	ldr	r2, [pc, #372]	@ (80041d0 <HAL_GPIO_DeInit+0x204>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d013      	beq.n	8004086 <HAL_GPIO_DeInit+0xba>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a5c      	ldr	r2, [pc, #368]	@ (80041d4 <HAL_GPIO_DeInit+0x208>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00d      	beq.n	8004082 <HAL_GPIO_DeInit+0xb6>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a5b      	ldr	r2, [pc, #364]	@ (80041d8 <HAL_GPIO_DeInit+0x20c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <HAL_GPIO_DeInit+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a5a      	ldr	r2, [pc, #360]	@ (80041dc <HAL_GPIO_DeInit+0x210>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d101      	bne.n	800407a <HAL_GPIO_DeInit+0xae>
 8004076:	2309      	movs	r3, #9
 8004078:	e012      	b.n	80040a0 <HAL_GPIO_DeInit+0xd4>
 800407a:	230a      	movs	r3, #10
 800407c:	e010      	b.n	80040a0 <HAL_GPIO_DeInit+0xd4>
 800407e:	2308      	movs	r3, #8
 8004080:	e00e      	b.n	80040a0 <HAL_GPIO_DeInit+0xd4>
 8004082:	2307      	movs	r3, #7
 8004084:	e00c      	b.n	80040a0 <HAL_GPIO_DeInit+0xd4>
 8004086:	2306      	movs	r3, #6
 8004088:	e00a      	b.n	80040a0 <HAL_GPIO_DeInit+0xd4>
 800408a:	2305      	movs	r3, #5
 800408c:	e008      	b.n	80040a0 <HAL_GPIO_DeInit+0xd4>
 800408e:	2304      	movs	r3, #4
 8004090:	e006      	b.n	80040a0 <HAL_GPIO_DeInit+0xd4>
 8004092:	2303      	movs	r3, #3
 8004094:	e004      	b.n	80040a0 <HAL_GPIO_DeInit+0xd4>
 8004096:	2302      	movs	r3, #2
 8004098:	e002      	b.n	80040a0 <HAL_GPIO_DeInit+0xd4>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_GPIO_DeInit+0xd4>
 800409e:	2300      	movs	r3, #0
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	f002 0203 	and.w	r2, r2, #3
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	4093      	lsls	r3, r2
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d132      	bne.n	8004116 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80040b0:	4b4b      	ldr	r3, [pc, #300]	@ (80041e0 <HAL_GPIO_DeInit+0x214>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	43db      	mvns	r3, r3
 80040b8:	4949      	ldr	r1, [pc, #292]	@ (80041e0 <HAL_GPIO_DeInit+0x214>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80040be:	4b48      	ldr	r3, [pc, #288]	@ (80041e0 <HAL_GPIO_DeInit+0x214>)
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	4946      	ldr	r1, [pc, #280]	@ (80041e0 <HAL_GPIO_DeInit+0x214>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80040cc:	4b44      	ldr	r3, [pc, #272]	@ (80041e0 <HAL_GPIO_DeInit+0x214>)
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	4942      	ldr	r1, [pc, #264]	@ (80041e0 <HAL_GPIO_DeInit+0x214>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80040da:	4b41      	ldr	r3, [pc, #260]	@ (80041e0 <HAL_GPIO_DeInit+0x214>)
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	493f      	ldr	r1, [pc, #252]	@ (80041e0 <HAL_GPIO_DeInit+0x214>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	220f      	movs	r2, #15
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80040f8:	4a2e      	ldr	r2, [pc, #184]	@ (80041b4 <HAL_GPIO_DeInit+0x1e8>)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	089b      	lsrs	r3, r3, #2
 80040fe:	3302      	adds	r3, #2
 8004100:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	43da      	mvns	r2, r3
 8004108:	482a      	ldr	r0, [pc, #168]	@ (80041b4 <HAL_GPIO_DeInit+0x1e8>)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	089b      	lsrs	r3, r3, #2
 800410e:	400a      	ands	r2, r1
 8004110:	3302      	adds	r3, #2
 8004112:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	2103      	movs	r1, #3
 8004120:	fa01 f303 	lsl.w	r3, r1, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	401a      	ands	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	08da      	lsrs	r2, r3, #3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3208      	adds	r2, #8
 8004134:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	220f      	movs	r2, #15
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43db      	mvns	r3, r3
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	08d2      	lsrs	r2, r2, #3
 800414c:	4019      	ands	r1, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3208      	adds	r2, #8
 8004152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	2103      	movs	r1, #3
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	401a      	ands	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	2101      	movs	r1, #1
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	fa01 f303 	lsl.w	r3, r1, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	401a      	ands	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	2103      	movs	r1, #3
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	401a      	ands	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	3301      	adds	r3, #1
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2b0f      	cmp	r3, #15
 80041a0:	f67f af22 	bls.w	8003fe8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40013800 	.word	0x40013800
 80041b8:	40020000 	.word	0x40020000
 80041bc:	40020400 	.word	0x40020400
 80041c0:	40020800 	.word	0x40020800
 80041c4:	40020c00 	.word	0x40020c00
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40021400 	.word	0x40021400
 80041d0:	40021800 	.word	0x40021800
 80041d4:	40021c00 	.word	0x40021c00
 80041d8:	40022000 	.word	0x40022000
 80041dc:	40022400 	.word	0x40022400
 80041e0:	40013c00 	.word	0x40013c00

080041e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	807b      	strh	r3, [r7, #2]
 80041f0:	4613      	mov	r3, r2
 80041f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041f4:	787b      	ldrb	r3, [r7, #1]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004200:	e003      	b.n	800420a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004202:	887b      	ldrh	r3, [r7, #2]
 8004204:	041a      	lsls	r2, r3, #16
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	619a      	str	r2, [r3, #24]
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e08b      	b.n	8004342 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f8b5 	bl	80043ae <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2224      	movs	r2, #36	@ 0x24
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004268:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004278:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d107      	bne.n	8004292 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800428e:	609a      	str	r2, [r3, #8]
 8004290:	e006      	b.n	80042a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800429e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d108      	bne.n	80042ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	e007      	b.n	80042ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b1d      	ldr	r3, [pc, #116]	@ (800434c <HAL_I2C_Init+0x134>)
 80042d6:	430b      	orrs	r3, r1
 80042d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69d9      	ldr	r1, [r3, #28]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1a      	ldr	r2, [r3, #32]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	02008000 	.word	0x02008000

08004350 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e021      	b.n	80043a6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2224      	movs	r2, #36	@ 0x24
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f821 	bl	80043c2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	4608      	mov	r0, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	461a      	mov	r2, r3
 80043e6:	4603      	mov	r3, r0
 80043e8:	817b      	strh	r3, [r7, #10]
 80043ea:	460b      	mov	r3, r1
 80043ec:	813b      	strh	r3, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	f040 80f9 	bne.w	80045f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_I2C_Mem_Write+0x34>
 8004406:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004412:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0ed      	b.n	80045f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_I2C_Mem_Write+0x4e>
 8004422:	2302      	movs	r3, #2
 8004424:	e0e6      	b.n	80045f4 <HAL_I2C_Mem_Write+0x21c>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800442e:	f7fe fd0b 	bl	8002e48 <HAL_GetTick>
 8004432:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	2319      	movs	r3, #25
 800443a:	2201      	movs	r2, #1
 800443c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fad1 	bl	80049e8 <I2C_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0d1      	b.n	80045f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2221      	movs	r2, #33	@ 0x21
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2240      	movs	r2, #64	@ 0x40
 800445c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a3a      	ldr	r2, [r7, #32]
 800446a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004470:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004478:	88f8      	ldrh	r0, [r7, #6]
 800447a:	893a      	ldrh	r2, [r7, #8]
 800447c:	8979      	ldrh	r1, [r7, #10]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	9301      	str	r3, [sp, #4]
 8004482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	4603      	mov	r3, r0
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f9e1 	bl	8004850 <I2C_RequestMemoryWrite>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0a9      	b.n	80045f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2bff      	cmp	r3, #255	@ 0xff
 80044a8:	d90e      	bls.n	80044c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	22ff      	movs	r2, #255	@ 0xff
 80044ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	8979      	ldrh	r1, [r7, #10]
 80044b8:	2300      	movs	r3, #0
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fc55 	bl	8004d70 <I2C_TransferConfig>
 80044c6:	e00f      	b.n	80044e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	8979      	ldrh	r1, [r7, #10]
 80044da:	2300      	movs	r3, #0
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fc44 	bl	8004d70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fad4 	bl	8004a9a <I2C_WaitOnTXISFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e07b      	b.n	80045f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	781a      	ldrb	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d034      	beq.n	80045a0 <HAL_I2C_Mem_Write+0x1c8>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453a:	2b00      	cmp	r3, #0
 800453c:	d130      	bne.n	80045a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004544:	2200      	movs	r2, #0
 8004546:	2180      	movs	r1, #128	@ 0x80
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 fa4d 	bl	80049e8 <I2C_WaitOnFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e04d      	b.n	80045f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2bff      	cmp	r3, #255	@ 0xff
 8004560:	d90e      	bls.n	8004580 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	22ff      	movs	r2, #255	@ 0xff
 8004566:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456c:	b2da      	uxtb	r2, r3
 800456e:	8979      	ldrh	r1, [r7, #10]
 8004570:	2300      	movs	r3, #0
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fbf9 	bl	8004d70 <I2C_TransferConfig>
 800457e:	e00f      	b.n	80045a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458e:	b2da      	uxtb	r2, r3
 8004590:	8979      	ldrh	r1, [r7, #10]
 8004592:	2300      	movs	r3, #0
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fbe8 	bl	8004d70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d19e      	bne.n	80044e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 faba 	bl	8004b28 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e01a      	b.n	80045f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2220      	movs	r2, #32
 80045c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6859      	ldr	r1, [r3, #4]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b0a      	ldr	r3, [pc, #40]	@ (80045fc <HAL_I2C_Mem_Write+0x224>)
 80045d2:	400b      	ands	r3, r1
 80045d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e000      	b.n	80045f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80045f2:	2302      	movs	r3, #2
  }
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	fe00e800 	.word	0xfe00e800

08004600 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	4608      	mov	r0, r1
 800460a:	4611      	mov	r1, r2
 800460c:	461a      	mov	r2, r3
 800460e:	4603      	mov	r3, r0
 8004610:	817b      	strh	r3, [r7, #10]
 8004612:	460b      	mov	r3, r1
 8004614:	813b      	strh	r3, [r7, #8]
 8004616:	4613      	mov	r3, r2
 8004618:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b20      	cmp	r3, #32
 8004624:	f040 80fd 	bne.w	8004822 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_I2C_Mem_Read+0x34>
 800462e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004630:	2b00      	cmp	r3, #0
 8004632:	d105      	bne.n	8004640 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800463a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0f1      	b.n	8004824 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_I2C_Mem_Read+0x4e>
 800464a:	2302      	movs	r3, #2
 800464c:	e0ea      	b.n	8004824 <HAL_I2C_Mem_Read+0x224>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004656:	f7fe fbf7 	bl	8002e48 <HAL_GetTick>
 800465a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2319      	movs	r3, #25
 8004662:	2201      	movs	r2, #1
 8004664:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f9bd 	bl	80049e8 <I2C_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0d5      	b.n	8004824 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2222      	movs	r2, #34	@ 0x22
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2240      	movs	r2, #64	@ 0x40
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a3a      	ldr	r2, [r7, #32]
 8004692:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004698:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046a0:	88f8      	ldrh	r0, [r7, #6]
 80046a2:	893a      	ldrh	r2, [r7, #8]
 80046a4:	8979      	ldrh	r1, [r7, #10]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	4603      	mov	r3, r0
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f921 	bl	80048f8 <I2C_RequestMemoryRead>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0ad      	b.n	8004824 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2bff      	cmp	r3, #255	@ 0xff
 80046d0:	d90e      	bls.n	80046f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	8979      	ldrh	r1, [r7, #10]
 80046e0:	4b52      	ldr	r3, [pc, #328]	@ (800482c <HAL_I2C_Mem_Read+0x22c>)
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fb41 	bl	8004d70 <I2C_TransferConfig>
 80046ee:	e00f      	b.n	8004710 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	8979      	ldrh	r1, [r7, #10]
 8004702:	4b4a      	ldr	r3, [pc, #296]	@ (800482c <HAL_I2C_Mem_Read+0x22c>)
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fb30 	bl	8004d70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004716:	2200      	movs	r2, #0
 8004718:	2104      	movs	r1, #4
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f964 	bl	80049e8 <I2C_WaitOnFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e07c      	b.n	8004824 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d034      	beq.n	80047d0 <HAL_I2C_Mem_Read+0x1d0>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476a:	2b00      	cmp	r3, #0
 800476c:	d130      	bne.n	80047d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004774:	2200      	movs	r2, #0
 8004776:	2180      	movs	r1, #128	@ 0x80
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 f935 	bl	80049e8 <I2C_WaitOnFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e04d      	b.n	8004824 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	2bff      	cmp	r3, #255	@ 0xff
 8004790:	d90e      	bls.n	80047b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479c:	b2da      	uxtb	r2, r3
 800479e:	8979      	ldrh	r1, [r7, #10]
 80047a0:	2300      	movs	r3, #0
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 fae1 	bl	8004d70 <I2C_TransferConfig>
 80047ae:	e00f      	b.n	80047d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	8979      	ldrh	r1, [r7, #10]
 80047c2:	2300      	movs	r3, #0
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fad0 	bl	8004d70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d19a      	bne.n	8004710 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f9a2 	bl	8004b28 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e01a      	b.n	8004824 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2220      	movs	r2, #32
 80047f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6859      	ldr	r1, [r3, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <HAL_I2C_Mem_Read+0x230>)
 8004802:	400b      	ands	r3, r1
 8004804:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	e000      	b.n	8004824 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004822:	2302      	movs	r3, #2
  }
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	80002400 	.word	0x80002400
 8004830:	fe00e800 	.word	0xfe00e800

08004834 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004842:	b2db      	uxtb	r3, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	4608      	mov	r0, r1
 800485a:	4611      	mov	r1, r2
 800485c:	461a      	mov	r2, r3
 800485e:	4603      	mov	r3, r0
 8004860:	817b      	strh	r3, [r7, #10]
 8004862:	460b      	mov	r3, r1
 8004864:	813b      	strh	r3, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	b2da      	uxtb	r2, r3
 800486e:	8979      	ldrh	r1, [r7, #10]
 8004870:	4b20      	ldr	r3, [pc, #128]	@ (80048f4 <I2C_RequestMemoryWrite+0xa4>)
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fa79 	bl	8004d70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800487e:	69fa      	ldr	r2, [r7, #28]
 8004880:	69b9      	ldr	r1, [r7, #24]
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f909 	bl	8004a9a <I2C_WaitOnTXISFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e02c      	b.n	80048ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004892:	88fb      	ldrh	r3, [r7, #6]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d105      	bne.n	80048a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004898:	893b      	ldrh	r3, [r7, #8]
 800489a:	b2da      	uxtb	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80048a2:	e015      	b.n	80048d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048a4:	893b      	ldrh	r3, [r7, #8]
 80048a6:	0a1b      	lsrs	r3, r3, #8
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	69b9      	ldr	r1, [r7, #24]
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f8ef 	bl	8004a9a <I2C_WaitOnTXISFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e012      	b.n	80048ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048c6:	893b      	ldrh	r3, [r7, #8]
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2200      	movs	r2, #0
 80048d8:	2180      	movs	r1, #128	@ 0x80
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f884 	bl	80049e8 <I2C_WaitOnFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	80002000 	.word	0x80002000

080048f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	461a      	mov	r2, r3
 8004906:	4603      	mov	r3, r0
 8004908:	817b      	strh	r3, [r7, #10]
 800490a:	460b      	mov	r3, r1
 800490c:	813b      	strh	r3, [r7, #8]
 800490e:	4613      	mov	r3, r2
 8004910:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004912:	88fb      	ldrh	r3, [r7, #6]
 8004914:	b2da      	uxtb	r2, r3
 8004916:	8979      	ldrh	r1, [r7, #10]
 8004918:	4b20      	ldr	r3, [pc, #128]	@ (800499c <I2C_RequestMemoryRead+0xa4>)
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	2300      	movs	r3, #0
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 fa26 	bl	8004d70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	69b9      	ldr	r1, [r7, #24]
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f8b6 	bl	8004a9a <I2C_WaitOnTXISFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e02c      	b.n	8004992 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d105      	bne.n	800494a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800493e:	893b      	ldrh	r3, [r7, #8]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	629a      	str	r2, [r3, #40]	@ 0x28
 8004948:	e015      	b.n	8004976 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800494a:	893b      	ldrh	r3, [r7, #8]
 800494c:	0a1b      	lsrs	r3, r3, #8
 800494e:	b29b      	uxth	r3, r3
 8004950:	b2da      	uxtb	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	69b9      	ldr	r1, [r7, #24]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f89c 	bl	8004a9a <I2C_WaitOnTXISFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e012      	b.n	8004992 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800496c:	893b      	ldrh	r3, [r7, #8]
 800496e:	b2da      	uxtb	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2200      	movs	r2, #0
 800497e:	2140      	movs	r1, #64	@ 0x40
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f831 	bl	80049e8 <I2C_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	80002000 	.word	0x80002000

080049a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d103      	bne.n	80049be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2200      	movs	r2, #0
 80049bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d007      	beq.n	80049dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	619a      	str	r2, [r3, #24]
  }
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f8:	e03b      	b.n	8004a72 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	6839      	ldr	r1, [r7, #0]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f8d6 	bl	8004bb0 <I2C_IsErrorOccurred>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e041      	b.n	8004a92 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d02d      	beq.n	8004a72 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a16:	f7fe fa17 	bl	8002e48 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d122      	bne.n	8004a72 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	4013      	ands	r3, r2
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	bf0c      	ite	eq
 8004a3c:	2301      	moveq	r3, #1
 8004a3e:	2300      	movne	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d113      	bne.n	8004a72 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4e:	f043 0220 	orr.w	r2, r3, #32
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e00f      	b.n	8004a92 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699a      	ldr	r2, [r3, #24]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	bf0c      	ite	eq
 8004a82:	2301      	moveq	r3, #1
 8004a84:	2300      	movne	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	461a      	mov	r2, r3
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d0b4      	beq.n	80049fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004aa6:	e033      	b.n	8004b10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 f87f 	bl	8004bb0 <I2C_IsErrorOccurred>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e031      	b.n	8004b20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac2:	d025      	beq.n	8004b10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac4:	f7fe f9c0 	bl	8002e48 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d302      	bcc.n	8004ada <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d11a      	bne.n	8004b10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d013      	beq.n	8004b10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aec:	f043 0220 	orr.w	r2, r3, #32
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e007      	b.n	8004b20 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d1c4      	bne.n	8004aa8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b34:	e02f      	b.n	8004b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f838 	bl	8004bb0 <I2C_IsErrorOccurred>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e02d      	b.n	8004ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4a:	f7fe f97d 	bl	8002e48 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d302      	bcc.n	8004b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d11a      	bne.n	8004b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d013      	beq.n	8004b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e007      	b.n	8004ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d1c8      	bne.n	8004b36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	@ 0x28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d068      	beq.n	8004cae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2210      	movs	r2, #16
 8004be2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004be4:	e049      	b.n	8004c7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d045      	beq.n	8004c7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bee:	f7fe f92b 	bl	8002e48 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <I2C_IsErrorOccurred+0x54>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d13a      	bne.n	8004c7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c26:	d121      	bne.n	8004c6c <I2C_IsErrorOccurred+0xbc>
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c2e:	d01d      	beq.n	8004c6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004c30:	7cfb      	ldrb	r3, [r7, #19]
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d01a      	beq.n	8004c6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c46:	f7fe f8ff 	bl	8002e48 <HAL_GetTick>
 8004c4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c4c:	e00e      	b.n	8004c6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c4e:	f7fe f8fb 	bl	8002e48 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b19      	cmp	r3, #25
 8004c5a:	d907      	bls.n	8004c6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	f043 0320 	orr.w	r3, r3, #32
 8004c62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004c6a:	e006      	b.n	8004c7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d1e9      	bne.n	8004c4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d003      	beq.n	8004c90 <I2C_IsErrorOccurred+0xe0>
 8004c88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0aa      	beq.n	8004be6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d103      	bne.n	8004ca0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	f043 0304 	orr.w	r3, r3, #4
 8004ca6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00b      	beq.n	8004cfa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f043 0308 	orr.w	r3, r3, #8
 8004ce8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cf2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00b      	beq.n	8004d1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	f043 0302 	orr.w	r3, r3, #2
 8004d0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01c      	beq.n	8004d5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff fe3b 	bl	80049a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4b0d      	ldr	r3, [pc, #52]	@ (8004d6c <I2C_IsErrorOccurred+0x1bc>)
 8004d36:	400b      	ands	r3, r1
 8004d38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3728      	adds	r7, #40	@ 0x28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	fe00e800 	.word	0xfe00e800

08004d70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	817b      	strh	r3, [r7, #10]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d82:	897b      	ldrh	r3, [r7, #10]
 8004d84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d88:	7a7b      	ldrb	r3, [r7, #9]
 8004d8a:	041b      	lsls	r3, r3, #16
 8004d8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	0d5b      	lsrs	r3, r3, #21
 8004daa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004dae:	4b08      	ldr	r3, [pc, #32]	@ (8004dd0 <I2C_TransferConfig+0x60>)
 8004db0:	430b      	orrs	r3, r1
 8004db2:	43db      	mvns	r3, r3
 8004db4:	ea02 0103 	and.w	r1, r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	03ff63ff 	.word	0x03ff63ff

08004dd4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e0bf      	b.n	8004f66 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fb ffda 	bl	8000db4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004e16:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6999      	ldr	r1, [r3, #24]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e2c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6899      	ldr	r1, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b4a      	ldr	r3, [pc, #296]	@ (8004f70 <HAL_LTDC_Init+0x19c>)
 8004e48:	400b      	ands	r3, r1
 8004e4a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	041b      	lsls	r3, r3, #16
 8004e52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6899      	ldr	r1, [r3, #8]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699a      	ldr	r2, [r3, #24]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68d9      	ldr	r1, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4b3e      	ldr	r3, [pc, #248]	@ (8004f70 <HAL_LTDC_Init+0x19c>)
 8004e76:	400b      	ands	r3, r1
 8004e78:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68d9      	ldr	r1, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1a      	ldr	r2, [r3, #32]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6919      	ldr	r1, [r3, #16]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4b33      	ldr	r3, [pc, #204]	@ (8004f70 <HAL_LTDC_Init+0x19c>)
 8004ea4:	400b      	ands	r3, r1
 8004ea6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eac:	041b      	lsls	r3, r3, #16
 8004eae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6919      	ldr	r1, [r3, #16]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6959      	ldr	r1, [r3, #20]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4b27      	ldr	r3, [pc, #156]	@ (8004f70 <HAL_LTDC_Init+0x19c>)
 8004ed2:	400b      	ands	r3, r1
 8004ed4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	041b      	lsls	r3, r3, #16
 8004edc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6959      	ldr	r1, [r3, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0206 	orr.w	r2, r2, #6
 8004f42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	f000f800 	.word	0xf000f800

08004f74 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004f74:	b5b0      	push	{r4, r5, r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_LTDC_ConfigLayer+0x1a>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e02c      	b.n	8004fe8 <HAL_LTDC_ConfigLayer+0x74>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2134      	movs	r1, #52	@ 0x34
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	4413      	add	r3, r2
 8004faa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	461d      	mov	r5, r3
 8004fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 f81f 	bl	800500c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bdb0      	pop	{r4, r5, r7, pc}

08004ff0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004ffe:	b2db      	uxtb	r3, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800500c:	b480      	push	{r7}
 800500e:	b089      	sub	sp, #36	@ 0x24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	0c1b      	lsrs	r3, r3, #16
 8005024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005028:	4413      	add	r3, r2
 800502a:	041b      	lsls	r3, r3, #16
 800502c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	01db      	lsls	r3, r3, #7
 8005038:	4413      	add	r3, r2
 800503a:	3384      	adds	r3, #132	@ 0x84
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	4611      	mov	r1, r2
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	01d2      	lsls	r2, r2, #7
 8005048:	440a      	add	r2, r1
 800504a:	3284      	adds	r2, #132	@ 0x84
 800504c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005050:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	0c1b      	lsrs	r3, r3, #16
 800505e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005062:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005064:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4619      	mov	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	01db      	lsls	r3, r3, #7
 8005070:	440b      	add	r3, r1
 8005072:	3384      	adds	r3, #132	@ 0x84
 8005074:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800507a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800508a:	4413      	add	r3, r2
 800508c:	041b      	lsls	r3, r3, #16
 800508e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	01db      	lsls	r3, r3, #7
 800509a:	4413      	add	r3, r2
 800509c:	3384      	adds	r3, #132	@ 0x84
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	4611      	mov	r1, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	01d2      	lsls	r2, r2, #7
 80050aa:	440a      	add	r2, r1
 80050ac:	3284      	adds	r2, #132	@ 0x84
 80050ae:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80050b2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050c2:	4413      	add	r3, r2
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4619      	mov	r1, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	01db      	lsls	r3, r3, #7
 80050d0:	440b      	add	r3, r1
 80050d2:	3384      	adds	r3, #132	@ 0x84
 80050d4:	4619      	mov	r1, r3
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	4313      	orrs	r3, r2
 80050da:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	01db      	lsls	r3, r3, #7
 80050e6:	4413      	add	r3, r2
 80050e8:	3384      	adds	r3, #132	@ 0x84
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	4611      	mov	r1, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	01d2      	lsls	r2, r2, #7
 80050f6:	440a      	add	r2, r1
 80050f8:	3284      	adds	r2, #132	@ 0x84
 80050fa:	f023 0307 	bic.w	r3, r3, #7
 80050fe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	01db      	lsls	r3, r3, #7
 800510a:	4413      	add	r3, r2
 800510c:	3384      	adds	r3, #132	@ 0x84
 800510e:	461a      	mov	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005126:	041b      	lsls	r3, r3, #16
 8005128:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	061b      	lsls	r3, r3, #24
 8005130:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	01db      	lsls	r3, r3, #7
 800513c:	4413      	add	r3, r2
 800513e:	3384      	adds	r3, #132	@ 0x84
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	01db      	lsls	r3, r3, #7
 800514c:	4413      	add	r3, r2
 800514e:	3384      	adds	r3, #132	@ 0x84
 8005150:	461a      	mov	r2, r3
 8005152:	2300      	movs	r3, #0
 8005154:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800515c:	461a      	mov	r2, r3
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	431a      	orrs	r2, r3
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	431a      	orrs	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4619      	mov	r1, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	01db      	lsls	r3, r3, #7
 8005170:	440b      	add	r3, r1
 8005172:	3384      	adds	r3, #132	@ 0x84
 8005174:	4619      	mov	r1, r3
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	01db      	lsls	r3, r3, #7
 8005186:	4413      	add	r3, r2
 8005188:	3384      	adds	r3, #132	@ 0x84
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	6812      	ldr	r2, [r2, #0]
 8005190:	4611      	mov	r1, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	01d2      	lsls	r2, r2, #7
 8005196:	440a      	add	r2, r1
 8005198:	3284      	adds	r2, #132	@ 0x84
 800519a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800519e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	01db      	lsls	r3, r3, #7
 80051aa:	4413      	add	r3, r2
 80051ac:	3384      	adds	r3, #132	@ 0x84
 80051ae:	461a      	mov	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	01db      	lsls	r3, r3, #7
 80051c0:	4413      	add	r3, r2
 80051c2:	3384      	adds	r3, #132	@ 0x84
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4619      	mov	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	01db      	lsls	r3, r3, #7
 80051d0:	440b      	add	r3, r1
 80051d2:	3384      	adds	r3, #132	@ 0x84
 80051d4:	4619      	mov	r1, r3
 80051d6:	4b58      	ldr	r3, [pc, #352]	@ (8005338 <LTDC_SetConfig+0x32c>)
 80051d8:	4013      	ands	r3, r2
 80051da:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	68f9      	ldr	r1, [r7, #12]
 80051e6:	6809      	ldr	r1, [r1, #0]
 80051e8:	4608      	mov	r0, r1
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	01c9      	lsls	r1, r1, #7
 80051ee:	4401      	add	r1, r0
 80051f0:	3184      	adds	r1, #132	@ 0x84
 80051f2:	4313      	orrs	r3, r2
 80051f4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	01db      	lsls	r3, r3, #7
 8005200:	4413      	add	r3, r2
 8005202:	3384      	adds	r3, #132	@ 0x84
 8005204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	01db      	lsls	r3, r3, #7
 8005210:	4413      	add	r3, r2
 8005212:	3384      	adds	r3, #132	@ 0x84
 8005214:	461a      	mov	r2, r3
 8005216:	2300      	movs	r3, #0
 8005218:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	01db      	lsls	r3, r3, #7
 8005224:	4413      	add	r3, r2
 8005226:	3384      	adds	r3, #132	@ 0x84
 8005228:	461a      	mov	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005238:	2304      	movs	r3, #4
 800523a:	61fb      	str	r3, [r7, #28]
 800523c:	e01b      	b.n	8005276 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d102      	bne.n	800524c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005246:	2303      	movs	r3, #3
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	e014      	b.n	8005276 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b04      	cmp	r3, #4
 8005252:	d00b      	beq.n	800526c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005258:	2b02      	cmp	r3, #2
 800525a:	d007      	beq.n	800526c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005260:	2b03      	cmp	r3, #3
 8005262:	d003      	beq.n	800526c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005268:	2b07      	cmp	r3, #7
 800526a:	d102      	bne.n	8005272 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800526c:	2302      	movs	r3, #2
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	e001      	b.n	8005276 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005272:	2301      	movs	r3, #1
 8005274:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	01db      	lsls	r3, r3, #7
 8005280:	4413      	add	r3, r2
 8005282:	3384      	adds	r3, #132	@ 0x84
 8005284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	4611      	mov	r1, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	01d2      	lsls	r2, r2, #7
 8005290:	440a      	add	r2, r1
 8005292:	3284      	adds	r2, #132	@ 0x84
 8005294:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005298:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	fb02 f303 	mul.w	r3, r2, r3
 80052a4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	6859      	ldr	r1, [r3, #4]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	1acb      	subs	r3, r1, r3
 80052b0:	69f9      	ldr	r1, [r7, #28]
 80052b2:	fb01 f303 	mul.w	r3, r1, r3
 80052b6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80052b8:	68f9      	ldr	r1, [r7, #12]
 80052ba:	6809      	ldr	r1, [r1, #0]
 80052bc:	4608      	mov	r0, r1
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	01c9      	lsls	r1, r1, #7
 80052c2:	4401      	add	r1, r0
 80052c4:	3184      	adds	r1, #132	@ 0x84
 80052c6:	4313      	orrs	r3, r2
 80052c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	01db      	lsls	r3, r3, #7
 80052d4:	4413      	add	r3, r2
 80052d6:	3384      	adds	r3, #132	@ 0x84
 80052d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4619      	mov	r1, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	01db      	lsls	r3, r3, #7
 80052e4:	440b      	add	r3, r1
 80052e6:	3384      	adds	r3, #132	@ 0x84
 80052e8:	4619      	mov	r1, r3
 80052ea:	4b14      	ldr	r3, [pc, #80]	@ (800533c <LTDC_SetConfig+0x330>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	01db      	lsls	r3, r3, #7
 80052fa:	4413      	add	r3, r2
 80052fc:	3384      	adds	r3, #132	@ 0x84
 80052fe:	461a      	mov	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005304:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	01db      	lsls	r3, r3, #7
 8005310:	4413      	add	r3, r2
 8005312:	3384      	adds	r3, #132	@ 0x84
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	4611      	mov	r1, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	01d2      	lsls	r2, r2, #7
 8005320:	440a      	add	r2, r1
 8005322:	3284      	adds	r2, #132	@ 0x84
 8005324:	f043 0301 	orr.w	r3, r3, #1
 8005328:	6013      	str	r3, [r2, #0]
}
 800532a:	bf00      	nop
 800532c:	3724      	adds	r7, #36	@ 0x24
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	fffff8f8 	.word	0xfffff8f8
 800533c:	fffff800 	.word	0xfffff800

08005340 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005344:	4b05      	ldr	r3, [pc, #20]	@ (800535c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a04      	ldr	r2, [pc, #16]	@ (800535c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800534a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800534e:	6013      	str	r3, [r2, #0]
}
 8005350:	bf00      	nop
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40007000 	.word	0x40007000

08005360 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800536a:	4b23      	ldr	r3, [pc, #140]	@ (80053f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536e:	4a22      	ldr	r2, [pc, #136]	@ (80053f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005374:	6413      	str	r3, [r2, #64]	@ 0x40
 8005376:	4b20      	ldr	r3, [pc, #128]	@ (80053f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005382:	4b1e      	ldr	r3, [pc, #120]	@ (80053fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1d      	ldr	r2, [pc, #116]	@ (80053fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800538c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800538e:	f7fd fd5b 	bl	8002e48 <HAL_GetTick>
 8005392:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005394:	e009      	b.n	80053aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005396:	f7fd fd57 	bl	8002e48 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053a4:	d901      	bls.n	80053aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e022      	b.n	80053f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80053aa:	4b14      	ldr	r3, [pc, #80]	@ (80053fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b6:	d1ee      	bne.n	8005396 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80053b8:	4b10      	ldr	r3, [pc, #64]	@ (80053fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a0f      	ldr	r2, [pc, #60]	@ (80053fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80053be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053c4:	f7fd fd40 	bl	8002e48 <HAL_GetTick>
 80053c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80053ca:	e009      	b.n	80053e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80053cc:	f7fd fd3c 	bl	8002e48 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053da:	d901      	bls.n	80053e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e007      	b.n	80053f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80053e0:	4b06      	ldr	r3, [pc, #24]	@ (80053fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053ec:	d1ee      	bne.n	80053cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40007000 	.word	0x40007000

08005400 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005408:	2300      	movs	r3, #0
 800540a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e291      	b.n	800593a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 8087 	beq.w	8005532 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005424:	4b96      	ldr	r3, [pc, #600]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 030c 	and.w	r3, r3, #12
 800542c:	2b04      	cmp	r3, #4
 800542e:	d00c      	beq.n	800544a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005430:	4b93      	ldr	r3, [pc, #588]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 030c 	and.w	r3, r3, #12
 8005438:	2b08      	cmp	r3, #8
 800543a:	d112      	bne.n	8005462 <HAL_RCC_OscConfig+0x62>
 800543c:	4b90      	ldr	r3, [pc, #576]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005444:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005448:	d10b      	bne.n	8005462 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800544a:	4b8d      	ldr	r3, [pc, #564]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d06c      	beq.n	8005530 <HAL_RCC_OscConfig+0x130>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d168      	bne.n	8005530 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e26b      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800546a:	d106      	bne.n	800547a <HAL_RCC_OscConfig+0x7a>
 800546c:	4b84      	ldr	r3, [pc, #528]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a83      	ldr	r2, [pc, #524]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 8005472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	e02e      	b.n	80054d8 <HAL_RCC_OscConfig+0xd8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10c      	bne.n	800549c <HAL_RCC_OscConfig+0x9c>
 8005482:	4b7f      	ldr	r3, [pc, #508]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a7e      	ldr	r2, [pc, #504]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 8005488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	4b7c      	ldr	r3, [pc, #496]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a7b      	ldr	r2, [pc, #492]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 8005494:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	e01d      	b.n	80054d8 <HAL_RCC_OscConfig+0xd8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054a4:	d10c      	bne.n	80054c0 <HAL_RCC_OscConfig+0xc0>
 80054a6:	4b76      	ldr	r3, [pc, #472]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a75      	ldr	r2, [pc, #468]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 80054ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	4b73      	ldr	r3, [pc, #460]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a72      	ldr	r2, [pc, #456]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 80054b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e00b      	b.n	80054d8 <HAL_RCC_OscConfig+0xd8>
 80054c0:	4b6f      	ldr	r3, [pc, #444]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a6e      	ldr	r2, [pc, #440]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 80054c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	4b6c      	ldr	r3, [pc, #432]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a6b      	ldr	r2, [pc, #428]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 80054d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d013      	beq.n	8005508 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e0:	f7fd fcb2 	bl	8002e48 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054e8:	f7fd fcae 	bl	8002e48 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b64      	cmp	r3, #100	@ 0x64
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e21f      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054fa:	4b61      	ldr	r3, [pc, #388]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0f0      	beq.n	80054e8 <HAL_RCC_OscConfig+0xe8>
 8005506:	e014      	b.n	8005532 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005508:	f7fd fc9e 	bl	8002e48 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005510:	f7fd fc9a 	bl	8002e48 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b64      	cmp	r3, #100	@ 0x64
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e20b      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005522:	4b57      	ldr	r3, [pc, #348]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x110>
 800552e:	e000      	b.n	8005532 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d069      	beq.n	8005612 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800553e:	4b50      	ldr	r3, [pc, #320]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 030c 	and.w	r3, r3, #12
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00b      	beq.n	8005562 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800554a:	4b4d      	ldr	r3, [pc, #308]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 030c 	and.w	r3, r3, #12
 8005552:	2b08      	cmp	r3, #8
 8005554:	d11c      	bne.n	8005590 <HAL_RCC_OscConfig+0x190>
 8005556:	4b4a      	ldr	r3, [pc, #296]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d116      	bne.n	8005590 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005562:	4b47      	ldr	r3, [pc, #284]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <HAL_RCC_OscConfig+0x17a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d001      	beq.n	800557a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e1df      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557a:	4b41      	ldr	r3, [pc, #260]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	493d      	ldr	r1, [pc, #244]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 800558a:	4313      	orrs	r3, r2
 800558c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800558e:	e040      	b.n	8005612 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d023      	beq.n	80055e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005598:	4b39      	ldr	r3, [pc, #228]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a38      	ldr	r2, [pc, #224]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fd fc50 	bl	8002e48 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ac:	f7fd fc4c 	bl	8002e48 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e1bd      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055be:	4b30      	ldr	r3, [pc, #192]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4929      	ldr	r1, [pc, #164]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	600b      	str	r3, [r1, #0]
 80055de:	e018      	b.n	8005612 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055e0:	4b27      	ldr	r3, [pc, #156]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a26      	ldr	r2, [pc, #152]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 80055e6:	f023 0301 	bic.w	r3, r3, #1
 80055ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ec:	f7fd fc2c 	bl	8002e48 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f4:	f7fd fc28 	bl	8002e48 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e199      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005606:	4b1e      	ldr	r3, [pc, #120]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1f0      	bne.n	80055f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	2b00      	cmp	r3, #0
 800561c:	d038      	beq.n	8005690 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d019      	beq.n	800565a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005626:	4b16      	ldr	r3, [pc, #88]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 8005628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800562a:	4a15      	ldr	r2, [pc, #84]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005632:	f7fd fc09 	bl	8002e48 <HAL_GetTick>
 8005636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800563a:	f7fd fc05 	bl	8002e48 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e176      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800564c:	4b0c      	ldr	r3, [pc, #48]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 800564e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0f0      	beq.n	800563a <HAL_RCC_OscConfig+0x23a>
 8005658:	e01a      	b.n	8005690 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800565a:	4b09      	ldr	r3, [pc, #36]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 800565c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800565e:	4a08      	ldr	r2, [pc, #32]	@ (8005680 <HAL_RCC_OscConfig+0x280>)
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005666:	f7fd fbef 	bl	8002e48 <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800566c:	e00a      	b.n	8005684 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800566e:	f7fd fbeb 	bl	8002e48 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d903      	bls.n	8005684 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e15c      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
 8005680:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005684:	4b91      	ldr	r3, [pc, #580]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 8005686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1ee      	bne.n	800566e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80a4 	beq.w	80057e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800569e:	4b8b      	ldr	r3, [pc, #556]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10d      	bne.n	80056c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80056aa:	4b88      	ldr	r3, [pc, #544]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ae:	4a87      	ldr	r2, [pc, #540]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 80056b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80056b6:	4b85      	ldr	r3, [pc, #532]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056be:	60bb      	str	r3, [r7, #8]
 80056c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056c2:	2301      	movs	r3, #1
 80056c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056c6:	4b82      	ldr	r3, [pc, #520]	@ (80058d0 <HAL_RCC_OscConfig+0x4d0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d118      	bne.n	8005704 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80056d2:	4b7f      	ldr	r3, [pc, #508]	@ (80058d0 <HAL_RCC_OscConfig+0x4d0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a7e      	ldr	r2, [pc, #504]	@ (80058d0 <HAL_RCC_OscConfig+0x4d0>)
 80056d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056de:	f7fd fbb3 	bl	8002e48 <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e6:	f7fd fbaf 	bl	8002e48 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b64      	cmp	r3, #100	@ 0x64
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e120      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056f8:	4b75      	ldr	r3, [pc, #468]	@ (80058d0 <HAL_RCC_OscConfig+0x4d0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0f0      	beq.n	80056e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d106      	bne.n	800571a <HAL_RCC_OscConfig+0x31a>
 800570c:	4b6f      	ldr	r3, [pc, #444]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005710:	4a6e      	ldr	r2, [pc, #440]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 8005712:	f043 0301 	orr.w	r3, r3, #1
 8005716:	6713      	str	r3, [r2, #112]	@ 0x70
 8005718:	e02d      	b.n	8005776 <HAL_RCC_OscConfig+0x376>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10c      	bne.n	800573c <HAL_RCC_OscConfig+0x33c>
 8005722:	4b6a      	ldr	r3, [pc, #424]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 8005724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005726:	4a69      	ldr	r2, [pc, #420]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	6713      	str	r3, [r2, #112]	@ 0x70
 800572e:	4b67      	ldr	r3, [pc, #412]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 8005730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005732:	4a66      	ldr	r2, [pc, #408]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 8005734:	f023 0304 	bic.w	r3, r3, #4
 8005738:	6713      	str	r3, [r2, #112]	@ 0x70
 800573a:	e01c      	b.n	8005776 <HAL_RCC_OscConfig+0x376>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b05      	cmp	r3, #5
 8005742:	d10c      	bne.n	800575e <HAL_RCC_OscConfig+0x35e>
 8005744:	4b61      	ldr	r3, [pc, #388]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 8005746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005748:	4a60      	ldr	r2, [pc, #384]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 800574a:	f043 0304 	orr.w	r3, r3, #4
 800574e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005750:	4b5e      	ldr	r3, [pc, #376]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 8005752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005754:	4a5d      	ldr	r2, [pc, #372]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 8005756:	f043 0301 	orr.w	r3, r3, #1
 800575a:	6713      	str	r3, [r2, #112]	@ 0x70
 800575c:	e00b      	b.n	8005776 <HAL_RCC_OscConfig+0x376>
 800575e:	4b5b      	ldr	r3, [pc, #364]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 8005760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005762:	4a5a      	ldr	r2, [pc, #360]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	6713      	str	r3, [r2, #112]	@ 0x70
 800576a:	4b58      	ldr	r3, [pc, #352]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 800576c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576e:	4a57      	ldr	r2, [pc, #348]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 8005770:	f023 0304 	bic.w	r3, r3, #4
 8005774:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d015      	beq.n	80057aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577e:	f7fd fb63 	bl	8002e48 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005784:	e00a      	b.n	800579c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005786:	f7fd fb5f 	bl	8002e48 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005794:	4293      	cmp	r3, r2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e0ce      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800579c:	4b4b      	ldr	r3, [pc, #300]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0ee      	beq.n	8005786 <HAL_RCC_OscConfig+0x386>
 80057a8:	e014      	b.n	80057d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057aa:	f7fd fb4d 	bl	8002e48 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057b0:	e00a      	b.n	80057c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b2:	f7fd fb49 	bl	8002e48 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e0b8      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057c8:	4b40      	ldr	r3, [pc, #256]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 80057ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1ee      	bne.n	80057b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d105      	bne.n	80057e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057da:	4b3c      	ldr	r3, [pc, #240]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 80057dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057de:	4a3b      	ldr	r2, [pc, #236]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 80057e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057e4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 80a4 	beq.w	8005938 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057f0:	4b36      	ldr	r3, [pc, #216]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 030c 	and.w	r3, r3, #12
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d06b      	beq.n	80058d4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d149      	bne.n	8005898 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005804:	4b31      	ldr	r3, [pc, #196]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a30      	ldr	r2, [pc, #192]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 800580a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800580e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005810:	f7fd fb1a 	bl	8002e48 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005818:	f7fd fb16 	bl	8002e48 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e087      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582a:	4b28      	ldr	r3, [pc, #160]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f0      	bne.n	8005818 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69da      	ldr	r2, [r3, #28]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005844:	019b      	lsls	r3, r3, #6
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584c:	085b      	lsrs	r3, r3, #1
 800584e:	3b01      	subs	r3, #1
 8005850:	041b      	lsls	r3, r3, #16
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	061b      	lsls	r3, r3, #24
 800585a:	4313      	orrs	r3, r2
 800585c:	4a1b      	ldr	r2, [pc, #108]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 800585e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005862:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005864:	4b19      	ldr	r3, [pc, #100]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a18      	ldr	r2, [pc, #96]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 800586a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800586e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fd faea 	bl	8002e48 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005878:	f7fd fae6 	bl	8002e48 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e057      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588a:	4b10      	ldr	r3, [pc, #64]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0f0      	beq.n	8005878 <HAL_RCC_OscConfig+0x478>
 8005896:	e04f      	b.n	8005938 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005898:	4b0c      	ldr	r3, [pc, #48]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a0b      	ldr	r2, [pc, #44]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 800589e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fd fad0 	bl	8002e48 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ac:	f7fd facc 	bl	8002e48 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e03d      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058be:	4b03      	ldr	r3, [pc, #12]	@ (80058cc <HAL_RCC_OscConfig+0x4cc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f0      	bne.n	80058ac <HAL_RCC_OscConfig+0x4ac>
 80058ca:	e035      	b.n	8005938 <HAL_RCC_OscConfig+0x538>
 80058cc:	40023800 	.word	0x40023800
 80058d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80058d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005944 <HAL_RCC_OscConfig+0x544>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d028      	beq.n	8005934 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d121      	bne.n	8005934 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d11a      	bne.n	8005934 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005904:	4013      	ands	r3, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800590a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800590c:	4293      	cmp	r3, r2
 800590e:	d111      	bne.n	8005934 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	3b01      	subs	r3, #1
 800591e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d107      	bne.n	8005934 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005930:	429a      	cmp	r2, r3
 8005932:	d001      	beq.n	8005938 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e000      	b.n	800593a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	40023800 	.word	0x40023800

08005948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e0d0      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005960:	4b6a      	ldr	r3, [pc, #424]	@ (8005b0c <HAL_RCC_ClockConfig+0x1c4>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d910      	bls.n	8005990 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596e:	4b67      	ldr	r3, [pc, #412]	@ (8005b0c <HAL_RCC_ClockConfig+0x1c4>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f023 020f 	bic.w	r2, r3, #15
 8005976:	4965      	ldr	r1, [pc, #404]	@ (8005b0c <HAL_RCC_ClockConfig+0x1c4>)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	4313      	orrs	r3, r2
 800597c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800597e:	4b63      	ldr	r3, [pc, #396]	@ (8005b0c <HAL_RCC_ClockConfig+0x1c4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d001      	beq.n	8005990 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0b8      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d020      	beq.n	80059de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059a8:	4b59      	ldr	r3, [pc, #356]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	4a58      	ldr	r2, [pc, #352]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 80059ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059c0:	4b53      	ldr	r3, [pc, #332]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	4a52      	ldr	r2, [pc, #328]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 80059c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059cc:	4b50      	ldr	r3, [pc, #320]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	494d      	ldr	r1, [pc, #308]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d040      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d107      	bne.n	8005a02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059f2:	4b47      	ldr	r3, [pc, #284]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d115      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e07f      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d107      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a0a:	4b41      	ldr	r3, [pc, #260]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e073      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a1a:	4b3d      	ldr	r3, [pc, #244]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e06b      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a2a:	4b39      	ldr	r3, [pc, #228]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f023 0203 	bic.w	r2, r3, #3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4936      	ldr	r1, [pc, #216]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a3c:	f7fd fa04 	bl	8002e48 <HAL_GetTick>
 8005a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a42:	e00a      	b.n	8005a5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a44:	f7fd fa00 	bl	8002e48 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e053      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 020c 	and.w	r2, r3, #12
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d1eb      	bne.n	8005a44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a6c:	4b27      	ldr	r3, [pc, #156]	@ (8005b0c <HAL_RCC_ClockConfig+0x1c4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d210      	bcs.n	8005a9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7a:	4b24      	ldr	r3, [pc, #144]	@ (8005b0c <HAL_RCC_ClockConfig+0x1c4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 020f 	bic.w	r2, r3, #15
 8005a82:	4922      	ldr	r1, [pc, #136]	@ (8005b0c <HAL_RCC_ClockConfig+0x1c4>)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8a:	4b20      	ldr	r3, [pc, #128]	@ (8005b0c <HAL_RCC_ClockConfig+0x1c4>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d001      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e032      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aa8:	4b19      	ldr	r3, [pc, #100]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4916      	ldr	r1, [pc, #88]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ac6:	4b12      	ldr	r3, [pc, #72]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	490e      	ldr	r1, [pc, #56]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ada:	f000 f821 	bl	8005b20 <HAL_RCC_GetSysClockFreq>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	091b      	lsrs	r3, r3, #4
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	490a      	ldr	r1, [pc, #40]	@ (8005b14 <HAL_RCC_ClockConfig+0x1cc>)
 8005aec:	5ccb      	ldrb	r3, [r1, r3]
 8005aee:	fa22 f303 	lsr.w	r3, r2, r3
 8005af2:	4a09      	ldr	r2, [pc, #36]	@ (8005b18 <HAL_RCC_ClockConfig+0x1d0>)
 8005af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005af6:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <HAL_RCC_ClockConfig+0x1d4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fd f960 	bl	8002dc0 <HAL_InitTick>

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40023c00 	.word	0x40023c00
 8005b10:	40023800 	.word	0x40023800
 8005b14:	08009664 	.word	0x08009664
 8005b18:	20000000 	.word	0x20000000
 8005b1c:	20000010 	.word	0x20000010

08005b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b24:	b090      	sub	sp, #64	@ 0x40
 8005b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b30:	2300      	movs	r3, #0
 8005b32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b38:	4b59      	ldr	r3, [pc, #356]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 030c 	and.w	r3, r3, #12
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d00d      	beq.n	8005b60 <HAL_RCC_GetSysClockFreq+0x40>
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	f200 80a1 	bhi.w	8005c8c <HAL_RCC_GetSysClockFreq+0x16c>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <HAL_RCC_GetSysClockFreq+0x34>
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d003      	beq.n	8005b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8005b52:	e09b      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b54:	4b53      	ldr	r3, [pc, #332]	@ (8005ca4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b58:	e09b      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b5a:	4b53      	ldr	r3, [pc, #332]	@ (8005ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b5e:	e098      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b60:	4b4f      	ldr	r3, [pc, #316]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005b6a:	4b4d      	ldr	r3, [pc, #308]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d028      	beq.n	8005bc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b76:	4b4a      	ldr	r3, [pc, #296]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	099b      	lsrs	r3, r3, #6
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	623b      	str	r3, [r7, #32]
 8005b80:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4b47      	ldr	r3, [pc, #284]	@ (8005ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b8c:	fb03 f201 	mul.w	r2, r3, r1
 8005b90:	2300      	movs	r3, #0
 8005b92:	fb00 f303 	mul.w	r3, r0, r3
 8005b96:	4413      	add	r3, r2
 8005b98:	4a43      	ldr	r2, [pc, #268]	@ (8005ca8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b9a:	fba0 1202 	umull	r1, r2, r0, r2
 8005b9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ba0:	460a      	mov	r2, r1
 8005ba2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005ba4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ba6:	4413      	add	r3, r2
 8005ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bac:	2200      	movs	r2, #0
 8005bae:	61bb      	str	r3, [r7, #24]
 8005bb0:	61fa      	str	r2, [r7, #28]
 8005bb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005bba:	f7fa fb25 	bl	8000208 <__aeabi_uldivmod>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bc6:	e053      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bc8:	4b35      	ldr	r3, [pc, #212]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	099b      	lsrs	r3, r3, #6
 8005bce:	2200      	movs	r2, #0
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	617a      	str	r2, [r7, #20]
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005bda:	f04f 0b00 	mov.w	fp, #0
 8005bde:	4652      	mov	r2, sl
 8005be0:	465b      	mov	r3, fp
 8005be2:	f04f 0000 	mov.w	r0, #0
 8005be6:	f04f 0100 	mov.w	r1, #0
 8005bea:	0159      	lsls	r1, r3, #5
 8005bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bf0:	0150      	lsls	r0, r2, #5
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	ebb2 080a 	subs.w	r8, r2, sl
 8005bfa:	eb63 090b 	sbc.w	r9, r3, fp
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005c0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005c0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005c12:	ebb2 0408 	subs.w	r4, r2, r8
 8005c16:	eb63 0509 	sbc.w	r5, r3, r9
 8005c1a:	f04f 0200 	mov.w	r2, #0
 8005c1e:	f04f 0300 	mov.w	r3, #0
 8005c22:	00eb      	lsls	r3, r5, #3
 8005c24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c28:	00e2      	lsls	r2, r4, #3
 8005c2a:	4614      	mov	r4, r2
 8005c2c:	461d      	mov	r5, r3
 8005c2e:	eb14 030a 	adds.w	r3, r4, sl
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	eb45 030b 	adc.w	r3, r5, fp
 8005c38:	607b      	str	r3, [r7, #4]
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c46:	4629      	mov	r1, r5
 8005c48:	028b      	lsls	r3, r1, #10
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c50:	4621      	mov	r1, r4
 8005c52:	028a      	lsls	r2, r1, #10
 8005c54:	4610      	mov	r0, r2
 8005c56:	4619      	mov	r1, r3
 8005c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	60fa      	str	r2, [r7, #12]
 8005c60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c64:	f7fa fad0 	bl	8000208 <__aeabi_uldivmod>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005c70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005c80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c8a:	e002      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c8c:	4b05      	ldr	r3, [pc, #20]	@ (8005ca4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3740      	adds	r7, #64	@ 0x40
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	00f42400 	.word	0x00f42400
 8005ca8:	017d7840 	.word	0x017d7840

08005cac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cb0:	4b03      	ldr	r3, [pc, #12]	@ (8005cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20000000 	.word	0x20000000

08005cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cc8:	f7ff fff0 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	4b05      	ldr	r3, [pc, #20]	@ (8005ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	0a9b      	lsrs	r3, r3, #10
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	4903      	ldr	r1, [pc, #12]	@ (8005ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cda:	5ccb      	ldrb	r3, [r1, r3]
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	08009674 	.word	0x08009674

08005cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cf0:	f7ff ffdc 	bl	8005cac <HAL_RCC_GetHCLKFreq>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	4b05      	ldr	r3, [pc, #20]	@ (8005d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	0b5b      	lsrs	r3, r3, #13
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	4903      	ldr	r1, [pc, #12]	@ (8005d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d02:	5ccb      	ldrb	r3, [r1, r3]
 8005d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	08009674 	.word	0x08009674

08005d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d012      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d3c:	4b69      	ldr	r3, [pc, #420]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	4a68      	ldr	r2, [pc, #416]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d42:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005d46:	6093      	str	r3, [r2, #8]
 8005d48:	4b66      	ldr	r3, [pc, #408]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d50:	4964      	ldr	r1, [pc, #400]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d017      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d74:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7c:	4959      	ldr	r1, [pc, #356]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d8c:	d101      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d017      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005daa:	4b4e      	ldr	r3, [pc, #312]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005db0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db8:	494a      	ldr	r1, [pc, #296]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dc8:	d101      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005de6:	2301      	movs	r3, #1
 8005de8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 808b 	beq.w	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005df8:	4b3a      	ldr	r3, [pc, #232]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfc:	4a39      	ldr	r2, [pc, #228]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e02:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e04:	4b37      	ldr	r3, [pc, #220]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e0c:	60bb      	str	r3, [r7, #8]
 8005e0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e10:	4b35      	ldr	r3, [pc, #212]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a34      	ldr	r2, [pc, #208]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e1c:	f7fd f814 	bl	8002e48 <HAL_GetTick>
 8005e20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e24:	f7fd f810 	bl	8002e48 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b64      	cmp	r3, #100	@ 0x64
 8005e30:	d901      	bls.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e357      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005e36:	4b2c      	ldr	r3, [pc, #176]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e42:	4b28      	ldr	r3, [pc, #160]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d035      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d02e      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e60:	4b20      	ldr	r3, [pc, #128]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e74:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e76:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005e82:	4a18      	ldr	r2, [pc, #96]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e88:	4b16      	ldr	r3, [pc, #88]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d114      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e94:	f7fc ffd8 	bl	8002e48 <HAL_GetTick>
 8005e98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e9a:	e00a      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e9c:	f7fc ffd4 	bl	8002e48 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e319      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0ee      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eca:	d111      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005ecc:	4b05      	ldr	r3, [pc, #20]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005ed8:	4b04      	ldr	r3, [pc, #16]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005eda:	400b      	ands	r3, r1
 8005edc:	4901      	ldr	r1, [pc, #4]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
 8005ee2:	e00b      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	40007000 	.word	0x40007000
 8005eec:	0ffffcff 	.word	0x0ffffcff
 8005ef0:	4baa      	ldr	r3, [pc, #680]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	4aa9      	ldr	r2, [pc, #676]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ef6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005efa:	6093      	str	r3, [r2, #8]
 8005efc:	4ba7      	ldr	r3, [pc, #668]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005efe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f08:	49a4      	ldr	r1, [pc, #656]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0310 	and.w	r3, r3, #16
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d010      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f1a:	4ba0      	ldr	r3, [pc, #640]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f20:	4a9e      	ldr	r2, [pc, #632]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005f2a:	4b9c      	ldr	r3, [pc, #624]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f34:	4999      	ldr	r1, [pc, #612]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f48:	4b94      	ldr	r3, [pc, #592]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f56:	4991      	ldr	r1, [pc, #580]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f6a:	4b8c      	ldr	r3, [pc, #560]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f78:	4988      	ldr	r1, [pc, #544]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f8c:	4b83      	ldr	r3, [pc, #524]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f9a:	4980      	ldr	r1, [pc, #512]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005fae:	4b7b      	ldr	r3, [pc, #492]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fb4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fbc:	4977      	ldr	r1, [pc, #476]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fd0:	4b72      	ldr	r3, [pc, #456]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd6:	f023 0203 	bic.w	r2, r3, #3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fde:	496f      	ldr	r1, [pc, #444]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00a      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ff2:	4b6a      	ldr	r3, [pc, #424]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff8:	f023 020c 	bic.w	r2, r3, #12
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006000:	4966      	ldr	r1, [pc, #408]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006014:	4b61      	ldr	r3, [pc, #388]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006022:	495e      	ldr	r1, [pc, #376]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006036:	4b59      	ldr	r3, [pc, #356]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800603c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006044:	4955      	ldr	r1, [pc, #340]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006058:	4b50      	ldr	r3, [pc, #320]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800605a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800605e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006066:	494d      	ldr	r1, [pc, #308]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800607a:	4b48      	ldr	r3, [pc, #288]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800607c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006080:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006088:	4944      	ldr	r1, [pc, #272]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800609c:	4b3f      	ldr	r3, [pc, #252]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060aa:	493c      	ldr	r1, [pc, #240]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80060be:	4b37      	ldr	r3, [pc, #220]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060cc:	4933      	ldr	r1, [pc, #204]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060e0:	4b2e      	ldr	r3, [pc, #184]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060ee:	492b      	ldr	r1, [pc, #172]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d011      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006102:	4b26      	ldr	r3, [pc, #152]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006108:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006110:	4922      	ldr	r1, [pc, #136]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800611c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006120:	d101      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006122:	2301      	movs	r3, #1
 8006124:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0308 	and.w	r3, r3, #8
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006132:	2301      	movs	r3, #1
 8006134:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006142:	4b16      	ldr	r3, [pc, #88]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006148:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006150:	4912      	ldr	r1, [pc, #72]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006152:	4313      	orrs	r3, r2
 8006154:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00b      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006164:	4b0d      	ldr	r3, [pc, #52]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006174:	4909      	ldr	r1, [pc, #36]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d006      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 80d9 	beq.w	8006342 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006190:	4b02      	ldr	r3, [pc, #8]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a01      	ldr	r2, [pc, #4]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006196:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800619a:	e001      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800619c:	40023800 	.word	0x40023800
 80061a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a2:	f7fc fe51 	bl	8002e48 <HAL_GetTick>
 80061a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061a8:	e008      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061aa:	f7fc fe4d 	bl	8002e48 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b64      	cmp	r3, #100	@ 0x64
 80061b6:	d901      	bls.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e194      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061bc:	4b6c      	ldr	r3, [pc, #432]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1f0      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d021      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d11d      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80061dc:	4b64      	ldr	r3, [pc, #400]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061e2:	0c1b      	lsrs	r3, r3, #16
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80061ea:	4b61      	ldr	r3, [pc, #388]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061f0:	0e1b      	lsrs	r3, r3, #24
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	019a      	lsls	r2, r3, #6
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	041b      	lsls	r3, r3, #16
 8006202:	431a      	orrs	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	061b      	lsls	r3, r3, #24
 8006208:	431a      	orrs	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	071b      	lsls	r3, r3, #28
 8006210:	4957      	ldr	r1, [pc, #348]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d004      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006228:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800622c:	d00a      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006236:	2b00      	cmp	r3, #0
 8006238:	d02e      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006242:	d129      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006244:	4b4a      	ldr	r3, [pc, #296]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800624a:	0c1b      	lsrs	r3, r3, #16
 800624c:	f003 0303 	and.w	r3, r3, #3
 8006250:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006252:	4b47      	ldr	r3, [pc, #284]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006258:	0f1b      	lsrs	r3, r3, #28
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	019a      	lsls	r2, r3, #6
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	041b      	lsls	r3, r3, #16
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	061b      	lsls	r3, r3, #24
 8006272:	431a      	orrs	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	071b      	lsls	r3, r3, #28
 8006278:	493d      	ldr	r1, [pc, #244]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800627a:	4313      	orrs	r3, r2
 800627c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006280:	4b3b      	ldr	r3, [pc, #236]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006282:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006286:	f023 021f 	bic.w	r2, r3, #31
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628e:	3b01      	subs	r3, #1
 8006290:	4937      	ldr	r1, [pc, #220]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01d      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80062a4:	4b32      	ldr	r3, [pc, #200]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062aa:	0e1b      	lsrs	r3, r3, #24
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062b8:	0f1b      	lsrs	r3, r3, #28
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	019a      	lsls	r2, r3, #6
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	041b      	lsls	r3, r3, #16
 80062cc:	431a      	orrs	r2, r3
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	061b      	lsls	r3, r3, #24
 80062d2:	431a      	orrs	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	071b      	lsls	r3, r3, #28
 80062d8:	4925      	ldr	r1, [pc, #148]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d011      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	019a      	lsls	r2, r3, #6
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	041b      	lsls	r3, r3, #16
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	061b      	lsls	r3, r3, #24
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	071b      	lsls	r3, r3, #28
 8006308:	4919      	ldr	r1, [pc, #100]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800630a:	4313      	orrs	r3, r2
 800630c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006310:	4b17      	ldr	r3, [pc, #92]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a16      	ldr	r2, [pc, #88]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006316:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800631a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631c:	f7fc fd94 	bl	8002e48 <HAL_GetTick>
 8006320:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006324:	f7fc fd90 	bl	8002e48 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b64      	cmp	r3, #100	@ 0x64
 8006330:	d901      	bls.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e0d7      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006336:	4b0e      	ldr	r3, [pc, #56]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0f0      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b01      	cmp	r3, #1
 8006346:	f040 80cd 	bne.w	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800634a:	4b09      	ldr	r3, [pc, #36]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a08      	ldr	r2, [pc, #32]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006356:	f7fc fd77 	bl	8002e48 <HAL_GetTick>
 800635a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800635c:	e00a      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800635e:	f7fc fd73 	bl	8002e48 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b64      	cmp	r3, #100	@ 0x64
 800636a:	d903      	bls.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e0ba      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006370:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006374:	4b5e      	ldr	r3, [pc, #376]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800637c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006380:	d0ed      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d02e      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d12a      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80063aa:	4b51      	ldr	r3, [pc, #324]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b0:	0c1b      	lsrs	r3, r3, #16
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063b8:	4b4d      	ldr	r3, [pc, #308]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063be:	0f1b      	lsrs	r3, r3, #28
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	019a      	lsls	r2, r3, #6
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	041b      	lsls	r3, r3, #16
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	061b      	lsls	r3, r3, #24
 80063d8:	431a      	orrs	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	071b      	lsls	r3, r3, #28
 80063de:	4944      	ldr	r1, [pc, #272]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80063e6:	4b42      	ldr	r3, [pc, #264]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f4:	3b01      	subs	r3, #1
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	493d      	ldr	r1, [pc, #244]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d022      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006410:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006414:	d11d      	bne.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006416:	4b36      	ldr	r3, [pc, #216]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800641c:	0e1b      	lsrs	r3, r3, #24
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006424:	4b32      	ldr	r3, [pc, #200]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800642a:	0f1b      	lsrs	r3, r3, #28
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	019a      	lsls	r2, r3, #6
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	041b      	lsls	r3, r3, #16
 800643e:	431a      	orrs	r2, r3
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	061b      	lsls	r3, r3, #24
 8006444:	431a      	orrs	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	071b      	lsls	r3, r3, #28
 800644a:	4929      	ldr	r1, [pc, #164]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800644c:	4313      	orrs	r3, r2
 800644e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d028      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800645e:	4b24      	ldr	r3, [pc, #144]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006464:	0e1b      	lsrs	r3, r3, #24
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800646c:	4b20      	ldr	r3, [pc, #128]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800646e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006472:	0c1b      	lsrs	r3, r3, #16
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	019a      	lsls	r2, r3, #6
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	041b      	lsls	r3, r3, #16
 8006484:	431a      	orrs	r2, r3
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	061b      	lsls	r3, r3, #24
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	071b      	lsls	r3, r3, #28
 8006492:	4917      	ldr	r1, [pc, #92]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800649a:	4b15      	ldr	r3, [pc, #84]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800649c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a8:	4911      	ldr	r1, [pc, #68]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80064b0:	4b0f      	ldr	r3, [pc, #60]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a0e      	ldr	r2, [pc, #56]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064bc:	f7fc fcc4 	bl	8002e48 <HAL_GetTick>
 80064c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80064c4:	f7fc fcc0 	bl	8002e48 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b64      	cmp	r3, #100	@ 0x64
 80064d0:	d901      	bls.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e007      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064d6:	4b06      	ldr	r3, [pc, #24]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064e2:	d1ef      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3720      	adds	r7, #32
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	40023800 	.word	0x40023800

080064f4 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a80      	ldr	r2, [pc, #512]	@ (8006704 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8006504:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006506:	4b80      	ldr	r3, [pc, #512]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006508:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800650c:	099b      	lsrs	r3, r3, #6
 800650e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006516:	4b7c      	ldr	r3, [pc, #496]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800651c:	0c1b      	lsrs	r3, r3, #16
 800651e:	f003 0203 	and.w	r2, r3, #3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006526:	4b78      	ldr	r3, [pc, #480]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006528:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800652c:	0e1b      	lsrs	r3, r3, #24
 800652e:	f003 020f 	and.w	r2, r3, #15
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006536:	4b74      	ldr	r3, [pc, #464]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800653c:	0f1b      	lsrs	r3, r3, #28
 800653e:	f003 0207 	and.w	r2, r3, #7
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8006546:	4b70      	ldr	r3, [pc, #448]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654c:	099b      	lsrs	r3, r3, #6
 800654e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006556:	4b6c      	ldr	r3, [pc, #432]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655c:	0c1b      	lsrs	r3, r3, #16
 800655e:	f003 0203 	and.w	r2, r3, #3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006566:	4b68      	ldr	r3, [pc, #416]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800656c:	0e1b      	lsrs	r3, r3, #24
 800656e:	f003 020f 	and.w	r2, r3, #15
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006576:	4b64      	ldr	r3, [pc, #400]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657c:	0f1b      	lsrs	r3, r3, #28
 800657e:	f003 0207 	and.w	r2, r3, #7
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8006586:	4b60      	ldr	r3, [pc, #384]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800658c:	f003 021f 	and.w	r2, r3, #31
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8006594:	4b5c      	ldr	r3, [pc, #368]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800659a:	0a1b      	lsrs	r3, r3, #8
 800659c:	f003 021f 	and.w	r2, r3, #31
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 80065a4:	4b58      	ldr	r3, [pc, #352]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80065a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065aa:	0c1b      	lsrs	r3, r3, #16
 80065ac:	f003 0203 	and.w	r2, r3, #3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80065b4:	4b54      	ldr	r3, [pc, #336]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80065b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065ba:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80065c2:	4b51      	ldr	r3, [pc, #324]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80065c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065c8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80065d0:	4b4d      	ldr	r3, [pc, #308]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80065dc:	4b4a      	ldr	r3, [pc, #296]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80065de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80065ea:	4b47      	ldr	r3, [pc, #284]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80065ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f0:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 80065f8:	4b43      	ldr	r3, [pc, #268]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80065fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fe:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8006606:	4b40      	ldr	r3, [pc, #256]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800660c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8006614:	4b3c      	ldr	r3, [pc, #240]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661a:	f003 0203 	and.w	r2, r3, #3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8006622:	4b39      	ldr	r3, [pc, #228]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006628:	f003 020c 	and.w	r2, r3, #12
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8006630:	4b35      	ldr	r3, [pc, #212]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006636:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800663e:	4b32      	ldr	r3, [pc, #200]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006644:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800664c:	4b2e      	ldr	r3, [pc, #184]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800664e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006652:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800665a:	4b2b      	ldr	r3, [pc, #172]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006660:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8006668:	4b27      	ldr	r3, [pc, #156]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800666a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800666e:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8006676:	4b24      	ldr	r3, [pc, #144]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667c:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006684:	4b20      	ldr	r3, [pc, #128]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668a:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8006692:	4b1d      	ldr	r3, [pc, #116]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006698:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80066a0:	4b19      	ldr	r3, [pc, #100]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80066a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a6:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80066ae:	4b16      	ldr	r3, [pc, #88]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80066b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066b4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80066be:	4b12      	ldr	r3, [pc, #72]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80066c6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80066c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80066ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066cc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80066d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006708 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80066da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d103      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80066ec:	e003      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066f4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	00fffff1 	.word	0x00fffff1
 8006708:	40023800 	.word	0x40023800

0800670c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006720:	2300      	movs	r3, #0
 8006722:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800672a:	f040 808d 	bne.w	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800672e:	4b93      	ldr	r3, [pc, #588]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006734:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800673c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006744:	d07c      	beq.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800674c:	d87b      	bhi.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800675a:	d039      	beq.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800675c:	e073      	b.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800675e:	4b87      	ldr	r3, [pc, #540]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d108      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800676a:	4b84      	ldr	r3, [pc, #528]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006772:	4a83      	ldr	r2, [pc, #524]	@ (8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006774:	fbb2 f3f3 	udiv	r3, r2, r3
 8006778:	613b      	str	r3, [r7, #16]
 800677a:	e007      	b.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800677c:	4b7f      	ldr	r3, [pc, #508]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006784:	4a7f      	ldr	r2, [pc, #508]	@ (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006786:	fbb2 f3f3 	udiv	r3, r2, r3
 800678a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800678c:	4b7b      	ldr	r3, [pc, #492]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800678e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006792:	0e1b      	lsrs	r3, r3, #24
 8006794:	f003 030f 	and.w	r3, r3, #15
 8006798:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800679a:	4b78      	ldr	r3, [pc, #480]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a0:	099b      	lsrs	r3, r3, #6
 80067a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	fb03 f202 	mul.w	r2, r3, r2
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80067b4:	4b71      	ldr	r3, [pc, #452]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80067b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067ba:	0a1b      	lsrs	r3, r3, #8
 80067bc:	f003 031f 	and.w	r3, r3, #31
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]
        break;
 80067ce:	e03b      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80067d0:	4b6a      	ldr	r3, [pc, #424]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d108      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80067dc:	4b67      	ldr	r3, [pc, #412]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067e4:	4a66      	ldr	r2, [pc, #408]	@ (8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80067e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	e007      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80067ee:	4b63      	ldr	r3, [pc, #396]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067f6:	4a63      	ldr	r2, [pc, #396]	@ (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80067f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80067fe:	4b5f      	ldr	r3, [pc, #380]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006804:	0e1b      	lsrs	r3, r3, #24
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800680c:	4b5b      	ldr	r3, [pc, #364]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800680e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006812:	099b      	lsrs	r3, r3, #6
 8006814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	fb03 f202 	mul.w	r2, r3, r2
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	fbb2 f3f3 	udiv	r3, r2, r3
 8006824:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006826:	4b55      	ldr	r3, [pc, #340]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	3301      	adds	r3, #1
 8006832:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	fbb2 f3f3 	udiv	r3, r2, r3
 800683c:	617b      	str	r3, [r7, #20]
        break;
 800683e:	e003      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006840:	4b51      	ldr	r3, [pc, #324]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006842:	617b      	str	r3, [r7, #20]
        break;
 8006844:	e000      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8006846:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800684e:	f040 808d 	bne.w	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006852:	4b4a      	ldr	r3, [pc, #296]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006858:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006860:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006868:	d07c      	beq.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006870:	d87b      	bhi.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d004      	beq.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800687e:	d039      	beq.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006880:	e073      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006882:	4b3e      	ldr	r3, [pc, #248]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d108      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800688e:	4b3b      	ldr	r3, [pc, #236]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006896:	4a3a      	ldr	r2, [pc, #232]	@ (8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006898:	fbb2 f3f3 	udiv	r3, r2, r3
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	e007      	b.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80068a0:	4b36      	ldr	r3, [pc, #216]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068a8:	4a36      	ldr	r2, [pc, #216]	@ (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ae:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80068b0:	4b32      	ldr	r3, [pc, #200]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b6:	0e1b      	lsrs	r3, r3, #24
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80068be:	4b2f      	ldr	r3, [pc, #188]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c4:	099b      	lsrs	r3, r3, #6
 80068c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	fb03 f202 	mul.w	r2, r3, r2
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80068d8:	4b28      	ldr	r3, [pc, #160]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068de:	0a1b      	lsrs	r3, r3, #8
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	3301      	adds	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f0:	617b      	str	r3, [r7, #20]
        break;
 80068f2:	e03b      	b.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80068f4:	4b21      	ldr	r3, [pc, #132]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d108      	bne.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006900:	4b1e      	ldr	r3, [pc, #120]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006908:	4a1d      	ldr	r2, [pc, #116]	@ (8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800690a:	fbb2 f3f3 	udiv	r3, r2, r3
 800690e:	613b      	str	r3, [r7, #16]
 8006910:	e007      	b.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006912:	4b1a      	ldr	r3, [pc, #104]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800691a:	4a1a      	ldr	r2, [pc, #104]	@ (8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800691c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006920:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006922:	4b16      	ldr	r3, [pc, #88]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006928:	0e1b      	lsrs	r3, r3, #24
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006930:	4b12      	ldr	r3, [pc, #72]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006936:	099b      	lsrs	r3, r3, #6
 8006938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	fb03 f202 	mul.w	r2, r3, r2
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	fbb2 f3f3 	udiv	r3, r2, r3
 8006948:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800694a:	4b0c      	ldr	r3, [pc, #48]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800694c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006950:	f003 031f 	and.w	r3, r3, #31
 8006954:	3301      	adds	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	617b      	str	r3, [r7, #20]
        break;
 8006962:	e003      	b.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006964:	4b08      	ldr	r3, [pc, #32]	@ (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006966:	617b      	str	r3, [r7, #20]
        break;
 8006968:	e000      	b.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800696a:	bf00      	nop
      }
    }
  }

  return frequency;
 800696c:	697b      	ldr	r3, [r7, #20]
}
 800696e:	4618      	mov	r0, r3
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	40023800 	.word	0x40023800
 8006980:	00f42400 	.word	0x00f42400
 8006984:	017d7840 	.word	0x017d7840
 8006988:	00bb8000 	.word	0x00bb8000

0800698c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b088      	sub	sp, #32
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006994:	2300      	movs	r3, #0
 8006996:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e156      	b.n	8006c58 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fa fc8e 	bl	80012e0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f99f 	bl	8006d10 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d00c      	beq.n	80069f4 <HAL_SAI_Init+0x68>
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d80d      	bhi.n	80069fa <HAL_SAI_Init+0x6e>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <HAL_SAI_Init+0x5c>
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d003      	beq.n	80069ee <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80069e6:	e008      	b.n	80069fa <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61fb      	str	r3, [r7, #28]
      break;
 80069ec:	e006      	b.n	80069fc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80069ee:	2310      	movs	r3, #16
 80069f0:	61fb      	str	r3, [r7, #28]
      break;
 80069f2:	e003      	b.n	80069fc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80069f4:	2320      	movs	r3, #32
 80069f6:	61fb      	str	r3, [r7, #28]
      break;
 80069f8:	e000      	b.n	80069fc <HAL_SAI_Init+0x70>
      break;
 80069fa:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d81e      	bhi.n	8006a42 <HAL_SAI_Init+0xb6>
 8006a04:	a201      	add	r2, pc, #4	@ (adr r2, 8006a0c <HAL_SAI_Init+0x80>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006a1d 	.word	0x08006a1d
 8006a10:	08006a23 	.word	0x08006a23
 8006a14:	08006a2b 	.word	0x08006a2b
 8006a18:	08006a33 	.word	0x08006a33
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]
    }
    break;
 8006a20:	e010      	b.n	8006a44 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a26:	617b      	str	r3, [r7, #20]
    }
    break;
 8006a28:	e00c      	b.n	8006a44 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006a2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006a2e:	617b      	str	r3, [r7, #20]
    }
    break;
 8006a30:	e008      	b.n	8006a44 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006a32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006a36:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	f043 0301 	orr.w	r3, r3, #1
 8006a3e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8006a40:	e000      	b.n	8006a44 <HAL_SAI_Init+0xb8>
    default:
      break;
 8006a42:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a85      	ldr	r2, [pc, #532]	@ (8006c60 <HAL_SAI_Init+0x2d4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d004      	beq.n	8006a58 <HAL_SAI_Init+0xcc>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a84      	ldr	r2, [pc, #528]	@ (8006c64 <HAL_SAI_Init+0x2d8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d103      	bne.n	8006a60 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006a58:	4a83      	ldr	r2, [pc, #524]	@ (8006c68 <HAL_SAI_Init+0x2dc>)
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	e002      	b.n	8006a66 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006a60:	4a82      	ldr	r2, [pc, #520]	@ (8006c6c <HAL_SAI_Init+0x2e0>)
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d04c      	beq.n	8006b08 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a7a      	ldr	r2, [pc, #488]	@ (8006c60 <HAL_SAI_Init+0x2d4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d004      	beq.n	8006a86 <HAL_SAI_Init+0xfa>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a78      	ldr	r2, [pc, #480]	@ (8006c64 <HAL_SAI_Init+0x2d8>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d104      	bne.n	8006a90 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006a86:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006a8a:	f7ff fe3f 	bl	800670c <HAL_RCCEx_GetPeriphCLKFreq>
 8006a8e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a76      	ldr	r2, [pc, #472]	@ (8006c70 <HAL_SAI_Init+0x2e4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d004      	beq.n	8006aa4 <HAL_SAI_Init+0x118>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a75      	ldr	r2, [pc, #468]	@ (8006c74 <HAL_SAI_Init+0x2e8>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d104      	bne.n	8006aae <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006aa4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006aa8:	f7ff fe30 	bl	800670c <HAL_RCCEx_GetPeriphCLKFreq>
 8006aac:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	461a      	mov	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	025b      	lsls	r3, r3, #9
 8006ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4a6b      	ldr	r2, [pc, #428]	@ (8006c78 <HAL_SAI_Init+0x2ec>)
 8006aca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ace:	08da      	lsrs	r2, r3, #3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8006ad4:	68f9      	ldr	r1, [r7, #12]
 8006ad6:	4b68      	ldr	r3, [pc, #416]	@ (8006c78 <HAL_SAI_Init+0x2ec>)
 8006ad8:	fba3 2301 	umull	r2, r3, r3, r1
 8006adc:	08da      	lsrs	r2, r3, #3
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	1aca      	subs	r2, r1, r3
 8006ae8:	2a08      	cmp	r2, #8
 8006aea:	d904      	bls.n	8006af6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d104      	bne.n	8006b08 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	085a      	lsrs	r2, r3, #1
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <HAL_SAI_Init+0x18c>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d109      	bne.n	8006b2c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_SAI_Init+0x198>
 8006b20:	2300      	movs	r3, #0
 8006b22:	e001      	b.n	8006b28 <HAL_SAI_Init+0x19c>
 8006b24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	e008      	b.n	8006b3e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d102      	bne.n	8006b3a <HAL_SAI_Init+0x1ae>
 8006b34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b38:	e000      	b.n	8006b3c <HAL_SAI_Init+0x1b0>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6819      	ldr	r1, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	4b4c      	ldr	r3, [pc, #304]	@ (8006c7c <HAL_SAI_Init+0x2f0>)
 8006b4a:	400b      	ands	r3, r1
 8006b4c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6819      	ldr	r1, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006b62:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8006b76:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006b82:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	051b      	lsls	r3, r3, #20
 8006b8a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6859      	ldr	r1, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	4b38      	ldr	r3, [pc, #224]	@ (8006c80 <HAL_SAI_Init+0x2f4>)
 8006ba0:	400b      	ands	r3, r1
 8006ba2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6859      	ldr	r1, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6899      	ldr	r1, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8006c84 <HAL_SAI_Init+0x2f8>)
 8006bce:	400b      	ands	r3, r1
 8006bd0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6899      	ldr	r1, [r3, #8]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bdc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006be2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8006be8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8006bee:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006bf8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68d9      	ldr	r1, [r3, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8006c10:	400b      	ands	r3, r1
 8006c12:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68d9      	ldr	r1, [r3, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c22:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c28:	041b      	lsls	r3, r3, #16
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c30:	3b01      	subs	r3, #1
 8006c32:	021b      	lsls	r3, r3, #8
 8006c34:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3720      	adds	r7, #32
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	40015804 	.word	0x40015804
 8006c64:	40015824 	.word	0x40015824
 8006c68:	40015800 	.word	0x40015800
 8006c6c:	40015c00 	.word	0x40015c00
 8006c70:	40015c04 	.word	0x40015c04
 8006c74:	40015c24 	.word	0x40015c24
 8006c78:	cccccccd 	.word	0xcccccccd
 8006c7c:	ff05c010 	.word	0xff05c010
 8006c80:	ffff1ff0 	.word	0xffff1ff0
 8006c84:	fff88000 	.word	0xfff88000

08006c88 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e027      	b.n	8006cea <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb2:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f82b 	bl	8006d10 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f042 0208 	orr.w	r2, r2, #8
 8006cc8:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fa fbfa 	bl	80014c4 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006d00:	b2db      	uxtb	r3, r3
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
	...

08006d10 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006d18:	4b17      	ldr	r3, [pc, #92]	@ (8006d78 <SAI_Disable+0x68>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a17      	ldr	r2, [pc, #92]	@ (8006d7c <SAI_Disable+0x6c>)
 8006d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d22:	0b1b      	lsrs	r3, r3, #12
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006d3a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	1e5a      	subs	r2, r3, #1
 8006d40:	60fa      	str	r2, [r7, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	72fb      	strb	r3, [r7, #11]
      break;
 8006d5a:	e006      	b.n	8006d6a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e8      	bne.n	8006d3c <SAI_Disable+0x2c>

  return status;
 8006d6a:	7afb      	ldrb	r3, [r7, #11]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	20000000 	.word	0x20000000
 8006d7c:	95cbec1b 	.word	0x95cbec1b

08006d80 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e025      	b.n	8006de0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d106      	bne.n	8006dae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7fa fa8f 	bl	80012cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2202      	movs	r2, #2
 8006db2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	f000 ffdf 	bl	8007d84 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	f001 f833 	bl	8007e3c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006dfa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d101      	bne.n	8006e06 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006e02:	2302      	movs	r3, #2
 8006e04:	e021      	b.n	8006e4a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d002      	beq.n	8006e12 <HAL_SDRAM_SendCommand+0x2a>
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
 8006e0e:	2b05      	cmp	r3, #5
 8006e10:	d118      	bne.n	8006e44 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2202      	movs	r2, #2
 8006e16:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	68b9      	ldr	r1, [r7, #8]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f001 f874 	bl	8007f10 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d104      	bne.n	8006e3a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2205      	movs	r2, #5
 8006e34:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006e38:	e006      	b.n	8006e48 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006e42:	e001      	b.n	8006e48 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e000      	b.n	8006e4a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b082      	sub	sp, #8
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d101      	bne.n	8006e6c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e016      	b.n	8006e9a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d10f      	bne.n	8006e98 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f001 f866 	bl	8007f58 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	e000      	b.n	8006e9a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e049      	b.n	8006f48 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d106      	bne.n	8006ece <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7fa f8cd 	bl	8001068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f000 f8ff 	bl	80070e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d101      	bne.n	8006f6c <HAL_TIM_ConfigClockSource+0x1c>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e0b4      	b.n	80070d6 <HAL_TIM_ConfigClockSource+0x186>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	4b56      	ldr	r3, [pc, #344]	@ (80070e0 <HAL_TIM_ConfigClockSource+0x190>)
 8006f88:	4013      	ands	r3, r2
 8006f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fa4:	d03e      	beq.n	8007024 <HAL_TIM_ConfigClockSource+0xd4>
 8006fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006faa:	f200 8087 	bhi.w	80070bc <HAL_TIM_ConfigClockSource+0x16c>
 8006fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fb2:	f000 8086 	beq.w	80070c2 <HAL_TIM_ConfigClockSource+0x172>
 8006fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fba:	d87f      	bhi.n	80070bc <HAL_TIM_ConfigClockSource+0x16c>
 8006fbc:	2b70      	cmp	r3, #112	@ 0x70
 8006fbe:	d01a      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0xa6>
 8006fc0:	2b70      	cmp	r3, #112	@ 0x70
 8006fc2:	d87b      	bhi.n	80070bc <HAL_TIM_ConfigClockSource+0x16c>
 8006fc4:	2b60      	cmp	r3, #96	@ 0x60
 8006fc6:	d050      	beq.n	800706a <HAL_TIM_ConfigClockSource+0x11a>
 8006fc8:	2b60      	cmp	r3, #96	@ 0x60
 8006fca:	d877      	bhi.n	80070bc <HAL_TIM_ConfigClockSource+0x16c>
 8006fcc:	2b50      	cmp	r3, #80	@ 0x50
 8006fce:	d03c      	beq.n	800704a <HAL_TIM_ConfigClockSource+0xfa>
 8006fd0:	2b50      	cmp	r3, #80	@ 0x50
 8006fd2:	d873      	bhi.n	80070bc <HAL_TIM_ConfigClockSource+0x16c>
 8006fd4:	2b40      	cmp	r3, #64	@ 0x40
 8006fd6:	d058      	beq.n	800708a <HAL_TIM_ConfigClockSource+0x13a>
 8006fd8:	2b40      	cmp	r3, #64	@ 0x40
 8006fda:	d86f      	bhi.n	80070bc <HAL_TIM_ConfigClockSource+0x16c>
 8006fdc:	2b30      	cmp	r3, #48	@ 0x30
 8006fde:	d064      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x15a>
 8006fe0:	2b30      	cmp	r3, #48	@ 0x30
 8006fe2:	d86b      	bhi.n	80070bc <HAL_TIM_ConfigClockSource+0x16c>
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	d060      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x15a>
 8006fe8:	2b20      	cmp	r3, #32
 8006fea:	d867      	bhi.n	80070bc <HAL_TIM_ConfigClockSource+0x16c>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d05c      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x15a>
 8006ff0:	2b10      	cmp	r3, #16
 8006ff2:	d05a      	beq.n	80070aa <HAL_TIM_ConfigClockSource+0x15a>
 8006ff4:	e062      	b.n	80070bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007006:	f000 f993 	bl	8007330 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	609a      	str	r2, [r3, #8]
      break;
 8007022:	e04f      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007034:	f000 f97c 	bl	8007330 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689a      	ldr	r2, [r3, #8]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007046:	609a      	str	r2, [r3, #8]
      break;
 8007048:	e03c      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007056:	461a      	mov	r2, r3
 8007058:	f000 f8f0 	bl	800723c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2150      	movs	r1, #80	@ 0x50
 8007062:	4618      	mov	r0, r3
 8007064:	f000 f949 	bl	80072fa <TIM_ITRx_SetConfig>
      break;
 8007068:	e02c      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007076:	461a      	mov	r2, r3
 8007078:	f000 f90f 	bl	800729a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2160      	movs	r1, #96	@ 0x60
 8007082:	4618      	mov	r0, r3
 8007084:	f000 f939 	bl	80072fa <TIM_ITRx_SetConfig>
      break;
 8007088:	e01c      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007096:	461a      	mov	r2, r3
 8007098:	f000 f8d0 	bl	800723c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2140      	movs	r1, #64	@ 0x40
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 f929 	bl	80072fa <TIM_ITRx_SetConfig>
      break;
 80070a8:	e00c      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4619      	mov	r1, r3
 80070b4:	4610      	mov	r0, r2
 80070b6:	f000 f920 	bl	80072fa <TIM_ITRx_SetConfig>
      break;
 80070ba:	e003      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	73fb      	strb	r3, [r7, #15]
      break;
 80070c0:	e000      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	fffeff88 	.word	0xfffeff88

080070e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a46      	ldr	r2, [pc, #280]	@ (8007210 <TIM_Base_SetConfig+0x12c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d013      	beq.n	8007124 <TIM_Base_SetConfig+0x40>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007102:	d00f      	beq.n	8007124 <TIM_Base_SetConfig+0x40>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a43      	ldr	r2, [pc, #268]	@ (8007214 <TIM_Base_SetConfig+0x130>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00b      	beq.n	8007124 <TIM_Base_SetConfig+0x40>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a42      	ldr	r2, [pc, #264]	@ (8007218 <TIM_Base_SetConfig+0x134>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d007      	beq.n	8007124 <TIM_Base_SetConfig+0x40>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a41      	ldr	r2, [pc, #260]	@ (800721c <TIM_Base_SetConfig+0x138>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d003      	beq.n	8007124 <TIM_Base_SetConfig+0x40>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a40      	ldr	r2, [pc, #256]	@ (8007220 <TIM_Base_SetConfig+0x13c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d108      	bne.n	8007136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800712a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a35      	ldr	r2, [pc, #212]	@ (8007210 <TIM_Base_SetConfig+0x12c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d02b      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007144:	d027      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a32      	ldr	r2, [pc, #200]	@ (8007214 <TIM_Base_SetConfig+0x130>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d023      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a31      	ldr	r2, [pc, #196]	@ (8007218 <TIM_Base_SetConfig+0x134>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d01f      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a30      	ldr	r2, [pc, #192]	@ (800721c <TIM_Base_SetConfig+0x138>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d01b      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a2f      	ldr	r2, [pc, #188]	@ (8007220 <TIM_Base_SetConfig+0x13c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d017      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a2e      	ldr	r2, [pc, #184]	@ (8007224 <TIM_Base_SetConfig+0x140>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d013      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a2d      	ldr	r2, [pc, #180]	@ (8007228 <TIM_Base_SetConfig+0x144>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00f      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a2c      	ldr	r2, [pc, #176]	@ (800722c <TIM_Base_SetConfig+0x148>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00b      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a2b      	ldr	r2, [pc, #172]	@ (8007230 <TIM_Base_SetConfig+0x14c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d007      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a2a      	ldr	r2, [pc, #168]	@ (8007234 <TIM_Base_SetConfig+0x150>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d003      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a29      	ldr	r2, [pc, #164]	@ (8007238 <TIM_Base_SetConfig+0x154>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d108      	bne.n	80071a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800719c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a10      	ldr	r2, [pc, #64]	@ (8007210 <TIM_Base_SetConfig+0x12c>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d003      	beq.n	80071dc <TIM_Base_SetConfig+0xf8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a12      	ldr	r2, [pc, #72]	@ (8007220 <TIM_Base_SetConfig+0x13c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d103      	bne.n	80071e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	691a      	ldr	r2, [r3, #16]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d105      	bne.n	8007202 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f023 0201 	bic.w	r2, r3, #1
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	611a      	str	r2, [r3, #16]
  }
}
 8007202:	bf00      	nop
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40010000 	.word	0x40010000
 8007214:	40000400 	.word	0x40000400
 8007218:	40000800 	.word	0x40000800
 800721c:	40000c00 	.word	0x40000c00
 8007220:	40010400 	.word	0x40010400
 8007224:	40014000 	.word	0x40014000
 8007228:	40014400 	.word	0x40014400
 800722c:	40014800 	.word	0x40014800
 8007230:	40001800 	.word	0x40001800
 8007234:	40001c00 	.word	0x40001c00
 8007238:	40002000 	.word	0x40002000

0800723c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f023 0201 	bic.w	r2, r3, #1
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	011b      	lsls	r3, r3, #4
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	4313      	orrs	r3, r2
 8007270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f023 030a 	bic.w	r3, r3, #10
 8007278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	621a      	str	r2, [r3, #32]
}
 800728e:	bf00      	nop
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800729a:	b480      	push	{r7}
 800729c:	b087      	sub	sp, #28
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	f023 0210 	bic.w	r2, r3, #16
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	031b      	lsls	r3, r3, #12
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80072d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	011b      	lsls	r3, r3, #4
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	621a      	str	r2, [r3, #32]
}
 80072ee:	bf00      	nop
 80072f0:	371c      	adds	r7, #28
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b085      	sub	sp, #20
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007310:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4313      	orrs	r3, r2
 8007318:	f043 0307 	orr.w	r3, r3, #7
 800731c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	609a      	str	r2, [r3, #8]
}
 8007324:	bf00      	nop
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800734a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	021a      	lsls	r2, r3, #8
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	431a      	orrs	r2, r3
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4313      	orrs	r3, r2
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	4313      	orrs	r3, r2
 800735c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	609a      	str	r2, [r3, #8]
}
 8007364:	bf00      	nop
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007384:	2302      	movs	r3, #2
 8007386:	e06d      	b.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a30      	ldr	r2, [pc, #192]	@ (8007470 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d004      	beq.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a2f      	ldr	r2, [pc, #188]	@ (8007474 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d108      	bne.n	80073ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80073c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a20      	ldr	r2, [pc, #128]	@ (8007470 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d022      	beq.n	8007438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073fa:	d01d      	beq.n	8007438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a1d      	ldr	r2, [pc, #116]	@ (8007478 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d018      	beq.n	8007438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a1c      	ldr	r2, [pc, #112]	@ (800747c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d013      	beq.n	8007438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a1a      	ldr	r2, [pc, #104]	@ (8007480 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00e      	beq.n	8007438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a15      	ldr	r2, [pc, #84]	@ (8007474 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d009      	beq.n	8007438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a16      	ldr	r2, [pc, #88]	@ (8007484 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d004      	beq.n	8007438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a15      	ldr	r2, [pc, #84]	@ (8007488 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d10c      	bne.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800743e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	4313      	orrs	r3, r2
 8007448:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	40010000 	.word	0x40010000
 8007474:	40010400 	.word	0x40010400
 8007478:	40000400 	.word	0x40000400
 800747c:	40000800 	.word	0x40000800
 8007480:	40000c00 	.word	0x40000c00
 8007484:	40014000 	.word	0x40014000
 8007488:	40001800 	.word	0x40001800

0800748c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e040      	b.n	8007520 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d106      	bne.n	80074b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7f9 fdfa 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2224      	movs	r2, #36	@ 0x24
 80074b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0201 	bic.w	r2, r2, #1
 80074c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fa8c 	bl	80079f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f825 	bl	8007528 <UART_SetConfig>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e01b      	b.n	8007520 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0201 	orr.w	r2, r2, #1
 8007516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fb0b 	bl	8007b34 <UART_CheckIdleState>
 800751e:	4603      	mov	r3, r0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007530:	2300      	movs	r3, #0
 8007532:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	4313      	orrs	r3, r2
 800754a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	4ba6      	ldr	r3, [pc, #664]	@ (80077ec <UART_SetConfig+0x2c4>)
 8007554:	4013      	ands	r3, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6812      	ldr	r2, [r2, #0]
 800755a:	6979      	ldr	r1, [r7, #20]
 800755c:	430b      	orrs	r3, r1
 800755e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	430a      	orrs	r2, r1
 8007598:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a94      	ldr	r2, [pc, #592]	@ (80077f0 <UART_SetConfig+0x2c8>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d120      	bne.n	80075e6 <UART_SetConfig+0xbe>
 80075a4:	4b93      	ldr	r3, [pc, #588]	@ (80077f4 <UART_SetConfig+0x2cc>)
 80075a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d816      	bhi.n	80075e0 <UART_SetConfig+0xb8>
 80075b2:	a201      	add	r2, pc, #4	@ (adr r2, 80075b8 <UART_SetConfig+0x90>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	080075c9 	.word	0x080075c9
 80075bc:	080075d5 	.word	0x080075d5
 80075c0:	080075cf 	.word	0x080075cf
 80075c4:	080075db 	.word	0x080075db
 80075c8:	2301      	movs	r3, #1
 80075ca:	77fb      	strb	r3, [r7, #31]
 80075cc:	e150      	b.n	8007870 <UART_SetConfig+0x348>
 80075ce:	2302      	movs	r3, #2
 80075d0:	77fb      	strb	r3, [r7, #31]
 80075d2:	e14d      	b.n	8007870 <UART_SetConfig+0x348>
 80075d4:	2304      	movs	r3, #4
 80075d6:	77fb      	strb	r3, [r7, #31]
 80075d8:	e14a      	b.n	8007870 <UART_SetConfig+0x348>
 80075da:	2308      	movs	r3, #8
 80075dc:	77fb      	strb	r3, [r7, #31]
 80075de:	e147      	b.n	8007870 <UART_SetConfig+0x348>
 80075e0:	2310      	movs	r3, #16
 80075e2:	77fb      	strb	r3, [r7, #31]
 80075e4:	e144      	b.n	8007870 <UART_SetConfig+0x348>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a83      	ldr	r2, [pc, #524]	@ (80077f8 <UART_SetConfig+0x2d0>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d132      	bne.n	8007656 <UART_SetConfig+0x12e>
 80075f0:	4b80      	ldr	r3, [pc, #512]	@ (80077f4 <UART_SetConfig+0x2cc>)
 80075f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075f6:	f003 030c 	and.w	r3, r3, #12
 80075fa:	2b0c      	cmp	r3, #12
 80075fc:	d828      	bhi.n	8007650 <UART_SetConfig+0x128>
 80075fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007604 <UART_SetConfig+0xdc>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	08007639 	.word	0x08007639
 8007608:	08007651 	.word	0x08007651
 800760c:	08007651 	.word	0x08007651
 8007610:	08007651 	.word	0x08007651
 8007614:	08007645 	.word	0x08007645
 8007618:	08007651 	.word	0x08007651
 800761c:	08007651 	.word	0x08007651
 8007620:	08007651 	.word	0x08007651
 8007624:	0800763f 	.word	0x0800763f
 8007628:	08007651 	.word	0x08007651
 800762c:	08007651 	.word	0x08007651
 8007630:	08007651 	.word	0x08007651
 8007634:	0800764b 	.word	0x0800764b
 8007638:	2300      	movs	r3, #0
 800763a:	77fb      	strb	r3, [r7, #31]
 800763c:	e118      	b.n	8007870 <UART_SetConfig+0x348>
 800763e:	2302      	movs	r3, #2
 8007640:	77fb      	strb	r3, [r7, #31]
 8007642:	e115      	b.n	8007870 <UART_SetConfig+0x348>
 8007644:	2304      	movs	r3, #4
 8007646:	77fb      	strb	r3, [r7, #31]
 8007648:	e112      	b.n	8007870 <UART_SetConfig+0x348>
 800764a:	2308      	movs	r3, #8
 800764c:	77fb      	strb	r3, [r7, #31]
 800764e:	e10f      	b.n	8007870 <UART_SetConfig+0x348>
 8007650:	2310      	movs	r3, #16
 8007652:	77fb      	strb	r3, [r7, #31]
 8007654:	e10c      	b.n	8007870 <UART_SetConfig+0x348>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a68      	ldr	r2, [pc, #416]	@ (80077fc <UART_SetConfig+0x2d4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d120      	bne.n	80076a2 <UART_SetConfig+0x17a>
 8007660:	4b64      	ldr	r3, [pc, #400]	@ (80077f4 <UART_SetConfig+0x2cc>)
 8007662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007666:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800766a:	2b30      	cmp	r3, #48	@ 0x30
 800766c:	d013      	beq.n	8007696 <UART_SetConfig+0x16e>
 800766e:	2b30      	cmp	r3, #48	@ 0x30
 8007670:	d814      	bhi.n	800769c <UART_SetConfig+0x174>
 8007672:	2b20      	cmp	r3, #32
 8007674:	d009      	beq.n	800768a <UART_SetConfig+0x162>
 8007676:	2b20      	cmp	r3, #32
 8007678:	d810      	bhi.n	800769c <UART_SetConfig+0x174>
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <UART_SetConfig+0x15c>
 800767e:	2b10      	cmp	r3, #16
 8007680:	d006      	beq.n	8007690 <UART_SetConfig+0x168>
 8007682:	e00b      	b.n	800769c <UART_SetConfig+0x174>
 8007684:	2300      	movs	r3, #0
 8007686:	77fb      	strb	r3, [r7, #31]
 8007688:	e0f2      	b.n	8007870 <UART_SetConfig+0x348>
 800768a:	2302      	movs	r3, #2
 800768c:	77fb      	strb	r3, [r7, #31]
 800768e:	e0ef      	b.n	8007870 <UART_SetConfig+0x348>
 8007690:	2304      	movs	r3, #4
 8007692:	77fb      	strb	r3, [r7, #31]
 8007694:	e0ec      	b.n	8007870 <UART_SetConfig+0x348>
 8007696:	2308      	movs	r3, #8
 8007698:	77fb      	strb	r3, [r7, #31]
 800769a:	e0e9      	b.n	8007870 <UART_SetConfig+0x348>
 800769c:	2310      	movs	r3, #16
 800769e:	77fb      	strb	r3, [r7, #31]
 80076a0:	e0e6      	b.n	8007870 <UART_SetConfig+0x348>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a56      	ldr	r2, [pc, #344]	@ (8007800 <UART_SetConfig+0x2d8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d120      	bne.n	80076ee <UART_SetConfig+0x1c6>
 80076ac:	4b51      	ldr	r3, [pc, #324]	@ (80077f4 <UART_SetConfig+0x2cc>)
 80076ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80076b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80076b8:	d013      	beq.n	80076e2 <UART_SetConfig+0x1ba>
 80076ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80076bc:	d814      	bhi.n	80076e8 <UART_SetConfig+0x1c0>
 80076be:	2b80      	cmp	r3, #128	@ 0x80
 80076c0:	d009      	beq.n	80076d6 <UART_SetConfig+0x1ae>
 80076c2:	2b80      	cmp	r3, #128	@ 0x80
 80076c4:	d810      	bhi.n	80076e8 <UART_SetConfig+0x1c0>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <UART_SetConfig+0x1a8>
 80076ca:	2b40      	cmp	r3, #64	@ 0x40
 80076cc:	d006      	beq.n	80076dc <UART_SetConfig+0x1b4>
 80076ce:	e00b      	b.n	80076e8 <UART_SetConfig+0x1c0>
 80076d0:	2300      	movs	r3, #0
 80076d2:	77fb      	strb	r3, [r7, #31]
 80076d4:	e0cc      	b.n	8007870 <UART_SetConfig+0x348>
 80076d6:	2302      	movs	r3, #2
 80076d8:	77fb      	strb	r3, [r7, #31]
 80076da:	e0c9      	b.n	8007870 <UART_SetConfig+0x348>
 80076dc:	2304      	movs	r3, #4
 80076de:	77fb      	strb	r3, [r7, #31]
 80076e0:	e0c6      	b.n	8007870 <UART_SetConfig+0x348>
 80076e2:	2308      	movs	r3, #8
 80076e4:	77fb      	strb	r3, [r7, #31]
 80076e6:	e0c3      	b.n	8007870 <UART_SetConfig+0x348>
 80076e8:	2310      	movs	r3, #16
 80076ea:	77fb      	strb	r3, [r7, #31]
 80076ec:	e0c0      	b.n	8007870 <UART_SetConfig+0x348>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a44      	ldr	r2, [pc, #272]	@ (8007804 <UART_SetConfig+0x2dc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d125      	bne.n	8007744 <UART_SetConfig+0x21c>
 80076f8:	4b3e      	ldr	r3, [pc, #248]	@ (80077f4 <UART_SetConfig+0x2cc>)
 80076fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007706:	d017      	beq.n	8007738 <UART_SetConfig+0x210>
 8007708:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800770c:	d817      	bhi.n	800773e <UART_SetConfig+0x216>
 800770e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007712:	d00b      	beq.n	800772c <UART_SetConfig+0x204>
 8007714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007718:	d811      	bhi.n	800773e <UART_SetConfig+0x216>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <UART_SetConfig+0x1fe>
 800771e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007722:	d006      	beq.n	8007732 <UART_SetConfig+0x20a>
 8007724:	e00b      	b.n	800773e <UART_SetConfig+0x216>
 8007726:	2300      	movs	r3, #0
 8007728:	77fb      	strb	r3, [r7, #31]
 800772a:	e0a1      	b.n	8007870 <UART_SetConfig+0x348>
 800772c:	2302      	movs	r3, #2
 800772e:	77fb      	strb	r3, [r7, #31]
 8007730:	e09e      	b.n	8007870 <UART_SetConfig+0x348>
 8007732:	2304      	movs	r3, #4
 8007734:	77fb      	strb	r3, [r7, #31]
 8007736:	e09b      	b.n	8007870 <UART_SetConfig+0x348>
 8007738:	2308      	movs	r3, #8
 800773a:	77fb      	strb	r3, [r7, #31]
 800773c:	e098      	b.n	8007870 <UART_SetConfig+0x348>
 800773e:	2310      	movs	r3, #16
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	e095      	b.n	8007870 <UART_SetConfig+0x348>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a2f      	ldr	r2, [pc, #188]	@ (8007808 <UART_SetConfig+0x2e0>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d125      	bne.n	800779a <UART_SetConfig+0x272>
 800774e:	4b29      	ldr	r3, [pc, #164]	@ (80077f4 <UART_SetConfig+0x2cc>)
 8007750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007754:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007758:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800775c:	d017      	beq.n	800778e <UART_SetConfig+0x266>
 800775e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007762:	d817      	bhi.n	8007794 <UART_SetConfig+0x26c>
 8007764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007768:	d00b      	beq.n	8007782 <UART_SetConfig+0x25a>
 800776a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800776e:	d811      	bhi.n	8007794 <UART_SetConfig+0x26c>
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <UART_SetConfig+0x254>
 8007774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007778:	d006      	beq.n	8007788 <UART_SetConfig+0x260>
 800777a:	e00b      	b.n	8007794 <UART_SetConfig+0x26c>
 800777c:	2301      	movs	r3, #1
 800777e:	77fb      	strb	r3, [r7, #31]
 8007780:	e076      	b.n	8007870 <UART_SetConfig+0x348>
 8007782:	2302      	movs	r3, #2
 8007784:	77fb      	strb	r3, [r7, #31]
 8007786:	e073      	b.n	8007870 <UART_SetConfig+0x348>
 8007788:	2304      	movs	r3, #4
 800778a:	77fb      	strb	r3, [r7, #31]
 800778c:	e070      	b.n	8007870 <UART_SetConfig+0x348>
 800778e:	2308      	movs	r3, #8
 8007790:	77fb      	strb	r3, [r7, #31]
 8007792:	e06d      	b.n	8007870 <UART_SetConfig+0x348>
 8007794:	2310      	movs	r3, #16
 8007796:	77fb      	strb	r3, [r7, #31]
 8007798:	e06a      	b.n	8007870 <UART_SetConfig+0x348>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a1b      	ldr	r2, [pc, #108]	@ (800780c <UART_SetConfig+0x2e4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d138      	bne.n	8007816 <UART_SetConfig+0x2ee>
 80077a4:	4b13      	ldr	r3, [pc, #76]	@ (80077f4 <UART_SetConfig+0x2cc>)
 80077a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80077ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077b2:	d017      	beq.n	80077e4 <UART_SetConfig+0x2bc>
 80077b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077b8:	d82a      	bhi.n	8007810 <UART_SetConfig+0x2e8>
 80077ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077be:	d00b      	beq.n	80077d8 <UART_SetConfig+0x2b0>
 80077c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077c4:	d824      	bhi.n	8007810 <UART_SetConfig+0x2e8>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <UART_SetConfig+0x2aa>
 80077ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ce:	d006      	beq.n	80077de <UART_SetConfig+0x2b6>
 80077d0:	e01e      	b.n	8007810 <UART_SetConfig+0x2e8>
 80077d2:	2300      	movs	r3, #0
 80077d4:	77fb      	strb	r3, [r7, #31]
 80077d6:	e04b      	b.n	8007870 <UART_SetConfig+0x348>
 80077d8:	2302      	movs	r3, #2
 80077da:	77fb      	strb	r3, [r7, #31]
 80077dc:	e048      	b.n	8007870 <UART_SetConfig+0x348>
 80077de:	2304      	movs	r3, #4
 80077e0:	77fb      	strb	r3, [r7, #31]
 80077e2:	e045      	b.n	8007870 <UART_SetConfig+0x348>
 80077e4:	2308      	movs	r3, #8
 80077e6:	77fb      	strb	r3, [r7, #31]
 80077e8:	e042      	b.n	8007870 <UART_SetConfig+0x348>
 80077ea:	bf00      	nop
 80077ec:	efff69f3 	.word	0xefff69f3
 80077f0:	40011000 	.word	0x40011000
 80077f4:	40023800 	.word	0x40023800
 80077f8:	40004400 	.word	0x40004400
 80077fc:	40004800 	.word	0x40004800
 8007800:	40004c00 	.word	0x40004c00
 8007804:	40005000 	.word	0x40005000
 8007808:	40011400 	.word	0x40011400
 800780c:	40007800 	.word	0x40007800
 8007810:	2310      	movs	r3, #16
 8007812:	77fb      	strb	r3, [r7, #31]
 8007814:	e02c      	b.n	8007870 <UART_SetConfig+0x348>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a72      	ldr	r2, [pc, #456]	@ (80079e4 <UART_SetConfig+0x4bc>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d125      	bne.n	800786c <UART_SetConfig+0x344>
 8007820:	4b71      	ldr	r3, [pc, #452]	@ (80079e8 <UART_SetConfig+0x4c0>)
 8007822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007826:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800782a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800782e:	d017      	beq.n	8007860 <UART_SetConfig+0x338>
 8007830:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007834:	d817      	bhi.n	8007866 <UART_SetConfig+0x33e>
 8007836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800783a:	d00b      	beq.n	8007854 <UART_SetConfig+0x32c>
 800783c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007840:	d811      	bhi.n	8007866 <UART_SetConfig+0x33e>
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <UART_SetConfig+0x326>
 8007846:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800784a:	d006      	beq.n	800785a <UART_SetConfig+0x332>
 800784c:	e00b      	b.n	8007866 <UART_SetConfig+0x33e>
 800784e:	2300      	movs	r3, #0
 8007850:	77fb      	strb	r3, [r7, #31]
 8007852:	e00d      	b.n	8007870 <UART_SetConfig+0x348>
 8007854:	2302      	movs	r3, #2
 8007856:	77fb      	strb	r3, [r7, #31]
 8007858:	e00a      	b.n	8007870 <UART_SetConfig+0x348>
 800785a:	2304      	movs	r3, #4
 800785c:	77fb      	strb	r3, [r7, #31]
 800785e:	e007      	b.n	8007870 <UART_SetConfig+0x348>
 8007860:	2308      	movs	r3, #8
 8007862:	77fb      	strb	r3, [r7, #31]
 8007864:	e004      	b.n	8007870 <UART_SetConfig+0x348>
 8007866:	2310      	movs	r3, #16
 8007868:	77fb      	strb	r3, [r7, #31]
 800786a:	e001      	b.n	8007870 <UART_SetConfig+0x348>
 800786c:	2310      	movs	r3, #16
 800786e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007878:	d15b      	bne.n	8007932 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800787a:	7ffb      	ldrb	r3, [r7, #31]
 800787c:	2b08      	cmp	r3, #8
 800787e:	d828      	bhi.n	80078d2 <UART_SetConfig+0x3aa>
 8007880:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <UART_SetConfig+0x360>)
 8007882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007886:	bf00      	nop
 8007888:	080078ad 	.word	0x080078ad
 800788c:	080078b5 	.word	0x080078b5
 8007890:	080078bd 	.word	0x080078bd
 8007894:	080078d3 	.word	0x080078d3
 8007898:	080078c3 	.word	0x080078c3
 800789c:	080078d3 	.word	0x080078d3
 80078a0:	080078d3 	.word	0x080078d3
 80078a4:	080078d3 	.word	0x080078d3
 80078a8:	080078cb 	.word	0x080078cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078ac:	f7fe fa0a 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 80078b0:	61b8      	str	r0, [r7, #24]
        break;
 80078b2:	e013      	b.n	80078dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078b4:	f7fe fa1a 	bl	8005cec <HAL_RCC_GetPCLK2Freq>
 80078b8:	61b8      	str	r0, [r7, #24]
        break;
 80078ba:	e00f      	b.n	80078dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078bc:	4b4b      	ldr	r3, [pc, #300]	@ (80079ec <UART_SetConfig+0x4c4>)
 80078be:	61bb      	str	r3, [r7, #24]
        break;
 80078c0:	e00c      	b.n	80078dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078c2:	f7fe f92d 	bl	8005b20 <HAL_RCC_GetSysClockFreq>
 80078c6:	61b8      	str	r0, [r7, #24]
        break;
 80078c8:	e008      	b.n	80078dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078ce:	61bb      	str	r3, [r7, #24]
        break;
 80078d0:	e004      	b.n	80078dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	77bb      	strb	r3, [r7, #30]
        break;
 80078da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d074      	beq.n	80079cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	005a      	lsls	r2, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	085b      	lsrs	r3, r3, #1
 80078ec:	441a      	add	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	2b0f      	cmp	r3, #15
 80078fc:	d916      	bls.n	800792c <UART_SetConfig+0x404>
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007904:	d212      	bcs.n	800792c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	b29b      	uxth	r3, r3
 800790a:	f023 030f 	bic.w	r3, r3, #15
 800790e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	085b      	lsrs	r3, r3, #1
 8007914:	b29b      	uxth	r3, r3
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	b29a      	uxth	r2, r3
 800791c:	89fb      	ldrh	r3, [r7, #14]
 800791e:	4313      	orrs	r3, r2
 8007920:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	89fa      	ldrh	r2, [r7, #14]
 8007928:	60da      	str	r2, [r3, #12]
 800792a:	e04f      	b.n	80079cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	77bb      	strb	r3, [r7, #30]
 8007930:	e04c      	b.n	80079cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007932:	7ffb      	ldrb	r3, [r7, #31]
 8007934:	2b08      	cmp	r3, #8
 8007936:	d828      	bhi.n	800798a <UART_SetConfig+0x462>
 8007938:	a201      	add	r2, pc, #4	@ (adr r2, 8007940 <UART_SetConfig+0x418>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	08007965 	.word	0x08007965
 8007944:	0800796d 	.word	0x0800796d
 8007948:	08007975 	.word	0x08007975
 800794c:	0800798b 	.word	0x0800798b
 8007950:	0800797b 	.word	0x0800797b
 8007954:	0800798b 	.word	0x0800798b
 8007958:	0800798b 	.word	0x0800798b
 800795c:	0800798b 	.word	0x0800798b
 8007960:	08007983 	.word	0x08007983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007964:	f7fe f9ae 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 8007968:	61b8      	str	r0, [r7, #24]
        break;
 800796a:	e013      	b.n	8007994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800796c:	f7fe f9be 	bl	8005cec <HAL_RCC_GetPCLK2Freq>
 8007970:	61b8      	str	r0, [r7, #24]
        break;
 8007972:	e00f      	b.n	8007994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007974:	4b1d      	ldr	r3, [pc, #116]	@ (80079ec <UART_SetConfig+0x4c4>)
 8007976:	61bb      	str	r3, [r7, #24]
        break;
 8007978:	e00c      	b.n	8007994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800797a:	f7fe f8d1 	bl	8005b20 <HAL_RCC_GetSysClockFreq>
 800797e:	61b8      	str	r0, [r7, #24]
        break;
 8007980:	e008      	b.n	8007994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007986:	61bb      	str	r3, [r7, #24]
        break;
 8007988:	e004      	b.n	8007994 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	77bb      	strb	r3, [r7, #30]
        break;
 8007992:	bf00      	nop
    }

    if (pclk != 0U)
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d018      	beq.n	80079cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	085a      	lsrs	r2, r3, #1
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	441a      	add	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2b0f      	cmp	r3, #15
 80079b2:	d909      	bls.n	80079c8 <UART_SetConfig+0x4a0>
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079ba:	d205      	bcs.n	80079c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	b29a      	uxth	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60da      	str	r2, [r3, #12]
 80079c6:	e001      	b.n	80079cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80079d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3720      	adds	r7, #32
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	40007c00 	.word	0x40007c00
 80079e8:	40023800 	.word	0x40023800
 80079ec:	00f42400 	.word	0x00f42400

080079f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fc:	f003 0308 	and.w	r3, r3, #8
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a62:	f003 0304 	and.w	r3, r3, #4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a84:	f003 0310 	and.w	r3, r3, #16
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00a      	beq.n	8007aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01a      	beq.n	8007b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007aee:	d10a      	bne.n	8007b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	605a      	str	r2, [r3, #4]
  }
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08c      	sub	sp, #48	@ 0x30
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b44:	f7fb f980 	bl	8002e48 <HAL_GetTick>
 8007b48:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d12e      	bne.n	8007bb6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b60:	2200      	movs	r2, #0
 8007b62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f83b 	bl	8007be2 <UART_WaitOnFlagUntilTimeout>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d021      	beq.n	8007bb6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	e853 3f00 	ldrex	r3, [r3]
 8007b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b86:	623b      	str	r3, [r7, #32]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	61fb      	str	r3, [r7, #28]
 8007b92:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	69b9      	ldr	r1, [r7, #24]
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e6      	bne.n	8007b72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e011      	b.n	8007bda <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3728      	adds	r7, #40	@ 0x28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	603b      	str	r3, [r7, #0]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bf2:	e04f      	b.n	8007c94 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfa:	d04b      	beq.n	8007c94 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bfc:	f7fb f924 	bl	8002e48 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d302      	bcc.n	8007c12 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e04e      	b.n	8007cb4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0304 	and.w	r3, r3, #4
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d037      	beq.n	8007c94 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2b80      	cmp	r3, #128	@ 0x80
 8007c28:	d034      	beq.n	8007c94 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b40      	cmp	r3, #64	@ 0x40
 8007c2e:	d031      	beq.n	8007c94 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	f003 0308 	and.w	r3, r3, #8
 8007c3a:	2b08      	cmp	r3, #8
 8007c3c:	d110      	bne.n	8007c60 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2208      	movs	r2, #8
 8007c44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 f838 	bl	8007cbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2208      	movs	r2, #8
 8007c50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e029      	b.n	8007cb4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c6e:	d111      	bne.n	8007c94 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c78:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 f81e 	bl	8007cbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2220      	movs	r2, #32
 8007c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e00f      	b.n	8007cb4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	69da      	ldr	r2, [r3, #28]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	bf0c      	ite	eq
 8007ca4:	2301      	moveq	r3, #1
 8007ca6:	2300      	movne	r3, #0
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	461a      	mov	r2, r3
 8007cac:	79fb      	ldrb	r3, [r7, #7]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d0a0      	beq.n	8007bf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b095      	sub	sp, #84	@ 0x54
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ce2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ce4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ce8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e6      	bne.n	8007cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	f023 0301 	bic.w	r3, r3, #1
 8007d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3308      	adds	r3, #8
 8007d14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e5      	bne.n	8007cf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d118      	bne.n	8007d64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	e853 3f00 	ldrex	r3, [r3]
 8007d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f023 0310 	bic.w	r3, r3, #16
 8007d46:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d50:	61bb      	str	r3, [r7, #24]
 8007d52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d54:	6979      	ldr	r1, [r7, #20]
 8007d56:	69ba      	ldr	r2, [r7, #24]
 8007d58:	e841 2300 	strex	r3, r2, [r1]
 8007d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e6      	bne.n	8007d32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2220      	movs	r2, #32
 8007d68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007d78:	bf00      	nop
 8007d7a:	3754      	adds	r7, #84	@ 0x54
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d121      	bne.n	8007dda <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	4b27      	ldr	r3, [pc, #156]	@ (8007e38 <FMC_SDRAM_Init+0xb4>)
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	6851      	ldr	r1, [r2, #4]
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	6892      	ldr	r2, [r2, #8]
 8007da6:	4311      	orrs	r1, r2
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	68d2      	ldr	r2, [r2, #12]
 8007dac:	4311      	orrs	r1, r2
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	6912      	ldr	r2, [r2, #16]
 8007db2:	4311      	orrs	r1, r2
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	6952      	ldr	r2, [r2, #20]
 8007db8:	4311      	orrs	r1, r2
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	6992      	ldr	r2, [r2, #24]
 8007dbe:	4311      	orrs	r1, r2
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	69d2      	ldr	r2, [r2, #28]
 8007dc4:	4311      	orrs	r1, r2
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	6a12      	ldr	r2, [r2, #32]
 8007dca:	4311      	orrs	r1, r2
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	e026      	b.n	8007e28 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	69d9      	ldr	r1, [r3, #28]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	4319      	orrs	r1, r3
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df0:	430b      	orrs	r3, r1
 8007df2:	431a      	orrs	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8007e38 <FMC_SDRAM_Init+0xb4>)
 8007dfe:	4013      	ands	r3, r2
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	6851      	ldr	r1, [r2, #4]
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	6892      	ldr	r2, [r2, #8]
 8007e08:	4311      	orrs	r1, r2
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	68d2      	ldr	r2, [r2, #12]
 8007e0e:	4311      	orrs	r1, r2
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	6912      	ldr	r2, [r2, #16]
 8007e14:	4311      	orrs	r1, r2
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	6952      	ldr	r2, [r2, #20]
 8007e1a:	4311      	orrs	r1, r2
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	6992      	ldr	r2, [r2, #24]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	ffff8000 	.word	0xffff8000

08007e3c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d128      	bne.n	8007ea0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	1e59      	subs	r1, r3, #1
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	4319      	orrs	r1, r3
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	4319      	orrs	r1, r3
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	031b      	lsls	r3, r3, #12
 8007e78:	4319      	orrs	r1, r3
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	041b      	lsls	r3, r3, #16
 8007e82:	4319      	orrs	r1, r3
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	051b      	lsls	r3, r3, #20
 8007e8c:	4319      	orrs	r1, r3
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	061b      	lsls	r3, r3, #24
 8007e96:	430b      	orrs	r3, r1
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	609a      	str	r2, [r3, #8]
 8007e9e:	e02d      	b.n	8007efc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	689a      	ldr	r2, [r3, #8]
 8007ea4:	4b19      	ldr	r3, [pc, #100]	@ (8007f0c <FMC_SDRAM_Timing_Init+0xd0>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	68d2      	ldr	r2, [r2, #12]
 8007eac:	3a01      	subs	r2, #1
 8007eae:	0311      	lsls	r1, r2, #12
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	6952      	ldr	r2, [r2, #20]
 8007eb4:	3a01      	subs	r2, #1
 8007eb6:	0512      	lsls	r2, r2, #20
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	1e59      	subs	r1, r3, #1
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	011b      	lsls	r3, r3, #4
 8007ed6:	4319      	orrs	r1, r3
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	021b      	lsls	r3, r3, #8
 8007ee0:	4319      	orrs	r1, r3
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	041b      	lsls	r3, r3, #16
 8007eea:	4319      	orrs	r1, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	061b      	lsls	r3, r3, #24
 8007ef4:	430b      	orrs	r3, r1
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	ff0f0fff 	.word	0xff0f0fff

08007f10 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	691a      	ldr	r2, [r3, #16]
 8007f20:	4b0c      	ldr	r3, [pc, #48]	@ (8007f54 <FMC_SDRAM_SendCommand+0x44>)
 8007f22:	4013      	ands	r3, r2
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	6811      	ldr	r1, [r2, #0]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	6852      	ldr	r2, [r2, #4]
 8007f2c:	4311      	orrs	r1, r2
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	6892      	ldr	r2, [r2, #8]
 8007f32:	3a01      	subs	r2, #1
 8007f34:	0152      	lsls	r2, r2, #5
 8007f36:	4311      	orrs	r1, r2
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	68d2      	ldr	r2, [r2, #12]
 8007f3c:	0252      	lsls	r2, r2, #9
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	431a      	orrs	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	ffc00000 	.word	0xffc00000

08007f58 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	695a      	ldr	r2, [r3, #20]
 8007f66:	4b07      	ldr	r3, [pc, #28]	@ (8007f84 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	0052      	lsls	r2, r2, #1
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	ffffc001 	.word	0xffffc001

08007f88 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	607b      	str	r3, [r7, #4]
 8007f90:	4603      	mov	r3, r0
 8007f92:	81fb      	strh	r3, [r7, #14]
 8007f94:	460b      	mov	r3, r1
 8007f96:	81bb      	strh	r3, [r7, #12]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8007fa0:	89bb      	ldrh	r3, [r7, #12]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8007fa6:	89bb      	ldrh	r3, [r7, #12]
 8007fa8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007fac:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8007fb2:	f7f9 fcbd 	bl	8001930 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8007fb6:	89fb      	ldrh	r3, [r7, #14]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2203      	movs	r2, #3
 8007fbc:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f001 fafb 	bl	80095bc <CODEC_IO_Write>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	461a      	mov	r2, r3
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	4413      	add	r3, r2
 8007fce:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8007fd0:	89fb      	ldrh	r3, [r7, #14]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f640 0117 	movw	r1, #2071	@ 0x817
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 faee 	bl	80095bc <CODEC_IO_Write>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8007fea:	89fb      	ldrh	r3, [r7, #14]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 fae1 	bl	80095bc <CODEC_IO_Write>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	4413      	add	r3, r2
 8008002:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8008004:	89fb      	ldrh	r3, [r7, #14]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	226c      	movs	r2, #108	@ 0x6c
 800800a:	2139      	movs	r1, #57	@ 0x39
 800800c:	4618      	mov	r0, r3
 800800e:	f001 fad5 	bl	80095bc <CODEC_IO_Write>
 8008012:	4603      	mov	r3, r0
 8008014:	461a      	mov	r2, r3
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	4413      	add	r3, r2
 800801a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 800801c:	8afb      	ldrh	r3, [r7, #22]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00c      	beq.n	800803c <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8008022:	89fb      	ldrh	r3, [r7, #14]
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2213      	movs	r2, #19
 8008028:	2101      	movs	r1, #1
 800802a:	4618      	mov	r0, r3
 800802c:	f001 fac6 	bl	80095bc <CODEC_IO_Write>
 8008030:	4603      	mov	r3, r0
 8008032:	461a      	mov	r2, r3
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	4413      	add	r3, r2
 8008038:	61fb      	str	r3, [r7, #28]
 800803a:	e00b      	b.n	8008054 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 800803c:	89fb      	ldrh	r3, [r7, #14]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2203      	movs	r2, #3
 8008042:	2101      	movs	r1, #1
 8008044:	4618      	mov	r0, r3
 8008046:	f001 fab9 	bl	80095bc <CODEC_IO_Write>
 800804a:	4603      	mov	r3, r0
 800804c:	461a      	mov	r2, r3
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	4413      	add	r3, r2
 8008052:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8008054:	2032      	movs	r0, #50	@ 0x32
 8008056:	f7f9 fcd3 	bl	8001a00 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800805a:	8b3b      	ldrh	r3, [r7, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 815f 	beq.w	8008320 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8008062:	4bae      	ldr	r3, [pc, #696]	@ (800831c <wm8994_Init+0x394>)
 8008064:	2201      	movs	r2, #1
 8008066:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8008068:	8b3b      	ldrh	r3, [r7, #24]
 800806a:	2b03      	cmp	r3, #3
 800806c:	f000 808c 	beq.w	8008188 <wm8994_Init+0x200>
 8008070:	2b03      	cmp	r3, #3
 8008072:	f300 8111 	bgt.w	8008298 <wm8994_Init+0x310>
 8008076:	2b01      	cmp	r3, #1
 8008078:	d002      	beq.n	8008080 <wm8994_Init+0xf8>
 800807a:	2b02      	cmp	r3, #2
 800807c:	d042      	beq.n	8008104 <wm8994_Init+0x17c>
 800807e:	e10b      	b.n	8008298 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8008080:	89fb      	ldrh	r3, [r7, #14]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8008088:	2105      	movs	r1, #5
 800808a:	4618      	mov	r0, r3
 800808c:	f001 fa96 	bl	80095bc <CODEC_IO_Write>
 8008090:	4603      	mov	r3, r0
 8008092:	461a      	mov	r2, r3
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	4413      	add	r3, r2
 8008098:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800809a:	89fb      	ldrh	r3, [r7, #14]
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2200      	movs	r2, #0
 80080a0:	f240 6101 	movw	r1, #1537	@ 0x601
 80080a4:	4618      	mov	r0, r3
 80080a6:	f001 fa89 	bl	80095bc <CODEC_IO_Write>
 80080aa:	4603      	mov	r3, r0
 80080ac:	461a      	mov	r2, r3
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	4413      	add	r3, r2
 80080b2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80080b4:	89fb      	ldrh	r3, [r7, #14]
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2200      	movs	r2, #0
 80080ba:	f240 6102 	movw	r1, #1538	@ 0x602
 80080be:	4618      	mov	r0, r3
 80080c0:	f001 fa7c 	bl	80095bc <CODEC_IO_Write>
 80080c4:	4603      	mov	r3, r0
 80080c6:	461a      	mov	r2, r3
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	4413      	add	r3, r2
 80080cc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80080ce:	89fb      	ldrh	r3, [r7, #14]
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2202      	movs	r2, #2
 80080d4:	f240 6104 	movw	r1, #1540	@ 0x604
 80080d8:	4618      	mov	r0, r3
 80080da:	f001 fa6f 	bl	80095bc <CODEC_IO_Write>
 80080de:	4603      	mov	r3, r0
 80080e0:	461a      	mov	r2, r3
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	4413      	add	r3, r2
 80080e6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80080e8:	89fb      	ldrh	r3, [r7, #14]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2202      	movs	r2, #2
 80080ee:	f240 6105 	movw	r1, #1541	@ 0x605
 80080f2:	4618      	mov	r0, r3
 80080f4:	f001 fa62 	bl	80095bc <CODEC_IO_Write>
 80080f8:	4603      	mov	r3, r0
 80080fa:	461a      	mov	r2, r3
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	4413      	add	r3, r2
 8008100:	61fb      	str	r3, [r7, #28]
      break;
 8008102:	e110      	b.n	8008326 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8008104:	89fb      	ldrh	r3, [r7, #14]
 8008106:	b2db      	uxtb	r3, r3
 8008108:	f240 3203 	movw	r2, #771	@ 0x303
 800810c:	2105      	movs	r1, #5
 800810e:	4618      	mov	r0, r3
 8008110:	f001 fa54 	bl	80095bc <CODEC_IO_Write>
 8008114:	4603      	mov	r3, r0
 8008116:	461a      	mov	r2, r3
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	4413      	add	r3, r2
 800811c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800811e:	89fb      	ldrh	r3, [r7, #14]
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2201      	movs	r2, #1
 8008124:	f240 6101 	movw	r1, #1537	@ 0x601
 8008128:	4618      	mov	r0, r3
 800812a:	f001 fa47 	bl	80095bc <CODEC_IO_Write>
 800812e:	4603      	mov	r3, r0
 8008130:	461a      	mov	r2, r3
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	4413      	add	r3, r2
 8008136:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8008138:	89fb      	ldrh	r3, [r7, #14]
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2201      	movs	r2, #1
 800813e:	f240 6102 	movw	r1, #1538	@ 0x602
 8008142:	4618      	mov	r0, r3
 8008144:	f001 fa3a 	bl	80095bc <CODEC_IO_Write>
 8008148:	4603      	mov	r3, r0
 800814a:	461a      	mov	r2, r3
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	4413      	add	r3, r2
 8008150:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8008152:	89fb      	ldrh	r3, [r7, #14]
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2200      	movs	r2, #0
 8008158:	f240 6104 	movw	r1, #1540	@ 0x604
 800815c:	4618      	mov	r0, r3
 800815e:	f001 fa2d 	bl	80095bc <CODEC_IO_Write>
 8008162:	4603      	mov	r3, r0
 8008164:	461a      	mov	r2, r3
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	4413      	add	r3, r2
 800816a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800816c:	89fb      	ldrh	r3, [r7, #14]
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2200      	movs	r2, #0
 8008172:	f240 6105 	movw	r1, #1541	@ 0x605
 8008176:	4618      	mov	r0, r3
 8008178:	f001 fa20 	bl	80095bc <CODEC_IO_Write>
 800817c:	4603      	mov	r3, r0
 800817e:	461a      	mov	r2, r3
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	4413      	add	r3, r2
 8008184:	61fb      	str	r3, [r7, #28]
      break;
 8008186:	e0ce      	b.n	8008326 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8008188:	8afb      	ldrh	r3, [r7, #22]
 800818a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800818e:	d141      	bne.n	8008214 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8008190:	89fb      	ldrh	r3, [r7, #14]
 8008192:	b2db      	uxtb	r3, r3
 8008194:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8008198:	2105      	movs	r1, #5
 800819a:	4618      	mov	r0, r3
 800819c:	f001 fa0e 	bl	80095bc <CODEC_IO_Write>
 80081a0:	4603      	mov	r3, r0
 80081a2:	461a      	mov	r2, r3
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	4413      	add	r3, r2
 80081a8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80081aa:	89fb      	ldrh	r3, [r7, #14]
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2203      	movs	r2, #3
 80081b0:	f240 6101 	movw	r1, #1537	@ 0x601
 80081b4:	4618      	mov	r0, r3
 80081b6:	f001 fa01 	bl	80095bc <CODEC_IO_Write>
 80081ba:	4603      	mov	r3, r0
 80081bc:	461a      	mov	r2, r3
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80081c4:	89fb      	ldrh	r3, [r7, #14]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2203      	movs	r2, #3
 80081ca:	f240 6102 	movw	r1, #1538	@ 0x602
 80081ce:	4618      	mov	r0, r3
 80081d0:	f001 f9f4 	bl	80095bc <CODEC_IO_Write>
 80081d4:	4603      	mov	r3, r0
 80081d6:	461a      	mov	r2, r3
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	4413      	add	r3, r2
 80081dc:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80081de:	89fb      	ldrh	r3, [r7, #14]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2203      	movs	r2, #3
 80081e4:	f240 6104 	movw	r1, #1540	@ 0x604
 80081e8:	4618      	mov	r0, r3
 80081ea:	f001 f9e7 	bl	80095bc <CODEC_IO_Write>
 80081ee:	4603      	mov	r3, r0
 80081f0:	461a      	mov	r2, r3
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	4413      	add	r3, r2
 80081f6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80081f8:	89fb      	ldrh	r3, [r7, #14]
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2203      	movs	r2, #3
 80081fe:	f240 6105 	movw	r1, #1541	@ 0x605
 8008202:	4618      	mov	r0, r3
 8008204:	f001 f9da 	bl	80095bc <CODEC_IO_Write>
 8008208:	4603      	mov	r3, r0
 800820a:	461a      	mov	r2, r3
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	4413      	add	r3, r2
 8008210:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8008212:	e088      	b.n	8008326 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8008214:	89fb      	ldrh	r3, [r7, #14]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800821c:	2105      	movs	r1, #5
 800821e:	4618      	mov	r0, r3
 8008220:	f001 f9cc 	bl	80095bc <CODEC_IO_Write>
 8008224:	4603      	mov	r3, r0
 8008226:	461a      	mov	r2, r3
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	4413      	add	r3, r2
 800822c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800822e:	89fb      	ldrh	r3, [r7, #14]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2201      	movs	r2, #1
 8008234:	f240 6101 	movw	r1, #1537	@ 0x601
 8008238:	4618      	mov	r0, r3
 800823a:	f001 f9bf 	bl	80095bc <CODEC_IO_Write>
 800823e:	4603      	mov	r3, r0
 8008240:	461a      	mov	r2, r3
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	4413      	add	r3, r2
 8008246:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8008248:	89fb      	ldrh	r3, [r7, #14]
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2201      	movs	r2, #1
 800824e:	f240 6102 	movw	r1, #1538	@ 0x602
 8008252:	4618      	mov	r0, r3
 8008254:	f001 f9b2 	bl	80095bc <CODEC_IO_Write>
 8008258:	4603      	mov	r3, r0
 800825a:	461a      	mov	r2, r3
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	4413      	add	r3, r2
 8008260:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8008262:	89fb      	ldrh	r3, [r7, #14]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2202      	movs	r2, #2
 8008268:	f240 6104 	movw	r1, #1540	@ 0x604
 800826c:	4618      	mov	r0, r3
 800826e:	f001 f9a5 	bl	80095bc <CODEC_IO_Write>
 8008272:	4603      	mov	r3, r0
 8008274:	461a      	mov	r2, r3
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	4413      	add	r3, r2
 800827a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 800827c:	89fb      	ldrh	r3, [r7, #14]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2202      	movs	r2, #2
 8008282:	f240 6105 	movw	r1, #1541	@ 0x605
 8008286:	4618      	mov	r0, r3
 8008288:	f001 f998 	bl	80095bc <CODEC_IO_Write>
 800828c:	4603      	mov	r3, r0
 800828e:	461a      	mov	r2, r3
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	4413      	add	r3, r2
 8008294:	61fb      	str	r3, [r7, #28]
      break;
 8008296:	e046      	b.n	8008326 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8008298:	89fb      	ldrh	r3, [r7, #14]
 800829a:	b2db      	uxtb	r3, r3
 800829c:	f240 3203 	movw	r2, #771	@ 0x303
 80082a0:	2105      	movs	r1, #5
 80082a2:	4618      	mov	r0, r3
 80082a4:	f001 f98a 	bl	80095bc <CODEC_IO_Write>
 80082a8:	4603      	mov	r3, r0
 80082aa:	461a      	mov	r2, r3
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	4413      	add	r3, r2
 80082b0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80082b2:	89fb      	ldrh	r3, [r7, #14]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2201      	movs	r2, #1
 80082b8:	f240 6101 	movw	r1, #1537	@ 0x601
 80082bc:	4618      	mov	r0, r3
 80082be:	f001 f97d 	bl	80095bc <CODEC_IO_Write>
 80082c2:	4603      	mov	r3, r0
 80082c4:	461a      	mov	r2, r3
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	4413      	add	r3, r2
 80082ca:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80082cc:	89fb      	ldrh	r3, [r7, #14]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2201      	movs	r2, #1
 80082d2:	f240 6102 	movw	r1, #1538	@ 0x602
 80082d6:	4618      	mov	r0, r3
 80082d8:	f001 f970 	bl	80095bc <CODEC_IO_Write>
 80082dc:	4603      	mov	r3, r0
 80082de:	461a      	mov	r2, r3
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	4413      	add	r3, r2
 80082e4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80082e6:	89fb      	ldrh	r3, [r7, #14]
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2200      	movs	r2, #0
 80082ec:	f240 6104 	movw	r1, #1540	@ 0x604
 80082f0:	4618      	mov	r0, r3
 80082f2:	f001 f963 	bl	80095bc <CODEC_IO_Write>
 80082f6:	4603      	mov	r3, r0
 80082f8:	461a      	mov	r2, r3
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	4413      	add	r3, r2
 80082fe:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8008300:	89fb      	ldrh	r3, [r7, #14]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	2200      	movs	r2, #0
 8008306:	f240 6105 	movw	r1, #1541	@ 0x605
 800830a:	4618      	mov	r0, r3
 800830c:	f001 f956 	bl	80095bc <CODEC_IO_Write>
 8008310:	4603      	mov	r3, r0
 8008312:	461a      	mov	r2, r3
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	4413      	add	r3, r2
 8008318:	61fb      	str	r3, [r7, #28]
      break;
 800831a:	e004      	b.n	8008326 <wm8994_Init+0x39e>
 800831c:	20000894 	.word	0x20000894
    }
  }
  else
  {
    outputEnabled = 0;
 8008320:	4b99      	ldr	r3, [pc, #612]	@ (8008588 <wm8994_Init+0x600>)
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8008326:	8afb      	ldrh	r3, [r7, #22]
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 81ab 	beq.w	8008684 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800832e:	4b97      	ldr	r3, [pc, #604]	@ (800858c <wm8994_Init+0x604>)
 8008330:	2201      	movs	r2, #1
 8008332:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8008334:	8afb      	ldrh	r3, [r7, #22]
 8008336:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800833a:	f000 8129 	beq.w	8008590 <wm8994_Init+0x608>
 800833e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008342:	f300 819b 	bgt.w	800867c <wm8994_Init+0x6f4>
 8008346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800834a:	d05a      	beq.n	8008402 <wm8994_Init+0x47a>
 800834c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008350:	f300 8194 	bgt.w	800867c <wm8994_Init+0x6f4>
 8008354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008358:	f000 80c6 	beq.w	80084e8 <wm8994_Init+0x560>
 800835c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008360:	f040 818c 	bne.w	800867c <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8008364:	89fb      	ldrh	r3, [r7, #14]
 8008366:	b2db      	uxtb	r3, r3
 8008368:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 800836c:	2104      	movs	r1, #4
 800836e:	4618      	mov	r0, r3
 8008370:	f001 f924 	bl	80095bc <CODEC_IO_Write>
 8008374:	4603      	mov	r3, r0
 8008376:	461a      	mov	r2, r3
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	4413      	add	r3, r2
 800837c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800837e:	89fb      	ldrh	r3, [r7, #14]
 8008380:	b2db      	uxtb	r3, r3
 8008382:	22db      	movs	r2, #219	@ 0xdb
 8008384:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8008388:	4618      	mov	r0, r3
 800838a:	f001 f917 	bl	80095bc <CODEC_IO_Write>
 800838e:	4603      	mov	r3, r0
 8008390:	461a      	mov	r2, r3
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	4413      	add	r3, r2
 8008396:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8008398:	89fb      	ldrh	r3, [r7, #14]
 800839a:	b2db      	uxtb	r3, r3
 800839c:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 80083a0:	2102      	movs	r1, #2
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 f90a 	bl	80095bc <CODEC_IO_Write>
 80083a8:	4603      	mov	r3, r0
 80083aa:	461a      	mov	r2, r3
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	4413      	add	r3, r2
 80083b0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80083b2:	89fb      	ldrh	r3, [r7, #14]
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2202      	movs	r2, #2
 80083b8:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80083bc:	4618      	mov	r0, r3
 80083be:	f001 f8fd 	bl	80095bc <CODEC_IO_Write>
 80083c2:	4603      	mov	r3, r0
 80083c4:	461a      	mov	r2, r3
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	4413      	add	r3, r2
 80083ca:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80083cc:	89fb      	ldrh	r3, [r7, #14]
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2202      	movs	r2, #2
 80083d2:	f240 6109 	movw	r1, #1545	@ 0x609
 80083d6:	4618      	mov	r0, r3
 80083d8:	f001 f8f0 	bl	80095bc <CODEC_IO_Write>
 80083dc:	4603      	mov	r3, r0
 80083de:	461a      	mov	r2, r3
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	4413      	add	r3, r2
 80083e4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80083e6:	89fb      	ldrh	r3, [r7, #14]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	220e      	movs	r2, #14
 80083ec:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80083f0:	4618      	mov	r0, r3
 80083f2:	f001 f8e3 	bl	80095bc <CODEC_IO_Write>
 80083f6:	4603      	mov	r3, r0
 80083f8:	461a      	mov	r2, r3
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	4413      	add	r3, r2
 80083fe:	61fb      	str	r3, [r7, #28]
      break;
 8008400:	e143      	b.n	800868a <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8008402:	89fb      	ldrh	r3, [r7, #14]
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2211      	movs	r2, #17
 8008408:	2128      	movs	r1, #40	@ 0x28
 800840a:	4618      	mov	r0, r3
 800840c:	f001 f8d6 	bl	80095bc <CODEC_IO_Write>
 8008410:	4603      	mov	r3, r0
 8008412:	461a      	mov	r2, r3
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	4413      	add	r3, r2
 8008418:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800841a:	89fb      	ldrh	r3, [r7, #14]
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2235      	movs	r2, #53	@ 0x35
 8008420:	2129      	movs	r1, #41	@ 0x29
 8008422:	4618      	mov	r0, r3
 8008424:	f001 f8ca 	bl	80095bc <CODEC_IO_Write>
 8008428:	4603      	mov	r3, r0
 800842a:	461a      	mov	r2, r3
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	4413      	add	r3, r2
 8008430:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8008432:	89fb      	ldrh	r3, [r7, #14]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2235      	movs	r2, #53	@ 0x35
 8008438:	212a      	movs	r1, #42	@ 0x2a
 800843a:	4618      	mov	r0, r3
 800843c:	f001 f8be 	bl	80095bc <CODEC_IO_Write>
 8008440:	4603      	mov	r3, r0
 8008442:	461a      	mov	r2, r3
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	4413      	add	r3, r2
 8008448:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800844a:	89fb      	ldrh	r3, [r7, #14]
 800844c:	b2db      	uxtb	r3, r3
 800844e:	f240 3203 	movw	r2, #771	@ 0x303
 8008452:	2104      	movs	r1, #4
 8008454:	4618      	mov	r0, r3
 8008456:	f001 f8b1 	bl	80095bc <CODEC_IO_Write>
 800845a:	4603      	mov	r3, r0
 800845c:	461a      	mov	r2, r3
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	4413      	add	r3, r2
 8008462:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8008464:	89fb      	ldrh	r3, [r7, #14]
 8008466:	b2db      	uxtb	r3, r3
 8008468:	22db      	movs	r2, #219	@ 0xdb
 800846a:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800846e:	4618      	mov	r0, r3
 8008470:	f001 f8a4 	bl	80095bc <CODEC_IO_Write>
 8008474:	4603      	mov	r3, r0
 8008476:	461a      	mov	r2, r3
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	4413      	add	r3, r2
 800847c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800847e:	89fb      	ldrh	r3, [r7, #14]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	f246 3250 	movw	r2, #25424	@ 0x6350
 8008486:	2102      	movs	r1, #2
 8008488:	4618      	mov	r0, r3
 800848a:	f001 f897 	bl	80095bc <CODEC_IO_Write>
 800848e:	4603      	mov	r3, r0
 8008490:	461a      	mov	r2, r3
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	4413      	add	r3, r2
 8008496:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8008498:	89fb      	ldrh	r3, [r7, #14]
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2202      	movs	r2, #2
 800849e:	f240 6106 	movw	r1, #1542	@ 0x606
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 f88a 	bl	80095bc <CODEC_IO_Write>
 80084a8:	4603      	mov	r3, r0
 80084aa:	461a      	mov	r2, r3
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	4413      	add	r3, r2
 80084b0:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80084b2:	89fb      	ldrh	r3, [r7, #14]
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2202      	movs	r2, #2
 80084b8:	f240 6107 	movw	r1, #1543	@ 0x607
 80084bc:	4618      	mov	r0, r3
 80084be:	f001 f87d 	bl	80095bc <CODEC_IO_Write>
 80084c2:	4603      	mov	r3, r0
 80084c4:	461a      	mov	r2, r3
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	4413      	add	r3, r2
 80084ca:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80084cc:	89fb      	ldrh	r3, [r7, #14]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	220d      	movs	r2, #13
 80084d2:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 f870 	bl	80095bc <CODEC_IO_Write>
 80084dc:	4603      	mov	r3, r0
 80084de:	461a      	mov	r2, r3
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	4413      	add	r3, r2
 80084e4:	61fb      	str	r3, [r7, #28]
      break;
 80084e6:	e0d0      	b.n	800868a <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80084e8:	89fb      	ldrh	r3, [r7, #14]
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80084f0:	2104      	movs	r1, #4
 80084f2:	4618      	mov	r0, r3
 80084f4:	f001 f862 	bl	80095bc <CODEC_IO_Write>
 80084f8:	4603      	mov	r3, r0
 80084fa:	461a      	mov	r2, r3
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	4413      	add	r3, r2
 8008500:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8008502:	89fb      	ldrh	r3, [r7, #14]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	22db      	movs	r2, #219	@ 0xdb
 8008508:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800850c:	4618      	mov	r0, r3
 800850e:	f001 f855 	bl	80095bc <CODEC_IO_Write>
 8008512:	4603      	mov	r3, r0
 8008514:	461a      	mov	r2, r3
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	4413      	add	r3, r2
 800851a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800851c:	89fb      	ldrh	r3, [r7, #14]
 800851e:	b2db      	uxtb	r3, r3
 8008520:	f246 3250 	movw	r2, #25424	@ 0x6350
 8008524:	2102      	movs	r1, #2
 8008526:	4618      	mov	r0, r3
 8008528:	f001 f848 	bl	80095bc <CODEC_IO_Write>
 800852c:	4603      	mov	r3, r0
 800852e:	461a      	mov	r2, r3
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	4413      	add	r3, r2
 8008534:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8008536:	89fb      	ldrh	r3, [r7, #14]
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2202      	movs	r2, #2
 800853c:	f240 6106 	movw	r1, #1542	@ 0x606
 8008540:	4618      	mov	r0, r3
 8008542:	f001 f83b 	bl	80095bc <CODEC_IO_Write>
 8008546:	4603      	mov	r3, r0
 8008548:	461a      	mov	r2, r3
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	4413      	add	r3, r2
 800854e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8008550:	89fb      	ldrh	r3, [r7, #14]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2202      	movs	r2, #2
 8008556:	f240 6107 	movw	r1, #1543	@ 0x607
 800855a:	4618      	mov	r0, r3
 800855c:	f001 f82e 	bl	80095bc <CODEC_IO_Write>
 8008560:	4603      	mov	r3, r0
 8008562:	461a      	mov	r2, r3
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	4413      	add	r3, r2
 8008568:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800856a:	89fb      	ldrh	r3, [r7, #14]
 800856c:	b2db      	uxtb	r3, r3
 800856e:	220d      	movs	r2, #13
 8008570:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8008574:	4618      	mov	r0, r3
 8008576:	f001 f821 	bl	80095bc <CODEC_IO_Write>
 800857a:	4603      	mov	r3, r0
 800857c:	461a      	mov	r2, r3
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	4413      	add	r3, r2
 8008582:	61fb      	str	r3, [r7, #28]
      break; 
 8008584:	e081      	b.n	800868a <wm8994_Init+0x702>
 8008586:	bf00      	nop
 8008588:	20000894 	.word	0x20000894
 800858c:	20000898 	.word	0x20000898
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8008590:	89fb      	ldrh	r3, [r7, #14]
 8008592:	b2db      	uxtb	r3, r3
 8008594:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8008598:	2104      	movs	r1, #4
 800859a:	4618      	mov	r0, r3
 800859c:	f001 f80e 	bl	80095bc <CODEC_IO_Write>
 80085a0:	4603      	mov	r3, r0
 80085a2:	461a      	mov	r2, r3
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	4413      	add	r3, r2
 80085a8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80085aa:	89fb      	ldrh	r3, [r7, #14]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	22db      	movs	r2, #219	@ 0xdb
 80085b0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80085b4:	4618      	mov	r0, r3
 80085b6:	f001 f801 	bl	80095bc <CODEC_IO_Write>
 80085ba:	4603      	mov	r3, r0
 80085bc:	461a      	mov	r2, r3
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	4413      	add	r3, r2
 80085c2:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80085c4:	89fb      	ldrh	r3, [r7, #14]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	22db      	movs	r2, #219	@ 0xdb
 80085ca:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fff4 	bl	80095bc <CODEC_IO_Write>
 80085d4:	4603      	mov	r3, r0
 80085d6:	461a      	mov	r2, r3
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	4413      	add	r3, r2
 80085dc:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80085de:	89fb      	ldrh	r3, [r7, #14]
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80085e6:	2102      	movs	r1, #2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 ffe7 	bl	80095bc <CODEC_IO_Write>
 80085ee:	4603      	mov	r3, r0
 80085f0:	461a      	mov	r2, r3
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	4413      	add	r3, r2
 80085f6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80085f8:	89fb      	ldrh	r3, [r7, #14]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2202      	movs	r2, #2
 80085fe:	f240 6106 	movw	r1, #1542	@ 0x606
 8008602:	4618      	mov	r0, r3
 8008604:	f000 ffda 	bl	80095bc <CODEC_IO_Write>
 8008608:	4603      	mov	r3, r0
 800860a:	461a      	mov	r2, r3
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	4413      	add	r3, r2
 8008610:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8008612:	89fb      	ldrh	r3, [r7, #14]
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2202      	movs	r2, #2
 8008618:	f240 6107 	movw	r1, #1543	@ 0x607
 800861c:	4618      	mov	r0, r3
 800861e:	f000 ffcd 	bl	80095bc <CODEC_IO_Write>
 8008622:	4603      	mov	r3, r0
 8008624:	461a      	mov	r2, r3
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	4413      	add	r3, r2
 800862a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800862c:	89fb      	ldrh	r3, [r7, #14]
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2202      	movs	r2, #2
 8008632:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8008636:	4618      	mov	r0, r3
 8008638:	f000 ffc0 	bl	80095bc <CODEC_IO_Write>
 800863c:	4603      	mov	r3, r0
 800863e:	461a      	mov	r2, r3
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	4413      	add	r3, r2
 8008644:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8008646:	89fb      	ldrh	r3, [r7, #14]
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2202      	movs	r2, #2
 800864c:	f240 6109 	movw	r1, #1545	@ 0x609
 8008650:	4618      	mov	r0, r3
 8008652:	f000 ffb3 	bl	80095bc <CODEC_IO_Write>
 8008656:	4603      	mov	r3, r0
 8008658:	461a      	mov	r2, r3
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	4413      	add	r3, r2
 800865e:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8008660:	89fb      	ldrh	r3, [r7, #14]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	220d      	movs	r2, #13
 8008666:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800866a:	4618      	mov	r0, r3
 800866c:	f000 ffa6 	bl	80095bc <CODEC_IO_Write>
 8008670:	4603      	mov	r3, r0
 8008672:	461a      	mov	r2, r3
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	4413      	add	r3, r2
 8008678:	61fb      	str	r3, [r7, #28]
      break;    
 800867a:	e006      	b.n	800868a <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	3301      	adds	r3, #1
 8008680:	61fb      	str	r3, [r7, #28]
      break;
 8008682:	e002      	b.n	800868a <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8008684:	4ba4      	ldr	r3, [pc, #656]	@ (8008918 <wm8994_Init+0x990>)
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4aa3      	ldr	r2, [pc, #652]	@ (800891c <wm8994_Init+0x994>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d079      	beq.n	8008786 <wm8994_Init+0x7fe>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4aa1      	ldr	r2, [pc, #644]	@ (800891c <wm8994_Init+0x994>)
 8008696:	4293      	cmp	r3, r2
 8008698:	f200 80ad 	bhi.w	80087f6 <wm8994_Init+0x86e>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d061      	beq.n	800876a <wm8994_Init+0x7e2>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80086ac:	4293      	cmp	r3, r2
 80086ae:	f200 80a2 	bhi.w	80087f6 <wm8994_Init+0x86e>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80086b8:	4293      	cmp	r3, r2
 80086ba:	f000 808e 	beq.w	80087da <wm8994_Init+0x852>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80086c4:	4293      	cmp	r3, r2
 80086c6:	f200 8096 	bhi.w	80087f6 <wm8994_Init+0x86e>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80086d0:	d03d      	beq.n	800874e <wm8994_Init+0x7c6>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80086d8:	f200 808d 	bhi.w	80087f6 <wm8994_Init+0x86e>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f245 6222 	movw	r2, #22050	@ 0x5622
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d06b      	beq.n	80087be <wm8994_Init+0x836>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f245 6222 	movw	r2, #22050	@ 0x5622
 80086ec:	4293      	cmp	r3, r2
 80086ee:	f200 8082 	bhi.w	80087f6 <wm8994_Init+0x86e>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80086f8:	d01b      	beq.n	8008732 <wm8994_Init+0x7aa>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8008700:	d879      	bhi.n	80087f6 <wm8994_Init+0x86e>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8008708:	d005      	beq.n	8008716 <wm8994_Init+0x78e>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8008710:	4293      	cmp	r3, r2
 8008712:	d046      	beq.n	80087a2 <wm8994_Init+0x81a>
 8008714:	e06f      	b.n	80087f6 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8008716:	89fb      	ldrh	r3, [r7, #14]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2203      	movs	r2, #3
 800871c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008720:	4618      	mov	r0, r3
 8008722:	f000 ff4b 	bl	80095bc <CODEC_IO_Write>
 8008726:	4603      	mov	r3, r0
 8008728:	461a      	mov	r2, r3
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	4413      	add	r3, r2
 800872e:	61fb      	str	r3, [r7, #28]
    break;
 8008730:	e06f      	b.n	8008812 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8008732:	89fb      	ldrh	r3, [r7, #14]
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2233      	movs	r2, #51	@ 0x33
 8008738:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800873c:	4618      	mov	r0, r3
 800873e:	f000 ff3d 	bl	80095bc <CODEC_IO_Write>
 8008742:	4603      	mov	r3, r0
 8008744:	461a      	mov	r2, r3
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	4413      	add	r3, r2
 800874a:	61fb      	str	r3, [r7, #28]
    break;
 800874c:	e061      	b.n	8008812 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800874e:	89fb      	ldrh	r3, [r7, #14]
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2263      	movs	r2, #99	@ 0x63
 8008754:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008758:	4618      	mov	r0, r3
 800875a:	f000 ff2f 	bl	80095bc <CODEC_IO_Write>
 800875e:	4603      	mov	r3, r0
 8008760:	461a      	mov	r2, r3
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	4413      	add	r3, r2
 8008766:	61fb      	str	r3, [r7, #28]
    break;
 8008768:	e053      	b.n	8008812 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800876a:	89fb      	ldrh	r3, [r7, #14]
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2283      	movs	r2, #131	@ 0x83
 8008770:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008774:	4618      	mov	r0, r3
 8008776:	f000 ff21 	bl	80095bc <CODEC_IO_Write>
 800877a:	4603      	mov	r3, r0
 800877c:	461a      	mov	r2, r3
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	4413      	add	r3, r2
 8008782:	61fb      	str	r3, [r7, #28]
    break;
 8008784:	e045      	b.n	8008812 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8008786:	89fb      	ldrh	r3, [r7, #14]
 8008788:	b2db      	uxtb	r3, r3
 800878a:	22a3      	movs	r2, #163	@ 0xa3
 800878c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008790:	4618      	mov	r0, r3
 8008792:	f000 ff13 	bl	80095bc <CODEC_IO_Write>
 8008796:	4603      	mov	r3, r0
 8008798:	461a      	mov	r2, r3
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	4413      	add	r3, r2
 800879e:	61fb      	str	r3, [r7, #28]
    break;
 80087a0:	e037      	b.n	8008812 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80087a2:	89fb      	ldrh	r3, [r7, #14]
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2213      	movs	r2, #19
 80087a8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 ff05 	bl	80095bc <CODEC_IO_Write>
 80087b2:	4603      	mov	r3, r0
 80087b4:	461a      	mov	r2, r3
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	4413      	add	r3, r2
 80087ba:	61fb      	str	r3, [r7, #28]
    break;
 80087bc:	e029      	b.n	8008812 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80087be:	89fb      	ldrh	r3, [r7, #14]
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2243      	movs	r2, #67	@ 0x43
 80087c4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 fef7 	bl	80095bc <CODEC_IO_Write>
 80087ce:	4603      	mov	r3, r0
 80087d0:	461a      	mov	r2, r3
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	4413      	add	r3, r2
 80087d6:	61fb      	str	r3, [r7, #28]
    break;
 80087d8:	e01b      	b.n	8008812 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80087da:	89fb      	ldrh	r3, [r7, #14]
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2273      	movs	r2, #115	@ 0x73
 80087e0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 fee9 	bl	80095bc <CODEC_IO_Write>
 80087ea:	4603      	mov	r3, r0
 80087ec:	461a      	mov	r2, r3
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	4413      	add	r3, r2
 80087f2:	61fb      	str	r3, [r7, #28]
    break; 
 80087f4:	e00d      	b.n	8008812 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80087f6:	89fb      	ldrh	r3, [r7, #14]
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2283      	movs	r2, #131	@ 0x83
 80087fc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008800:	4618      	mov	r0, r3
 8008802:	f000 fedb 	bl	80095bc <CODEC_IO_Write>
 8008806:	4603      	mov	r3, r0
 8008808:	461a      	mov	r2, r3
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	4413      	add	r3, r2
 800880e:	61fb      	str	r3, [r7, #28]
    break; 
 8008810:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8008812:	8afb      	ldrh	r3, [r7, #22]
 8008814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008818:	d10e      	bne.n	8008838 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800881a:	89fb      	ldrh	r3, [r7, #14]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	f244 0218 	movw	r2, #16408	@ 0x4018
 8008822:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8008826:	4618      	mov	r0, r3
 8008828:	f000 fec8 	bl	80095bc <CODEC_IO_Write>
 800882c:	4603      	mov	r3, r0
 800882e:	461a      	mov	r2, r3
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	4413      	add	r3, r2
 8008834:	61fb      	str	r3, [r7, #28]
 8008836:	e00d      	b.n	8008854 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8008838:	89fb      	ldrh	r3, [r7, #14]
 800883a:	b2db      	uxtb	r3, r3
 800883c:	f244 0210 	movw	r2, #16400	@ 0x4010
 8008840:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8008844:	4618      	mov	r0, r3
 8008846:	f000 feb9 	bl	80095bc <CODEC_IO_Write>
 800884a:	4603      	mov	r3, r0
 800884c:	461a      	mov	r2, r3
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	4413      	add	r3, r2
 8008852:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8008854:	89fb      	ldrh	r3, [r7, #14]
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2200      	movs	r2, #0
 800885a:	f240 3102 	movw	r1, #770	@ 0x302
 800885e:	4618      	mov	r0, r3
 8008860:	f000 feac 	bl	80095bc <CODEC_IO_Write>
 8008864:	4603      	mov	r3, r0
 8008866:	461a      	mov	r2, r3
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	4413      	add	r3, r2
 800886c:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800886e:	89fb      	ldrh	r3, [r7, #14]
 8008870:	b2db      	uxtb	r3, r3
 8008872:	220a      	movs	r2, #10
 8008874:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fe9f 	bl	80095bc <CODEC_IO_Write>
 800887e:	4603      	mov	r3, r0
 8008880:	461a      	mov	r2, r3
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	4413      	add	r3, r2
 8008886:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8008888:	89fb      	ldrh	r3, [r7, #14]
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2201      	movs	r2, #1
 800888e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008892:	4618      	mov	r0, r3
 8008894:	f000 fe92 	bl	80095bc <CODEC_IO_Write>
 8008898:	4603      	mov	r3, r0
 800889a:	461a      	mov	r2, r3
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	4413      	add	r3, r2
 80088a0:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80088a2:	8b3b      	ldrh	r3, [r7, #24]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 817b 	beq.w	8008ba0 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80088aa:	8b3b      	ldrh	r3, [r7, #24]
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d157      	bne.n	8008960 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80088b0:	89fb      	ldrh	r3, [r7, #14]
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80088b8:	212d      	movs	r1, #45	@ 0x2d
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 fe7e 	bl	80095bc <CODEC_IO_Write>
 80088c0:	4603      	mov	r3, r0
 80088c2:	461a      	mov	r2, r3
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	4413      	add	r3, r2
 80088c8:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 80088ca:	89fb      	ldrh	r3, [r7, #14]
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80088d2:	212e      	movs	r1, #46	@ 0x2e
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 fe71 	bl	80095bc <CODEC_IO_Write>
 80088da:	4603      	mov	r3, r0
 80088dc:	461a      	mov	r2, r3
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	4413      	add	r3, r2
 80088e2:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 80088e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008920 <wm8994_Init+0x998>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d01b      	beq.n	8008924 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80088ec:	89fb      	ldrh	r3, [r7, #14]
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 80088f4:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 fe5f 	bl	80095bc <CODEC_IO_Write>
 80088fe:	4603      	mov	r3, r0
 8008900:	461a      	mov	r2, r3
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	4413      	add	r3, r2
 8008906:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8008908:	4b05      	ldr	r3, [pc, #20]	@ (8008920 <wm8994_Init+0x998>)
 800890a:	2200      	movs	r2, #0
 800890c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800890e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008912:	f7f9 f875 	bl	8001a00 <AUDIO_IO_Delay>
 8008916:	e016      	b.n	8008946 <wm8994_Init+0x9be>
 8008918:	20000898 	.word	0x20000898
 800891c:	00017700 	.word	0x00017700
 8008920:	20000048 	.word	0x20000048
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8008924:	89fb      	ldrh	r3, [r7, #14]
 8008926:	b2db      	uxtb	r3, r3
 8008928:	f248 1208 	movw	r2, #33032	@ 0x8108
 800892c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8008930:	4618      	mov	r0, r3
 8008932:	f000 fe43 	bl	80095bc <CODEC_IO_Write>
 8008936:	4603      	mov	r3, r0
 8008938:	461a      	mov	r2, r3
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	4413      	add	r3, r2
 800893e:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8008940:	2032      	movs	r0, #50	@ 0x32
 8008942:	f7f9 f85d 	bl	8001a00 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8008946:	89fb      	ldrh	r3, [r7, #14]
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2200      	movs	r2, #0
 800894c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fe33 	bl	80095bc <CODEC_IO_Write>
 8008956:	4603      	mov	r3, r0
 8008958:	461a      	mov	r2, r3
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	4413      	add	r3, r2
 800895e:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8008960:	89fb      	ldrh	r3, [r7, #14]
 8008962:	b2db      	uxtb	r3, r3
 8008964:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8008968:	2103      	movs	r1, #3
 800896a:	4618      	mov	r0, r3
 800896c:	f000 fe26 	bl	80095bc <CODEC_IO_Write>
 8008970:	4603      	mov	r3, r0
 8008972:	461a      	mov	r2, r3
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	4413      	add	r3, r2
 8008978:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800897a:	89fb      	ldrh	r3, [r7, #14]
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2200      	movs	r2, #0
 8008980:	2122      	movs	r1, #34	@ 0x22
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fe1a 	bl	80095bc <CODEC_IO_Write>
 8008988:	4603      	mov	r3, r0
 800898a:	461a      	mov	r2, r3
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	4413      	add	r3, r2
 8008990:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8008992:	89fb      	ldrh	r3, [r7, #14]
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2200      	movs	r2, #0
 8008998:	2123      	movs	r1, #35	@ 0x23
 800899a:	4618      	mov	r0, r3
 800899c:	f000 fe0e 	bl	80095bc <CODEC_IO_Write>
 80089a0:	4603      	mov	r3, r0
 80089a2:	461a      	mov	r2, r3
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	4413      	add	r3, r2
 80089a8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80089aa:	89fb      	ldrh	r3, [r7, #14]
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80089b2:	2136      	movs	r1, #54	@ 0x36
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 fe01 	bl	80095bc <CODEC_IO_Write>
 80089ba:	4603      	mov	r3, r0
 80089bc:	461a      	mov	r2, r3
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	4413      	add	r3, r2
 80089c2:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80089c4:	89fb      	ldrh	r3, [r7, #14]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	f243 0203 	movw	r2, #12291	@ 0x3003
 80089cc:	2101      	movs	r1, #1
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 fdf4 	bl	80095bc <CODEC_IO_Write>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	4413      	add	r3, r2
 80089dc:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80089de:	8afb      	ldrh	r3, [r7, #22]
 80089e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089e4:	d10d      	bne.n	8008a02 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80089e6:	89fb      	ldrh	r3, [r7, #14]
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	f240 2205 	movw	r2, #517	@ 0x205
 80089ee:	2151      	movs	r1, #81	@ 0x51
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 fde3 	bl	80095bc <CODEC_IO_Write>
 80089f6:	4603      	mov	r3, r0
 80089f8:	461a      	mov	r2, r3
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	4413      	add	r3, r2
 80089fe:	61fb      	str	r3, [r7, #28]
 8008a00:	e00b      	b.n	8008a1a <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8008a02:	89fb      	ldrh	r3, [r7, #14]
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2205      	movs	r2, #5
 8008a08:	2151      	movs	r1, #81	@ 0x51
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fdd6 	bl	80095bc <CODEC_IO_Write>
 8008a10:	4603      	mov	r3, r0
 8008a12:	461a      	mov	r2, r3
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	4413      	add	r3, r2
 8008a18:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8008a1a:	8b7b      	ldrh	r3, [r7, #26]
 8008a1c:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8008a20:	f043 0303 	orr.w	r3, r3, #3
 8008a24:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8008a26:	89fb      	ldrh	r3, [r7, #14]
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	8b7a      	ldrh	r2, [r7, #26]
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 fdc4 	bl	80095bc <CODEC_IO_Write>
 8008a34:	4603      	mov	r3, r0
 8008a36:	461a      	mov	r2, r3
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8008a3e:	89fb      	ldrh	r3, [r7, #14]
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2222      	movs	r2, #34	@ 0x22
 8008a44:	2160      	movs	r1, #96	@ 0x60
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 fdb8 	bl	80095bc <CODEC_IO_Write>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	461a      	mov	r2, r3
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	4413      	add	r3, r2
 8008a54:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8008a56:	89fb      	ldrh	r3, [r7, #14]
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8008a5e:	214c      	movs	r1, #76	@ 0x4c
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 fdab 	bl	80095bc <CODEC_IO_Write>
 8008a66:	4603      	mov	r3, r0
 8008a68:	461a      	mov	r2, r3
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8008a70:	200f      	movs	r0, #15
 8008a72:	f7f8 ffc5 	bl	8001a00 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8008a76:	89fb      	ldrh	r3, [r7, #14]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	212d      	movs	r1, #45	@ 0x2d
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 fd9c 	bl	80095bc <CODEC_IO_Write>
 8008a84:	4603      	mov	r3, r0
 8008a86:	461a      	mov	r2, r3
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8008a8e:	89fb      	ldrh	r3, [r7, #14]
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2201      	movs	r2, #1
 8008a94:	212e      	movs	r1, #46	@ 0x2e
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 fd90 	bl	80095bc <CODEC_IO_Write>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8008aa6:	89fb      	ldrh	r3, [r7, #14]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8008aae:	2103      	movs	r1, #3
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fd83 	bl	80095bc <CODEC_IO_Write>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	461a      	mov	r2, r3
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	4413      	add	r3, r2
 8008abe:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8008ac0:	89fb      	ldrh	r3, [r7, #14]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	2233      	movs	r2, #51	@ 0x33
 8008ac6:	2154      	movs	r1, #84	@ 0x54
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fd77 	bl	80095bc <CODEC_IO_Write>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8008ad8:	f240 1001 	movw	r0, #257	@ 0x101
 8008adc:	f7f8 ff90 	bl	8001a00 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8008ae0:	89fb      	ldrh	r3, [r7, #14]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	22ee      	movs	r2, #238	@ 0xee
 8008ae6:	2160      	movs	r1, #96	@ 0x60
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 fd67 	bl	80095bc <CODEC_IO_Write>
 8008aee:	4603      	mov	r3, r0
 8008af0:	461a      	mov	r2, r3
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	4413      	add	r3, r2
 8008af6:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8008af8:	89fb      	ldrh	r3, [r7, #14]
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	22c0      	movs	r2, #192	@ 0xc0
 8008afe:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 fd5a 	bl	80095bc <CODEC_IO_Write>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	4413      	add	r3, r2
 8008b10:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8008b12:	89fb      	ldrh	r3, [r7, #14]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	22c0      	movs	r2, #192	@ 0xc0
 8008b18:	f240 6111 	movw	r1, #1553	@ 0x611
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 fd4d 	bl	80095bc <CODEC_IO_Write>
 8008b22:	4603      	mov	r3, r0
 8008b24:	461a      	mov	r2, r3
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	4413      	add	r3, r2
 8008b2a:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8008b2c:	89fb      	ldrh	r3, [r7, #14]
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2210      	movs	r2, #16
 8008b32:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 fd40 	bl	80095bc <CODEC_IO_Write>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	461a      	mov	r2, r3
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	4413      	add	r3, r2
 8008b44:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8008b46:	89fb      	ldrh	r3, [r7, #14]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	22c0      	movs	r2, #192	@ 0xc0
 8008b4c:	f240 6112 	movw	r1, #1554	@ 0x612
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 fd33 	bl	80095bc <CODEC_IO_Write>
 8008b56:	4603      	mov	r3, r0
 8008b58:	461a      	mov	r2, r3
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8008b60:	89fb      	ldrh	r3, [r7, #14]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	22c0      	movs	r2, #192	@ 0xc0
 8008b66:	f240 6113 	movw	r1, #1555	@ 0x613
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fd26 	bl	80095bc <CODEC_IO_Write>
 8008b70:	4603      	mov	r3, r0
 8008b72:	461a      	mov	r2, r3
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	4413      	add	r3, r2
 8008b78:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8008b7a:	89fb      	ldrh	r3, [r7, #14]
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2210      	movs	r2, #16
 8008b80:	f240 4122 	movw	r1, #1058	@ 0x422
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 fd19 	bl	80095bc <CODEC_IO_Write>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	4413      	add	r3, r2
 8008b92:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8008b94:	7afa      	ldrb	r2, [r7, #11]
 8008b96:	89fb      	ldrh	r3, [r7, #14]
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 f984 	bl	8008ea8 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8008ba0:	8afb      	ldrh	r3, [r7, #22]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 80a6 	beq.w	8008cf4 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8008ba8:	8afb      	ldrh	r3, [r7, #22]
 8008baa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bae:	d003      	beq.n	8008bb8 <wm8994_Init+0xc30>
 8008bb0:	8afb      	ldrh	r3, [r7, #22]
 8008bb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bb6:	d12b      	bne.n	8008c10 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8008bb8:	8b7b      	ldrh	r3, [r7, #26]
 8008bba:	f043 0313 	orr.w	r3, r3, #19
 8008bbe:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8008bc0:	89fb      	ldrh	r3, [r7, #14]
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	8b7a      	ldrh	r2, [r7, #26]
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 fcf7 	bl	80095bc <CODEC_IO_Write>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8008bd8:	89fb      	ldrh	r3, [r7, #14]
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2202      	movs	r2, #2
 8008bde:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 fcea 	bl	80095bc <CODEC_IO_Write>
 8008be8:	4603      	mov	r3, r0
 8008bea:	461a      	mov	r2, r3
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	4413      	add	r3, r2
 8008bf0:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8008bf2:	89fb      	ldrh	r3, [r7, #14]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8008bfa:	f240 4111 	movw	r1, #1041	@ 0x411
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fcdc 	bl	80095bc <CODEC_IO_Write>
 8008c04:	4603      	mov	r3, r0
 8008c06:	461a      	mov	r2, r3
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	61fb      	str	r3, [r7, #28]
 8008c0e:	e06b      	b.n	8008ce8 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8008c10:	8afb      	ldrh	r3, [r7, #22]
 8008c12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c16:	d139      	bne.n	8008c8c <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8008c18:	8b7b      	ldrh	r3, [r7, #26]
 8008c1a:	f043 0313 	orr.w	r3, r3, #19
 8008c1e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8008c20:	89fb      	ldrh	r3, [r7, #14]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	8b7a      	ldrh	r2, [r7, #26]
 8008c26:	2101      	movs	r1, #1
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 fcc7 	bl	80095bc <CODEC_IO_Write>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	461a      	mov	r2, r3
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	4413      	add	r3, r2
 8008c36:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8008c38:	89fb      	ldrh	r3, [r7, #14]
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 fcba 	bl	80095bc <CODEC_IO_Write>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	4413      	add	r3, r2
 8008c50:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8008c52:	89fb      	ldrh	r3, [r7, #14]
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8008c5a:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fcac 	bl	80095bc <CODEC_IO_Write>
 8008c64:	4603      	mov	r3, r0
 8008c66:	461a      	mov	r2, r3
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8008c6e:	89fb      	ldrh	r3, [r7, #14]
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8008c76:	f240 4111 	movw	r1, #1041	@ 0x411
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 fc9e 	bl	80095bc <CODEC_IO_Write>
 8008c80:	4603      	mov	r3, r0
 8008c82:	461a      	mov	r2, r3
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	4413      	add	r3, r2
 8008c88:	61fb      	str	r3, [r7, #28]
 8008c8a:	e02d      	b.n	8008ce8 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8008c8c:	8afb      	ldrh	r3, [r7, #22]
 8008c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c92:	d003      	beq.n	8008c9c <wm8994_Init+0xd14>
 8008c94:	8afb      	ldrh	r3, [r7, #22]
 8008c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c9a:	d125      	bne.n	8008ce8 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8008c9c:	89fb      	ldrh	r3, [r7, #14]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	220b      	movs	r2, #11
 8008ca2:	2118      	movs	r1, #24
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 fc89 	bl	80095bc <CODEC_IO_Write>
 8008caa:	4603      	mov	r3, r0
 8008cac:	461a      	mov	r2, r3
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8008cb4:	89fb      	ldrh	r3, [r7, #14]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	220b      	movs	r2, #11
 8008cba:	211a      	movs	r1, #26
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 fc7d 	bl	80095bc <CODEC_IO_Write>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	4413      	add	r3, r2
 8008cca:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8008ccc:	89fb      	ldrh	r3, [r7, #14]
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8008cd4:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 fc6f 	bl	80095bc <CODEC_IO_Write>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8008ce8:	7afa      	ldrb	r2, [r7, #11]
 8008cea:	89fb      	ldrh	r3, [r7, #14]
 8008cec:	4611      	mov	r1, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 f8da 	bl	8008ea8 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8008cf4:	69fb      	ldr	r3, [r7, #28]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3720      	adds	r7, #32
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop

08008d00 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8008d04:	f7f8 fe1e 	bl	8001944 <AUDIO_IO_DeInit>
}
 8008d08:	bf00      	nop
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8008d16:	f7f8 fe0b 	bl	8001930 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8008d1a:	88fb      	ldrh	r3, [r7, #6]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2100      	movs	r1, #0
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7f8 fe41 	bl	80019a8 <AUDIO_IO_Read>
 8008d26:	4603      	mov	r3, r0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	6039      	str	r1, [r7, #0]
 8008d3a:	80fb      	strh	r3, [r7, #6]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8008d44:	88fb      	ldrh	r3, [r7, #6]
 8008d46:	2100      	movs	r1, #0
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f000 f9d1 	bl	80090f0 <wm8994_SetMute>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4413      	add	r3, r2
 8008d54:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8008d56:	68fb      	ldr	r3, [r7, #12]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8008d6e:	88fb      	ldrh	r3, [r7, #6]
 8008d70:	2101      	movs	r1, #1
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 f9bc 	bl	80090f0 <wm8994_SetMute>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8008d80:	88fb      	ldrh	r3, [r7, #6]
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2201      	movs	r2, #1
 8008d86:	2102      	movs	r1, #2
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fc17 	bl	80095bc <CODEC_IO_Write>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	461a      	mov	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	4413      	add	r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8008d98:	68fb      	ldr	r3, [r7, #12]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	4603      	mov	r3, r0
 8008daa:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8008db0:	88fb      	ldrh	r3, [r7, #6]
 8008db2:	2100      	movs	r1, #0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 f99b 	bl	80090f0 <wm8994_SetMute>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	6039      	str	r1, [r7, #0]
 8008dd6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8008ddc:	4b31      	ldr	r3, [pc, #196]	@ (8008ea4 <wm8994_Stop+0xd8>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d05a      	beq.n	8008e9a <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8008de4:	88fb      	ldrh	r3, [r7, #6]
 8008de6:	2101      	movs	r1, #1
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 f981 	bl	80090f0 <wm8994_SetMute>
 8008dee:	4602      	mov	r2, r0
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4413      	add	r3, r2
 8008df4:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d04e      	beq.n	8008e9a <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8008dfc:	88fb      	ldrh	r3, [r7, #6]
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e04:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 fbd7 	bl	80095bc <CODEC_IO_Write>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	461a      	mov	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4413      	add	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e20:	f240 4122 	movw	r1, #1058	@ 0x422
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 fbc9 	bl	80095bc <CODEC_IO_Write>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	4413      	add	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8008e34:	88fb      	ldrh	r3, [r7, #6]
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2200      	movs	r2, #0
 8008e3a:	212d      	movs	r1, #45	@ 0x2d
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fbbd 	bl	80095bc <CODEC_IO_Write>
 8008e42:	4603      	mov	r3, r0
 8008e44:	461a      	mov	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	4413      	add	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8008e4c:	88fb      	ldrh	r3, [r7, #6]
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2200      	movs	r2, #0
 8008e52:	212e      	movs	r1, #46	@ 0x2e
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 fbb1 	bl	80095bc <CODEC_IO_Write>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4413      	add	r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8008e64:	88fb      	ldrh	r3, [r7, #6]
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2105      	movs	r1, #5
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 fba5 	bl	80095bc <CODEC_IO_Write>
 8008e72:	4603      	mov	r3, r0
 8008e74:	461a      	mov	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	4413      	add	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8008e7c:	88fb      	ldrh	r3, [r7, #6]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2200      	movs	r2, #0
 8008e82:	2100      	movs	r1, #0
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 fb99 	bl	80095bc <CODEC_IO_Write>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	4413      	add	r3, r2
 8008e92:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8008e94:	4b03      	ldr	r3, [pc, #12]	@ (8008ea4 <wm8994_Stop+0xd8>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	20000894 	.word	0x20000894

08008ea8 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	460a      	mov	r2, r1
 8008eb2:	80fb      	strh	r3, [r7, #6]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8008ebc:	797b      	ldrb	r3, [r7, #5]
 8008ebe:	2b64      	cmp	r3, #100	@ 0x64
 8008ec0:	d80b      	bhi.n	8008eda <wm8994_SetVolume+0x32>
 8008ec2:	797a      	ldrb	r2, [r7, #5]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	019b      	lsls	r3, r3, #6
 8008ec8:	1a9b      	subs	r3, r3, r2
 8008eca:	4a86      	ldr	r2, [pc, #536]	@ (80090e4 <wm8994_SetVolume+0x23c>)
 8008ecc:	fb82 1203 	smull	r1, r2, r2, r3
 8008ed0:	1152      	asrs	r2, r2, #5
 8008ed2:	17db      	asrs	r3, r3, #31
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	e000      	b.n	8008edc <wm8994_SetVolume+0x34>
 8008eda:	2364      	movs	r3, #100	@ 0x64
 8008edc:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8008ede:	4b82      	ldr	r3, [pc, #520]	@ (80090e8 <wm8994_SetVolume+0x240>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 809b 	beq.w	800901e <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8008ee8:	7afb      	ldrb	r3, [r7, #11]
 8008eea:	2b3e      	cmp	r3, #62	@ 0x3e
 8008eec:	d93d      	bls.n	8008f6a <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8008eee:	88fb      	ldrh	r3, [r7, #6]
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 f8fc 	bl	80090f0 <wm8994_SetMute>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4413      	add	r3, r2
 8008efe:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8008f00:	88fb      	ldrh	r3, [r7, #6]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	f240 127f 	movw	r2, #383	@ 0x17f
 8008f08:	211c      	movs	r1, #28
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fb56 	bl	80095bc <CODEC_IO_Write>
 8008f10:	4603      	mov	r3, r0
 8008f12:	461a      	mov	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4413      	add	r3, r2
 8008f18:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8008f1a:	88fb      	ldrh	r3, [r7, #6]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	f240 127f 	movw	r2, #383	@ 0x17f
 8008f22:	211d      	movs	r1, #29
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 fb49 	bl	80095bc <CODEC_IO_Write>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	4413      	add	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8008f34:	88fb      	ldrh	r3, [r7, #6]
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	f240 127f 	movw	r2, #383	@ 0x17f
 8008f3c:	2126      	movs	r1, #38	@ 0x26
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 fb3c 	bl	80095bc <CODEC_IO_Write>
 8008f44:	4603      	mov	r3, r0
 8008f46:	461a      	mov	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8008f4e:	88fb      	ldrh	r3, [r7, #6]
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	f240 127f 	movw	r2, #383	@ 0x17f
 8008f56:	2127      	movs	r1, #39	@ 0x27
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 fb2f 	bl	80095bc <CODEC_IO_Write>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	461a      	mov	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4413      	add	r3, r2
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	e059      	b.n	800901e <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8008f6a:	797b      	ldrb	r3, [r7, #5]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d109      	bne.n	8008f84 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8008f70:	88fb      	ldrh	r3, [r7, #6]
 8008f72:	2101      	movs	r1, #1
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 f8bb 	bl	80090f0 <wm8994_SetMute>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4413      	add	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]
 8008f82:	e04c      	b.n	800901e <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8008f84:	88fb      	ldrh	r3, [r7, #6]
 8008f86:	2100      	movs	r1, #0
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 f8b1 	bl	80090f0 <wm8994_SetMute>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4413      	add	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8008f96:	88fb      	ldrh	r3, [r7, #6]
 8008f98:	b2d8      	uxtb	r0, r3
 8008f9a:	7afb      	ldrb	r3, [r7, #11]
 8008f9c:	b21b      	sxth	r3, r3
 8008f9e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8008fa2:	b21b      	sxth	r3, r3
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	211c      	movs	r1, #28
 8008faa:	f000 fb07 	bl	80095bc <CODEC_IO_Write>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8008fb8:	88fb      	ldrh	r3, [r7, #6]
 8008fba:	b2d8      	uxtb	r0, r3
 8008fbc:	7afb      	ldrb	r3, [r7, #11]
 8008fbe:	b21b      	sxth	r3, r3
 8008fc0:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8008fc4:	b21b      	sxth	r3, r3
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	461a      	mov	r2, r3
 8008fca:	211d      	movs	r1, #29
 8008fcc:	f000 faf6 	bl	80095bc <CODEC_IO_Write>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8008fda:	88fb      	ldrh	r3, [r7, #6]
 8008fdc:	b2d8      	uxtb	r0, r3
 8008fde:	7afb      	ldrb	r3, [r7, #11]
 8008fe0:	b21b      	sxth	r3, r3
 8008fe2:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8008fe6:	b21b      	sxth	r3, r3
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	461a      	mov	r2, r3
 8008fec:	2126      	movs	r1, #38	@ 0x26
 8008fee:	f000 fae5 	bl	80095bc <CODEC_IO_Write>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8008ffc:	88fb      	ldrh	r3, [r7, #6]
 8008ffe:	b2d8      	uxtb	r0, r3
 8009000:	7afb      	ldrb	r3, [r7, #11]
 8009002:	b21b      	sxth	r3, r3
 8009004:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009008:	b21b      	sxth	r3, r3
 800900a:	b29b      	uxth	r3, r3
 800900c:	461a      	mov	r2, r3
 800900e:	2127      	movs	r1, #39	@ 0x27
 8009010:	f000 fad4 	bl	80095bc <CODEC_IO_Write>
 8009014:	4603      	mov	r3, r0
 8009016:	461a      	mov	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	4413      	add	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800901e:	4b33      	ldr	r3, [pc, #204]	@ (80090ec <wm8994_SetVolume+0x244>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d059      	beq.n	80090da <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8009026:	797b      	ldrb	r3, [r7, #5]
 8009028:	2b63      	cmp	r3, #99	@ 0x63
 800902a:	d80c      	bhi.n	8009046 <wm8994_SetVolume+0x19e>
 800902c:	797a      	ldrb	r2, [r7, #5]
 800902e:	4613      	mov	r3, r2
 8009030:	011b      	lsls	r3, r3, #4
 8009032:	1a9b      	subs	r3, r3, r2
 8009034:	011b      	lsls	r3, r3, #4
 8009036:	4a2b      	ldr	r2, [pc, #172]	@ (80090e4 <wm8994_SetVolume+0x23c>)
 8009038:	fb82 1203 	smull	r1, r2, r2, r3
 800903c:	1152      	asrs	r2, r2, #5
 800903e:	17db      	asrs	r3, r3, #31
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	b2db      	uxtb	r3, r3
 8009044:	e000      	b.n	8009048 <wm8994_SetVolume+0x1a0>
 8009046:	23ef      	movs	r3, #239	@ 0xef
 8009048:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800904a:	88fb      	ldrh	r3, [r7, #6]
 800904c:	b2d8      	uxtb	r0, r3
 800904e:	7afb      	ldrb	r3, [r7, #11]
 8009050:	b21b      	sxth	r3, r3
 8009052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009056:	b21b      	sxth	r3, r3
 8009058:	b29b      	uxth	r3, r3
 800905a:	461a      	mov	r2, r3
 800905c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009060:	f000 faac 	bl	80095bc <CODEC_IO_Write>
 8009064:	4603      	mov	r3, r0
 8009066:	461a      	mov	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	4413      	add	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800906e:	88fb      	ldrh	r3, [r7, #6]
 8009070:	b2d8      	uxtb	r0, r3
 8009072:	7afb      	ldrb	r3, [r7, #11]
 8009074:	b21b      	sxth	r3, r3
 8009076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800907a:	b21b      	sxth	r3, r3
 800907c:	b29b      	uxth	r3, r3
 800907e:	461a      	mov	r2, r3
 8009080:	f240 4101 	movw	r1, #1025	@ 0x401
 8009084:	f000 fa9a 	bl	80095bc <CODEC_IO_Write>
 8009088:	4603      	mov	r3, r0
 800908a:	461a      	mov	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	4413      	add	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8009092:	88fb      	ldrh	r3, [r7, #6]
 8009094:	b2d8      	uxtb	r0, r3
 8009096:	7afb      	ldrb	r3, [r7, #11]
 8009098:	b21b      	sxth	r3, r3
 800909a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800909e:	b21b      	sxth	r3, r3
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	461a      	mov	r2, r3
 80090a4:	f240 4104 	movw	r1, #1028	@ 0x404
 80090a8:	f000 fa88 	bl	80095bc <CODEC_IO_Write>
 80090ac:	4603      	mov	r3, r0
 80090ae:	461a      	mov	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4413      	add	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80090b6:	88fb      	ldrh	r3, [r7, #6]
 80090b8:	b2d8      	uxtb	r0, r3
 80090ba:	7afb      	ldrb	r3, [r7, #11]
 80090bc:	b21b      	sxth	r3, r3
 80090be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090c2:	b21b      	sxth	r3, r3
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	461a      	mov	r2, r3
 80090c8:	f240 4105 	movw	r1, #1029	@ 0x405
 80090cc:	f000 fa76 	bl	80095bc <CODEC_IO_Write>
 80090d0:	4603      	mov	r3, r0
 80090d2:	461a      	mov	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80090da:	68fb      	ldr	r3, [r7, #12]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	51eb851f 	.word	0x51eb851f
 80090e8:	20000894 	.word	0x20000894
 80090ec:	20000898 	.word	0x20000898

080090f0 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	6039      	str	r1, [r7, #0]
 80090fa:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8009100:	4b21      	ldr	r3, [pc, #132]	@ (8009188 <wm8994_SetMute+0x98>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d039      	beq.n	800917c <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d11c      	bne.n	8009148 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	b2db      	uxtb	r3, r3
 8009112:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009116:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800911a:	4618      	mov	r0, r3
 800911c:	f000 fa4e 	bl	80095bc <CODEC_IO_Write>
 8009120:	4603      	mov	r3, r0
 8009122:	461a      	mov	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	4413      	add	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800912a:	88fb      	ldrh	r3, [r7, #6]
 800912c:	b2db      	uxtb	r3, r3
 800912e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009132:	f240 4122 	movw	r1, #1058	@ 0x422
 8009136:	4618      	mov	r0, r3
 8009138:	f000 fa40 	bl	80095bc <CODEC_IO_Write>
 800913c:	4603      	mov	r3, r0
 800913e:	461a      	mov	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4413      	add	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]
 8009146:	e019      	b.n	800917c <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8009148:	88fb      	ldrh	r3, [r7, #6]
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2210      	movs	r2, #16
 800914e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8009152:	4618      	mov	r0, r3
 8009154:	f000 fa32 	bl	80095bc <CODEC_IO_Write>
 8009158:	4603      	mov	r3, r0
 800915a:	461a      	mov	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4413      	add	r3, r2
 8009160:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8009162:	88fb      	ldrh	r3, [r7, #6]
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2210      	movs	r2, #16
 8009168:	f240 4122 	movw	r1, #1058	@ 0x422
 800916c:	4618      	mov	r0, r3
 800916e:	f000 fa25 	bl	80095bc <CODEC_IO_Write>
 8009172:	4603      	mov	r3, r0
 8009174:	461a      	mov	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4413      	add	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 800917c:	68fb      	ldr	r3, [r7, #12]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20000894 	.word	0x20000894

0800918c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	460a      	mov	r2, r1
 8009196:	80fb      	strh	r3, [r7, #6]
 8009198:	4613      	mov	r3, r2
 800919a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800919c:	2300      	movs	r3, #0
 800919e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80091a0:	797b      	ldrb	r3, [r7, #5]
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	f000 808c 	beq.w	80092c0 <wm8994_SetOutputMode+0x134>
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	f300 80cb 	bgt.w	8009344 <wm8994_SetOutputMode+0x1b8>
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d002      	beq.n	80091b8 <wm8994_SetOutputMode+0x2c>
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d042      	beq.n	800923c <wm8994_SetOutputMode+0xb0>
 80091b6:	e0c5      	b.n	8009344 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80091b8:	88fb      	ldrh	r3, [r7, #6]
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80091c0:	2105      	movs	r1, #5
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 f9fa 	bl	80095bc <CODEC_IO_Write>
 80091c8:	4603      	mov	r3, r0
 80091ca:	461a      	mov	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80091d2:	88fb      	ldrh	r3, [r7, #6]
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2200      	movs	r2, #0
 80091d8:	f240 6101 	movw	r1, #1537	@ 0x601
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 f9ed 	bl	80095bc <CODEC_IO_Write>
 80091e2:	4603      	mov	r3, r0
 80091e4:	461a      	mov	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	4413      	add	r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80091ec:	88fb      	ldrh	r3, [r7, #6]
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2200      	movs	r2, #0
 80091f2:	f240 6102 	movw	r1, #1538	@ 0x602
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 f9e0 	bl	80095bc <CODEC_IO_Write>
 80091fc:	4603      	mov	r3, r0
 80091fe:	461a      	mov	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4413      	add	r3, r2
 8009204:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2202      	movs	r2, #2
 800920c:	f240 6104 	movw	r1, #1540	@ 0x604
 8009210:	4618      	mov	r0, r3
 8009212:	f000 f9d3 	bl	80095bc <CODEC_IO_Write>
 8009216:	4603      	mov	r3, r0
 8009218:	461a      	mov	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	4413      	add	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8009220:	88fb      	ldrh	r3, [r7, #6]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2202      	movs	r2, #2
 8009226:	f240 6105 	movw	r1, #1541	@ 0x605
 800922a:	4618      	mov	r0, r3
 800922c:	f000 f9c6 	bl	80095bc <CODEC_IO_Write>
 8009230:	4603      	mov	r3, r0
 8009232:	461a      	mov	r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4413      	add	r3, r2
 8009238:	60fb      	str	r3, [r7, #12]
    break;
 800923a:	e0c5      	b.n	80093c8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800923c:	88fb      	ldrh	r3, [r7, #6]
 800923e:	b2db      	uxtb	r3, r3
 8009240:	f240 3203 	movw	r2, #771	@ 0x303
 8009244:	2105      	movs	r1, #5
 8009246:	4618      	mov	r0, r3
 8009248:	f000 f9b8 	bl	80095bc <CODEC_IO_Write>
 800924c:	4603      	mov	r3, r0
 800924e:	461a      	mov	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8009256:	88fb      	ldrh	r3, [r7, #6]
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2201      	movs	r2, #1
 800925c:	f240 6101 	movw	r1, #1537	@ 0x601
 8009260:	4618      	mov	r0, r3
 8009262:	f000 f9ab 	bl	80095bc <CODEC_IO_Write>
 8009266:	4603      	mov	r3, r0
 8009268:	461a      	mov	r2, r3
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	4413      	add	r3, r2
 800926e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8009270:	88fb      	ldrh	r3, [r7, #6]
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2201      	movs	r2, #1
 8009276:	f240 6102 	movw	r1, #1538	@ 0x602
 800927a:	4618      	mov	r0, r3
 800927c:	f000 f99e 	bl	80095bc <CODEC_IO_Write>
 8009280:	4603      	mov	r3, r0
 8009282:	461a      	mov	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800928a:	88fb      	ldrh	r3, [r7, #6]
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2200      	movs	r2, #0
 8009290:	f240 6104 	movw	r1, #1540	@ 0x604
 8009294:	4618      	mov	r0, r3
 8009296:	f000 f991 	bl	80095bc <CODEC_IO_Write>
 800929a:	4603      	mov	r3, r0
 800929c:	461a      	mov	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4413      	add	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80092a4:	88fb      	ldrh	r3, [r7, #6]
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2200      	movs	r2, #0
 80092aa:	f240 6105 	movw	r1, #1541	@ 0x605
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 f984 	bl	80095bc <CODEC_IO_Write>
 80092b4:	4603      	mov	r3, r0
 80092b6:	461a      	mov	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	4413      	add	r3, r2
 80092bc:	60fb      	str	r3, [r7, #12]
    break;
 80092be:	e083      	b.n	80093c8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80092c0:	88fb      	ldrh	r3, [r7, #6]
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80092c8:	2105      	movs	r1, #5
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 f976 	bl	80095bc <CODEC_IO_Write>
 80092d0:	4603      	mov	r3, r0
 80092d2:	461a      	mov	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4413      	add	r3, r2
 80092d8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80092da:	88fb      	ldrh	r3, [r7, #6]
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2201      	movs	r2, #1
 80092e0:	f240 6101 	movw	r1, #1537	@ 0x601
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 f969 	bl	80095bc <CODEC_IO_Write>
 80092ea:	4603      	mov	r3, r0
 80092ec:	461a      	mov	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4413      	add	r3, r2
 80092f2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80092f4:	88fb      	ldrh	r3, [r7, #6]
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2201      	movs	r2, #1
 80092fa:	f240 6102 	movw	r1, #1538	@ 0x602
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 f95c 	bl	80095bc <CODEC_IO_Write>
 8009304:	4603      	mov	r3, r0
 8009306:	461a      	mov	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4413      	add	r3, r2
 800930c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800930e:	88fb      	ldrh	r3, [r7, #6]
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2202      	movs	r2, #2
 8009314:	f240 6104 	movw	r1, #1540	@ 0x604
 8009318:	4618      	mov	r0, r3
 800931a:	f000 f94f 	bl	80095bc <CODEC_IO_Write>
 800931e:	4603      	mov	r3, r0
 8009320:	461a      	mov	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	4413      	add	r3, r2
 8009326:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8009328:	88fb      	ldrh	r3, [r7, #6]
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2202      	movs	r2, #2
 800932e:	f240 6105 	movw	r1, #1541	@ 0x605
 8009332:	4618      	mov	r0, r3
 8009334:	f000 f942 	bl	80095bc <CODEC_IO_Write>
 8009338:	4603      	mov	r3, r0
 800933a:	461a      	mov	r2, r3
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	4413      	add	r3, r2
 8009340:	60fb      	str	r3, [r7, #12]
    break;
 8009342:	e041      	b.n	80093c8 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8009344:	88fb      	ldrh	r3, [r7, #6]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f240 3203 	movw	r2, #771	@ 0x303
 800934c:	2105      	movs	r1, #5
 800934e:	4618      	mov	r0, r3
 8009350:	f000 f934 	bl	80095bc <CODEC_IO_Write>
 8009354:	4603      	mov	r3, r0
 8009356:	461a      	mov	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800935e:	88fb      	ldrh	r3, [r7, #6]
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2201      	movs	r2, #1
 8009364:	f240 6101 	movw	r1, #1537	@ 0x601
 8009368:	4618      	mov	r0, r3
 800936a:	f000 f927 	bl	80095bc <CODEC_IO_Write>
 800936e:	4603      	mov	r3, r0
 8009370:	461a      	mov	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4413      	add	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8009378:	88fb      	ldrh	r3, [r7, #6]
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2201      	movs	r2, #1
 800937e:	f240 6102 	movw	r1, #1538	@ 0x602
 8009382:	4618      	mov	r0, r3
 8009384:	f000 f91a 	bl	80095bc <CODEC_IO_Write>
 8009388:	4603      	mov	r3, r0
 800938a:	461a      	mov	r2, r3
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4413      	add	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8009392:	88fb      	ldrh	r3, [r7, #6]
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2200      	movs	r2, #0
 8009398:	f240 6104 	movw	r1, #1540	@ 0x604
 800939c:	4618      	mov	r0, r3
 800939e:	f000 f90d 	bl	80095bc <CODEC_IO_Write>
 80093a2:	4603      	mov	r3, r0
 80093a4:	461a      	mov	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	4413      	add	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80093ac:	88fb      	ldrh	r3, [r7, #6]
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2200      	movs	r2, #0
 80093b2:	f240 6105 	movw	r1, #1541	@ 0x605
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 f900 	bl	80095bc <CODEC_IO_Write>
 80093bc:	4603      	mov	r3, r0
 80093be:	461a      	mov	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4413      	add	r3, r2
 80093c4:	60fb      	str	r3, [r7, #12]
    break;    
 80093c6:	bf00      	nop
  }  
  return counter;
 80093c8:	68fb      	ldr	r3, [r7, #12]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	4a64      	ldr	r2, [pc, #400]	@ (8009578 <wm8994_SetFrequency+0x1a4>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d079      	beq.n	80094e0 <wm8994_SetFrequency+0x10c>
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	4a62      	ldr	r2, [pc, #392]	@ (8009578 <wm8994_SetFrequency+0x1a4>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	f200 80ad 	bhi.w	8009550 <wm8994_SetFrequency+0x17c>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d061      	beq.n	80094c4 <wm8994_SetFrequency+0xf0>
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8009406:	4293      	cmp	r3, r2
 8009408:	f200 80a2 	bhi.w	8009550 <wm8994_SetFrequency+0x17c>
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8009412:	4293      	cmp	r3, r2
 8009414:	f000 808e 	beq.w	8009534 <wm8994_SetFrequency+0x160>
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800941e:	4293      	cmp	r3, r2
 8009420:	f200 8096 	bhi.w	8009550 <wm8994_SetFrequency+0x17c>
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800942a:	d03d      	beq.n	80094a8 <wm8994_SetFrequency+0xd4>
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8009432:	f200 808d 	bhi.w	8009550 <wm8994_SetFrequency+0x17c>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	f245 6222 	movw	r2, #22050	@ 0x5622
 800943c:	4293      	cmp	r3, r2
 800943e:	d06b      	beq.n	8009518 <wm8994_SetFrequency+0x144>
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	f245 6222 	movw	r2, #22050	@ 0x5622
 8009446:	4293      	cmp	r3, r2
 8009448:	f200 8082 	bhi.w	8009550 <wm8994_SetFrequency+0x17c>
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8009452:	d01b      	beq.n	800948c <wm8994_SetFrequency+0xb8>
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800945a:	d879      	bhi.n	8009550 <wm8994_SetFrequency+0x17c>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8009462:	d005      	beq.n	8009470 <wm8994_SetFrequency+0x9c>
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800946a:	4293      	cmp	r3, r2
 800946c:	d046      	beq.n	80094fc <wm8994_SetFrequency+0x128>
 800946e:	e06f      	b.n	8009550 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8009470:	88fb      	ldrh	r3, [r7, #6]
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2203      	movs	r2, #3
 8009476:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800947a:	4618      	mov	r0, r3
 800947c:	f000 f89e 	bl	80095bc <CODEC_IO_Write>
 8009480:	4603      	mov	r3, r0
 8009482:	461a      	mov	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4413      	add	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
    break;
 800948a:	e06f      	b.n	800956c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800948c:	88fb      	ldrh	r3, [r7, #6]
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2233      	movs	r2, #51	@ 0x33
 8009492:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f890 	bl	80095bc <CODEC_IO_Write>
 800949c:	4603      	mov	r3, r0
 800949e:	461a      	mov	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4413      	add	r3, r2
 80094a4:	60fb      	str	r3, [r7, #12]
    break;
 80094a6:	e061      	b.n	800956c <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80094a8:	88fb      	ldrh	r3, [r7, #6]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2263      	movs	r2, #99	@ 0x63
 80094ae:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 f882 	bl	80095bc <CODEC_IO_Write>
 80094b8:	4603      	mov	r3, r0
 80094ba:	461a      	mov	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	4413      	add	r3, r2
 80094c0:	60fb      	str	r3, [r7, #12]
    break;
 80094c2:	e053      	b.n	800956c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80094c4:	88fb      	ldrh	r3, [r7, #6]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2283      	movs	r2, #131	@ 0x83
 80094ca:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 f874 	bl	80095bc <CODEC_IO_Write>
 80094d4:	4603      	mov	r3, r0
 80094d6:	461a      	mov	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	4413      	add	r3, r2
 80094dc:	60fb      	str	r3, [r7, #12]
    break;
 80094de:	e045      	b.n	800956c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80094e0:	88fb      	ldrh	r3, [r7, #6]
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	22a3      	movs	r2, #163	@ 0xa3
 80094e6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 f866 	bl	80095bc <CODEC_IO_Write>
 80094f0:	4603      	mov	r3, r0
 80094f2:	461a      	mov	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4413      	add	r3, r2
 80094f8:	60fb      	str	r3, [r7, #12]
    break;
 80094fa:	e037      	b.n	800956c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80094fc:	88fb      	ldrh	r3, [r7, #6]
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2213      	movs	r2, #19
 8009502:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009506:	4618      	mov	r0, r3
 8009508:	f000 f858 	bl	80095bc <CODEC_IO_Write>
 800950c:	4603      	mov	r3, r0
 800950e:	461a      	mov	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4413      	add	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]
    break;
 8009516:	e029      	b.n	800956c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8009518:	88fb      	ldrh	r3, [r7, #6]
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2243      	movs	r2, #67	@ 0x43
 800951e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009522:	4618      	mov	r0, r3
 8009524:	f000 f84a 	bl	80095bc <CODEC_IO_Write>
 8009528:	4603      	mov	r3, r0
 800952a:	461a      	mov	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4413      	add	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]
    break;
 8009532:	e01b      	b.n	800956c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8009534:	88fb      	ldrh	r3, [r7, #6]
 8009536:	b2db      	uxtb	r3, r3
 8009538:	2273      	movs	r2, #115	@ 0x73
 800953a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800953e:	4618      	mov	r0, r3
 8009540:	f000 f83c 	bl	80095bc <CODEC_IO_Write>
 8009544:	4603      	mov	r3, r0
 8009546:	461a      	mov	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	4413      	add	r3, r2
 800954c:	60fb      	str	r3, [r7, #12]
    break; 
 800954e:	e00d      	b.n	800956c <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8009550:	88fb      	ldrh	r3, [r7, #6]
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2283      	movs	r2, #131	@ 0x83
 8009556:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800955a:	4618      	mov	r0, r3
 800955c:	f000 f82e 	bl	80095bc <CODEC_IO_Write>
 8009560:	4603      	mov	r3, r0
 8009562:	461a      	mov	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	4413      	add	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]
    break; 
 800956a:	bf00      	nop
  }
  return counter;
 800956c:	68fb      	ldr	r3, [r7, #12]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	00017700 	.word	0x00017700

0800957c <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	4603      	mov	r3, r0
 8009584:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800958a:	88fb      	ldrh	r3, [r7, #6]
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2200      	movs	r2, #0
 8009590:	2100      	movs	r1, #0
 8009592:	4618      	mov	r0, r3
 8009594:	f000 f812 	bl	80095bc <CODEC_IO_Write>
 8009598:	4603      	mov	r3, r0
 800959a:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 800959c:	4b05      	ldr	r3, [pc, #20]	@ (80095b4 <wm8994_Reset+0x38>)
 800959e:	2200      	movs	r2, #0
 80095a0:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80095a2:	4b05      	ldr	r3, [pc, #20]	@ (80095b8 <wm8994_Reset+0x3c>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	601a      	str	r2, [r3, #0]

  return counter;
 80095a8:	68fb      	ldr	r3, [r7, #12]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20000894 	.word	0x20000894
 80095b8:	20000898 	.word	0x20000898

080095bc <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	71fb      	strb	r3, [r7, #7]
 80095c6:	460b      	mov	r3, r1
 80095c8:	80bb      	strh	r3, [r7, #4]
 80095ca:	4613      	mov	r3, r2
 80095cc:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80095d2:	887a      	ldrh	r2, [r7, #2]
 80095d4:	88b9      	ldrh	r1, [r7, #4]
 80095d6:	79fb      	ldrb	r3, [r7, #7]
 80095d8:	4618      	mov	r0, r3
 80095da:	f7f8 f9bb 	bl	8001954 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	b2db      	uxtb	r3, r3
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <memset>:
 80095ea:	4402      	add	r2, r0
 80095ec:	4603      	mov	r3, r0
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d100      	bne.n	80095f4 <memset+0xa>
 80095f2:	4770      	bx	lr
 80095f4:	f803 1b01 	strb.w	r1, [r3], #1
 80095f8:	e7f9      	b.n	80095ee <memset+0x4>
	...

080095fc <__libc_init_array>:
 80095fc:	b570      	push	{r4, r5, r6, lr}
 80095fe:	4d0d      	ldr	r5, [pc, #52]	@ (8009634 <__libc_init_array+0x38>)
 8009600:	4c0d      	ldr	r4, [pc, #52]	@ (8009638 <__libc_init_array+0x3c>)
 8009602:	1b64      	subs	r4, r4, r5
 8009604:	10a4      	asrs	r4, r4, #2
 8009606:	2600      	movs	r6, #0
 8009608:	42a6      	cmp	r6, r4
 800960a:	d109      	bne.n	8009620 <__libc_init_array+0x24>
 800960c:	4d0b      	ldr	r5, [pc, #44]	@ (800963c <__libc_init_array+0x40>)
 800960e:	4c0c      	ldr	r4, [pc, #48]	@ (8009640 <__libc_init_array+0x44>)
 8009610:	f000 f818 	bl	8009644 <_init>
 8009614:	1b64      	subs	r4, r4, r5
 8009616:	10a4      	asrs	r4, r4, #2
 8009618:	2600      	movs	r6, #0
 800961a:	42a6      	cmp	r6, r4
 800961c:	d105      	bne.n	800962a <__libc_init_array+0x2e>
 800961e:	bd70      	pop	{r4, r5, r6, pc}
 8009620:	f855 3b04 	ldr.w	r3, [r5], #4
 8009624:	4798      	blx	r3
 8009626:	3601      	adds	r6, #1
 8009628:	e7ee      	b.n	8009608 <__libc_init_array+0xc>
 800962a:	f855 3b04 	ldr.w	r3, [r5], #4
 800962e:	4798      	blx	r3
 8009630:	3601      	adds	r6, #1
 8009632:	e7f2      	b.n	800961a <__libc_init_array+0x1e>
 8009634:	0800b144 	.word	0x0800b144
 8009638:	0800b144 	.word	0x0800b144
 800963c:	0800b144 	.word	0x0800b144
 8009640:	0800b148 	.word	0x0800b148

08009644 <_init>:
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	bf00      	nop
 8009648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964a:	bc08      	pop	{r3}
 800964c:	469e      	mov	lr, r3
 800964e:	4770      	bx	lr

08009650 <_fini>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	bf00      	nop
 8009654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009656:	bc08      	pop	{r3}
 8009658:	469e      	mov	lr, r3
 800965a:	4770      	bx	lr
