
Guitar-Multi-Effects-Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000695c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006b24  08006b24  00007b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b3c  08006b3c  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006b3c  08006b3c  00007b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b44  08006b44  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b44  08006b44  00007b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b48  08006b48  00007b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006b4c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  20000010  08006b5c  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  08006b5c  000086e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125be  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce2  00000000  00000000  0001a5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  0001d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9d  00000000  00000000  0001e350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274f6  00000000  00000000  0001efed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014532  00000000  00000000  000464e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6445  00000000  00000000  0005aa15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150e5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004350  00000000  00000000  00150ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001551f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006b0c 	.word	0x08006b0c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08006b0c 	.word	0x08006b0c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <Audio_Init>:
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size);
 */


void Audio_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
/*
 * sai2 a -- receive
sai2 b -- transmit
 */

	wm8994_Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_INPUT_LINE_1 || OUTPUT_DEVICE_HEADPHONE, DEFAULT_VOL_70_PERCENT, AUDIO_FREQUENCY_48K);
 80004fc:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8000500:	22b3      	movs	r2, #179	@ 0xb3
 8000502:	2101      	movs	r1, #1
 8000504:	2034      	movs	r0, #52	@ 0x34
 8000506:	f001 fb37 	bl	8001b78 <wm8994_Init>


}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <processData>:

	dataReadyFlag = 1;

}

void processData(){ // fn gets called whenever dataReadyFlag = 1
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0

	static float leftIn, leftOut;
	static float rightIn, rightOut;

	for (uint8_t n = 0; n < (BUFFER_SIZE/2) - 1; n+=2){
 8000516:	2300      	movs	r3, #0
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	e0ae      	b.n	800067a <processData+0x16a>
		/*
		 * Left Channel
		 */

		/* Get ADC Input and convert to float */
		leftIn = INT16_TO_FLOAT(inBufPtr[n]);
 800051c:	4b5c      	ldr	r3, [pc, #368]	@ (8000690 <processData+0x180>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	4413      	add	r3, r2
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	b21b      	sxth	r3, r3
 800052a:	ee07 3a90 	vmov	s15, r3
 800052e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000532:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8000694 <processData+0x184>
 8000536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800053a:	4b57      	ldr	r3, [pc, #348]	@ (8000698 <processData+0x188>)
 800053c:	edc3 7a00 	vstr	s15, [r3]
		if (leftIn > 1.0f){
 8000540:	4b55      	ldr	r3, [pc, #340]	@ (8000698 <processData+0x188>)
 8000542:	edd3 7a00 	vldr	s15, [r3]
 8000546:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800054a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800054e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000552:	dd09      	ble.n	8000568 <processData+0x58>
			leftIn -= 2.0f;
 8000554:	4b50      	ldr	r3, [pc, #320]	@ (8000698 <processData+0x188>)
 8000556:	edd3 7a00 	vldr	s15, [r3]
 800055a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800055e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000562:	4b4d      	ldr	r3, [pc, #308]	@ (8000698 <processData+0x188>)
 8000564:	edc3 7a00 	vstr	s15, [r3]
		}

		/* Compute new output sample */

		leftOut = leftIn;
 8000568:	4b4b      	ldr	r3, [pc, #300]	@ (8000698 <processData+0x188>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a4b      	ldr	r2, [pc, #300]	@ (800069c <processData+0x18c>)
 800056e:	6013      	str	r3, [r2, #0]

		/* Convert back to signed int and set DAC output */

		outBufPtr[n] = (int16_t) (FLOAT_TO_INT16(leftOut));
 8000570:	4b4a      	ldr	r3, [pc, #296]	@ (800069c <processData+0x18c>)
 8000572:	edd3 7a00 	vldr	s15, [r3]
 8000576:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800057a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800057e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000582:	db02      	blt.n	800058a <processData+0x7a>
 8000584:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000588:	e017      	b.n	80005ba <processData+0xaa>
 800058a:	4b44      	ldr	r3, [pc, #272]	@ (800069c <processData+0x18c>)
 800058c:	edd3 7a00 	vldr	s15, [r3]
 8000590:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059c:	d801      	bhi.n	80005a2 <processData+0x92>
 800059e:	4b40      	ldr	r3, [pc, #256]	@ (80006a0 <processData+0x190>)
 80005a0:	e00b      	b.n	80005ba <processData+0xaa>
 80005a2:	4b3e      	ldr	r3, [pc, #248]	@ (800069c <processData+0x18c>)
 80005a4:	edd3 7a00 	vldr	s15, [r3]
 80005a8:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000694 <processData+0x184>
 80005ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005b4:	ee17 3a90 	vmov	r3, s15
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	4a3a      	ldr	r2, [pc, #232]	@ (80006a4 <processData+0x194>)
 80005bc:	6811      	ldr	r1, [r2, #0]
 80005be:	79fa      	ldrb	r2, [r7, #7]
 80005c0:	0052      	lsls	r2, r2, #1
 80005c2:	440a      	add	r2, r1
 80005c4:	8013      	strh	r3, [r2, #0]
		/*
		 * Right Channel
		 */

			/* Get ADC Input and convert to float */
			rightIn = INT16_TO_FLOAT(inBufPtr[n+1]);
 80005c6:	4b32      	ldr	r3, [pc, #200]	@ (8000690 <processData+0x180>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	3301      	adds	r3, #1
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	4413      	add	r3, r2
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	b21b      	sxth	r3, r3
 80005d6:	ee07 3a90 	vmov	s15, r3
 80005da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005de:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8000694 <processData+0x184>
 80005e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005e6:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <processData+0x198>)
 80005e8:	edc3 7a00 	vstr	s15, [r3]
			if (rightIn > 1.0f){
 80005ec:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <processData+0x198>)
 80005ee:	edd3 7a00 	vldr	s15, [r3]
 80005f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80005f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005fe:	dd09      	ble.n	8000614 <processData+0x104>
				rightIn -= 2.0f;
 8000600:	4b29      	ldr	r3, [pc, #164]	@ (80006a8 <processData+0x198>)
 8000602:	edd3 7a00 	vldr	s15, [r3]
 8000606:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800060a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800060e:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <processData+0x198>)
 8000610:	edc3 7a00 	vstr	s15, [r3]
			}

			/* Compute new output sample */

			rightOut = rightIn;
 8000614:	4b24      	ldr	r3, [pc, #144]	@ (80006a8 <processData+0x198>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a24      	ldr	r2, [pc, #144]	@ (80006ac <processData+0x19c>)
 800061a:	6013      	str	r3, [r2, #0]

			/* Convert back to signed int and set DAC output */

			outBufPtr[n+1] = (int16_t) (FLOAT_TO_INT16(rightOut));
 800061c:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <processData+0x19c>)
 800061e:	edd3 7a00 	vldr	s15, [r3]
 8000622:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800062a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062e:	db02      	blt.n	8000636 <processData+0x126>
 8000630:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000634:	e017      	b.n	8000666 <processData+0x156>
 8000636:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <processData+0x19c>)
 8000638:	edd3 7a00 	vldr	s15, [r3]
 800063c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000648:	d801      	bhi.n	800064e <processData+0x13e>
 800064a:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <processData+0x190>)
 800064c:	e00b      	b.n	8000666 <processData+0x156>
 800064e:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <processData+0x19c>)
 8000650:	edd3 7a00 	vldr	s15, [r3]
 8000654:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000694 <processData+0x184>
 8000658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800065c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000660:	ee17 3a90 	vmov	r3, s15
 8000664:	b21b      	sxth	r3, r3
 8000666:	4a0f      	ldr	r2, [pc, #60]	@ (80006a4 <processData+0x194>)
 8000668:	6811      	ldr	r1, [r2, #0]
 800066a:	79fa      	ldrb	r2, [r7, #7]
 800066c:	3201      	adds	r2, #1
 800066e:	0052      	lsls	r2, r2, #1
 8000670:	440a      	add	r2, r1
 8000672:	8013      	strh	r3, [r2, #0]
	for (uint8_t n = 0; n < (BUFFER_SIZE/2) - 1; n+=2){
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	3302      	adds	r3, #2
 8000678:	71fb      	strb	r3, [r7, #7]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2b3a      	cmp	r3, #58	@ 0x3a
 800067e:	f67f af4d 	bls.w	800051c <processData+0xc>



	}

}
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	20000574 	.word	0x20000574
 8000694:	47000000 	.word	0x47000000
 8000698:	2000002c 	.word	0x2000002c
 800069c:	20000030 	.word	0x20000030
 80006a0:	ffff8000 	.word	0xffff8000
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000034 	.word	0x20000034
 80006ac:	20000038 	.word	0x20000038

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f002 fc2f 	bl	8002f18 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f833 	bl	8000724 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006be:	f000 f89f 	bl	8000800 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 fa6f 	bl	8000ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c6:	f000 fa47 	bl	8000b58 <MX_DMA_Init>
  MX_I2C2_Init();
 80006ca:	f000 f8cd 	bl	8000868 <MX_I2C2_Init>
  MX_SAI2_Init();
 80006ce:	f000 f9a1 	bl	8000a14 <MX_SAI2_Init>
  MX_SPI2_Init();
 80006d2:	f000 fa03 	bl	8000adc <MX_SPI2_Init>
  MX_I2S3_Init();
 80006d6:	f000 f971 	bl	80009bc <MX_I2S3_Init>
  MX_I2S1_Init();
 80006da:	f000 f945 	bl	8000968 <MX_I2S1_Init>
  MX_I2C3_Init();
 80006de:	f000 f903 	bl	80008e8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  Audio_Init();
 80006e2:	f7ff ff09 	bl	80004f8 <Audio_Init>

  HAL_StatusTypeDef statustx = HAL_SAI_Transmit_DMA(&hsai_BlockB2, (uint8_t *) dacData, BUFFER_SIZE * 2);
 80006e6:	22f0      	movs	r2, #240	@ 0xf0
 80006e8:	4909      	ldr	r1, [pc, #36]	@ (8000710 <main+0x60>)
 80006ea:	480a      	ldr	r0, [pc, #40]	@ (8000714 <main+0x64>)
 80006ec:	f005 fda0 	bl	8006230 <HAL_SAI_Transmit_DMA>
 80006f0:	4603      	mov	r3, r0
 80006f2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef statusrx = HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t *) adcData, BUFFER_SIZE * 2);
 80006f4:	22f0      	movs	r2, #240	@ 0xf0
 80006f6:	4908      	ldr	r1, [pc, #32]	@ (8000718 <main+0x68>)
 80006f8:	4808      	ldr	r0, [pc, #32]	@ (800071c <main+0x6c>)
 80006fa:	f005 fe49 	bl	8006390 <HAL_SAI_Receive_DMA>
 80006fe:	4603      	mov	r3, r0
 8000700:	71bb      	strb	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (dataReadyFlag){
 8000702:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <main+0x70>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0fb      	beq.n	8000702 <main+0x52>
		  processData();
 800070a:	f7ff ff01 	bl	8000510 <processData>
	  if (dataReadyFlag){
 800070e:	e7f8      	b.n	8000702 <main+0x52>
 8000710:	20000480 	.word	0x20000480
 8000714:	200001e8 	.word	0x200001e8
 8000718:	20000390 	.word	0x20000390
 800071c:	20000164 	.word	0x20000164
 8000720:	20000570 	.word	0x20000570

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	@ 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	@ 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f006 f9be 	bl	8006ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <SystemClock_Config+0xd4>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	4a2a      	ldr	r2, [pc, #168]	@ (80007f8 <SystemClock_Config+0xd4>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	@ 0x40
 8000754:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <SystemClock_Config+0xd4>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <SystemClock_Config+0xd8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a25      	ldr	r2, [pc, #148]	@ (80007fc <SystemClock_Config+0xd8>)
 8000766:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <SystemClock_Config+0xd8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800078a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800078c:	2319      	movs	r3, #25
 800078e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000790:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000794:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	4618      	mov	r0, r3
 80007a4:	f004 fa0c 	bl	8004bc0 <HAL_RCC_OscConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007ae:	f000 fe07 	bl	80013c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b2:	f004 f9b5 	bl	8004b20 <HAL_PWREx_EnableOverDrive>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007bc:	f000 fe00 	bl	80013c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2106      	movs	r1, #6
 80007de:	4618      	mov	r0, r3
 80007e0:	f004 fc92 	bl	8005108 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007ea:	f000 fde9 	bl	80013c0 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	@ 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b0a2      	sub	sp, #136	@ 0x88
 8000804:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2284      	movs	r2, #132	@ 0x84
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f006 f951 	bl	8006ab4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2S;
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <PeriphCommonClock_Config+0x64>)
 8000814:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000816:	23c0      	movs	r3, #192	@ 0xc0
 8000818:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800081e:	2302      	movs	r3, #2
 8000820:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000826:	23c0      	movs	r3, #192	@ 0xc0
 8000828:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800083e:	2300      	movs	r3, #0
 8000840:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000842:	2300      	movs	r3, #0
 8000844:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000846:	2300      	movs	r3, #0
 8000848:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4618      	mov	r0, r3
 800084e:	f004 fe0d 	bl	800546c <HAL_RCCEx_PeriphCLKConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000858:	f000 fdb2 	bl	80013c0 <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	3788      	adds	r7, #136	@ 0x88
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	00100001 	.word	0x00100001

08000868 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800086c:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <MX_I2C2_Init+0x74>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	@ (80008e0 <MX_I2C2_Init+0x78>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 8000872:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <MX_I2C2_Init+0x74>)
 8000874:	4a1b      	ldr	r2, [pc, #108]	@ (80008e4 <MX_I2C2_Init+0x7c>)
 8000876:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000878:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <MX_I2C2_Init+0x74>)
 8000880:	2201      	movs	r2, #1
 8000882:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_I2C2_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_I2C2_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_I2C2_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_I2C2_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a2:	480e      	ldr	r0, [pc, #56]	@ (80008dc <MX_I2C2_Init+0x74>)
 80008a4:	f003 fb16 	bl	8003ed4 <HAL_I2C_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ae:	f000 fd87 	bl	80013c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4809      	ldr	r0, [pc, #36]	@ (80008dc <MX_I2C2_Init+0x74>)
 80008b6:	f003 ff69 	bl	800478c <HAL_I2CEx_ConfigAnalogFilter>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008c0:	f000 fd7e 	bl	80013c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008c4:	2100      	movs	r1, #0
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_I2C2_Init+0x74>)
 80008c8:	f003 ffab 	bl	8004822 <HAL_I2CEx_ConfigDigitalFilter>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 fd75 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000003c 	.word	0x2000003c
 80008e0:	40005800 	.word	0x40005800
 80008e4:	00c0eaff 	.word	0x00c0eaff

080008e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <MX_I2C3_Init+0x74>)
 80008ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000960 <MX_I2C3_Init+0x78>)
 80008f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <MX_I2C3_Init+0x74>)
 80008f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000964 <MX_I2C3_Init+0x7c>)
 80008f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80008f8:	4b18      	ldr	r3, [pc, #96]	@ (800095c <MX_I2C3_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fe:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_I2C3_Init+0x74>)
 8000900:	2201      	movs	r2, #1
 8000902:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <MX_I2C3_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_I2C3_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MX_I2C3_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_I2C3_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_I2C3_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000922:	480e      	ldr	r0, [pc, #56]	@ (800095c <MX_I2C3_Init+0x74>)
 8000924:	f003 fad6 	bl	8003ed4 <HAL_I2C_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800092e:	f000 fd47 	bl	80013c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	4809      	ldr	r0, [pc, #36]	@ (800095c <MX_I2C3_Init+0x74>)
 8000936:	f003 ff29 	bl	800478c <HAL_I2CEx_ConfigAnalogFilter>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000940:	f000 fd3e 	bl	80013c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_I2C3_Init+0x74>)
 8000948:	f003 ff6b 	bl	8004822 <HAL_I2CEx_ConfigDigitalFilter>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000952:	f000 fd35 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000090 	.word	0x20000090
 8000960:	40005c00 	.word	0x40005c00
 8000964:	00c0eaff 	.word	0x00c0eaff

08000968 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_I2S1_Init+0x4c>)
 800096e:	4a12      	ldr	r2, [pc, #72]	@ (80009b8 <MX_I2S1_Init+0x50>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <MX_I2S1_Init+0x4c>)
 8000974:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000978:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_I2S1_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000980:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <MX_I2S1_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <MX_I2S1_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_I2S1_Init+0x4c>)
 800098e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000992:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000994:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <MX_I2S1_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_I2S1_Init+0x4c>)
 800099c:	2202      	movs	r2, #2
 800099e:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <MX_I2S1_Init+0x4c>)
 80009a2:	f003 ff8b 	bl	80048bc <HAL_I2S_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 80009ac:	f000 fd08 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200000e4 	.word	0x200000e4
 80009b8:	40013000 	.word	0x40013000

080009bc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_I2S3_Init+0x50>)
 80009c2:	4a13      	ldr	r2, [pc, #76]	@ (8000a10 <MX_I2S3_Init+0x54>)
 80009c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_I2S3_Init+0x50>)
 80009c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_I2S3_Init+0x50>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <MX_I2S3_Init+0x50>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_I2S3_Init+0x50>)
 80009dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <MX_I2S3_Init+0x50>)
 80009e4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80009e8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_I2S3_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_I2S3_Init+0x50>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_I2S3_Init+0x50>)
 80009f8:	f003 ff60 	bl	80048bc <HAL_I2S_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2S3_Init+0x4a>
  {
    Error_Handler();
 8000a02:	f000 fcdd 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000124 	.word	0x20000124
 8000a10:	40003c00 	.word	0x40003c00

08000a14 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000a18:	4b2c      	ldr	r3, [pc, #176]	@ (8000acc <MX_SAI2_Init+0xb8>)
 8000a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad0 <MX_SAI2_Init+0xbc>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
 8000a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000acc <MX_SAI2_Init+0xb8>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000a24:	4b29      	ldr	r3, [pc, #164]	@ (8000acc <MX_SAI2_Init+0xb8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000a2a:	4b28      	ldr	r3, [pc, #160]	@ (8000acc <MX_SAI2_Init+0xb8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000a30:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <MX_SAI2_Init+0xb8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a36:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <MX_SAI2_Init+0xb8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000a3c:	4b23      	ldr	r3, [pc, #140]	@ (8000acc <MX_SAI2_Init+0xb8>)
 8000a3e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000a42:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a44:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <MX_SAI2_Init+0xb8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a4a:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <MX_SAI2_Init+0xb8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a50:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <MX_SAI2_Init+0xb8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000a56:	2302      	movs	r3, #2
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	481b      	ldr	r0, [pc, #108]	@ (8000acc <MX_SAI2_Init+0xb8>)
 8000a5e:	f005 fa35 	bl	8005ecc <HAL_SAI_InitProtocol>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_SAI2_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 fcaa 	bl	80013c0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000a6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <MX_SAI2_Init+0xc0>)
 8000a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ad8 <MX_SAI2_Init+0xc4>)
 8000a70:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000a72:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <MX_SAI2_Init+0xc0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000a78:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <MX_SAI2_Init+0xc0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <MX_SAI2_Init+0xc0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000a84:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <MX_SAI2_Init+0xc0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <MX_SAI2_Init+0xc0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000a90:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <MX_SAI2_Init+0xc0>)
 8000a92:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000a96:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_SAI2_Init+0xc0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad4 <MX_SAI2_Init+0xc0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_SAI2_Init+0xc0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <MX_SAI2_Init+0xc0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4807      	ldr	r0, [pc, #28]	@ (8000ad4 <MX_SAI2_Init+0xc0>)
 8000ab8:	f005 fa08 	bl	8005ecc <HAL_SAI_InitProtocol>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_SAI2_Init+0xb2>
  {
    Error_Handler();
 8000ac2:	f000 fc7d 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000164 	.word	0x20000164
 8000ad0:	40015c04 	.word	0x40015c04
 8000ad4:	200001e8 	.word	0x200001e8
 8000ad8:	40015c24 	.word	0x40015c24

08000adc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b54 <MX_SPI2_Init+0x78>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000ae8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aee:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000af6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000afa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afc:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b0e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000b36:	2208      	movs	r2, #8
 8000b38:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_SPI2_Init+0x74>)
 8000b3c:	f005 ff0f 	bl	800695e <HAL_SPI_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b46:	f000 fc3b 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2000032c 	.word	0x2000032c
 8000b54:	40003800 	.word	0x40003800

08000b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <MX_DMA_Init+0x48>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba0 <MX_DMA_Init+0x48>)
 8000b64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <MX_DMA_Init+0x48>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	203c      	movs	r0, #60	@ 0x3c
 8000b7c:	f002 fb29 	bl	80031d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000b80:	203c      	movs	r0, #60	@ 0x3c
 8000b82:	f002 fb42 	bl	800320a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2045      	movs	r0, #69	@ 0x45
 8000b8c:	f002 fb21 	bl	80031d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b90:	2045      	movs	r0, #69	@ 0x45
 8000b92:	f002 fb3a 	bl	800320a <HAL_NVIC_EnableIRQ>

}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b090      	sub	sp, #64	@ 0x40
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	4bad      	ldr	r3, [pc, #692]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4aac      	ldr	r2, [pc, #688]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000bc0:	f043 0310 	orr.w	r3, r3, #16
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4baa      	ldr	r3, [pc, #680]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd2:	4ba7      	ldr	r3, [pc, #668]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4aa6      	ldr	r2, [pc, #664]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4ba4      	ldr	r3, [pc, #656]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4ba1      	ldr	r3, [pc, #644]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4aa0      	ldr	r2, [pc, #640]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b9e      	ldr	r3, [pc, #632]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	623b      	str	r3, [r7, #32]
 8000c00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	4b9b      	ldr	r3, [pc, #620]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a9a      	ldr	r2, [pc, #616]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b98      	ldr	r3, [pc, #608]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	61fb      	str	r3, [r7, #28]
 8000c18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	4b95      	ldr	r3, [pc, #596]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a94      	ldr	r2, [pc, #592]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b92      	ldr	r3, [pc, #584]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	61bb      	str	r3, [r7, #24]
 8000c30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b8f      	ldr	r3, [pc, #572]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a8e      	ldr	r2, [pc, #568]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b8c      	ldr	r3, [pc, #560]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c4a:	4b89      	ldr	r3, [pc, #548]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a88      	ldr	r2, [pc, #544]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b86      	ldr	r3, [pc, #536]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c62:	4b83      	ldr	r3, [pc, #524]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a82      	ldr	r2, [pc, #520]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b80      	ldr	r3, [pc, #512]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c7a:	4b7d      	ldr	r3, [pc, #500]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a7c      	ldr	r2, [pc, #496]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b7a      	ldr	r3, [pc, #488]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c92:	4b77      	ldr	r3, [pc, #476]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a76      	ldr	r2, [pc, #472]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000c98:	f043 0320 	orr.w	r3, r3, #32
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b74      	ldr	r3, [pc, #464]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0320 	and.w	r3, r3, #32
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000caa:	4b71      	ldr	r3, [pc, #452]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a70      	ldr	r2, [pc, #448]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8000e70 <MX_GPIO_Init+0x2cc>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	486b      	ldr	r0, [pc, #428]	@ (8000e74 <MX_GPIO_Init+0x2d0>)
 8000cc8:	f003 f8ea 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000cd2:	4869      	ldr	r0, [pc, #420]	@ (8000e78 <MX_GPIO_Init+0x2d4>)
 8000cd4:	f003 f8e4 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2108      	movs	r1, #8
 8000cdc:	4867      	ldr	r0, [pc, #412]	@ (8000e7c <MX_GPIO_Init+0x2d8>)
 8000cde:	f003 f8df 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ce8:	4865      	ldr	r0, [pc, #404]	@ (8000e80 <MX_GPIO_Init+0x2dc>)
 8000cea:	f003 f8d9 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	21c8      	movs	r1, #200	@ 0xc8
 8000cf2:	4864      	ldr	r0, [pc, #400]	@ (8000e84 <MX_GPIO_Init+0x2e0>)
 8000cf4:	f003 f8d4 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d08:	230e      	movs	r3, #14
 8000d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d10:	4619      	mov	r1, r3
 8000d12:	485d      	ldr	r0, [pc, #372]	@ (8000e88 <MX_GPIO_Init+0x2e4>)
 8000d14:	f002 fe0c 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4857      	ldr	r0, [pc, #348]	@ (8000e88 <MX_GPIO_Init+0x2e4>)
 8000d2c:	f002 fe00 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000d30:	2304      	movs	r3, #4
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d40:	2309      	movs	r3, #9
 8000d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d48:	4619      	mov	r1, r3
 8000d4a:	484f      	ldr	r0, [pc, #316]	@ (8000e88 <MX_GPIO_Init+0x2e4>)
 8000d4c:	f002 fdf0 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000d50:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d62:	230b      	movs	r3, #11
 8000d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4845      	ldr	r0, [pc, #276]	@ (8000e84 <MX_GPIO_Init+0x2e0>)
 8000d6e:	f002 fddf 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000d72:	f64d 7383 	movw	r3, #57219	@ 0xdf83
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d84:	230c      	movs	r3, #12
 8000d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	483e      	ldr	r0, [pc, #248]	@ (8000e88 <MX_GPIO_Init+0x2e4>)
 8000d90:	f002 fdce 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000d94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9a:	2312      	movs	r3, #18
 8000d9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da6:	2304      	movs	r3, #4
 8000da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dae:	4619      	mov	r1, r3
 8000db0:	4836      	ldr	r0, [pc, #216]	@ (8000e8c <MX_GPIO_Init+0x2e8>)
 8000db2:	f002 fdbd 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D3_Pin ULPI_D2_Pin ULPI_D1_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D2_Pin|ULPI_D1_Pin;
 8000db6:	f240 4323 	movw	r3, #1059	@ 0x423
 8000dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dc8:	230a      	movs	r3, #10
 8000dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	482e      	ldr	r0, [pc, #184]	@ (8000e8c <MX_GPIO_Init+0x2e8>)
 8000dd4:	f002 fdac 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000de8:	2307      	movs	r3, #7
 8000dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df0:	4619      	mov	r1, r3
 8000df2:	4826      	ldr	r0, [pc, #152]	@ (8000e8c <MX_GPIO_Init+0x2e8>)
 8000df4:	f002 fd9c 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000df8:	2380      	movs	r3, #128	@ 0x80
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e10:	4619      	mov	r1, r3
 8000e12:	4818      	ldr	r0, [pc, #96]	@ (8000e74 <MX_GPIO_Init+0x2d0>)
 8000e14:	f002 fd8c 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D6_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8000e18:	2320      	movs	r3, #32
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e28:	230d      	movs	r3, #13
 8000e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e30:	4619      	mov	r1, r3
 8000e32:	4815      	ldr	r0, [pc, #84]	@ (8000e88 <MX_GPIO_Init+0x2e4>)
 8000e34:	f002 fd7c 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e38:	2380      	movs	r3, #128	@ 0x80
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e50:	4619      	mov	r1, r3
 8000e52:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <MX_GPIO_Init+0x2e8>)
 8000e54:	f002 fd6c 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000e58:	2340      	movs	r3, #64	@ 0x40
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e68:	230a      	movs	r3, #10
 8000e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e6c:	e010      	b.n	8000e90 <MX_GPIO_Init+0x2ec>
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020c00 	.word	0x40020c00
 8000e78:	40022000 	.word	0x40022000
 8000e7c:	40022800 	.word	0x40022800
 8000e80:	40021c00 	.word	0x40021c00
 8000e84:	40021800 	.word	0x40021800
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40020400 	.word	0x40020400
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e94:	4619      	mov	r1, r3
 8000e96:	48bd      	ldr	r0, [pc, #756]	@ (800118c <MX_GPIO_Init+0x5e8>)
 8000e98:	f002 fd4a 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000e9c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	48b5      	ldr	r0, [pc, #724]	@ (8001190 <MX_GPIO_Init+0x5ec>)
 8000eba:	f002 fd39 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000ebe:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed0:	230e      	movs	r3, #14
 8000ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ed4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed8:	4619      	mov	r1, r3
 8000eda:	48ae      	ldr	r0, [pc, #696]	@ (8001194 <MX_GPIO_Init+0x5f0>)
 8000edc:	f002 fd28 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	48a7      	ldr	r0, [pc, #668]	@ (8001194 <MX_GPIO_Init+0x5f0>)
 8000ef6:	f002 fd1b 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000efa:	2340      	movs	r3, #64	@ 0x40
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000efe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	48a2      	ldr	r0, [pc, #648]	@ (8001198 <MX_GPIO_Init+0x5f4>)
 8000f10:	f002 fd0e 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000f14:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f26:	230c      	movs	r3, #12
 8000f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4899      	ldr	r0, [pc, #612]	@ (8001198 <MX_GPIO_Init+0x5f4>)
 8000f32:	f002 fcfd 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin PC8 */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|GPIO_PIN_8;
 8000f36:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f48:	230c      	movs	r3, #12
 8000f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f50:	4619      	mov	r1, r3
 8000f52:	4892      	ldr	r0, [pc, #584]	@ (800119c <MX_GPIO_Init+0x5f8>)
 8000f54:	f002 fcec 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000f58:	23f7      	movs	r3, #247	@ 0xf7
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f68:	230e      	movs	r3, #14
 8000f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	488b      	ldr	r0, [pc, #556]	@ (80011a0 <MX_GPIO_Init+0x5fc>)
 8000f74:	f002 fcdc 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000f78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f8a:	2309      	movs	r3, #9
 8000f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f92:	4619      	mov	r1, r3
 8000f94:	487e      	ldr	r0, [pc, #504]	@ (8001190 <MX_GPIO_Init+0x5ec>)
 8000f96:	f002 fccb 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f9a:	2320      	movs	r3, #32
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4879      	ldr	r0, [pc, #484]	@ (8001198 <MX_GPIO_Init+0x5f4>)
 8000fb2:	f002 fcbd 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000fb6:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4875      	ldr	r0, [pc, #468]	@ (80011a4 <MX_GPIO_Init+0x600>)
 8000fd0:	f002 fcae 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000fd4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fee:	4619      	mov	r1, r3
 8000ff0:	486d      	ldr	r0, [pc, #436]	@ (80011a8 <MX_GPIO_Init+0x604>)
 8000ff2:	f002 fc9d 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000ff6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001008:	4619      	mov	r1, r3
 800100a:	4864      	ldr	r0, [pc, #400]	@ (800119c <MX_GPIO_Init+0x5f8>)
 800100c:	f002 fc90 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001010:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001022:	230e      	movs	r3, #14
 8001024:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001026:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800102a:	4619      	mov	r1, r3
 800102c:	485d      	ldr	r0, [pc, #372]	@ (80011a4 <MX_GPIO_Init+0x600>)
 800102e:	f002 fc7f 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001032:	2308      	movs	r3, #8
 8001034:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001046:	4619      	mov	r1, r3
 8001048:	4855      	ldr	r0, [pc, #340]	@ (80011a0 <MX_GPIO_Init+0x5fc>)
 800104a:	f002 fc71 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800104e:	2310      	movs	r3, #16
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800105e:	4619      	mov	r1, r3
 8001060:	484d      	ldr	r0, [pc, #308]	@ (8001198 <MX_GPIO_Init+0x5f4>)
 8001062:	f002 fc65 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001066:	2304      	movs	r3, #4
 8001068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001076:	230c      	movs	r3, #12
 8001078:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800107e:	4619      	mov	r1, r3
 8001080:	4845      	ldr	r0, [pc, #276]	@ (8001198 <MX_GPIO_Init+0x5f4>)
 8001082:	f002 fc55 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP3_Pin */
  GPIO_InitStruct.Pin = TP3_Pin;
 8001086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TP3_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001098:	4619      	mov	r1, r3
 800109a:	4844      	ldr	r0, [pc, #272]	@ (80011ac <MX_GPIO_Init+0x608>)
 800109c:	f002 fc48 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A1_Pin FMC_A3_Pin FMC_A4_Pin FMC_A5_Pin
                           FMC_A6_Pin FMC_A9_Pin FMC_A7_Pin FMC_A8_Pin
                           FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A1_Pin|FMC_A3_Pin|FMC_A4_Pin|FMC_A5_Pin
 80010a0:	f64f 033a 	movw	r3, #63546	@ 0xf83a
 80010a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_A7_Pin|FMC_A8_Pin
                          |FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010b2:	230c      	movs	r3, #12
 80010b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ba:	4619      	mov	r1, r3
 80010bc:	483c      	ldr	r0, [pc, #240]	@ (80011b0 <MX_GPIO_Init+0x60c>)
 80010be:	f002 fc37 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80010c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d8:	4619      	mov	r1, r3
 80010da:	4834      	ldr	r0, [pc, #208]	@ (80011ac <MX_GPIO_Init+0x608>)
 80010dc:	f002 fc28 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80010e0:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010f2:	230d      	movs	r3, #13
 80010f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010fa:	4619      	mov	r1, r3
 80010fc:	482b      	ldr	r0, [pc, #172]	@ (80011ac <MX_GPIO_Init+0x608>)
 80010fe:	f002 fc17 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001102:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001114:	2307      	movs	r3, #7
 8001116:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800111c:	4619      	mov	r1, r3
 800111e:	4822      	ldr	r0, [pc, #136]	@ (80011a8 <MX_GPIO_Init+0x604>)
 8001120:	f002 fc06 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001124:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001136:	2305      	movs	r3, #5
 8001138:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800113e:	4619      	mov	r1, r3
 8001140:	4816      	ldr	r0, [pc, #88]	@ (800119c <MX_GPIO_Init+0x5f8>)
 8001142:	f002 fbf5 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001146:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001158:	2301      	movs	r3, #1
 800115a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001160:	4619      	mov	r1, r3
 8001162:	4811      	ldr	r0, [pc, #68]	@ (80011a8 <MX_GPIO_Init+0x604>)
 8001164:	f002 fbe4 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001168:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800116c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800116e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001172:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	4809      	ldr	r0, [pc, #36]	@ (80011a4 <MX_GPIO_Init+0x600>)
 8001180:	f002 fbd6 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8001184:	2348      	movs	r3, #72	@ 0x48
 8001186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	e013      	b.n	80011b4 <MX_GPIO_Init+0x610>
 800118c:	40020400 	.word	0x40020400
 8001190:	40021800 	.word	0x40021800
 8001194:	40022400 	.word	0x40022400
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40020800 	.word	0x40020800
 80011a0:	40022800 	.word	0x40022800
 80011a4:	40022000 	.word	0x40022000
 80011a8:	40020000 	.word	0x40020000
 80011ac:	40021c00 	.word	0x40021c00
 80011b0:	40021400 	.word	0x40021400
 80011b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011be:	2305      	movs	r3, #5
 80011c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c6:	4619      	mov	r1, r3
 80011c8:	4876      	ldr	r0, [pc, #472]	@ (80013a4 <MX_GPIO_Init+0x800>)
 80011ca:	f002 fbb1 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80011ce:	2328      	movs	r3, #40	@ 0x28
 80011d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011de:	230c      	movs	r3, #12
 80011e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011e6:	4619      	mov	r1, r3
 80011e8:	486f      	ldr	r0, [pc, #444]	@ (80013a8 <MX_GPIO_Init+0x804>)
 80011ea:	f002 fba1 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80011ee:	23c8      	movs	r3, #200	@ 0xc8
 80011f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001202:	4619      	mov	r1, r3
 8001204:	4869      	ldr	r0, [pc, #420]	@ (80013ac <MX_GPIO_Init+0x808>)
 8001206:	f002 fb93 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A3_Pin;
 800120a:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001210:	2303      	movs	r3, #3
 8001212:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001218:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800121c:	4619      	mov	r1, r3
 800121e:	4864      	ldr	r0, [pc, #400]	@ (80013b0 <MX_GPIO_Init+0x80c>)
 8001220:	f002 fb86 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001224:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001236:	2305      	movs	r3, #5
 8001238:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800123e:	4619      	mov	r1, r3
 8001240:	485c      	ldr	r0, [pc, #368]	@ (80013b4 <MX_GPIO_Init+0x810>)
 8001242:	f002 fb75 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001246:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800124a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001258:	2306      	movs	r3, #6
 800125a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800125c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001260:	4619      	mov	r1, r3
 8001262:	4853      	ldr	r0, [pc, #332]	@ (80013b0 <MX_GPIO_Init+0x80c>)
 8001264:	f002 fb64 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001268:	2305      	movs	r3, #5
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001278:	230a      	movs	r3, #10
 800127a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001280:	4619      	mov	r1, r3
 8001282:	4848      	ldr	r0, [pc, #288]	@ (80013a4 <MX_GPIO_Init+0x800>)
 8001284:	f002 fb54 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin;
 8001288:	2322      	movs	r3, #34	@ 0x22
 800128a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001298:	230b      	movs	r3, #11
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012a0:	4619      	mov	r1, r3
 80012a2:	4840      	ldr	r0, [pc, #256]	@ (80013a4 <MX_GPIO_Init+0x800>)
 80012a4:	f002 fb44 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012a8:	2304      	movs	r3, #4
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012b8:	2309      	movs	r3, #9
 80012ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012c0:	4619      	mov	r1, r3
 80012c2:	483c      	ldr	r0, [pc, #240]	@ (80013b4 <MX_GPIO_Init+0x810>)
 80012c4:	f002 fb34 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80012c8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80012cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012da:	2309      	movs	r3, #9
 80012dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012e2:	4619      	mov	r1, r3
 80012e4:	4834      	ldr	r0, [pc, #208]	@ (80013b8 <MX_GPIO_Init+0x814>)
 80012e6:	f002 fb23 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80012ea:	2304      	movs	r3, #4
 80012ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ee:	2300      	movs	r3, #0
 80012f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012fa:	4619      	mov	r1, r3
 80012fc:	482b      	ldr	r0, [pc, #172]	@ (80013ac <MX_GPIO_Init+0x808>)
 80012fe:	f002 fb17 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_REF_CLK_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin;
 8001302:	2302      	movs	r3, #2
 8001304:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001312:	230b      	movs	r3, #11
 8001314:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(RMII_REF_CLK_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800131a:	4619      	mov	r1, r3
 800131c:	4827      	ldr	r0, [pc, #156]	@ (80013bc <MX_GPIO_Init+0x818>)
 800131e:	f002 fb07 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001322:	2301      	movs	r3, #1
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001326:	2303      	movs	r3, #3
 8001328:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001332:	4619      	mov	r1, r3
 8001334:	4821      	ldr	r0, [pc, #132]	@ (80013bc <MX_GPIO_Init+0x818>)
 8001336:	f002 fafb 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800133a:	2340      	movs	r3, #64	@ 0x40
 800133c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800134a:	230d      	movs	r3, #13
 800134c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001352:	4619      	mov	r1, r3
 8001354:	4819      	ldr	r0, [pc, #100]	@ (80013bc <MX_GPIO_Init+0x818>)
 8001356:	f002 faeb 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800135a:	2340      	movs	r3, #64	@ 0x40
 800135c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800136a:	2309      	movs	r3, #9
 800136c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001372:	4619      	mov	r1, r3
 8001374:	480c      	ldr	r0, [pc, #48]	@ (80013a8 <MX_GPIO_Init+0x804>)
 8001376:	f002 fadb 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_D0_Pin;
 800137a:	2308      	movs	r3, #8
 800137c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800138a:	230a      	movs	r3, #10
 800138c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D0_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001392:	4619      	mov	r1, r3
 8001394:	4809      	ldr	r0, [pc, #36]	@ (80013bc <MX_GPIO_Init+0x818>)
 8001396:	f002 facb 	bl	8003930 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139a:	bf00      	nop
 800139c:	3740      	adds	r7, #64	@ 0x40
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40021c00 	.word	0x40021c00
 80013ac:	40021800 	.word	0x40021800
 80013b0:	40021400 	.word	0x40021400
 80013b4:	40020400 	.word	0x40020400
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40020000 	.word	0x40020000

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <Error_Handler+0x8>

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <HAL_MspInit+0x44>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001410 <HAL_MspInit+0x44>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013de:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <HAL_MspInit+0x44>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <HAL_MspInit+0x44>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	4a08      	ldr	r2, [pc, #32]	@ (8001410 <HAL_MspInit+0x44>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_MspInit+0x44>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800

08001414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0ae      	sub	sp, #184	@ 0xb8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800142c:	f107 0320 	add.w	r3, r7, #32
 8001430:	2284      	movs	r2, #132	@ 0x84
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f005 fb3d 	bl	8006ab4 <memset>
  if(hi2c->Instance==I2C2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a54      	ldr	r2, [pc, #336]	@ (8001590 <HAL_I2C_MspInit+0x17c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d15e      	bne.n	8001502 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001448:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001450:	f107 0320 	add.w	r3, r7, #32
 8001454:	4618      	mov	r0, r3
 8001456:	f004 f809 	bl	800546c <HAL_RCCEx_PeriphCLKConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001460:	f7ff ffae 	bl	80013c0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001464:	4b4b      	ldr	r3, [pc, #300]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001468:	4a4a      	ldr	r2, [pc, #296]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 800146a:	f043 0320 	orr.w	r3, r3, #32
 800146e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001470:	4b48      	ldr	r3, [pc, #288]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001474:	f003 0320 	and.w	r3, r3, #32
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800147c:	4b45      	ldr	r3, [pc, #276]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001480:	4a44      	ldr	r2, [pc, #272]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 8001482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001486:	6313      	str	r3, [r2, #48]	@ 0x30
 8001488:	4b42      	ldr	r3, [pc, #264]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF2     ------> I2C2_SMBA
    PH4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001494:	2305      	movs	r3, #5
 8001496:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149a:	2312      	movs	r3, #18
 800149c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014ac:	2304      	movs	r3, #4
 80014ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014b6:	4619      	mov	r1, r3
 80014b8:	4837      	ldr	r0, [pc, #220]	@ (8001598 <HAL_I2C_MspInit+0x184>)
 80014ba:	f002 fa39 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014be:	2310      	movs	r3, #16
 80014c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c4:	2312      	movs	r3, #18
 80014c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014d6:	2304      	movs	r3, #4
 80014d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014e0:	4619      	mov	r1, r3
 80014e2:	482e      	ldr	r0, [pc, #184]	@ (800159c <HAL_I2C_MspInit+0x188>)
 80014e4:	f002 fa24 	bl	8003930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	4a29      	ldr	r2, [pc, #164]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 80014ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f4:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001500:	e042      	b.n	8001588 <HAL_I2C_MspInit+0x174>
  else if(hi2c->Instance==I2C3)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a26      	ldr	r2, [pc, #152]	@ (80015a0 <HAL_I2C_MspInit+0x18c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d13d      	bne.n	8001588 <HAL_I2C_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800150c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001510:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	4618      	mov	r0, r3
 800151e:	f003 ffa5 	bl	800546c <HAL_RCCEx_PeriphCLKConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001528:	f7ff ff4a 	bl	80013c0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800152c:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001530:	4a18      	ldr	r2, [pc, #96]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 8001532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001536:	6313      	str	r3, [r2, #48]	@ 0x30
 8001538:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001544:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001548:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800154c:	2312      	movs	r3, #18
 800154e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800155e:	2304      	movs	r3, #4
 8001560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001564:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001568:	4619      	mov	r1, r3
 800156a:	480c      	ldr	r0, [pc, #48]	@ (800159c <HAL_I2C_MspInit+0x188>)
 800156c:	f002 f9e0 	bl	8003930 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	4a07      	ldr	r2, [pc, #28]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 8001576:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800157a:	6413      	str	r3, [r2, #64]	@ 0x40
 800157c:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <HAL_I2C_MspInit+0x180>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	bf00      	nop
 800158a:	37b8      	adds	r7, #184	@ 0xb8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40005800 	.word	0x40005800
 8001594:	40023800 	.word	0x40023800
 8001598:	40021400 	.word	0x40021400
 800159c:	40021c00 	.word	0x40021c00
 80015a0:	40005c00 	.word	0x40005c00

080015a4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a16      	ldr	r2, [pc, #88]	@ (800160c <HAL_I2C_MspDeInit+0x68>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d112      	bne.n	80015dc <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80015b6:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <HAL_I2C_MspDeInit+0x6c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	4a15      	ldr	r2, [pc, #84]	@ (8001610 <HAL_I2C_MspDeInit+0x6c>)
 80015bc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80015c0:	6413      	str	r3, [r2, #64]	@ 0x40
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF2     ------> I2C2_SMBA
    PH4     ------> I2C2_SCL
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_0);
 80015c2:	2101      	movs	r1, #1
 80015c4:	4813      	ldr	r0, [pc, #76]	@ (8001614 <HAL_I2C_MspDeInit+0x70>)
 80015c6:	f002 fb5f 	bl	8003c88 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2);
 80015ca:	2104      	movs	r1, #4
 80015cc:	4811      	ldr	r0, [pc, #68]	@ (8001614 <HAL_I2C_MspDeInit+0x70>)
 80015ce:	f002 fb5b 	bl	8003c88 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_4);
 80015d2:	2110      	movs	r1, #16
 80015d4:	4810      	ldr	r0, [pc, #64]	@ (8001618 <HAL_I2C_MspDeInit+0x74>)
 80015d6:	f002 fb57 	bl	8003c88 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80015da:	e013      	b.n	8001604 <HAL_I2C_MspDeInit+0x60>
  else if(hi2c->Instance==I2C3)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0e      	ldr	r2, [pc, #56]	@ (800161c <HAL_I2C_MspDeInit+0x78>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d10e      	bne.n	8001604 <HAL_I2C_MspDeInit+0x60>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_I2C_MspDeInit+0x6c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	4a09      	ldr	r2, [pc, #36]	@ (8001610 <HAL_I2C_MspDeInit+0x6c>)
 80015ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80015f0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80015f2:	2180      	movs	r1, #128	@ 0x80
 80015f4:	4808      	ldr	r0, [pc, #32]	@ (8001618 <HAL_I2C_MspDeInit+0x74>)
 80015f6:	f002 fb47 	bl	8003c88 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80015fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015fe:	4806      	ldr	r0, [pc, #24]	@ (8001618 <HAL_I2C_MspDeInit+0x74>)
 8001600:	f002 fb42 	bl	8003c88 <HAL_GPIO_DeInit>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40005800 	.word	0x40005800
 8001610:	40023800 	.word	0x40023800
 8001614:	40021400 	.word	0x40021400
 8001618:	40021c00 	.word	0x40021c00
 800161c:	40005c00 	.word	0x40005c00

08001620 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08e      	sub	sp, #56	@ 0x38
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a4b      	ldr	r2, [pc, #300]	@ (800176c <HAL_I2S_MspInit+0x14c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d145      	bne.n	80016ce <HAL_I2S_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001642:	4b4b      	ldr	r3, [pc, #300]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	4a4a      	ldr	r2, [pc, #296]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 8001648:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800164c:	6453      	str	r3, [r2, #68]	@ 0x44
 800164e:	4b48      	ldr	r3, [pc, #288]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001656:	623b      	str	r3, [r7, #32]
 8001658:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	4b45      	ldr	r3, [pc, #276]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a44      	ldr	r2, [pc, #272]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b42      	ldr	r3, [pc, #264]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	4b3f      	ldr	r3, [pc, #252]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a3e      	ldr	r2, [pc, #248]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b3c      	ldr	r3, [pc, #240]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	69bb      	ldr	r3, [r7, #24]
    PA15     ------> I2S1_WS
    PC4     ------> I2S1_MCK
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 800168a:	f248 03a0 	movw	r3, #32928	@ 0x80a0
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800169c:	2305      	movs	r3, #5
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a4:	4619      	mov	r1, r3
 80016a6:	4833      	ldr	r0, [pc, #204]	@ (8001774 <HAL_I2S_MspInit+0x154>)
 80016a8:	f002 f942 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016ac:	2310      	movs	r3, #16
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016bc:	2305      	movs	r3, #5
 80016be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c4:	4619      	mov	r1, r3
 80016c6:	482c      	ldr	r0, [pc, #176]	@ (8001778 <HAL_I2S_MspInit+0x158>)
 80016c8:	f002 f932 	bl	8003930 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016cc:	e049      	b.n	8001762 <HAL_I2S_MspInit+0x142>
  else if(hi2s->Instance==SPI3)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a2a      	ldr	r2, [pc, #168]	@ (800177c <HAL_I2S_MspInit+0x15c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d144      	bne.n	8001762 <HAL_I2S_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016d8:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	4a24      	ldr	r2, [pc, #144]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 80016de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e4:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170c:	4a18      	ldr	r2, [pc, #96]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6313      	str	r3, [r2, #48]	@ 0x30
 8001714:	4b16      	ldr	r3, [pc, #88]	@ (8001770 <HAL_I2S_MspInit+0x150>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_7;
 8001720:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001732:	2306      	movs	r3, #6
 8001734:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173a:	4619      	mov	r1, r3
 800173c:	480e      	ldr	r0, [pc, #56]	@ (8001778 <HAL_I2S_MspInit+0x158>)
 800173e:	f002 f8f7 	bl	8003930 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001742:	2310      	movs	r3, #16
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001752:	2306      	movs	r3, #6
 8001754:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	@ (8001774 <HAL_I2S_MspInit+0x154>)
 800175e:	f002 f8e7 	bl	8003930 <HAL_GPIO_Init>
}
 8001762:	bf00      	nop
 8001764:	3738      	adds	r7, #56	@ 0x38
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40013000 	.word	0x40013000
 8001770:	40023800 	.word	0x40023800
 8001774:	40020000 	.word	0x40020000
 8001778:	40020800 	.word	0x40020800
 800177c:	40003c00 	.word	0x40003c00

08001780 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	@ 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a25      	ldr	r2, [pc, #148]	@ (8001834 <HAL_SPI_MspInit+0xb4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d144      	bne.n	800182c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017a2:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <HAL_SPI_MspInit+0xb8>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	4a24      	ldr	r2, [pc, #144]	@ (8001838 <HAL_SPI_MspInit+0xb8>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ae:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <HAL_SPI_MspInit+0xb8>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80017ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <HAL_SPI_MspInit+0xb8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a1e      	ldr	r2, [pc, #120]	@ (8001838 <HAL_SPI_MspInit+0xb8>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <HAL_SPI_MspInit+0xb8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_SPI_MspInit+0xb8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a18      	ldr	r2, [pc, #96]	@ (8001838 <HAL_SPI_MspInit+0xb8>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <HAL_SPI_MspInit+0xb8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80017ea:	2302      	movs	r3, #2
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017fa:	2305      	movs	r3, #5
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	480d      	ldr	r0, [pc, #52]	@ (800183c <HAL_SPI_MspInit+0xbc>)
 8001806:	f002 f893 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800180a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800181c:	2305      	movs	r3, #5
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	4806      	ldr	r0, [pc, #24]	@ (8001840 <HAL_SPI_MspInit+0xc0>)
 8001828:	f002 f882 	bl	8003930 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	@ 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40003800 	.word	0x40003800
 8001838:	40023800 	.word	0x40023800
 800183c:	40022000 	.word	0x40022000
 8001840:	40020400 	.word	0x40020400

08001844 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	@ 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a7c      	ldr	r2, [pc, #496]	@ (8001a44 <HAL_SAI_MspInit+0x200>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d15c      	bne.n	8001910 <HAL_SAI_MspInit+0xcc>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8001856:	4b7c      	ldr	r3, [pc, #496]	@ (8001a48 <HAL_SAI_MspInit+0x204>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10b      	bne.n	8001876 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800185e:	4b7b      	ldr	r3, [pc, #492]	@ (8001a4c <HAL_SAI_MspInit+0x208>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	4a7a      	ldr	r2, [pc, #488]	@ (8001a4c <HAL_SAI_MspInit+0x208>)
 8001864:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001868:	6453      	str	r3, [r2, #68]	@ 0x44
 800186a:	4b78      	ldr	r3, [pc, #480]	@ (8001a4c <HAL_SAI_MspInit+0x208>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001876:	4b74      	ldr	r3, [pc, #464]	@ (8001a48 <HAL_SAI_MspInit+0x204>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	4a72      	ldr	r2, [pc, #456]	@ (8001a48 <HAL_SAI_MspInit+0x204>)
 800187e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001880:	23f0      	movs	r3, #240	@ 0xf0
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001890:	230a      	movs	r3, #10
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	486d      	ldr	r0, [pc, #436]	@ (8001a50 <HAL_SAI_MspInit+0x20c>)
 800189c:	f002 f848 	bl	8003930 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 80018a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 80018a2:	4a6d      	ldr	r2, [pc, #436]	@ (8001a58 <HAL_SAI_MspInit+0x214>)
 80018a4:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 80018a6:	4b6b      	ldr	r3, [pc, #428]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 80018a8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80018ac:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ae:	4b69      	ldr	r3, [pc, #420]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b4:	4b67      	ldr	r3, [pc, #412]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80018ba:	4b66      	ldr	r3, [pc, #408]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 80018bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018c0:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018c2:	4b64      	ldr	r3, [pc, #400]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 80018c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018c8:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018ca:	4b62      	ldr	r3, [pc, #392]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 80018cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018d0:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80018d2:	4b60      	ldr	r3, [pc, #384]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 80018d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018d8:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80018da:	4b5e      	ldr	r3, [pc, #376]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 80018dc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80018e0:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80018e8:	485a      	ldr	r0, [pc, #360]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 80018ea:	f001 fca9 	bl	8003240 <HAL_DMA_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_SAI_MspInit+0xb4>
    {
      Error_Handler();
 80018f4:	f7ff fd64 	bl	80013c0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a56      	ldr	r2, [pc, #344]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 80018fc:	671a      	str	r2, [r3, #112]	@ 0x70
 80018fe:	4a55      	ldr	r2, [pc, #340]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a53      	ldr	r2, [pc, #332]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 8001908:	66da      	str	r2, [r3, #108]	@ 0x6c
 800190a:	4a52      	ldr	r2, [pc, #328]	@ (8001a54 <HAL_SAI_MspInit+0x210>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a51      	ldr	r2, [pc, #324]	@ (8001a5c <HAL_SAI_MspInit+0x218>)
 8001916:	4293      	cmp	r3, r2
 8001918:	f040 808f 	bne.w	8001a3a <HAL_SAI_MspInit+0x1f6>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800191c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a48 <HAL_SAI_MspInit+0x204>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10b      	bne.n	800193c <HAL_SAI_MspInit+0xf8>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001924:	4b49      	ldr	r3, [pc, #292]	@ (8001a4c <HAL_SAI_MspInit+0x208>)
 8001926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001928:	4a48      	ldr	r2, [pc, #288]	@ (8001a4c <HAL_SAI_MspInit+0x208>)
 800192a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800192e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001930:	4b46      	ldr	r3, [pc, #280]	@ (8001a4c <HAL_SAI_MspInit+0x208>)
 8001932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001934:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800193c:	4b42      	ldr	r3, [pc, #264]	@ (8001a48 <HAL_SAI_MspInit+0x204>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	4a41      	ldr	r2, [pc, #260]	@ (8001a48 <HAL_SAI_MspInit+0x204>)
 8001944:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PA12     ------> SAI2_FS_B
    PG10     ------> SAI2_SD_B
    PH2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001946:	2340      	movs	r3, #64	@ 0x40
 8001948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001956:	230a      	movs	r3, #10
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	483f      	ldr	r0, [pc, #252]	@ (8001a60 <HAL_SAI_MspInit+0x21c>)
 8001962:	f001 ffe5 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001966:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001978:	2308      	movs	r3, #8
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4838      	ldr	r0, [pc, #224]	@ (8001a64 <HAL_SAI_MspInit+0x220>)
 8001984:	f001 ffd4 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001988:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800198c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800199a:	230a      	movs	r3, #10
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	4830      	ldr	r0, [pc, #192]	@ (8001a68 <HAL_SAI_MspInit+0x224>)
 80019a6:	f001 ffc3 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019aa:	2304      	movs	r3, #4
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80019ba:	230a      	movs	r3, #10
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4829      	ldr	r0, [pc, #164]	@ (8001a6c <HAL_SAI_MspInit+0x228>)
 80019c6:	f001 ffb3 	bl	8003930 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream6;
 80019ca:	4b29      	ldr	r3, [pc, #164]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 80019cc:	4a29      	ldr	r2, [pc, #164]	@ (8001a74 <HAL_SAI_MspInit+0x230>)
 80019ce:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 80019d0:	4b27      	ldr	r3, [pc, #156]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 80019d2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80019d6:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d8:	4b25      	ldr	r3, [pc, #148]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 80019da:	2240      	movs	r2, #64	@ 0x40
 80019dc:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80019de:	4b24      	ldr	r3, [pc, #144]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80019e4:	4b22      	ldr	r3, [pc, #136]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 80019e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ea:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019ec:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 80019ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019f2:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 80019f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019fa:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80019fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 80019fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a02:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a04:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 8001a06:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a0a:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001a12:	4817      	ldr	r0, [pc, #92]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 8001a14:	f001 fc14 	bl	8003240 <HAL_DMA_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_SAI_MspInit+0x1de>
    {
      Error_Handler();
 8001a1e:	f7ff fccf 	bl	80013c0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a12      	ldr	r2, [pc, #72]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 8001a26:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a28:	4a11      	ldr	r2, [pc, #68]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a0f      	ldr	r2, [pc, #60]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 8001a32:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001a34:	4a0e      	ldr	r2, [pc, #56]	@ (8001a70 <HAL_SAI_MspInit+0x22c>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001a3a:	bf00      	nop
 8001a3c:	3728      	adds	r7, #40	@ 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40015c04 	.word	0x40015c04
 8001a48:	20000578 	.word	0x20000578
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40022000 	.word	0x40022000
 8001a54:	2000026c 	.word	0x2000026c
 8001a58:	40026470 	.word	0x40026470
 8001a5c:	40015c24 	.word	0x40015c24
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40021800 	.word	0x40021800
 8001a6c:	40021c00 	.word	0x40021c00
 8001a70:	200002cc 	.word	0x200002cc
 8001a74:	400264a0 	.word	0x400264a0

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <NMI_Handler+0x4>

08001a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <MemManage_Handler+0x4>

08001a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <BusFault_Handler+0x4>

08001a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <UsageFault_Handler+0x4>

08001aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ace:	f001 fa61 	bl	8002f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001adc:	4802      	ldr	r0, [pc, #8]	@ (8001ae8 <DMA2_Stream4_IRQHandler+0x10>)
 8001ade:	f001 fcbd 	bl	800345c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000026c 	.word	0x2000026c

08001aec <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <DMA2_Stream6_IRQHandler+0x10>)
 8001af2:	f001 fcb3 	bl	800345c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200002cc 	.word	0x200002cc

08001b00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	@ (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b28:	f7ff ffea 	bl	8001b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b2c:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b2e:	490d      	ldr	r1, [pc, #52]	@ (8001b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b44:	4c0a      	ldr	r4, [pc, #40]	@ (8001b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b52:	f004 ffb7 	bl	8006ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b56:	f7fe fdab 	bl	80006b0 <main>
  bx  lr    
 8001b5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001b68:	08006b4c 	.word	0x08006b4c
  ldr r2, =_sbss
 8001b6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b70:	200006e4 	.word	0x200006e4

08001b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC_IRQHandler>
	...

08001b78 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	4603      	mov	r3, r0
 8001b82:	81fb      	strh	r3, [r7, #14]
 8001b84:	460b      	mov	r3, r1
 8001b86:	81bb      	strh	r3, [r7, #12]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8001b90:	89bb      	ldrh	r3, [r7, #12]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001b96:	89bb      	ldrh	r3, [r7, #12]
 8001b98:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b9c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001ba2:	f001 f901 	bl	8002da8 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001ba6:	89fb      	ldrh	r3, [r7, #14]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2203      	movs	r2, #3
 8001bac:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 ffb7 	bl	8002b24 <CODEC_IO_Write>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8001bc0:	89fb      	ldrh	r3, [r7, #14]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f640 0117 	movw	r1, #2071	@ 0x817
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 ffaa 	bl	8002b24 <CODEC_IO_Write>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8001bda:	89fb      	ldrh	r3, [r7, #14]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2200      	movs	r2, #0
 8001be0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 ff9d 	bl	8002b24 <CODEC_IO_Write>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8001bf4:	89fb      	ldrh	r3, [r7, #14]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	226c      	movs	r2, #108	@ 0x6c
 8001bfa:	2139      	movs	r1, #57	@ 0x39
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 ff91 	bl	8002b24 <CODEC_IO_Write>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461a      	mov	r2, r3
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8001c0c:	8afb      	ldrh	r3, [r7, #22]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00c      	beq.n	8001c2c <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8001c12:	89fb      	ldrh	r3, [r7, #14]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2213      	movs	r2, #19
 8001c18:	2101      	movs	r1, #1
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 ff82 	bl	8002b24 <CODEC_IO_Write>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	4413      	add	r3, r2
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	e00b      	b.n	8001c44 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8001c2c:	89fb      	ldrh	r3, [r7, #14]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2203      	movs	r2, #3
 8001c32:	2101      	movs	r1, #1
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 ff75 	bl	8002b24 <CODEC_IO_Write>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	4413      	add	r3, r2
 8001c42:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8001c44:	2032      	movs	r0, #50	@ 0x32
 8001c46:	f001 f8e3 	bl	8002e10 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8001c4a:	8b3b      	ldrh	r3, [r7, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 815f 	beq.w	8001f10 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8001c52:	4bae      	ldr	r3, [pc, #696]	@ (8001f0c <wm8994_Init+0x394>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8001c58:	8b3b      	ldrh	r3, [r7, #24]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	f000 808c 	beq.w	8001d78 <wm8994_Init+0x200>
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	f300 8111 	bgt.w	8001e88 <wm8994_Init+0x310>
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d002      	beq.n	8001c70 <wm8994_Init+0xf8>
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d042      	beq.n	8001cf4 <wm8994_Init+0x17c>
 8001c6e:	e10b      	b.n	8001e88 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8001c70:	89fb      	ldrh	r3, [r7, #14]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8001c78:	2105      	movs	r1, #5
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 ff52 	bl	8002b24 <CODEC_IO_Write>
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	4413      	add	r3, r2
 8001c88:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8001c8a:	89fb      	ldrh	r3, [r7, #14]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f240 6101 	movw	r1, #1537	@ 0x601
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 ff45 	bl	8002b24 <CODEC_IO_Write>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8001ca4:	89fb      	ldrh	r3, [r7, #14]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f240 6102 	movw	r1, #1538	@ 0x602
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 ff38 	bl	8002b24 <CODEC_IO_Write>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	4413      	add	r3, r2
 8001cbc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f240 6104 	movw	r1, #1540	@ 0x604
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 ff2b 	bl	8002b24 <CODEC_IO_Write>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8001cd8:	89fb      	ldrh	r3, [r7, #14]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2202      	movs	r2, #2
 8001cde:	f240 6105 	movw	r1, #1541	@ 0x605
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 ff1e 	bl	8002b24 <CODEC_IO_Write>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	4413      	add	r3, r2
 8001cf0:	61fb      	str	r3, [r7, #28]
      break;
 8001cf2:	e110      	b.n	8001f16 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001cf4:	89fb      	ldrh	r3, [r7, #14]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f240 3203 	movw	r2, #771	@ 0x303
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 ff10 	bl	8002b24 <CODEC_IO_Write>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001d0e:	89fb      	ldrh	r3, [r7, #14]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2201      	movs	r2, #1
 8001d14:	f240 6101 	movw	r1, #1537	@ 0x601
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 ff03 	bl	8002b24 <CODEC_IO_Write>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	4413      	add	r3, r2
 8001d26:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001d28:	89fb      	ldrh	r3, [r7, #14]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f240 6102 	movw	r1, #1538	@ 0x602
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fef6 	bl	8002b24 <CODEC_IO_Write>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	4413      	add	r3, r2
 8001d40:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001d42:	89fb      	ldrh	r3, [r7, #14]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2200      	movs	r2, #0
 8001d48:	f240 6104 	movw	r1, #1540	@ 0x604
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fee9 	bl	8002b24 <CODEC_IO_Write>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461a      	mov	r2, r3
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	4413      	add	r3, r2
 8001d5a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001d5c:	89fb      	ldrh	r3, [r7, #14]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2200      	movs	r2, #0
 8001d62:	f240 6105 	movw	r1, #1541	@ 0x605
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fedc 	bl	8002b24 <CODEC_IO_Write>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	4413      	add	r3, r2
 8001d74:	61fb      	str	r3, [r7, #28]
      break;
 8001d76:	e0ce      	b.n	8001f16 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001d78:	8afb      	ldrh	r3, [r7, #22]
 8001d7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d7e:	d141      	bne.n	8001e04 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001d80:	89fb      	ldrh	r3, [r7, #14]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8001d88:	2105      	movs	r1, #5
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 feca 	bl	8002b24 <CODEC_IO_Write>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	4413      	add	r3, r2
 8001d98:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8001d9a:	89fb      	ldrh	r3, [r7, #14]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2203      	movs	r2, #3
 8001da0:	f240 6101 	movw	r1, #1537	@ 0x601
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 febd 	bl	8002b24 <CODEC_IO_Write>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	4413      	add	r3, r2
 8001db2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8001db4:	89fb      	ldrh	r3, [r7, #14]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2203      	movs	r2, #3
 8001dba:	f240 6102 	movw	r1, #1538	@ 0x602
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 feb0 	bl	8002b24 <CODEC_IO_Write>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	4413      	add	r3, r2
 8001dcc:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8001dce:	89fb      	ldrh	r3, [r7, #14]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	f240 6104 	movw	r1, #1540	@ 0x604
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 fea3 	bl	8002b24 <CODEC_IO_Write>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461a      	mov	r2, r3
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	4413      	add	r3, r2
 8001de6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8001de8:	89fb      	ldrh	r3, [r7, #14]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2203      	movs	r2, #3
 8001dee:	f240 6105 	movw	r1, #1541	@ 0x605
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fe96 	bl	8002b24 <CODEC_IO_Write>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	4413      	add	r3, r2
 8001e00:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8001e02:	e088      	b.n	8001f16 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001e04:	89fb      	ldrh	r3, [r7, #14]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8001e0c:	2105      	movs	r1, #5
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fe88 	bl	8002b24 <CODEC_IO_Write>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001e1e:	89fb      	ldrh	r3, [r7, #14]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2201      	movs	r2, #1
 8001e24:	f240 6101 	movw	r1, #1537	@ 0x601
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fe7b 	bl	8002b24 <CODEC_IO_Write>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461a      	mov	r2, r3
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	4413      	add	r3, r2
 8001e36:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001e38:	89fb      	ldrh	r3, [r7, #14]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f240 6102 	movw	r1, #1538	@ 0x602
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fe6e 	bl	8002b24 <CODEC_IO_Write>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	4413      	add	r3, r2
 8001e50:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001e52:	89fb      	ldrh	r3, [r7, #14]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2202      	movs	r2, #2
 8001e58:	f240 6104 	movw	r1, #1540	@ 0x604
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 fe61 	bl	8002b24 <CODEC_IO_Write>
 8001e62:	4603      	mov	r3, r0
 8001e64:	461a      	mov	r2, r3
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	4413      	add	r3, r2
 8001e6a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8001e6c:	89fb      	ldrh	r3, [r7, #14]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2202      	movs	r2, #2
 8001e72:	f240 6105 	movw	r1, #1541	@ 0x605
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fe54 	bl	8002b24 <CODEC_IO_Write>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	4413      	add	r3, r2
 8001e84:	61fb      	str	r3, [r7, #28]
      break;
 8001e86:	e046      	b.n	8001f16 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001e88:	89fb      	ldrh	r3, [r7, #14]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f240 3203 	movw	r2, #771	@ 0x303
 8001e90:	2105      	movs	r1, #5
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fe46 	bl	8002b24 <CODEC_IO_Write>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001ea2:	89fb      	ldrh	r3, [r7, #14]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f240 6101 	movw	r1, #1537	@ 0x601
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fe39 	bl	8002b24 <CODEC_IO_Write>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	4413      	add	r3, r2
 8001eba:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f240 6102 	movw	r1, #1538	@ 0x602
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 fe2c 	bl	8002b24 <CODEC_IO_Write>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001ed6:	89fb      	ldrh	r3, [r7, #14]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2200      	movs	r2, #0
 8001edc:	f240 6104 	movw	r1, #1540	@ 0x604
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 fe1f 	bl	8002b24 <CODEC_IO_Write>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	4413      	add	r3, r2
 8001eee:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001ef0:	89fb      	ldrh	r3, [r7, #14]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f240 6105 	movw	r1, #1541	@ 0x605
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fe12 	bl	8002b24 <CODEC_IO_Write>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	4413      	add	r3, r2
 8001f08:	61fb      	str	r3, [r7, #28]
      break;
 8001f0a:	e004      	b.n	8001f16 <wm8994_Init+0x39e>
 8001f0c:	2000057c 	.word	0x2000057c
    }
  }
  else
  {
    outputEnabled = 0;
 8001f10:	4b99      	ldr	r3, [pc, #612]	@ (8002178 <wm8994_Init+0x600>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8001f16:	8afb      	ldrh	r3, [r7, #22]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 81ab 	beq.w	8002274 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8001f1e:	4b97      	ldr	r3, [pc, #604]	@ (800217c <wm8994_Init+0x604>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8001f24:	8afb      	ldrh	r3, [r7, #22]
 8001f26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f2a:	f000 8129 	beq.w	8002180 <wm8994_Init+0x608>
 8001f2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f32:	f300 819b 	bgt.w	800226c <wm8994_Init+0x6f4>
 8001f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f3a:	d05a      	beq.n	8001ff2 <wm8994_Init+0x47a>
 8001f3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f40:	f300 8194 	bgt.w	800226c <wm8994_Init+0x6f4>
 8001f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f48:	f000 80c6 	beq.w	80020d8 <wm8994_Init+0x560>
 8001f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f50:	f040 818c 	bne.w	800226c <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8001f54:	89fb      	ldrh	r3, [r7, #14]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fde0 	bl	8002b24 <CODEC_IO_Write>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8001f6e:	89fb      	ldrh	r3, [r7, #14]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	22db      	movs	r2, #219	@ 0xdb
 8001f74:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fdd3 	bl	8002b24 <CODEC_IO_Write>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461a      	mov	r2, r3
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	4413      	add	r3, r2
 8001f86:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8001f88:	89fb      	ldrh	r3, [r7, #14]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8001f90:	2102      	movs	r1, #2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fdc6 	bl	8002b24 <CODEC_IO_Write>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8001fa2:	89fb      	ldrh	r3, [r7, #14]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fdb9 	bl	8002b24 <CODEC_IO_Write>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	4413      	add	r3, r2
 8001fba:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8001fbc:	89fb      	ldrh	r3, [r7, #14]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	f240 6109 	movw	r1, #1545	@ 0x609
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fdac 	bl	8002b24 <CODEC_IO_Write>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	220e      	movs	r2, #14
 8001fdc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fd9f 	bl	8002b24 <CODEC_IO_Write>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	4413      	add	r3, r2
 8001fee:	61fb      	str	r3, [r7, #28]
      break;
 8001ff0:	e143      	b.n	800227a <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8001ff2:	89fb      	ldrh	r3, [r7, #14]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2211      	movs	r2, #17
 8001ff8:	2128      	movs	r1, #40	@ 0x28
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 fd92 	bl	8002b24 <CODEC_IO_Write>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	4413      	add	r3, r2
 8002008:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800200a:	89fb      	ldrh	r3, [r7, #14]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2235      	movs	r2, #53	@ 0x35
 8002010:	2129      	movs	r1, #41	@ 0x29
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fd86 	bl	8002b24 <CODEC_IO_Write>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	4413      	add	r3, r2
 8002020:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8002022:	89fb      	ldrh	r3, [r7, #14]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2235      	movs	r2, #53	@ 0x35
 8002028:	212a      	movs	r1, #42	@ 0x2a
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fd7a 	bl	8002b24 <CODEC_IO_Write>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	4413      	add	r3, r2
 8002038:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800203a:	89fb      	ldrh	r3, [r7, #14]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f240 3203 	movw	r2, #771	@ 0x303
 8002042:	2104      	movs	r1, #4
 8002044:	4618      	mov	r0, r3
 8002046:	f000 fd6d 	bl	8002b24 <CODEC_IO_Write>
 800204a:	4603      	mov	r3, r0
 800204c:	461a      	mov	r2, r3
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	4413      	add	r3, r2
 8002052:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002054:	89fb      	ldrh	r3, [r7, #14]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	22db      	movs	r2, #219	@ 0xdb
 800205a:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fd60 	bl	8002b24 <CODEC_IO_Write>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	4413      	add	r3, r2
 800206c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800206e:	89fb      	ldrh	r3, [r7, #14]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002076:	2102      	movs	r1, #2
 8002078:	4618      	mov	r0, r3
 800207a:	f000 fd53 	bl	8002b24 <CODEC_IO_Write>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	4413      	add	r3, r2
 8002086:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002088:	89fb      	ldrh	r3, [r7, #14]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2202      	movs	r2, #2
 800208e:	f240 6106 	movw	r1, #1542	@ 0x606
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fd46 	bl	8002b24 <CODEC_IO_Write>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	4413      	add	r3, r2
 80020a0:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80020a2:	89fb      	ldrh	r3, [r7, #14]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2202      	movs	r2, #2
 80020a8:	f240 6107 	movw	r1, #1543	@ 0x607
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fd39 	bl	8002b24 <CODEC_IO_Write>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461a      	mov	r2, r3
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	4413      	add	r3, r2
 80020ba:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80020bc:	89fb      	ldrh	r3, [r7, #14]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	220d      	movs	r2, #13
 80020c2:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fd2c 	bl	8002b24 <CODEC_IO_Write>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	4413      	add	r3, r2
 80020d4:	61fb      	str	r3, [r7, #28]
      break;
 80020d6:	e0d0      	b.n	800227a <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80020d8:	89fb      	ldrh	r3, [r7, #14]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80020e0:	2104      	movs	r1, #4
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fd1e 	bl	8002b24 <CODEC_IO_Write>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	4413      	add	r3, r2
 80020f0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80020f2:	89fb      	ldrh	r3, [r7, #14]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	22db      	movs	r2, #219	@ 0xdb
 80020f8:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fd11 	bl	8002b24 <CODEC_IO_Write>
 8002102:	4603      	mov	r3, r0
 8002104:	461a      	mov	r2, r3
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	4413      	add	r3, r2
 800210a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800210c:	89fb      	ldrh	r3, [r7, #14]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002114:	2102      	movs	r1, #2
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fd04 	bl	8002b24 <CODEC_IO_Write>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	4413      	add	r3, r2
 8002124:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002126:	89fb      	ldrh	r3, [r7, #14]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2202      	movs	r2, #2
 800212c:	f240 6106 	movw	r1, #1542	@ 0x606
 8002130:	4618      	mov	r0, r3
 8002132:	f000 fcf7 	bl	8002b24 <CODEC_IO_Write>
 8002136:	4603      	mov	r3, r0
 8002138:	461a      	mov	r2, r3
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	4413      	add	r3, r2
 800213e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002140:	89fb      	ldrh	r3, [r7, #14]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2202      	movs	r2, #2
 8002146:	f240 6107 	movw	r1, #1543	@ 0x607
 800214a:	4618      	mov	r0, r3
 800214c:	f000 fcea 	bl	8002b24 <CODEC_IO_Write>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	4413      	add	r3, r2
 8002158:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800215a:	89fb      	ldrh	r3, [r7, #14]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	220d      	movs	r2, #13
 8002160:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fcdd 	bl	8002b24 <CODEC_IO_Write>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	4413      	add	r3, r2
 8002172:	61fb      	str	r3, [r7, #28]
      break; 
 8002174:	e081      	b.n	800227a <wm8994_Init+0x702>
 8002176:	bf00      	nop
 8002178:	2000057c 	.word	0x2000057c
 800217c:	20000580 	.word	0x20000580
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002180:	89fb      	ldrh	r3, [r7, #14]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002188:	2104      	movs	r1, #4
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fcca 	bl	8002b24 <CODEC_IO_Write>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	4413      	add	r3, r2
 8002198:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800219a:	89fb      	ldrh	r3, [r7, #14]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	22db      	movs	r2, #219	@ 0xdb
 80021a0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fcbd 	bl	8002b24 <CODEC_IO_Write>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461a      	mov	r2, r3
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	4413      	add	r3, r2
 80021b2:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80021b4:	89fb      	ldrh	r3, [r7, #14]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	22db      	movs	r2, #219	@ 0xdb
 80021ba:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fcb0 	bl	8002b24 <CODEC_IO_Write>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461a      	mov	r2, r3
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	4413      	add	r3, r2
 80021cc:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80021ce:	89fb      	ldrh	r3, [r7, #14]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80021d6:	2102      	movs	r1, #2
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fca3 	bl	8002b24 <CODEC_IO_Write>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	4413      	add	r3, r2
 80021e6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80021e8:	89fb      	ldrh	r3, [r7, #14]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2202      	movs	r2, #2
 80021ee:	f240 6106 	movw	r1, #1542	@ 0x606
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fc96 	bl	8002b24 <CODEC_IO_Write>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	4413      	add	r3, r2
 8002200:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002202:	89fb      	ldrh	r3, [r7, #14]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2202      	movs	r2, #2
 8002208:	f240 6107 	movw	r1, #1543	@ 0x607
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fc89 	bl	8002b24 <CODEC_IO_Write>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800221c:	89fb      	ldrh	r3, [r7, #14]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2202      	movs	r2, #2
 8002222:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fc7c 	bl	8002b24 <CODEC_IO_Write>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	4413      	add	r3, r2
 8002234:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002236:	89fb      	ldrh	r3, [r7, #14]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2202      	movs	r2, #2
 800223c:	f240 6109 	movw	r1, #1545	@ 0x609
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fc6f 	bl	8002b24 <CODEC_IO_Write>
 8002246:	4603      	mov	r3, r0
 8002248:	461a      	mov	r2, r3
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	4413      	add	r3, r2
 800224e:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002250:	89fb      	ldrh	r3, [r7, #14]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	220d      	movs	r2, #13
 8002256:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fc62 	bl	8002b24 <CODEC_IO_Write>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	4413      	add	r3, r2
 8002268:	61fb      	str	r3, [r7, #28]
      break;    
 800226a:	e006      	b.n	800227a <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	3301      	adds	r3, #1
 8002270:	61fb      	str	r3, [r7, #28]
      break;
 8002272:	e002      	b.n	800227a <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002274:	4bb1      	ldr	r3, [pc, #708]	@ (800253c <wm8994_Init+0x9c4>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4ab0      	ldr	r2, [pc, #704]	@ (8002540 <wm8994_Init+0x9c8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d079      	beq.n	8002376 <wm8994_Init+0x7fe>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4aae      	ldr	r2, [pc, #696]	@ (8002540 <wm8994_Init+0x9c8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	f200 80ad 	bhi.w	80023e6 <wm8994_Init+0x86e>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002292:	4293      	cmp	r3, r2
 8002294:	d061      	beq.n	800235a <wm8994_Init+0x7e2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800229c:	4293      	cmp	r3, r2
 800229e:	f200 80a2 	bhi.w	80023e6 <wm8994_Init+0x86e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80022a8:	4293      	cmp	r3, r2
 80022aa:	f000 808e 	beq.w	80023ca <wm8994_Init+0x852>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80022b4:	4293      	cmp	r3, r2
 80022b6:	f200 8096 	bhi.w	80023e6 <wm8994_Init+0x86e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80022c0:	d03d      	beq.n	800233e <wm8994_Init+0x7c6>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80022c8:	f200 808d 	bhi.w	80023e6 <wm8994_Init+0x86e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f245 6222 	movw	r2, #22050	@ 0x5622
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d06b      	beq.n	80023ae <wm8994_Init+0x836>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f245 6222 	movw	r2, #22050	@ 0x5622
 80022dc:	4293      	cmp	r3, r2
 80022de:	f200 8082 	bhi.w	80023e6 <wm8994_Init+0x86e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80022e8:	d01b      	beq.n	8002322 <wm8994_Init+0x7aa>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80022f0:	d879      	bhi.n	80023e6 <wm8994_Init+0x86e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80022f8:	d005      	beq.n	8002306 <wm8994_Init+0x78e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8002300:	4293      	cmp	r3, r2
 8002302:	d046      	beq.n	8002392 <wm8994_Init+0x81a>
 8002304:	e06f      	b.n	80023e6 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002306:	89fb      	ldrh	r3, [r7, #14]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2203      	movs	r2, #3
 800230c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fc07 	bl	8002b24 <CODEC_IO_Write>
 8002316:	4603      	mov	r3, r0
 8002318:	461a      	mov	r2, r3
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	4413      	add	r3, r2
 800231e:	61fb      	str	r3, [r7, #28]
    break;
 8002320:	e06f      	b.n	8002402 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002322:	89fb      	ldrh	r3, [r7, #14]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2233      	movs	r2, #51	@ 0x33
 8002328:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fbf9 	bl	8002b24 <CODEC_IO_Write>
 8002332:	4603      	mov	r3, r0
 8002334:	461a      	mov	r2, r3
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	4413      	add	r3, r2
 800233a:	61fb      	str	r3, [r7, #28]
    break;
 800233c:	e061      	b.n	8002402 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800233e:	89fb      	ldrh	r3, [r7, #14]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2263      	movs	r2, #99	@ 0x63
 8002344:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fbeb 	bl	8002b24 <CODEC_IO_Write>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	4413      	add	r3, r2
 8002356:	61fb      	str	r3, [r7, #28]
    break;
 8002358:	e053      	b.n	8002402 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800235a:	89fb      	ldrh	r3, [r7, #14]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2283      	movs	r2, #131	@ 0x83
 8002360:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002364:	4618      	mov	r0, r3
 8002366:	f000 fbdd 	bl	8002b24 <CODEC_IO_Write>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	4413      	add	r3, r2
 8002372:	61fb      	str	r3, [r7, #28]
    break;
 8002374:	e045      	b.n	8002402 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002376:	89fb      	ldrh	r3, [r7, #14]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	22a3      	movs	r2, #163	@ 0xa3
 800237c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fbcf 	bl	8002b24 <CODEC_IO_Write>
 8002386:	4603      	mov	r3, r0
 8002388:	461a      	mov	r2, r3
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	4413      	add	r3, r2
 800238e:	61fb      	str	r3, [r7, #28]
    break;
 8002390:	e037      	b.n	8002402 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002392:	89fb      	ldrh	r3, [r7, #14]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2213      	movs	r2, #19
 8002398:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fbc1 	bl	8002b24 <CODEC_IO_Write>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461a      	mov	r2, r3
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	4413      	add	r3, r2
 80023aa:	61fb      	str	r3, [r7, #28]
    break;
 80023ac:	e029      	b.n	8002402 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80023ae:	89fb      	ldrh	r3, [r7, #14]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2243      	movs	r2, #67	@ 0x43
 80023b4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fbb3 	bl	8002b24 <CODEC_IO_Write>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	4413      	add	r3, r2
 80023c6:	61fb      	str	r3, [r7, #28]
    break;
 80023c8:	e01b      	b.n	8002402 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80023ca:	89fb      	ldrh	r3, [r7, #14]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2273      	movs	r2, #115	@ 0x73
 80023d0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fba5 	bl	8002b24 <CODEC_IO_Write>
 80023da:	4603      	mov	r3, r0
 80023dc:	461a      	mov	r2, r3
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	4413      	add	r3, r2
 80023e2:	61fb      	str	r3, [r7, #28]
    break; 
 80023e4:	e00d      	b.n	8002402 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80023e6:	89fb      	ldrh	r3, [r7, #14]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2283      	movs	r2, #131	@ 0x83
 80023ec:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fb97 	bl	8002b24 <CODEC_IO_Write>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	4413      	add	r3, r2
 80023fe:	61fb      	str	r3, [r7, #28]
    break; 
 8002400:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002402:	8afb      	ldrh	r3, [r7, #22]
 8002404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002408:	d10e      	bne.n	8002428 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800240a:	89fb      	ldrh	r3, [r7, #14]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f244 0218 	movw	r2, #16408	@ 0x4018
 8002412:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fb84 	bl	8002b24 <CODEC_IO_Write>
 800241c:	4603      	mov	r3, r0
 800241e:	461a      	mov	r2, r3
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	4413      	add	r3, r2
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	e00d      	b.n	8002444 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002428:	89fb      	ldrh	r3, [r7, #14]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f244 0210 	movw	r2, #16400	@ 0x4010
 8002430:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fb75 	bl	8002b24 <CODEC_IO_Write>
 800243a:	4603      	mov	r3, r0
 800243c:	461a      	mov	r2, r3
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	4413      	add	r3, r2
 8002442:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002444:	89fb      	ldrh	r3, [r7, #14]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2200      	movs	r2, #0
 800244a:	f240 3102 	movw	r1, #770	@ 0x302
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fb68 	bl	8002b24 <CODEC_IO_Write>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	4413      	add	r3, r2
 800245c:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800245e:	89fb      	ldrh	r3, [r7, #14]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	220a      	movs	r2, #10
 8002464:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fb5b 	bl	8002b24 <CODEC_IO_Write>
 800246e:	4603      	mov	r3, r0
 8002470:	461a      	mov	r2, r3
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002478:	89fb      	ldrh	r3, [r7, #14]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2201      	movs	r2, #1
 800247e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fb4e 	bl	8002b24 <CODEC_IO_Write>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	4413      	add	r3, r2
 8002490:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8002492:	8b3b      	ldrh	r3, [r7, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 8123 	beq.w	80026e0 <wm8994_Init+0xb68>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 800249a:	89fb      	ldrh	r3, [r7, #14]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80024a2:	2103      	movs	r1, #3
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 fb3d 	bl	8002b24 <CODEC_IO_Write>
 80024aa:	4603      	mov	r3, r0
 80024ac:	461a      	mov	r2, r3
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80024b4:	89fb      	ldrh	r3, [r7, #14]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2200      	movs	r2, #0
 80024ba:	2122      	movs	r1, #34	@ 0x22
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fb31 	bl	8002b24 <CODEC_IO_Write>
 80024c2:	4603      	mov	r3, r0
 80024c4:	461a      	mov	r2, r3
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	4413      	add	r3, r2
 80024ca:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80024cc:	89fb      	ldrh	r3, [r7, #14]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2200      	movs	r2, #0
 80024d2:	2123      	movs	r1, #35	@ 0x23
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fb25 	bl	8002b24 <CODEC_IO_Write>
 80024da:	4603      	mov	r3, r0
 80024dc:	461a      	mov	r2, r3
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	4413      	add	r3, r2
 80024e2:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80024e4:	89fb      	ldrh	r3, [r7, #14]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80024ec:	2136      	movs	r1, #54	@ 0x36
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fb18 	bl	8002b24 <CODEC_IO_Write>
 80024f4:	4603      	mov	r3, r0
 80024f6:	461a      	mov	r2, r3
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	4413      	add	r3, r2
 80024fc:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80024fe:	89fb      	ldrh	r3, [r7, #14]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f243 0203 	movw	r2, #12291	@ 0x3003
 8002506:	2101      	movs	r1, #1
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fb0b 	bl	8002b24 <CODEC_IO_Write>
 800250e:	4603      	mov	r3, r0
 8002510:	461a      	mov	r2, r3
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	4413      	add	r3, r2
 8002516:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002518:	8afb      	ldrh	r3, [r7, #22]
 800251a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800251e:	d111      	bne.n	8002544 <wm8994_Init+0x9cc>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8002520:	89fb      	ldrh	r3, [r7, #14]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	f240 2205 	movw	r2, #517	@ 0x205
 8002528:	2151      	movs	r1, #81	@ 0x51
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fafa 	bl	8002b24 <CODEC_IO_Write>
 8002530:	4603      	mov	r3, r0
 8002532:	461a      	mov	r2, r3
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	4413      	add	r3, r2
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	e00f      	b.n	800255c <wm8994_Init+0x9e4>
 800253c:	20000580 	.word	0x20000580
 8002540:	00017700 	.word	0x00017700
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8002544:	89fb      	ldrh	r3, [r7, #14]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2205      	movs	r2, #5
 800254a:	2151      	movs	r1, #81	@ 0x51
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fae9 	bl	8002b24 <CODEC_IO_Write>
 8002552:	4603      	mov	r3, r0
 8002554:	461a      	mov	r2, r3
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	4413      	add	r3, r2
 800255a:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800255c:	8b7b      	ldrh	r3, [r7, #26]
 800255e:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8002562:	f043 0303 	orr.w	r3, r3, #3
 8002566:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002568:	89fb      	ldrh	r3, [r7, #14]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	8b7a      	ldrh	r2, [r7, #26]
 800256e:	2101      	movs	r1, #1
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fad7 	bl	8002b24 <CODEC_IO_Write>
 8002576:	4603      	mov	r3, r0
 8002578:	461a      	mov	r2, r3
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002580:	89fb      	ldrh	r3, [r7, #14]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2222      	movs	r2, #34	@ 0x22
 8002586:	2160      	movs	r1, #96	@ 0x60
 8002588:	4618      	mov	r0, r3
 800258a:	f000 facb 	bl	8002b24 <CODEC_IO_Write>
 800258e:	4603      	mov	r3, r0
 8002590:	461a      	mov	r2, r3
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	4413      	add	r3, r2
 8002596:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002598:	89fb      	ldrh	r3, [r7, #14]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f649 7225 	movw	r2, #40741	@ 0x9f25
 80025a0:	214c      	movs	r1, #76	@ 0x4c
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fabe 	bl	8002b24 <CODEC_IO_Write>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461a      	mov	r2, r3
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	4413      	add	r3, r2
 80025b0:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80025b2:	200f      	movs	r0, #15
 80025b4:	f000 fc2c 	bl	8002e10 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80025b8:	89fb      	ldrh	r3, [r7, #14]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2201      	movs	r2, #1
 80025be:	212d      	movs	r1, #45	@ 0x2d
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 faaf 	bl	8002b24 <CODEC_IO_Write>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461a      	mov	r2, r3
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80025d0:	89fb      	ldrh	r3, [r7, #14]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2201      	movs	r2, #1
 80025d6:	212e      	movs	r1, #46	@ 0x2e
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 faa3 	bl	8002b24 <CODEC_IO_Write>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	4413      	add	r3, r2
 80025e6:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80025e8:	89fb      	ldrh	r3, [r7, #14]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f44f 724c 	mov.w	r2, #816	@ 0x330
 80025f0:	2103      	movs	r1, #3
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fa96 	bl	8002b24 <CODEC_IO_Write>
 80025f8:	4603      	mov	r3, r0
 80025fa:	461a      	mov	r2, r3
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002602:	89fb      	ldrh	r3, [r7, #14]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2233      	movs	r2, #51	@ 0x33
 8002608:	2154      	movs	r1, #84	@ 0x54
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fa8a 	bl	8002b24 <CODEC_IO_Write>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	4413      	add	r3, r2
 8002618:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(250);
 800261a:	20fa      	movs	r0, #250	@ 0xfa
 800261c:	f000 fbf8 	bl	8002e10 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8002620:	89fb      	ldrh	r3, [r7, #14]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	22ee      	movs	r2, #238	@ 0xee
 8002626:	2160      	movs	r1, #96	@ 0x60
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fa7b 	bl	8002b24 <CODEC_IO_Write>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	4413      	add	r3, r2
 8002636:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8002638:	89fb      	ldrh	r3, [r7, #14]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	22c0      	movs	r2, #192	@ 0xc0
 800263e:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fa6e 	bl	8002b24 <CODEC_IO_Write>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	4413      	add	r3, r2
 8002650:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8002652:	89fb      	ldrh	r3, [r7, #14]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	22c0      	movs	r2, #192	@ 0xc0
 8002658:	f240 6111 	movw	r1, #1553	@ 0x611
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fa61 	bl	8002b24 <CODEC_IO_Write>
 8002662:	4603      	mov	r3, r0
 8002664:	461a      	mov	r2, r3
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800266c:	89fb      	ldrh	r3, [r7, #14]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2200      	movs	r2, #0
 8002672:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fa54 	bl	8002b24 <CODEC_IO_Write>
 800267c:	4603      	mov	r3, r0
 800267e:	461a      	mov	r2, r3
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	4413      	add	r3, r2
 8002684:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002686:	89fb      	ldrh	r3, [r7, #14]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	22c0      	movs	r2, #192	@ 0xc0
 800268c:	f240 6112 	movw	r1, #1554	@ 0x612
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fa47 	bl	8002b24 <CODEC_IO_Write>
 8002696:	4603      	mov	r3, r0
 8002698:	461a      	mov	r2, r3
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	4413      	add	r3, r2
 800269e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80026a0:	89fb      	ldrh	r3, [r7, #14]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	22c0      	movs	r2, #192	@ 0xc0
 80026a6:	f240 6113 	movw	r1, #1555	@ 0x613
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fa3a 	bl	8002b24 <CODEC_IO_Write>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 80026ba:	89fb      	ldrh	r3, [r7, #14]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2200      	movs	r2, #0
 80026c0:	f240 4122 	movw	r1, #1058	@ 0x422
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fa2d 	bl	8002b24 <CODEC_IO_Write>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461a      	mov	r2, r3
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80026d4:	7afa      	ldrb	r2, [r7, #11]
 80026d6:	89fb      	ldrh	r3, [r7, #14]
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f8b0 	bl	8002840 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80026e0:	8afb      	ldrh	r3, [r7, #22]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80a6 	beq.w	8002834 <wm8994_Init+0xcbc>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80026e8:	8afb      	ldrh	r3, [r7, #22]
 80026ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ee:	d003      	beq.n	80026f8 <wm8994_Init+0xb80>
 80026f0:	8afb      	ldrh	r3, [r7, #22]
 80026f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026f6:	d12b      	bne.n	8002750 <wm8994_Init+0xbd8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80026f8:	8b7b      	ldrh	r3, [r7, #26]
 80026fa:	f043 0313 	orr.w	r3, r3, #19
 80026fe:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002700:	89fb      	ldrh	r3, [r7, #14]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	8b7a      	ldrh	r2, [r7, #26]
 8002706:	2101      	movs	r1, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fa0b 	bl	8002b24 <CODEC_IO_Write>
 800270e:	4603      	mov	r3, r0
 8002710:	461a      	mov	r2, r3
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	4413      	add	r3, r2
 8002716:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002718:	89fb      	ldrh	r3, [r7, #14]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2202      	movs	r2, #2
 800271e:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f9fe 	bl	8002b24 <CODEC_IO_Write>
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	4413      	add	r3, r2
 8002730:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8002732:	89fb      	ldrh	r3, [r7, #14]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800273a:	f240 4111 	movw	r1, #1041	@ 0x411
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f9f0 	bl	8002b24 <CODEC_IO_Write>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	4413      	add	r3, r2
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	e06b      	b.n	8002828 <wm8994_Init+0xcb0>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002750:	8afb      	ldrh	r3, [r7, #22]
 8002752:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002756:	d139      	bne.n	80027cc <wm8994_Init+0xc54>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002758:	8b7b      	ldrh	r3, [r7, #26]
 800275a:	f043 0313 	orr.w	r3, r3, #19
 800275e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002760:	89fb      	ldrh	r3, [r7, #14]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	8b7a      	ldrh	r2, [r7, #26]
 8002766:	2101      	movs	r1, #1
 8002768:	4618      	mov	r0, r3
 800276a:	f000 f9db 	bl	8002b24 <CODEC_IO_Write>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	4413      	add	r3, r2
 8002776:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002778:	89fb      	ldrh	r3, [r7, #14]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2202      	movs	r2, #2
 800277e:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f9ce 	bl	8002b24 <CODEC_IO_Write>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	4413      	add	r3, r2
 8002790:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002792:	89fb      	ldrh	r3, [r7, #14]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800279a:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f9c0 	bl	8002b24 <CODEC_IO_Write>
 80027a4:	4603      	mov	r3, r0
 80027a6:	461a      	mov	r2, r3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	4413      	add	r3, r2
 80027ac:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 80027ae:	89fb      	ldrh	r3, [r7, #14]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80027b6:	f240 4111 	movw	r1, #1041	@ 0x411
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f9b2 	bl	8002b24 <CODEC_IO_Write>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	4413      	add	r3, r2
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	e02d      	b.n	8002828 <wm8994_Init+0xcb0>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80027cc:	8afb      	ldrh	r3, [r7, #22]
 80027ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027d2:	d003      	beq.n	80027dc <wm8994_Init+0xc64>
 80027d4:	8afb      	ldrh	r3, [r7, #22]
 80027d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027da:	d125      	bne.n	8002828 <wm8994_Init+0xcb0>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80027dc:	89fb      	ldrh	r3, [r7, #14]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	220b      	movs	r2, #11
 80027e2:	2118      	movs	r1, #24
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 f99d 	bl	8002b24 <CODEC_IO_Write>
 80027ea:	4603      	mov	r3, r0
 80027ec:	461a      	mov	r2, r3
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	4413      	add	r3, r2
 80027f2:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 80027f4:	89fb      	ldrh	r3, [r7, #14]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	220b      	movs	r2, #11
 80027fa:	211a      	movs	r1, #26
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 f991 	bl	8002b24 <CODEC_IO_Write>
 8002802:	4603      	mov	r3, r0
 8002804:	461a      	mov	r2, r3
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	4413      	add	r3, r2
 800280a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800280c:	89fb      	ldrh	r3, [r7, #14]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002814:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f983 	bl	8002b24 <CODEC_IO_Write>
 800281e:	4603      	mov	r3, r0
 8002820:	461a      	mov	r2, r3
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	4413      	add	r3, r2
 8002826:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002828:	7afa      	ldrb	r2, [r7, #11]
 800282a:	89fb      	ldrh	r3, [r7, #14]
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f806 	bl	8002840 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8002834:	69fb      	ldr	r3, [r7, #28]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop

08002840 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	460a      	mov	r2, r1
 800284a:	80fb      	strh	r3, [r7, #6]
 800284c:	4613      	mov	r3, r2
 800284e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8002854:	797b      	ldrb	r3, [r7, #5]
 8002856:	2b64      	cmp	r3, #100	@ 0x64
 8002858:	d80b      	bhi.n	8002872 <wm8994_SetVolume+0x32>
 800285a:	797a      	ldrb	r2, [r7, #5]
 800285c:	4613      	mov	r3, r2
 800285e:	019b      	lsls	r3, r3, #6
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	4a86      	ldr	r2, [pc, #536]	@ (8002a7c <wm8994_SetVolume+0x23c>)
 8002864:	fb82 1203 	smull	r1, r2, r2, r3
 8002868:	1152      	asrs	r2, r2, #5
 800286a:	17db      	asrs	r3, r3, #31
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	e000      	b.n	8002874 <wm8994_SetVolume+0x34>
 8002872:	2364      	movs	r3, #100	@ 0x64
 8002874:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8002876:	4b82      	ldr	r3, [pc, #520]	@ (8002a80 <wm8994_SetVolume+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 809b 	beq.w	80029b6 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8002880:	7afb      	ldrb	r3, [r7, #11]
 8002882:	2b3e      	cmp	r3, #62	@ 0x3e
 8002884:	d93d      	bls.n	8002902 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f8fc 	bl	8002a88 <wm8994_SetMute>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4413      	add	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f240 127f 	movw	r2, #383	@ 0x17f
 80028a0:	211c      	movs	r1, #28
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f93e 	bl	8002b24 <CODEC_IO_Write>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f240 127f 	movw	r2, #383	@ 0x17f
 80028ba:	211d      	movs	r1, #29
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 f931 	bl	8002b24 <CODEC_IO_Write>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f240 127f 	movw	r2, #383	@ 0x17f
 80028d4:	2126      	movs	r1, #38	@ 0x26
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f924 	bl	8002b24 <CODEC_IO_Write>
 80028dc:	4603      	mov	r3, r0
 80028de:	461a      	mov	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f240 127f 	movw	r2, #383	@ 0x17f
 80028ee:	2127      	movs	r1, #39	@ 0x27
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 f917 	bl	8002b24 <CODEC_IO_Write>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461a      	mov	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4413      	add	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	e059      	b.n	80029b6 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8002902:	797b      	ldrb	r3, [r7, #5]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	2101      	movs	r1, #1
 800290c:	4618      	mov	r0, r3
 800290e:	f000 f8bb 	bl	8002a88 <wm8994_SetMute>
 8002912:	4602      	mov	r2, r0
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	e04c      	b.n	80029b6 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f000 f8b1 	bl	8002a88 <wm8994_SetMute>
 8002926:	4602      	mov	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	b2d8      	uxtb	r0, r3
 8002932:	7afb      	ldrb	r3, [r7, #11]
 8002934:	b21b      	sxth	r3, r3
 8002936:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800293a:	b21b      	sxth	r3, r3
 800293c:	b29b      	uxth	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	211c      	movs	r1, #28
 8002942:	f000 f8ef 	bl	8002b24 <CODEC_IO_Write>
 8002946:	4603      	mov	r3, r0
 8002948:	461a      	mov	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4413      	add	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	b2d8      	uxtb	r0, r3
 8002954:	7afb      	ldrb	r3, [r7, #11]
 8002956:	b21b      	sxth	r3, r3
 8002958:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800295c:	b21b      	sxth	r3, r3
 800295e:	b29b      	uxth	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	211d      	movs	r1, #29
 8002964:	f000 f8de 	bl	8002b24 <CODEC_IO_Write>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	b2d8      	uxtb	r0, r3
 8002976:	7afb      	ldrb	r3, [r7, #11]
 8002978:	b21b      	sxth	r3, r3
 800297a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800297e:	b21b      	sxth	r3, r3
 8002980:	b29b      	uxth	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	2126      	movs	r1, #38	@ 0x26
 8002986:	f000 f8cd 	bl	8002b24 <CODEC_IO_Write>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4413      	add	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	b2d8      	uxtb	r0, r3
 8002998:	7afb      	ldrb	r3, [r7, #11]
 800299a:	b21b      	sxth	r3, r3
 800299c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80029a0:	b21b      	sxth	r3, r3
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	2127      	movs	r1, #39	@ 0x27
 80029a8:	f000 f8bc 	bl	8002b24 <CODEC_IO_Write>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80029b6:	4b33      	ldr	r3, [pc, #204]	@ (8002a84 <wm8994_SetVolume+0x244>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d059      	beq.n	8002a72 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80029be:	797b      	ldrb	r3, [r7, #5]
 80029c0:	2b63      	cmp	r3, #99	@ 0x63
 80029c2:	d80c      	bhi.n	80029de <wm8994_SetVolume+0x19e>
 80029c4:	797a      	ldrb	r2, [r7, #5]
 80029c6:	4613      	mov	r3, r2
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	4a2b      	ldr	r2, [pc, #172]	@ (8002a7c <wm8994_SetVolume+0x23c>)
 80029d0:	fb82 1203 	smull	r1, r2, r2, r3
 80029d4:	1152      	asrs	r2, r2, #5
 80029d6:	17db      	asrs	r3, r3, #31
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	e000      	b.n	80029e0 <wm8994_SetVolume+0x1a0>
 80029de:	23ef      	movs	r3, #239	@ 0xef
 80029e0:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	b2d8      	uxtb	r0, r3
 80029e6:	7afb      	ldrb	r3, [r7, #11]
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ee:	b21b      	sxth	r3, r3
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029f8:	f000 f894 	bl	8002b24 <CODEC_IO_Write>
 80029fc:	4603      	mov	r3, r0
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	b2d8      	uxtb	r0, r3
 8002a0a:	7afb      	ldrb	r3, [r7, #11]
 8002a0c:	b21b      	sxth	r3, r3
 8002a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a12:	b21b      	sxth	r3, r3
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	f240 4101 	movw	r1, #1025	@ 0x401
 8002a1c:	f000 f882 	bl	8002b24 <CODEC_IO_Write>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	b2d8      	uxtb	r0, r3
 8002a2e:	7afb      	ldrb	r3, [r7, #11]
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a36:	b21b      	sxth	r3, r3
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f240 4104 	movw	r1, #1028	@ 0x404
 8002a40:	f000 f870 	bl	8002b24 <CODEC_IO_Write>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	b2d8      	uxtb	r0, r3
 8002a52:	7afb      	ldrb	r3, [r7, #11]
 8002a54:	b21b      	sxth	r3, r3
 8002a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a5a:	b21b      	sxth	r3, r3
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f240 4105 	movw	r1, #1029	@ 0x405
 8002a64:	f000 f85e 	bl	8002b24 <CODEC_IO_Write>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4413      	add	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8002a72:	68fb      	ldr	r3, [r7, #12]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	51eb851f 	.word	0x51eb851f
 8002a80:	2000057c 	.word	0x2000057c
 8002a84:	20000580 	.word	0x20000580

08002a88 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8002a98:	4b21      	ldr	r3, [pc, #132]	@ (8002b20 <wm8994_SetMute+0x98>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d039      	beq.n	8002b14 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d11c      	bne.n	8002ae0 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aae:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f836 	bl	8002b24 <CODEC_IO_Write>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	461a      	mov	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4413      	add	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aca:	f240 4122 	movw	r1, #1058	@ 0x422
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f828 	bl	8002b24 <CODEC_IO_Write>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e019      	b.n	8002b14 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f81a 	bl	8002b24 <CODEC_IO_Write>
 8002af0:	4603      	mov	r3, r0
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2200      	movs	r2, #0
 8002b00:	f240 4122 	movw	r1, #1058	@ 0x422
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 f80d 	bl	8002b24 <CODEC_IO_Write>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4413      	add	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8002b14:	68fb      	ldr	r3, [r7, #12]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	2000057c 	.word	0x2000057c

08002b24 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	80bb      	strh	r3, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	88b9      	ldrh	r1, [r7, #4]
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 f93b 	bl	8002dbc <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	b2db      	uxtb	r3, r3
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08c      	sub	sp, #48	@ 0x30
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a51      	ldr	r2, [pc, #324]	@ (8002ca4 <I2Cx_MspInit+0x150>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d14d      	bne.n	8002c00 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002b64:	4b50      	ldr	r3, [pc, #320]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b68:	4a4f      	ldr	r2, [pc, #316]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b70:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002b7c:	2380      	movs	r3, #128	@ 0x80
 8002b7e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002b80:	2312      	movs	r3, #18
 8002b82:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002b90:	f107 031c 	add.w	r3, r7, #28
 8002b94:	4619      	mov	r1, r3
 8002b96:	4845      	ldr	r0, [pc, #276]	@ (8002cac <I2Cx_MspInit+0x158>)
 8002b98:	f000 feca 	bl	8003930 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002b9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ba2:	f107 031c 	add.w	r3, r7, #28
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4840      	ldr	r0, [pc, #256]	@ (8002cac <I2Cx_MspInit+0x158>)
 8002baa:	f000 fec1 	bl	8003930 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002bae:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002bb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bba:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002bc6:	4b38      	ldr	r3, [pc, #224]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4a37      	ldr	r2, [pc, #220]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002bcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bd0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002bd2:	4b35      	ldr	r3, [pc, #212]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	4a34      	ldr	r2, [pc, #208]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002bd8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002bdc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	210f      	movs	r1, #15
 8002be2:	2048      	movs	r0, #72	@ 0x48
 8002be4:	f000 faf5 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002be8:	2048      	movs	r0, #72	@ 0x48
 8002bea:	f000 fb0e 	bl	800320a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	210f      	movs	r1, #15
 8002bf2:	2049      	movs	r0, #73	@ 0x49
 8002bf4:	f000 faed 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002bf8:	2049      	movs	r0, #73	@ 0x49
 8002bfa:	f000 fb06 	bl	800320a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002bfe:	e04d      	b.n	8002c9c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002c00:	4b29      	ldr	r3, [pc, #164]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c04:	4a28      	ldr	r2, [pc, #160]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002c06:	f043 0302 	orr.w	r3, r3, #2
 8002c0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0c:	4b26      	ldr	r3, [pc, #152]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c1c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002c1e:	2312      	movs	r3, #18
 8002c20:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002c26:	2302      	movs	r3, #2
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c2e:	f107 031c 	add.w	r3, r7, #28
 8002c32:	4619      	mov	r1, r3
 8002c34:	481e      	ldr	r0, [pc, #120]	@ (8002cb0 <I2Cx_MspInit+0x15c>)
 8002c36:	f000 fe7b 	bl	8003930 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002c3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c40:	f107 031c 	add.w	r3, r7, #28
 8002c44:	4619      	mov	r1, r3
 8002c46:	481a      	ldr	r0, [pc, #104]	@ (8002cb0 <I2Cx_MspInit+0x15c>)
 8002c48:	f000 fe72 	bl	8003930 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002c4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	4a15      	ldr	r2, [pc, #84]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002c52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c56:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c58:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002c64:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002c6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c6e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002c70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca8 <I2Cx_MspInit+0x154>)
 8002c76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c7a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	210f      	movs	r1, #15
 8002c80:	201f      	movs	r0, #31
 8002c82:	f000 faa6 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002c86:	201f      	movs	r0, #31
 8002c88:	f000 fabf 	bl	800320a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	210f      	movs	r1, #15
 8002c90:	2020      	movs	r0, #32
 8002c92:	f000 fa9e 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002c96:	2020      	movs	r0, #32
 8002c98:	f000 fab7 	bl	800320a <HAL_NVIC_EnableIRQ>
}
 8002c9c:	bf00      	nop
 8002c9e:	3730      	adds	r7, #48	@ 0x30
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000584 	.word	0x20000584
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40021c00 	.word	0x40021c00
 8002cb0:	40020400 	.word	0x40020400

08002cb4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f001 fae9 	bl	8004294 <HAL_I2C_GetState>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d125      	bne.n	8002d14 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a14      	ldr	r2, [pc, #80]	@ (8002d1c <I2Cx_Init+0x68>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d103      	bne.n	8002cd8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a13      	ldr	r2, [pc, #76]	@ (8002d20 <I2Cx_Init+0x6c>)
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e002      	b.n	8002cde <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a12      	ldr	r2, [pc, #72]	@ (8002d24 <I2Cx_Init+0x70>)
 8002cdc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a11      	ldr	r2, [pc, #68]	@ (8002d28 <I2Cx_Init+0x74>)
 8002ce2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ff23 	bl	8002b54 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f001 f8e0 	bl	8003ed4 <HAL_I2C_Init>
  }
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000584 	.word	0x20000584
 8002d20:	40005c00 	.word	0x40005c00
 8002d24:	40005400 	.word	0x40005400
 8002d28:	40912732 	.word	0x40912732

08002d2c <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	@ 0x28
 8002d30:	af04      	add	r7, sp, #16
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	72fb      	strb	r3, [r7, #11]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	813b      	strh	r3, [r7, #8]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002d4a:	7afb      	ldrb	r3, [r7, #11]
 8002d4c:	b299      	uxth	r1, r3
 8002d4e:	88f8      	ldrh	r0, [r7, #6]
 8002d50:	893a      	ldrh	r2, [r7, #8]
 8002d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d56:	9302      	str	r3, [sp, #8]
 8002d58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	4603      	mov	r3, r0
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f001 f982 	bl	800406c <HAL_I2C_Mem_Write>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002d72:	7afb      	ldrb	r3, [r7, #11]
 8002d74:	4619      	mov	r1, r3
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f805 	bl	8002d86 <I2Cx_Error>
  }
  return status;
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f001 f93a 	bl	800400c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff8b 	bl	8002cb4 <I2Cx_Init>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002dac:	4802      	ldr	r0, [pc, #8]	@ (8002db8 <AUDIO_IO_Init+0x10>)
 8002dae:	f7ff ff81 	bl	8002cb4 <I2Cx_Init>
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000584 	.word	0x20000584

08002dbc <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	80bb      	strh	r3, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8002dce:	887b      	ldrh	r3, [r7, #2]
 8002dd0:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8002dd2:	89fb      	ldrh	r3, [r7, #14]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8002dda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	b21a      	sxth	r2, r3
 8002de2:	887b      	ldrh	r3, [r7, #2]
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	4313      	orrs	r3, r2
 8002de8:	b21b      	sxth	r3, r3
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8002dee:	88ba      	ldrh	r2, [r7, #4]
 8002df0:	79f9      	ldrb	r1, [r7, #7]
 8002df2:	2302      	movs	r3, #2
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	1cbb      	adds	r3, r7, #2
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	4803      	ldr	r0, [pc, #12]	@ (8002e0c <AUDIO_IO_Write+0x50>)
 8002dfe:	f7ff ff95 	bl	8002d2c <I2Cx_WriteMultiple>
}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000584 	.word	0x20000584

08002e10 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f8db 	bl	8002fd4 <HAL_Delay>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002e2e:	f000 f835 	bl	8002e9c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8002e42:	f000 f832 	bl	8002eaa <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8002e58:	480e      	ldr	r0, [pc, #56]	@ (8002e94 <HAL_SAI_ErrorCallback+0x44>)
 8002e5a:	f003 fb27 	bl	80064ac <HAL_SAI_GetState>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8002e62:	480d      	ldr	r0, [pc, #52]	@ (8002e98 <HAL_SAI_ErrorCallback+0x48>)
 8002e64:	f003 fb22 	bl	80064ac <HAL_SAI_GetState>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d002      	beq.n	8002e78 <HAL_SAI_ErrorCallback+0x28>
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2b12      	cmp	r3, #18
 8002e76:	d101      	bne.n	8002e7c <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8002e78:	f000 f81e 	bl	8002eb8 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8002e7c:	7bbb      	ldrb	r3, [r7, #14]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d002      	beq.n	8002e88 <HAL_SAI_ErrorCallback+0x38>
 8002e82:	7bbb      	ldrb	r3, [r7, #14]
 8002e84:	2b22      	cmp	r3, #34	@ 0x22
 8002e86:	d101      	bne.n	8002e8c <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8002e88:	f000 f83f 	bl	8002f0a <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	200005d8 	.word	0x200005d8
 8002e98:	2000065c 	.word	0x2000065c

08002e9c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
/**
  * @brief  Manages the DMA full Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002ece:	f000 f80e 	bl	8002eee <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8002ee2:	f000 f80b 	bl	8002efc <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8002f0e:	bf00      	nop
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1c:	2003      	movs	r0, #3
 8002f1e:	f000 f94d 	bl	80031bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f000 f806 	bl	8002f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f28:	f7fe fa50 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f3c:	4b12      	ldr	r3, [pc, #72]	@ (8002f88 <HAL_InitTick+0x54>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <HAL_InitTick+0x58>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f967 	bl	8003226 <HAL_SYSTICK_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00e      	b.n	8002f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0f      	cmp	r3, #15
 8002f66:	d80a      	bhi.n	8002f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	f000 f92f 	bl	80031d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f74:	4a06      	ldr	r2, [pc, #24]	@ (8002f90 <HAL_InitTick+0x5c>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e000      	b.n	8002f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000004 	.word	0x20000004
 8002f8c:	2000000c 	.word	0x2000000c
 8002f90:	20000008 	.word	0x20000008

08002f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f98:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <HAL_IncTick+0x20>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_IncTick+0x24>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <HAL_IncTick+0x24>)
 8002fa6:	6013      	str	r3, [r2, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	2000000c 	.word	0x2000000c
 8002fb8:	200006e0 	.word	0x200006e0

08002fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc0:	4b03      	ldr	r3, [pc, #12]	@ (8002fd0 <HAL_GetTick+0x14>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	200006e0 	.word	0x200006e0

08002fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff ffee 	bl	8002fbc <HAL_GetTick>
 8002fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d005      	beq.n	8002ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fee:	4b0a      	ldr	r3, [pc, #40]	@ (8003018 <HAL_Delay+0x44>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ffa:	bf00      	nop
 8002ffc:	f7ff ffde 	bl	8002fbc <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	429a      	cmp	r2, r3
 800300a:	d8f7      	bhi.n	8002ffc <HAL_Delay+0x28>
  {
  }
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	2000000c 	.word	0x2000000c

0800301c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800302c:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <__NVIC_SetPriorityGrouping+0x40>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003038:	4013      	ands	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <__NVIC_SetPriorityGrouping+0x44>)
 8003046:	4313      	orrs	r3, r2
 8003048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304a:	4a04      	ldr	r2, [pc, #16]	@ (800305c <__NVIC_SetPriorityGrouping+0x40>)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	60d3      	str	r3, [r2, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00
 8003060:	05fa0000 	.word	0x05fa0000

08003064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003068:	4b04      	ldr	r3, [pc, #16]	@ (800307c <__NVIC_GetPriorityGrouping+0x18>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	0a1b      	lsrs	r3, r3, #8
 800306e:	f003 0307 	and.w	r3, r3, #7
}
 8003072:	4618      	mov	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	2b00      	cmp	r3, #0
 8003090:	db0b      	blt.n	80030aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	4907      	ldr	r1, [pc, #28]	@ (80030b8 <__NVIC_EnableIRQ+0x38>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2001      	movs	r0, #1
 80030a2:	fa00 f202 	lsl.w	r2, r0, r2
 80030a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	e000e100 	.word	0xe000e100

080030bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	db0a      	blt.n	80030e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	490c      	ldr	r1, [pc, #48]	@ (8003108 <__NVIC_SetPriority+0x4c>)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	440b      	add	r3, r1
 80030e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e4:	e00a      	b.n	80030fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4908      	ldr	r1, [pc, #32]	@ (800310c <__NVIC_SetPriority+0x50>)
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	3b04      	subs	r3, #4
 80030f4:	0112      	lsls	r2, r2, #4
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	440b      	add	r3, r1
 80030fa:	761a      	strb	r2, [r3, #24]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000e100 	.word	0xe000e100
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	@ 0x24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f1c3 0307 	rsb	r3, r3, #7
 800312a:	2b04      	cmp	r3, #4
 800312c:	bf28      	it	cs
 800312e:	2304      	movcs	r3, #4
 8003130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3304      	adds	r3, #4
 8003136:	2b06      	cmp	r3, #6
 8003138:	d902      	bls.n	8003140 <NVIC_EncodePriority+0x30>
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3b03      	subs	r3, #3
 800313e:	e000      	b.n	8003142 <NVIC_EncodePriority+0x32>
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003144:	f04f 32ff 	mov.w	r2, #4294967295
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43da      	mvns	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	401a      	ands	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003158:	f04f 31ff 	mov.w	r1, #4294967295
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	43d9      	mvns	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003168:	4313      	orrs	r3, r2
         );
}
 800316a:	4618      	mov	r0, r3
 800316c:	3724      	adds	r7, #36	@ 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003188:	d301      	bcc.n	800318e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800318a:	2301      	movs	r3, #1
 800318c:	e00f      	b.n	80031ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800318e:	4a0a      	ldr	r2, [pc, #40]	@ (80031b8 <SysTick_Config+0x40>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003196:	210f      	movs	r1, #15
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
 800319c:	f7ff ff8e 	bl	80030bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a0:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <SysTick_Config+0x40>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031a6:	4b04      	ldr	r3, [pc, #16]	@ (80031b8 <SysTick_Config+0x40>)
 80031a8:	2207      	movs	r2, #7
 80031aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	e000e010 	.word	0xe000e010

080031bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ff29 	bl	800301c <__NVIC_SetPriorityGrouping>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	4603      	mov	r3, r0
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e4:	f7ff ff3e 	bl	8003064 <__NVIC_GetPriorityGrouping>
 80031e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	6978      	ldr	r0, [r7, #20]
 80031f0:	f7ff ff8e 	bl	8003110 <NVIC_EncodePriority>
 80031f4:	4602      	mov	r2, r0
 80031f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff5d 	bl	80030bc <__NVIC_SetPriority>
}
 8003202:	bf00      	nop
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	4603      	mov	r3, r0
 8003212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff31 	bl	8003080 <__NVIC_EnableIRQ>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff ffa2 	bl	8003178 <SysTick_Config>
 8003234:	4603      	mov	r3, r0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800324c:	f7ff feb6 	bl	8002fbc <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e099      	b.n	8003390 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0201 	bic.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800327c:	e00f      	b.n	800329e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800327e:	f7ff fe9d 	bl	8002fbc <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b05      	cmp	r3, #5
 800328a:	d908      	bls.n	800329e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2203      	movs	r2, #3
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e078      	b.n	8003390 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e8      	bne.n	800327e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4b38      	ldr	r3, [pc, #224]	@ (8003398 <HAL_DMA_Init+0x158>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d107      	bne.n	8003308 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003300:	4313      	orrs	r3, r2
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0307 	bic.w	r3, r3, #7
 800331e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	2b04      	cmp	r3, #4
 8003330:	d117      	bne.n	8003362 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00e      	beq.n	8003362 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fa77 	bl	8003838 <DMA_CheckFifoParam>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2240      	movs	r2, #64	@ 0x40
 8003354:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800335e:	2301      	movs	r3, #1
 8003360:	e016      	b.n	8003390 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fa2e 	bl	80037cc <DMA_CalcBaseAndBitshift>
 8003370:	4603      	mov	r3, r0
 8003372:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003378:	223f      	movs	r2, #63	@ 0x3f
 800337a:	409a      	lsls	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	f010803f 	.word	0xf010803f

0800339c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_DMA_Start_IT+0x26>
 80033be:	2302      	movs	r3, #2
 80033c0:	e048      	b.n	8003454 <HAL_DMA_Start_IT+0xb8>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d137      	bne.n	8003446 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f9c0 	bl	8003770 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	223f      	movs	r2, #63	@ 0x3f
 80033f6:	409a      	lsls	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0216 	orr.w	r2, r2, #22
 800340a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800341a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d007      	beq.n	8003434 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0208 	orr.w	r2, r2, #8
 8003432:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	e005      	b.n	8003452 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800344e:	2302      	movs	r3, #2
 8003450:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003452:	7dfb      	ldrb	r3, [r7, #23]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003468:	4b8e      	ldr	r3, [pc, #568]	@ (80036a4 <HAL_DMA_IRQHandler+0x248>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a8e      	ldr	r2, [pc, #568]	@ (80036a8 <HAL_DMA_IRQHandler+0x24c>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	0a9b      	lsrs	r3, r3, #10
 8003474:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003486:	2208      	movs	r2, #8
 8003488:	409a      	lsls	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4013      	ands	r3, r2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d01a      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0204 	bic.w	r2, r2, #4
 80034ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b4:	2208      	movs	r2, #8
 80034b6:	409a      	lsls	r2, r3
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c0:	f043 0201 	orr.w	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034cc:	2201      	movs	r2, #1
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d012      	beq.n	80034fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ea:	2201      	movs	r2, #1
 80034ec:	409a      	lsls	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f6:	f043 0202 	orr.w	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003502:	2204      	movs	r2, #4
 8003504:	409a      	lsls	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d012      	beq.n	8003534 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00b      	beq.n	8003534 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003520:	2204      	movs	r2, #4
 8003522:	409a      	lsls	r2, r3
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352c:	f043 0204 	orr.w	r2, r3, #4
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003538:	2210      	movs	r2, #16
 800353a:	409a      	lsls	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d043      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d03c      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003556:	2210      	movs	r2, #16
 8003558:	409a      	lsls	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d018      	beq.n	800359e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d108      	bne.n	800358c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d024      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
 800358a:	e01f      	b.n	80035cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01b      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
 800359c:	e016      	b.n	80035cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d107      	bne.n	80035bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0208 	bic.w	r2, r2, #8
 80035ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d0:	2220      	movs	r2, #32
 80035d2:	409a      	lsls	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 808f 	beq.w	80036fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0310 	and.w	r3, r3, #16
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8087 	beq.w	80036fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f2:	2220      	movs	r2, #32
 80035f4:	409a      	lsls	r2, r3
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b05      	cmp	r3, #5
 8003604:	d136      	bne.n	8003674 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0216 	bic.w	r2, r2, #22
 8003614:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d103      	bne.n	8003636 <HAL_DMA_IRQHandler+0x1da>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0208 	bic.w	r2, r2, #8
 8003644:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364a:	223f      	movs	r2, #63	@ 0x3f
 800364c:	409a      	lsls	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003666:	2b00      	cmp	r3, #0
 8003668:	d07e      	beq.n	8003768 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
        }
        return;
 8003672:	e079      	b.n	8003768 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01d      	beq.n	80036be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10d      	bne.n	80036ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003694:	2b00      	cmp	r3, #0
 8003696:	d031      	beq.n	80036fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
 80036a0:	e02c      	b.n	80036fc <HAL_DMA_IRQHandler+0x2a0>
 80036a2:	bf00      	nop
 80036a4:	20000004 	.word	0x20000004
 80036a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d023      	beq.n	80036fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
 80036bc:	e01e      	b.n	80036fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10f      	bne.n	80036ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0210 	bic.w	r2, r2, #16
 80036da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003700:	2b00      	cmp	r3, #0
 8003702:	d032      	beq.n	800376a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d022      	beq.n	8003756 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2205      	movs	r2, #5
 8003714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0201 	bic.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	3301      	adds	r3, #1
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	429a      	cmp	r2, r3
 8003732:	d307      	bcc.n	8003744 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f2      	bne.n	8003728 <HAL_DMA_IRQHandler+0x2cc>
 8003742:	e000      	b.n	8003746 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003744:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	4798      	blx	r3
 8003766:	e000      	b.n	800376a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003768:	bf00      	nop
    }
  }
}
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800378c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b40      	cmp	r3, #64	@ 0x40
 800379c:	d108      	bne.n	80037b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037ae:	e007      	b.n	80037c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	3b10      	subs	r3, #16
 80037dc:	4a13      	ldr	r2, [pc, #76]	@ (800382c <DMA_CalcBaseAndBitshift+0x60>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	091b      	lsrs	r3, r3, #4
 80037e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037e6:	4a12      	ldr	r2, [pc, #72]	@ (8003830 <DMA_CalcBaseAndBitshift+0x64>)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d908      	bls.n	800380c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	4b0c      	ldr	r3, [pc, #48]	@ (8003834 <DMA_CalcBaseAndBitshift+0x68>)
 8003802:	4013      	ands	r3, r2
 8003804:	1d1a      	adds	r2, r3, #4
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	659a      	str	r2, [r3, #88]	@ 0x58
 800380a:	e006      	b.n	800381a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <DMA_CalcBaseAndBitshift+0x68>)
 8003814:	4013      	ands	r3, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	aaaaaaab 	.word	0xaaaaaaab
 8003830:	08006b34 	.word	0x08006b34
 8003834:	fffffc00 	.word	0xfffffc00

08003838 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003848:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d11f      	bne.n	8003892 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d856      	bhi.n	8003906 <DMA_CheckFifoParam+0xce>
 8003858:	a201      	add	r2, pc, #4	@ (adr r2, 8003860 <DMA_CheckFifoParam+0x28>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003871 	.word	0x08003871
 8003864:	08003883 	.word	0x08003883
 8003868:	08003871 	.word	0x08003871
 800386c:	08003907 	.word	0x08003907
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003874:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d046      	beq.n	800390a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003880:	e043      	b.n	800390a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003886:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800388a:	d140      	bne.n	800390e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003890:	e03d      	b.n	800390e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800389a:	d121      	bne.n	80038e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d837      	bhi.n	8003912 <DMA_CheckFifoParam+0xda>
 80038a2:	a201      	add	r2, pc, #4	@ (adr r2, 80038a8 <DMA_CheckFifoParam+0x70>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038b9 	.word	0x080038b9
 80038ac:	080038bf 	.word	0x080038bf
 80038b0:	080038b9 	.word	0x080038b9
 80038b4:	080038d1 	.word	0x080038d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      break;
 80038bc:	e030      	b.n	8003920 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d025      	beq.n	8003916 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ce:	e022      	b.n	8003916 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80038d8:	d11f      	bne.n	800391a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038de:	e01c      	b.n	800391a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d903      	bls.n	80038ee <DMA_CheckFifoParam+0xb6>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d003      	beq.n	80038f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038ec:	e018      	b.n	8003920 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
      break;
 80038f2:	e015      	b.n	8003920 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00e      	beq.n	800391e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      break;
 8003904:	e00b      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      break;
 8003906:	bf00      	nop
 8003908:	e00a      	b.n	8003920 <DMA_CheckFifoParam+0xe8>
      break;
 800390a:	bf00      	nop
 800390c:	e008      	b.n	8003920 <DMA_CheckFifoParam+0xe8>
      break;
 800390e:	bf00      	nop
 8003910:	e006      	b.n	8003920 <DMA_CheckFifoParam+0xe8>
      break;
 8003912:	bf00      	nop
 8003914:	e004      	b.n	8003920 <DMA_CheckFifoParam+0xe8>
      break;
 8003916:	bf00      	nop
 8003918:	e002      	b.n	8003920 <DMA_CheckFifoParam+0xe8>
      break;   
 800391a:	bf00      	nop
 800391c:	e000      	b.n	8003920 <DMA_CheckFifoParam+0xe8>
      break;
 800391e:	bf00      	nop
    }
  } 
  
  return status; 
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop

08003930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003930:	b480      	push	{r7}
 8003932:	b089      	sub	sp, #36	@ 0x24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003946:	2300      	movs	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	e175      	b.n	8003c3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003950:	2201      	movs	r2, #1
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	429a      	cmp	r2, r3
 800396a:	f040 8164 	bne.w	8003c36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	2b01      	cmp	r3, #1
 8003978:	d005      	beq.n	8003986 <HAL_GPIO_Init+0x56>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d130      	bne.n	80039e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	2203      	movs	r2, #3
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039bc:	2201      	movs	r2, #1
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 0201 	and.w	r2, r3, #1
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d017      	beq.n	8003a24 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d123      	bne.n	8003a78 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	08da      	lsrs	r2, r3, #3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3208      	adds	r2, #8
 8003a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	220f      	movs	r2, #15
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	08da      	lsrs	r2, r3, #3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3208      	adds	r2, #8
 8003a72:	69b9      	ldr	r1, [r7, #24]
 8003a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	2203      	movs	r2, #3
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 0203 	and.w	r2, r3, #3
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80be 	beq.w	8003c36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aba:	4b66      	ldr	r3, [pc, #408]	@ (8003c54 <HAL_GPIO_Init+0x324>)
 8003abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abe:	4a65      	ldr	r2, [pc, #404]	@ (8003c54 <HAL_GPIO_Init+0x324>)
 8003ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ac6:	4b63      	ldr	r3, [pc, #396]	@ (8003c54 <HAL_GPIO_Init+0x324>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ad2:	4a61      	ldr	r2, [pc, #388]	@ (8003c58 <HAL_GPIO_Init+0x328>)
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	3302      	adds	r3, #2
 8003ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	220f      	movs	r2, #15
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a58      	ldr	r2, [pc, #352]	@ (8003c5c <HAL_GPIO_Init+0x32c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d037      	beq.n	8003b6e <HAL_GPIO_Init+0x23e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a57      	ldr	r2, [pc, #348]	@ (8003c60 <HAL_GPIO_Init+0x330>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d031      	beq.n	8003b6a <HAL_GPIO_Init+0x23a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a56      	ldr	r2, [pc, #344]	@ (8003c64 <HAL_GPIO_Init+0x334>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d02b      	beq.n	8003b66 <HAL_GPIO_Init+0x236>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a55      	ldr	r2, [pc, #340]	@ (8003c68 <HAL_GPIO_Init+0x338>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d025      	beq.n	8003b62 <HAL_GPIO_Init+0x232>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a54      	ldr	r2, [pc, #336]	@ (8003c6c <HAL_GPIO_Init+0x33c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d01f      	beq.n	8003b5e <HAL_GPIO_Init+0x22e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a53      	ldr	r2, [pc, #332]	@ (8003c70 <HAL_GPIO_Init+0x340>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d019      	beq.n	8003b5a <HAL_GPIO_Init+0x22a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a52      	ldr	r2, [pc, #328]	@ (8003c74 <HAL_GPIO_Init+0x344>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_GPIO_Init+0x226>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a51      	ldr	r2, [pc, #324]	@ (8003c78 <HAL_GPIO_Init+0x348>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00d      	beq.n	8003b52 <HAL_GPIO_Init+0x222>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a50      	ldr	r2, [pc, #320]	@ (8003c7c <HAL_GPIO_Init+0x34c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <HAL_GPIO_Init+0x21e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a4f      	ldr	r2, [pc, #316]	@ (8003c80 <HAL_GPIO_Init+0x350>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d101      	bne.n	8003b4a <HAL_GPIO_Init+0x21a>
 8003b46:	2309      	movs	r3, #9
 8003b48:	e012      	b.n	8003b70 <HAL_GPIO_Init+0x240>
 8003b4a:	230a      	movs	r3, #10
 8003b4c:	e010      	b.n	8003b70 <HAL_GPIO_Init+0x240>
 8003b4e:	2308      	movs	r3, #8
 8003b50:	e00e      	b.n	8003b70 <HAL_GPIO_Init+0x240>
 8003b52:	2307      	movs	r3, #7
 8003b54:	e00c      	b.n	8003b70 <HAL_GPIO_Init+0x240>
 8003b56:	2306      	movs	r3, #6
 8003b58:	e00a      	b.n	8003b70 <HAL_GPIO_Init+0x240>
 8003b5a:	2305      	movs	r3, #5
 8003b5c:	e008      	b.n	8003b70 <HAL_GPIO_Init+0x240>
 8003b5e:	2304      	movs	r3, #4
 8003b60:	e006      	b.n	8003b70 <HAL_GPIO_Init+0x240>
 8003b62:	2303      	movs	r3, #3
 8003b64:	e004      	b.n	8003b70 <HAL_GPIO_Init+0x240>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e002      	b.n	8003b70 <HAL_GPIO_Init+0x240>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <HAL_GPIO_Init+0x240>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	f002 0203 	and.w	r2, r2, #3
 8003b76:	0092      	lsls	r2, r2, #2
 8003b78:	4093      	lsls	r3, r2
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b80:	4935      	ldr	r1, [pc, #212]	@ (8003c58 <HAL_GPIO_Init+0x328>)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	3302      	adds	r3, #2
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c84 <HAL_GPIO_Init+0x354>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bb2:	4a34      	ldr	r2, [pc, #208]	@ (8003c84 <HAL_GPIO_Init+0x354>)
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bb8:	4b32      	ldr	r3, [pc, #200]	@ (8003c84 <HAL_GPIO_Init+0x354>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bdc:	4a29      	ldr	r2, [pc, #164]	@ (8003c84 <HAL_GPIO_Init+0x354>)
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003be2:	4b28      	ldr	r3, [pc, #160]	@ (8003c84 <HAL_GPIO_Init+0x354>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c06:	4a1f      	ldr	r2, [pc, #124]	@ (8003c84 <HAL_GPIO_Init+0x354>)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c84 <HAL_GPIO_Init+0x354>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c30:	4a14      	ldr	r2, [pc, #80]	@ (8003c84 <HAL_GPIO_Init+0x354>)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2b0f      	cmp	r3, #15
 8003c40:	f67f ae86 	bls.w	8003950 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	3724      	adds	r7, #36	@ 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40013800 	.word	0x40013800
 8003c5c:	40020000 	.word	0x40020000
 8003c60:	40020400 	.word	0x40020400
 8003c64:	40020800 	.word	0x40020800
 8003c68:	40020c00 	.word	0x40020c00
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40021400 	.word	0x40021400
 8003c74:	40021800 	.word	0x40021800
 8003c78:	40021c00 	.word	0x40021c00
 8003c7c:	40022000 	.word	0x40022000
 8003c80:	40022400 	.word	0x40022400
 8003c84:	40013c00 	.word	0x40013c00

08003c88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e0d9      	b.n	8003e58 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	f040 80c9 	bne.w	8003e52 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003cc0:	4a6b      	ldr	r2, [pc, #428]	@ (8003e70 <HAL_GPIO_DeInit+0x1e8>)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	089b      	lsrs	r3, r3, #2
 8003cc6:	3302      	adds	r3, #2
 8003cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ccc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	220f      	movs	r2, #15
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a63      	ldr	r2, [pc, #396]	@ (8003e74 <HAL_GPIO_DeInit+0x1ec>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d037      	beq.n	8003d5a <HAL_GPIO_DeInit+0xd2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a62      	ldr	r2, [pc, #392]	@ (8003e78 <HAL_GPIO_DeInit+0x1f0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d031      	beq.n	8003d56 <HAL_GPIO_DeInit+0xce>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a61      	ldr	r2, [pc, #388]	@ (8003e7c <HAL_GPIO_DeInit+0x1f4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d02b      	beq.n	8003d52 <HAL_GPIO_DeInit+0xca>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a60      	ldr	r2, [pc, #384]	@ (8003e80 <HAL_GPIO_DeInit+0x1f8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d025      	beq.n	8003d4e <HAL_GPIO_DeInit+0xc6>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a5f      	ldr	r2, [pc, #380]	@ (8003e84 <HAL_GPIO_DeInit+0x1fc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01f      	beq.n	8003d4a <HAL_GPIO_DeInit+0xc2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8003e88 <HAL_GPIO_DeInit+0x200>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d019      	beq.n	8003d46 <HAL_GPIO_DeInit+0xbe>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a5d      	ldr	r2, [pc, #372]	@ (8003e8c <HAL_GPIO_DeInit+0x204>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <HAL_GPIO_DeInit+0xba>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a5c      	ldr	r2, [pc, #368]	@ (8003e90 <HAL_GPIO_DeInit+0x208>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00d      	beq.n	8003d3e <HAL_GPIO_DeInit+0xb6>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a5b      	ldr	r2, [pc, #364]	@ (8003e94 <HAL_GPIO_DeInit+0x20c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d007      	beq.n	8003d3a <HAL_GPIO_DeInit+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a5a      	ldr	r2, [pc, #360]	@ (8003e98 <HAL_GPIO_DeInit+0x210>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <HAL_GPIO_DeInit+0xae>
 8003d32:	2309      	movs	r3, #9
 8003d34:	e012      	b.n	8003d5c <HAL_GPIO_DeInit+0xd4>
 8003d36:	230a      	movs	r3, #10
 8003d38:	e010      	b.n	8003d5c <HAL_GPIO_DeInit+0xd4>
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	e00e      	b.n	8003d5c <HAL_GPIO_DeInit+0xd4>
 8003d3e:	2307      	movs	r3, #7
 8003d40:	e00c      	b.n	8003d5c <HAL_GPIO_DeInit+0xd4>
 8003d42:	2306      	movs	r3, #6
 8003d44:	e00a      	b.n	8003d5c <HAL_GPIO_DeInit+0xd4>
 8003d46:	2305      	movs	r3, #5
 8003d48:	e008      	b.n	8003d5c <HAL_GPIO_DeInit+0xd4>
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	e006      	b.n	8003d5c <HAL_GPIO_DeInit+0xd4>
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e004      	b.n	8003d5c <HAL_GPIO_DeInit+0xd4>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e002      	b.n	8003d5c <HAL_GPIO_DeInit+0xd4>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <HAL_GPIO_DeInit+0xd4>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	f002 0203 	and.w	r2, r2, #3
 8003d62:	0092      	lsls	r2, r2, #2
 8003d64:	4093      	lsls	r3, r2
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d132      	bne.n	8003dd2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003d6c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e9c <HAL_GPIO_DeInit+0x214>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	4949      	ldr	r1, [pc, #292]	@ (8003e9c <HAL_GPIO_DeInit+0x214>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003d7a:	4b48      	ldr	r3, [pc, #288]	@ (8003e9c <HAL_GPIO_DeInit+0x214>)
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	4946      	ldr	r1, [pc, #280]	@ (8003e9c <HAL_GPIO_DeInit+0x214>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003d88:	4b44      	ldr	r3, [pc, #272]	@ (8003e9c <HAL_GPIO_DeInit+0x214>)
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	4942      	ldr	r1, [pc, #264]	@ (8003e9c <HAL_GPIO_DeInit+0x214>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003d96:	4b41      	ldr	r3, [pc, #260]	@ (8003e9c <HAL_GPIO_DeInit+0x214>)
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	493f      	ldr	r1, [pc, #252]	@ (8003e9c <HAL_GPIO_DeInit+0x214>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	220f      	movs	r2, #15
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003db4:	4a2e      	ldr	r2, [pc, #184]	@ (8003e70 <HAL_GPIO_DeInit+0x1e8>)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	089b      	lsrs	r3, r3, #2
 8003dba:	3302      	adds	r3, #2
 8003dbc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	482a      	ldr	r0, [pc, #168]	@ (8003e70 <HAL_GPIO_DeInit+0x1e8>)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	400a      	ands	r2, r1
 8003dcc:	3302      	adds	r3, #2
 8003dce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	2103      	movs	r1, #3
 8003ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	401a      	ands	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	08da      	lsrs	r2, r3, #3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3208      	adds	r2, #8
 8003df0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	220f      	movs	r2, #15
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	08d2      	lsrs	r2, r2, #3
 8003e08:	4019      	ands	r1, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3208      	adds	r2, #8
 8003e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	2103      	movs	r1, #3
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	401a      	ands	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	401a      	ands	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	2103      	movs	r1, #3
 8003e46:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	401a      	ands	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	3301      	adds	r3, #1
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b0f      	cmp	r3, #15
 8003e5c:	f67f af22 	bls.w	8003ca4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40013800 	.word	0x40013800
 8003e74:	40020000 	.word	0x40020000
 8003e78:	40020400 	.word	0x40020400
 8003e7c:	40020800 	.word	0x40020800
 8003e80:	40020c00 	.word	0x40020c00
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40021400 	.word	0x40021400
 8003e8c:	40021800 	.word	0x40021800
 8003e90:	40021c00 	.word	0x40021c00
 8003e94:	40022000 	.word	0x40022000
 8003e98:	40022400 	.word	0x40022400
 8003e9c:	40013c00 	.word	0x40013c00

08003ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
 8003eac:	4613      	mov	r3, r2
 8003eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eb0:	787b      	ldrb	r3, [r7, #1]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ebc:	e003      	b.n	8003ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ebe:	887b      	ldrh	r3, [r7, #2]
 8003ec0:	041a      	lsls	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	619a      	str	r2, [r3, #24]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e08b      	b.n	8003ffe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d106      	bne.n	8003f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fd fa8a 	bl	8001414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2224      	movs	r2, #36	@ 0x24
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d107      	bne.n	8003f4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	e006      	b.n	8003f5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d108      	bne.n	8003f76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	e007      	b.n	8003f86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6859      	ldr	r1, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4b1d      	ldr	r3, [pc, #116]	@ (8004008 <HAL_I2C_Init+0x134>)
 8003f92:	430b      	orrs	r3, r1
 8003f94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69d9      	ldr	r1, [r3, #28]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1a      	ldr	r2, [r3, #32]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	02008000 	.word	0x02008000

0800400c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e021      	b.n	8004062 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2224      	movs	r2, #36	@ 0x24
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0201 	bic.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fd fab4 	bl	80015a4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	461a      	mov	r2, r3
 800407a:	4603      	mov	r3, r0
 800407c:	817b      	strh	r3, [r7, #10]
 800407e:	460b      	mov	r3, r1
 8004080:	813b      	strh	r3, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b20      	cmp	r3, #32
 8004090:	f040 80f9 	bne.w	8004286 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_I2C_Mem_Write+0x34>
 800409a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0ed      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_I2C_Mem_Write+0x4e>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e0e6      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040c2:	f7fe ff7b 	bl	8002fbc <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2319      	movs	r3, #25
 80040ce:	2201      	movs	r2, #1
 80040d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f963 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0d1      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2221      	movs	r2, #33	@ 0x21
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2240      	movs	r2, #64	@ 0x40
 80040f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a3a      	ldr	r2, [r7, #32]
 80040fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004104:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800410c:	88f8      	ldrh	r0, [r7, #6]
 800410e:	893a      	ldrh	r2, [r7, #8]
 8004110:	8979      	ldrh	r1, [r7, #10]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	4603      	mov	r3, r0
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f8c7 	bl	80042b0 <I2C_RequestMemoryWrite>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0a9      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2bff      	cmp	r3, #255	@ 0xff
 800413c:	d90e      	bls.n	800415c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	22ff      	movs	r2, #255	@ 0xff
 8004142:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004148:	b2da      	uxtb	r2, r3
 800414a:	8979      	ldrh	r1, [r7, #10]
 800414c:	2300      	movs	r3, #0
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 fae7 	bl	8004728 <I2C_TransferConfig>
 800415a:	e00f      	b.n	800417c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416a:	b2da      	uxtb	r2, r3
 800416c:	8979      	ldrh	r1, [r7, #10]
 800416e:	2300      	movs	r3, #0
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fad6 	bl	8004728 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f966 	bl	8004452 <I2C_WaitOnTXISFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e07b      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d034      	beq.n	8004234 <HAL_I2C_Mem_Write+0x1c8>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d130      	bne.n	8004234 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d8:	2200      	movs	r2, #0
 80041da:	2180      	movs	r1, #128	@ 0x80
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f8df 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e04d      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2bff      	cmp	r3, #255	@ 0xff
 80041f4:	d90e      	bls.n	8004214 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	22ff      	movs	r2, #255	@ 0xff
 80041fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004200:	b2da      	uxtb	r2, r3
 8004202:	8979      	ldrh	r1, [r7, #10]
 8004204:	2300      	movs	r3, #0
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fa8b 	bl	8004728 <I2C_TransferConfig>
 8004212:	e00f      	b.n	8004234 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004222:	b2da      	uxtb	r2, r3
 8004224:	8979      	ldrh	r1, [r7, #10]
 8004226:	2300      	movs	r3, #0
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fa7a 	bl	8004728 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d19e      	bne.n	800417c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f94c 	bl	80044e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e01a      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2220      	movs	r2, #32
 8004258:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b0a      	ldr	r3, [pc, #40]	@ (8004290 <HAL_I2C_Mem_Write+0x224>)
 8004266:	400b      	ands	r3, r1
 8004268:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	e000      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004286:	2302      	movs	r3, #2
  }
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	fe00e800 	.word	0xfe00e800

08004294 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042a2:	b2db      	uxtb	r3, r3
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	4608      	mov	r0, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	461a      	mov	r2, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	817b      	strh	r3, [r7, #10]
 80042c2:	460b      	mov	r3, r1
 80042c4:	813b      	strh	r3, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042ca:	88fb      	ldrh	r3, [r7, #6]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	8979      	ldrh	r1, [r7, #10]
 80042d0:	4b20      	ldr	r3, [pc, #128]	@ (8004354 <I2C_RequestMemoryWrite+0xa4>)
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fa25 	bl	8004728 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	69b9      	ldr	r1, [r7, #24]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f8b5 	bl	8004452 <I2C_WaitOnTXISFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e02c      	b.n	800434c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d105      	bne.n	8004304 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042f8:	893b      	ldrh	r3, [r7, #8]
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	629a      	str	r2, [r3, #40]	@ 0x28
 8004302:	e015      	b.n	8004330 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004304:	893b      	ldrh	r3, [r7, #8]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	b29b      	uxth	r3, r3
 800430a:	b2da      	uxtb	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	69b9      	ldr	r1, [r7, #24]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f89b 	bl	8004452 <I2C_WaitOnTXISFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e012      	b.n	800434c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004326:	893b      	ldrh	r3, [r7, #8]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2200      	movs	r2, #0
 8004338:	2180      	movs	r1, #128	@ 0x80
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f830 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	80002000 	.word	0x80002000

08004358 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b02      	cmp	r3, #2
 800436c:	d103      	bne.n	8004376 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2200      	movs	r2, #0
 8004374:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	d007      	beq.n	8004394 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	619a      	str	r2, [r3, #24]
  }
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	4613      	mov	r3, r2
 80043ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043b0:	e03b      	b.n	800442a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	6839      	ldr	r1, [r7, #0]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f8d6 	bl	8004568 <I2C_IsErrorOccurred>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e041      	b.n	800444a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d02d      	beq.n	800442a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ce:	f7fe fdf5 	bl	8002fbc <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d122      	bne.n	800442a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4013      	ands	r3, r2
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d113      	bne.n	800442a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	f043 0220 	orr.w	r2, r3, #32
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e00f      	b.n	800444a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699a      	ldr	r2, [r3, #24]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4013      	ands	r3, r2
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	429a      	cmp	r2, r3
 8004438:	bf0c      	ite	eq
 800443a:	2301      	moveq	r3, #1
 800443c:	2300      	movne	r3, #0
 800443e:	b2db      	uxtb	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	429a      	cmp	r2, r3
 8004446:	d0b4      	beq.n	80043b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800445e:	e033      	b.n	80044c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f87f 	bl	8004568 <I2C_IsErrorOccurred>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e031      	b.n	80044d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d025      	beq.n	80044c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447c:	f7fe fd9e 	bl	8002fbc <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	429a      	cmp	r2, r3
 800448a:	d302      	bcc.n	8004492 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d11a      	bne.n	80044c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b02      	cmp	r3, #2
 800449e:	d013      	beq.n	80044c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a4:	f043 0220 	orr.w	r2, r3, #32
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e007      	b.n	80044d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d1c4      	bne.n	8004460 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044ec:	e02f      	b.n	800454e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f838 	bl	8004568 <I2C_IsErrorOccurred>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e02d      	b.n	800455e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004502:	f7fe fd5b 	bl	8002fbc <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d11a      	bne.n	800454e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b20      	cmp	r3, #32
 8004524:	d013      	beq.n	800454e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452a:	f043 0220 	orr.w	r2, r3, #32
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e007      	b.n	800455e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b20      	cmp	r3, #32
 800455a:	d1c8      	bne.n	80044ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	@ 0x28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	d068      	beq.n	8004666 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2210      	movs	r2, #16
 800459a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800459c:	e049      	b.n	8004632 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d045      	beq.n	8004632 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045a6:	f7fe fd09 	bl	8002fbc <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d302      	bcc.n	80045bc <I2C_IsErrorOccurred+0x54>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d13a      	bne.n	8004632 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045de:	d121      	bne.n	8004624 <I2C_IsErrorOccurred+0xbc>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045e6:	d01d      	beq.n	8004624 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80045e8:	7cfb      	ldrb	r3, [r7, #19]
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d01a      	beq.n	8004624 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045fe:	f7fe fcdd 	bl	8002fbc <HAL_GetTick>
 8004602:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004604:	e00e      	b.n	8004624 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004606:	f7fe fcd9 	bl	8002fbc <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b19      	cmp	r3, #25
 8004612:	d907      	bls.n	8004624 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	f043 0320 	orr.w	r3, r3, #32
 800461a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004622:	e006      	b.n	8004632 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b20      	cmp	r3, #32
 8004630:	d1e9      	bne.n	8004606 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b20      	cmp	r3, #32
 800463e:	d003      	beq.n	8004648 <I2C_IsErrorOccurred+0xe0>
 8004640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0aa      	beq.n	800459e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800464c:	2b00      	cmp	r3, #0
 800464e:	d103      	bne.n	8004658 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2220      	movs	r2, #32
 8004656:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	f043 0304 	orr.w	r3, r3, #4
 800465e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004688:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00b      	beq.n	80046b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	f043 0308 	orr.w	r3, r3, #8
 80046a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00b      	beq.n	80046d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	f043 0302 	orr.w	r3, r3, #2
 80046c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80046d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01c      	beq.n	8004716 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f7ff fe3b 	bl	8004358 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6859      	ldr	r1, [r3, #4]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004724 <I2C_IsErrorOccurred+0x1bc>)
 80046ee:	400b      	ands	r3, r1
 80046f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004716:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800471a:	4618      	mov	r0, r3
 800471c:	3728      	adds	r7, #40	@ 0x28
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	fe00e800 	.word	0xfe00e800

08004728 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	607b      	str	r3, [r7, #4]
 8004732:	460b      	mov	r3, r1
 8004734:	817b      	strh	r3, [r7, #10]
 8004736:	4613      	mov	r3, r2
 8004738:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800473a:	897b      	ldrh	r3, [r7, #10]
 800473c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004740:	7a7b      	ldrb	r3, [r7, #9]
 8004742:	041b      	lsls	r3, r3, #16
 8004744:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004748:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	4313      	orrs	r3, r2
 8004752:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004756:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	0d5b      	lsrs	r3, r3, #21
 8004762:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004766:	4b08      	ldr	r3, [pc, #32]	@ (8004788 <I2C_TransferConfig+0x60>)
 8004768:	430b      	orrs	r3, r1
 800476a:	43db      	mvns	r3, r3
 800476c:	ea02 0103 	and.w	r1, r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	03ff63ff 	.word	0x03ff63ff

0800478c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d138      	bne.n	8004814 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d101      	bne.n	80047b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e032      	b.n	8004816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2224      	movs	r2, #36	@ 0x24
 80047bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0201 	bic.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6819      	ldr	r1, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	e000      	b.n	8004816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004814:	2302      	movs	r3, #2
  }
}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b20      	cmp	r3, #32
 8004836:	d139      	bne.n	80048ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004842:	2302      	movs	r3, #2
 8004844:	e033      	b.n	80048ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2224      	movs	r2, #36	@ 0x24
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004874:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e000      	b.n	80048ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
  }
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e0d2      	b.n	8004a74 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fc fe9c 	bl	8001620 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69d9      	ldr	r1, [r3, #28]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	4b60      	ldr	r3, [pc, #384]	@ (8004a7c <HAL_I2S_Init+0x1c0>)
 80048fc:	400b      	ands	r3, r1
 80048fe:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2202      	movs	r2, #2
 8004906:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d067      	beq.n	80049e0 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d102      	bne.n	800491e <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004918:	2310      	movs	r3, #16
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e001      	b.n	8004922 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800491e:	2320      	movs	r3, #32
 8004920:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	2b20      	cmp	r3, #32
 8004928:	d802      	bhi.n	8004930 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d102      	bne.n	800493e <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8004938:	4b51      	ldr	r3, [pc, #324]	@ (8004a80 <HAL_I2S_Init+0x1c4>)
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e003      	b.n	8004946 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8a2 	bl	8004a88 <I2S_GetClockFreq>
 8004944:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800494e:	d125      	bne.n	800499c <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d010      	beq.n	800497a <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	461a      	mov	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	3305      	adds	r3, #5
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	e01f      	b.n	80049ba <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	fbb2 f2f3 	udiv	r2, r2, r3
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	461a      	mov	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	fbb2 f3f3 	udiv	r3, r2, r3
 8004996:	3305      	adds	r3, #5
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	e00e      	b.n	80049ba <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	461a      	mov	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b6:	3305      	adds	r3, #5
 80049b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4a31      	ldr	r2, [pc, #196]	@ (8004a84 <HAL_I2S_Init+0x1c8>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	08db      	lsrs	r3, r3, #3
 80049c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	085b      	lsrs	r3, r3, #1
 80049d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	021b      	lsls	r3, r3, #8
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	e003      	b.n	80049e8 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80049e0:	2302      	movs	r3, #2
 80049e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d902      	bls.n	80049f4 <HAL_I2S_Init+0x138>
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	2bff      	cmp	r3, #255	@ 0xff
 80049f2:	d907      	bls.n	8004a04 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f8:	f043 0210 	orr.w	r2, r3, #16
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e037      	b.n	8004a74 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	ea42 0103 	orr.w	r1, r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69da      	ldr	r2, [r3, #28]
 8004a1e:	4b17      	ldr	r3, [pc, #92]	@ (8004a7c <HAL_I2S_Init+0x1c0>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6851      	ldr	r1, [r2, #4]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6892      	ldr	r2, [r2, #8]
 8004a2a:	4311      	orrs	r1, r2
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	68d2      	ldr	r2, [r2, #12]
 8004a30:	4311      	orrs	r1, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6992      	ldr	r2, [r2, #24]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a42:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b30      	cmp	r3, #48	@ 0x30
 8004a4a:	d003      	beq.n	8004a54 <HAL_I2S_Init+0x198>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2bb0      	cmp	r3, #176	@ 0xb0
 8004a52:	d107      	bne.n	8004a64 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a62:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3720      	adds	r7, #32
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	fffff040 	.word	0xfffff040
 8004a80:	00bb8000 	.word	0x00bb8000
 8004a84:	cccccccd 	.word	0xcccccccd

08004a88 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d02d      	beq.n	8004af4 <I2S_GetClockFreq+0x6c>
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d12e      	bne.n	8004afa <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b10 <I2S_GetClockFreq+0x88>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d108      	bne.n	8004aba <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004aa8:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <I2S_GetClockFreq+0x88>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ab0:	4a18      	ldr	r2, [pc, #96]	@ (8004b14 <I2S_GetClockFreq+0x8c>)
 8004ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	e007      	b.n	8004aca <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004aba:	4b15      	ldr	r3, [pc, #84]	@ (8004b10 <I2S_GetClockFreq+0x88>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ac2:	4a15      	ldr	r2, [pc, #84]	@ (8004b18 <I2S_GetClockFreq+0x90>)
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8004aca:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <I2S_GetClockFreq+0x88>)
 8004acc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ad0:	0f1b      	lsrs	r3, r3, #28
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8004ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8004b10 <I2S_GetClockFreq+0x88>)
 8004ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ade:	099b      	lsrs	r3, r3, #6
 8004ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	fb03 f202 	mul.w	r2, r3, r2
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	613b      	str	r3, [r7, #16]

      break;
 8004af2:	e005      	b.n	8004b00 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8004af4:	4b09      	ldr	r3, [pc, #36]	@ (8004b1c <I2S_GetClockFreq+0x94>)
 8004af6:	613b      	str	r3, [r7, #16]
      break;
 8004af8:	e002      	b.n	8004b00 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
      break;
 8004afe:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8004b00:	693b      	ldr	r3, [r7, #16]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800
 8004b14:	00f42400 	.word	0x00f42400
 8004b18:	017d7840 	.word	0x017d7840
 8004b1c:	00bb8000 	.word	0x00bb8000

08004b20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	4b23      	ldr	r3, [pc, #140]	@ (8004bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	4a22      	ldr	r2, [pc, #136]	@ (8004bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b36:	4b20      	ldr	r3, [pc, #128]	@ (8004bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b42:	4b1e      	ldr	r3, [pc, #120]	@ (8004bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1d      	ldr	r2, [pc, #116]	@ (8004bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b4e:	f7fe fa35 	bl	8002fbc <HAL_GetTick>
 8004b52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b54:	e009      	b.n	8004b6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b56:	f7fe fa31 	bl	8002fbc <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b64:	d901      	bls.n	8004b6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e022      	b.n	8004bb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b6a:	4b14      	ldr	r3, [pc, #80]	@ (8004bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b76:	d1ee      	bne.n	8004b56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004b78:	4b10      	ldr	r3, [pc, #64]	@ (8004bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8004bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b84:	f7fe fa1a 	bl	8002fbc <HAL_GetTick>
 8004b88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b8a:	e009      	b.n	8004ba0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b8c:	f7fe fa16 	bl	8002fbc <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b9a:	d901      	bls.n	8004ba0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e007      	b.n	8004bb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ba0:	4b06      	ldr	r3, [pc, #24]	@ (8004bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bac:	d1ee      	bne.n	8004b8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	40007000 	.word	0x40007000

08004bc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e291      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 8087 	beq.w	8004cf2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004be4:	4b96      	ldr	r3, [pc, #600]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 030c 	and.w	r3, r3, #12
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d00c      	beq.n	8004c0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bf0:	4b93      	ldr	r3, [pc, #588]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 030c 	and.w	r3, r3, #12
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d112      	bne.n	8004c22 <HAL_RCC_OscConfig+0x62>
 8004bfc:	4b90      	ldr	r3, [pc, #576]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c08:	d10b      	bne.n	8004c22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d06c      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x130>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d168      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e26b      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c2a:	d106      	bne.n	8004c3a <HAL_RCC_OscConfig+0x7a>
 8004c2c:	4b84      	ldr	r3, [pc, #528]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a83      	ldr	r2, [pc, #524]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	e02e      	b.n	8004c98 <HAL_RCC_OscConfig+0xd8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x9c>
 8004c42:	4b7f      	ldr	r3, [pc, #508]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a7e      	ldr	r2, [pc, #504]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a7b      	ldr	r2, [pc, #492]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e01d      	b.n	8004c98 <HAL_RCC_OscConfig+0xd8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0xc0>
 8004c66:	4b76      	ldr	r3, [pc, #472]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a75      	ldr	r2, [pc, #468]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	4b73      	ldr	r3, [pc, #460]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a72      	ldr	r2, [pc, #456]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCC_OscConfig+0xd8>
 8004c80:	4b6f      	ldr	r3, [pc, #444]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a6e      	ldr	r2, [pc, #440]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	4b6c      	ldr	r3, [pc, #432]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a6b      	ldr	r2, [pc, #428]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d013      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fe f98c 	bl	8002fbc <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca8:	f7fe f988 	bl	8002fbc <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	@ 0x64
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e21f      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	4b61      	ldr	r3, [pc, #388]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0xe8>
 8004cc6:	e014      	b.n	8004cf2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fe f978 	bl	8002fbc <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd0:	f7fe f974 	bl	8002fbc <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b64      	cmp	r3, #100	@ 0x64
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e20b      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce2:	4b57      	ldr	r3, [pc, #348]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x110>
 8004cee:	e000      	b.n	8004cf2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d069      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cfe:	4b50      	ldr	r3, [pc, #320]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d0a:	4b4d      	ldr	r3, [pc, #308]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d11c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x190>
 8004d16:	4b4a      	ldr	r3, [pc, #296]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d116      	bne.n	8004d50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d22:	4b47      	ldr	r3, [pc, #284]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_RCC_OscConfig+0x17a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d001      	beq.n	8004d3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e1df      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3a:	4b41      	ldr	r3, [pc, #260]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	493d      	ldr	r1, [pc, #244]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4e:	e040      	b.n	8004dd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d023      	beq.n	8004da0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d58:	4b39      	ldr	r3, [pc, #228]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a38      	ldr	r2, [pc, #224]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fe f92a 	bl	8002fbc <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d6c:	f7fe f926 	bl	8002fbc <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e1bd      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7e:	4b30      	ldr	r3, [pc, #192]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f0      	beq.n	8004d6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	4929      	ldr	r1, [pc, #164]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]
 8004d9e:	e018      	b.n	8004dd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004da0:	4b27      	ldr	r3, [pc, #156]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a26      	ldr	r2, [pc, #152]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004da6:	f023 0301 	bic.w	r3, r3, #1
 8004daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fe f906 	bl	8002fbc <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db4:	f7fe f902 	bl	8002fbc <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e199      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d038      	beq.n	8004e50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d019      	beq.n	8004e1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de6:	4b16      	ldr	r3, [pc, #88]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dea:	4a15      	ldr	r2, [pc, #84]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df2:	f7fe f8e3 	bl	8002fbc <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dfa:	f7fe f8df 	bl	8002fbc <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e176      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x23a>
 8004e18:	e01a      	b.n	8004e50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e1a:	4b09      	ldr	r3, [pc, #36]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1e:	4a08      	ldr	r2, [pc, #32]	@ (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e26:	f7fe f8c9 	bl	8002fbc <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e2c:	e00a      	b.n	8004e44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e2e:	f7fe f8c5 	bl	8002fbc <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d903      	bls.n	8004e44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e15c      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
 8004e40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e44:	4b91      	ldr	r3, [pc, #580]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1ee      	bne.n	8004e2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80a4 	beq.w	8004fa6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e5e:	4b8b      	ldr	r3, [pc, #556]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10d      	bne.n	8004e86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e6a:	4b88      	ldr	r3, [pc, #544]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	4a87      	ldr	r2, [pc, #540]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e76:	4b85      	ldr	r3, [pc, #532]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e86:	4b82      	ldr	r3, [pc, #520]	@ (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d118      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004e92:	4b7f      	ldr	r3, [pc, #508]	@ (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a7e      	ldr	r2, [pc, #504]	@ (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e9e:	f7fe f88d 	bl	8002fbc <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea6:	f7fe f889 	bl	8002fbc <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b64      	cmp	r3, #100	@ 0x64
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e120      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eb8:	4b75      	ldr	r3, [pc, #468]	@ (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f0      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d106      	bne.n	8004eda <HAL_RCC_OscConfig+0x31a>
 8004ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed0:	4a6e      	ldr	r2, [pc, #440]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed8:	e02d      	b.n	8004f36 <HAL_RCC_OscConfig+0x376>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10c      	bne.n	8004efc <HAL_RCC_OscConfig+0x33c>
 8004ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee6:	4a69      	ldr	r2, [pc, #420]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eee:	4b67      	ldr	r3, [pc, #412]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef2:	4a66      	ldr	r2, [pc, #408]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004ef4:	f023 0304 	bic.w	r3, r3, #4
 8004ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004efa:	e01c      	b.n	8004f36 <HAL_RCC_OscConfig+0x376>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b05      	cmp	r3, #5
 8004f02:	d10c      	bne.n	8004f1e <HAL_RCC_OscConfig+0x35e>
 8004f04:	4b61      	ldr	r3, [pc, #388]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f08:	4a60      	ldr	r2, [pc, #384]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004f0a:	f043 0304 	orr.w	r3, r3, #4
 8004f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f10:	4b5e      	ldr	r3, [pc, #376]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f14:	4a5d      	ldr	r2, [pc, #372]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f1c:	e00b      	b.n	8004f36 <HAL_RCC_OscConfig+0x376>
 8004f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f22:	4a5a      	ldr	r2, [pc, #360]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f2a:	4b58      	ldr	r3, [pc, #352]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f2e:	4a57      	ldr	r2, [pc, #348]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004f30:	f023 0304 	bic.w	r3, r3, #4
 8004f34:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d015      	beq.n	8004f6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3e:	f7fe f83d 	bl	8002fbc <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f44:	e00a      	b.n	8004f5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f46:	f7fe f839 	bl	8002fbc <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e0ce      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5c:	4b4b      	ldr	r3, [pc, #300]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0ee      	beq.n	8004f46 <HAL_RCC_OscConfig+0x386>
 8004f68:	e014      	b.n	8004f94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6a:	f7fe f827 	bl	8002fbc <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f70:	e00a      	b.n	8004f88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f72:	f7fe f823 	bl	8002fbc <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e0b8      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f88:	4b40      	ldr	r3, [pc, #256]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1ee      	bne.n	8004f72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f94:	7dfb      	ldrb	r3, [r7, #23]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d105      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f9a:	4b3c      	ldr	r3, [pc, #240]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9e:	4a3b      	ldr	r2, [pc, #236]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fa4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 80a4 	beq.w	80050f8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fb0:	4b36      	ldr	r3, [pc, #216]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 030c 	and.w	r3, r3, #12
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d06b      	beq.n	8005094 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d149      	bne.n	8005058 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc4:	4b31      	ldr	r3, [pc, #196]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a30      	ldr	r2, [pc, #192]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004fca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fd fff4 	bl	8002fbc <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fd fff0 	bl	8002fbc <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e087      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fea:	4b28      	ldr	r3, [pc, #160]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69da      	ldr	r2, [r3, #28]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005004:	019b      	lsls	r3, r3, #6
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500c:	085b      	lsrs	r3, r3, #1
 800500e:	3b01      	subs	r3, #1
 8005010:	041b      	lsls	r3, r3, #16
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005018:	061b      	lsls	r3, r3, #24
 800501a:	4313      	orrs	r3, r2
 800501c:	4a1b      	ldr	r2, [pc, #108]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 800501e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005022:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005024:	4b19      	ldr	r3, [pc, #100]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a18      	ldr	r2, [pc, #96]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 800502a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800502e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fd ffc4 	bl	8002fbc <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005038:	f7fd ffc0 	bl	8002fbc <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e057      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504a:	4b10      	ldr	r3, [pc, #64]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0x478>
 8005056:	e04f      	b.n	80050f8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005058:	4b0c      	ldr	r3, [pc, #48]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a0b      	ldr	r2, [pc, #44]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 800505e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fd ffaa 	bl	8002fbc <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800506c:	f7fd ffa6 	bl	8002fbc <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e03d      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507e:	4b03      	ldr	r3, [pc, #12]	@ (800508c <HAL_RCC_OscConfig+0x4cc>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0x4ac>
 800508a:	e035      	b.n	80050f8 <HAL_RCC_OscConfig+0x538>
 800508c:	40023800 	.word	0x40023800
 8005090:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005094:	4b1b      	ldr	r3, [pc, #108]	@ (8005104 <HAL_RCC_OscConfig+0x544>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d028      	beq.n	80050f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d121      	bne.n	80050f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d11a      	bne.n	80050f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050c4:	4013      	ands	r3, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d111      	bne.n	80050f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	3b01      	subs	r3, #1
 80050de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d107      	bne.n	80050f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d001      	beq.n	80050f8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40023800 	.word	0x40023800

08005108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0d0      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005120:	4b6a      	ldr	r3, [pc, #424]	@ (80052cc <HAL_RCC_ClockConfig+0x1c4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d910      	bls.n	8005150 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512e:	4b67      	ldr	r3, [pc, #412]	@ (80052cc <HAL_RCC_ClockConfig+0x1c4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f023 020f 	bic.w	r2, r3, #15
 8005136:	4965      	ldr	r1, [pc, #404]	@ (80052cc <HAL_RCC_ClockConfig+0x1c4>)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800513e:	4b63      	ldr	r3, [pc, #396]	@ (80052cc <HAL_RCC_ClockConfig+0x1c4>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d001      	beq.n	8005150 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0b8      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d020      	beq.n	800519e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005168:	4b59      	ldr	r3, [pc, #356]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4a58      	ldr	r2, [pc, #352]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 800516e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005172:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005180:	4b53      	ldr	r3, [pc, #332]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	4a52      	ldr	r2, [pc, #328]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005186:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800518a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800518c:	4b50      	ldr	r3, [pc, #320]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	494d      	ldr	r1, [pc, #308]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 800519a:	4313      	orrs	r3, r2
 800519c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d040      	beq.n	800522c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d107      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b2:	4b47      	ldr	r3, [pc, #284]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d115      	bne.n	80051ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e07f      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d107      	bne.n	80051da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ca:	4b41      	ldr	r3, [pc, #260]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e073      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051da:	4b3d      	ldr	r3, [pc, #244]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e06b      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ea:	4b39      	ldr	r3, [pc, #228]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f023 0203 	bic.w	r2, r3, #3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	4936      	ldr	r1, [pc, #216]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051fc:	f7fd fede 	bl	8002fbc <HAL_GetTick>
 8005200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	e00a      	b.n	800521a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005204:	f7fd feda 	bl	8002fbc <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e053      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521a:	4b2d      	ldr	r3, [pc, #180]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 020c 	and.w	r2, r3, #12
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	429a      	cmp	r2, r3
 800522a:	d1eb      	bne.n	8005204 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800522c:	4b27      	ldr	r3, [pc, #156]	@ (80052cc <HAL_RCC_ClockConfig+0x1c4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d210      	bcs.n	800525c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523a:	4b24      	ldr	r3, [pc, #144]	@ (80052cc <HAL_RCC_ClockConfig+0x1c4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f023 020f 	bic.w	r2, r3, #15
 8005242:	4922      	ldr	r1, [pc, #136]	@ (80052cc <HAL_RCC_ClockConfig+0x1c4>)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	4313      	orrs	r3, r2
 8005248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800524a:	4b20      	ldr	r3, [pc, #128]	@ (80052cc <HAL_RCC_ClockConfig+0x1c4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d001      	beq.n	800525c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e032      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d008      	beq.n	800527a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005268:	4b19      	ldr	r3, [pc, #100]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4916      	ldr	r1, [pc, #88]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d009      	beq.n	800529a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005286:	4b12      	ldr	r3, [pc, #72]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	490e      	ldr	r1, [pc, #56]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005296:	4313      	orrs	r3, r2
 8005298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800529a:	f000 f821 	bl	80052e0 <HAL_RCC_GetSysClockFreq>
 800529e:	4602      	mov	r2, r0
 80052a0:	4b0b      	ldr	r3, [pc, #44]	@ (80052d0 <HAL_RCC_ClockConfig+0x1c8>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	490a      	ldr	r1, [pc, #40]	@ (80052d4 <HAL_RCC_ClockConfig+0x1cc>)
 80052ac:	5ccb      	ldrb	r3, [r1, r3]
 80052ae:	fa22 f303 	lsr.w	r3, r2, r3
 80052b2:	4a09      	ldr	r2, [pc, #36]	@ (80052d8 <HAL_RCC_ClockConfig+0x1d0>)
 80052b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052b6:	4b09      	ldr	r3, [pc, #36]	@ (80052dc <HAL_RCC_ClockConfig+0x1d4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fd fe3a 	bl	8002f34 <HAL_InitTick>

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40023c00 	.word	0x40023c00
 80052d0:	40023800 	.word	0x40023800
 80052d4:	08006b24 	.word	0x08006b24
 80052d8:	20000004 	.word	0x20000004
 80052dc:	20000008 	.word	0x20000008

080052e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052e4:	b090      	sub	sp, #64	@ 0x40
 80052e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ec:	2300      	movs	r3, #0
 80052ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052f0:	2300      	movs	r3, #0
 80052f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052f8:	4b59      	ldr	r3, [pc, #356]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x180>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 030c 	and.w	r3, r3, #12
 8005300:	2b08      	cmp	r3, #8
 8005302:	d00d      	beq.n	8005320 <HAL_RCC_GetSysClockFreq+0x40>
 8005304:	2b08      	cmp	r3, #8
 8005306:	f200 80a1 	bhi.w	800544c <HAL_RCC_GetSysClockFreq+0x16c>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <HAL_RCC_GetSysClockFreq+0x34>
 800530e:	2b04      	cmp	r3, #4
 8005310:	d003      	beq.n	800531a <HAL_RCC_GetSysClockFreq+0x3a>
 8005312:	e09b      	b.n	800544c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005314:	4b53      	ldr	r3, [pc, #332]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x184>)
 8005316:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005318:	e09b      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800531a:	4b53      	ldr	r3, [pc, #332]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x188>)
 800531c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800531e:	e098      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005320:	4b4f      	ldr	r3, [pc, #316]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x180>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005328:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800532a:	4b4d      	ldr	r3, [pc, #308]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x180>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d028      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005336:	4b4a      	ldr	r3, [pc, #296]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x180>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	099b      	lsrs	r3, r3, #6
 800533c:	2200      	movs	r2, #0
 800533e:	623b      	str	r3, [r7, #32]
 8005340:	627a      	str	r2, [r7, #36]	@ 0x24
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005348:	2100      	movs	r1, #0
 800534a:	4b47      	ldr	r3, [pc, #284]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x188>)
 800534c:	fb03 f201 	mul.w	r2, r3, r1
 8005350:	2300      	movs	r3, #0
 8005352:	fb00 f303 	mul.w	r3, r0, r3
 8005356:	4413      	add	r3, r2
 8005358:	4a43      	ldr	r2, [pc, #268]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x188>)
 800535a:	fba0 1202 	umull	r1, r2, r0, r2
 800535e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005360:	460a      	mov	r2, r1
 8005362:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005366:	4413      	add	r3, r2
 8005368:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800536a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800536c:	2200      	movs	r2, #0
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	61fa      	str	r2, [r7, #28]
 8005372:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005376:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800537a:	f7fa ff45 	bl	8000208 <__aeabi_uldivmod>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4613      	mov	r3, r2
 8005384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005386:	e053      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005388:	4b35      	ldr	r3, [pc, #212]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x180>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	099b      	lsrs	r3, r3, #6
 800538e:	2200      	movs	r2, #0
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	617a      	str	r2, [r7, #20]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800539a:	f04f 0b00 	mov.w	fp, #0
 800539e:	4652      	mov	r2, sl
 80053a0:	465b      	mov	r3, fp
 80053a2:	f04f 0000 	mov.w	r0, #0
 80053a6:	f04f 0100 	mov.w	r1, #0
 80053aa:	0159      	lsls	r1, r3, #5
 80053ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053b0:	0150      	lsls	r0, r2, #5
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	ebb2 080a 	subs.w	r8, r2, sl
 80053ba:	eb63 090b 	sbc.w	r9, r3, fp
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80053ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80053ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80053d2:	ebb2 0408 	subs.w	r4, r2, r8
 80053d6:	eb63 0509 	sbc.w	r5, r3, r9
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	00eb      	lsls	r3, r5, #3
 80053e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053e8:	00e2      	lsls	r2, r4, #3
 80053ea:	4614      	mov	r4, r2
 80053ec:	461d      	mov	r5, r3
 80053ee:	eb14 030a 	adds.w	r3, r4, sl
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	eb45 030b 	adc.w	r3, r5, fp
 80053f8:	607b      	str	r3, [r7, #4]
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005406:	4629      	mov	r1, r5
 8005408:	028b      	lsls	r3, r1, #10
 800540a:	4621      	mov	r1, r4
 800540c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005410:	4621      	mov	r1, r4
 8005412:	028a      	lsls	r2, r1, #10
 8005414:	4610      	mov	r0, r2
 8005416:	4619      	mov	r1, r3
 8005418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541a:	2200      	movs	r2, #0
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	60fa      	str	r2, [r7, #12]
 8005420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005424:	f7fa fef0 	bl	8000208 <__aeabi_uldivmod>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4613      	mov	r3, r2
 800542e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x180>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	3301      	adds	r3, #1
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005440:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005444:	fbb2 f3f3 	udiv	r3, r2, r3
 8005448:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800544a:	e002      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800544c:	4b05      	ldr	r3, [pc, #20]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x184>)
 800544e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005454:	4618      	mov	r0, r3
 8005456:	3740      	adds	r7, #64	@ 0x40
 8005458:	46bd      	mov	sp, r7
 800545a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800545e:	bf00      	nop
 8005460:	40023800 	.word	0x40023800
 8005464:	00f42400 	.word	0x00f42400
 8005468:	017d7840 	.word	0x017d7840

0800546c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005480:	2300      	movs	r3, #0
 8005482:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d012      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005494:	4b69      	ldr	r3, [pc, #420]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	4a68      	ldr	r2, [pc, #416]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800549e:	6093      	str	r3, [r2, #8]
 80054a0:	4b66      	ldr	r3, [pc, #408]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a8:	4964      	ldr	r1, [pc, #400]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80054b6:	2301      	movs	r3, #1
 80054b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d017      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054c6:	4b5d      	ldr	r3, [pc, #372]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d4:	4959      	ldr	r1, [pc, #356]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054e4:	d101      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80054e6:	2301      	movs	r3, #1
 80054e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80054f2:	2301      	movs	r3, #1
 80054f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d017      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005502:	4b4e      	ldr	r3, [pc, #312]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005508:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	494a      	ldr	r1, [pc, #296]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005520:	d101      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005522:	2301      	movs	r3, #1
 8005524:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800552e:	2301      	movs	r3, #1
 8005530:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800553e:	2301      	movs	r3, #1
 8005540:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 808b 	beq.w	8005666 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005550:	4b3a      	ldr	r3, [pc, #232]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005554:	4a39      	ldr	r2, [pc, #228]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800555a:	6413      	str	r3, [r2, #64]	@ 0x40
 800555c:	4b37      	ldr	r3, [pc, #220]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800555e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005564:	60bb      	str	r3, [r7, #8]
 8005566:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005568:	4b35      	ldr	r3, [pc, #212]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a34      	ldr	r2, [pc, #208]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800556e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005574:	f7fd fd22 	bl	8002fbc <HAL_GetTick>
 8005578:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800557a:	e008      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800557c:	f7fd fd1e 	bl	8002fbc <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b64      	cmp	r3, #100	@ 0x64
 8005588:	d901      	bls.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e357      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800558e:	4b2c      	ldr	r3, [pc, #176]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0f0      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800559a:	4b28      	ldr	r3, [pc, #160]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800559e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d035      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d02e      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055b8:	4b20      	ldr	r3, [pc, #128]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055c2:	4b1e      	ldr	r3, [pc, #120]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c6:	4a1d      	ldr	r2, [pc, #116]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055cc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055ce:	4b1b      	ldr	r3, [pc, #108]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d2:	4a1a      	ldr	r2, [pc, #104]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80055da:	4a18      	ldr	r2, [pc, #96]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055e0:	4b16      	ldr	r3, [pc, #88]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d114      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ec:	f7fd fce6 	bl	8002fbc <HAL_GetTick>
 80055f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f2:	e00a      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f4:	f7fd fce2 	bl	8002fbc <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e319      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800560a:	4b0c      	ldr	r3, [pc, #48]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800560c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0ee      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005622:	d111      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005624:	4b05      	ldr	r3, [pc, #20]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005630:	4b04      	ldr	r3, [pc, #16]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005632:	400b      	ands	r3, r1
 8005634:	4901      	ldr	r1, [pc, #4]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005636:	4313      	orrs	r3, r2
 8005638:	608b      	str	r3, [r1, #8]
 800563a:	e00b      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800563c:	40023800 	.word	0x40023800
 8005640:	40007000 	.word	0x40007000
 8005644:	0ffffcff 	.word	0x0ffffcff
 8005648:	4baa      	ldr	r3, [pc, #680]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	4aa9      	ldr	r2, [pc, #676]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800564e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005652:	6093      	str	r3, [r2, #8]
 8005654:	4ba7      	ldr	r3, [pc, #668]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005656:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005660:	49a4      	ldr	r1, [pc, #656]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005662:	4313      	orrs	r3, r2
 8005664:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b00      	cmp	r3, #0
 8005670:	d010      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005672:	4ba0      	ldr	r3, [pc, #640]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005678:	4a9e      	ldr	r2, [pc, #632]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800567a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800567e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005682:	4b9c      	ldr	r3, [pc, #624]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005684:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568c:	4999      	ldr	r1, [pc, #612]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056a0:	4b94      	ldr	r3, [pc, #592]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056ae:	4991      	ldr	r1, [pc, #580]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056c2:	4b8c      	ldr	r3, [pc, #560]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056d0:	4988      	ldr	r1, [pc, #544]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056e4:	4b83      	ldr	r3, [pc, #524]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056f2:	4980      	ldr	r1, [pc, #512]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005706:	4b7b      	ldr	r3, [pc, #492]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005714:	4977      	ldr	r1, [pc, #476]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005728:	4b72      	ldr	r3, [pc, #456]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572e:	f023 0203 	bic.w	r2, r3, #3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005736:	496f      	ldr	r1, [pc, #444]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800574a:	4b6a      	ldr	r3, [pc, #424]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800574c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005750:	f023 020c 	bic.w	r2, r3, #12
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005758:	4966      	ldr	r1, [pc, #408]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800576c:	4b61      	ldr	r3, [pc, #388]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005772:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800577a:	495e      	ldr	r1, [pc, #376]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800578e:	4b59      	ldr	r3, [pc, #356]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005794:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800579c:	4955      	ldr	r1, [pc, #340]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057b0:	4b50      	ldr	r3, [pc, #320]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057be:	494d      	ldr	r1, [pc, #308]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80057d2:	4b48      	ldr	r3, [pc, #288]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e0:	4944      	ldr	r1, [pc, #272]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80057f4:	4b3f      	ldr	r3, [pc, #252]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005802:	493c      	ldr	r1, [pc, #240]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005816:	4b37      	ldr	r3, [pc, #220]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800581c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005824:	4933      	ldr	r1, [pc, #204]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005838:	4b2e      	ldr	r3, [pc, #184]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800583e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005846:	492b      	ldr	r1, [pc, #172]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d011      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800585a:	4b26      	ldr	r3, [pc, #152]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005860:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005868:	4922      	ldr	r1, [pc, #136]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005874:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005878:	d101      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800587a:	2301      	movs	r3, #1
 800587c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800588a:	2301      	movs	r3, #1
 800588c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800589a:	4b16      	ldr	r3, [pc, #88]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a8:	4912      	ldr	r1, [pc, #72]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00b      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058bc:	4b0d      	ldr	r3, [pc, #52]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058cc:	4909      	ldr	r1, [pc, #36]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d006      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 80d9 	beq.w	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058e8:	4b02      	ldr	r3, [pc, #8]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a01      	ldr	r2, [pc, #4]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058f2:	e001      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80058f4:	40023800 	.word	0x40023800
 80058f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058fa:	f7fd fb5f 	bl	8002fbc <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005900:	e008      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005902:	f7fd fb5b 	bl	8002fbc <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b64      	cmp	r3, #100	@ 0x64
 800590e:	d901      	bls.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e194      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005914:	4b6c      	ldr	r3, [pc, #432]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f0      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d021      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005930:	2b00      	cmp	r3, #0
 8005932:	d11d      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005934:	4b64      	ldr	r3, [pc, #400]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800593a:	0c1b      	lsrs	r3, r3, #16
 800593c:	f003 0303 	and.w	r3, r3, #3
 8005940:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005942:	4b61      	ldr	r3, [pc, #388]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005948:	0e1b      	lsrs	r3, r3, #24
 800594a:	f003 030f 	and.w	r3, r3, #15
 800594e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	019a      	lsls	r2, r3, #6
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	041b      	lsls	r3, r3, #16
 800595a:	431a      	orrs	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	061b      	lsls	r3, r3, #24
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	071b      	lsls	r3, r3, #28
 8005968:	4957      	ldr	r1, [pc, #348]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d004      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005980:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005984:	d00a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800598e:	2b00      	cmp	r3, #0
 8005990:	d02e      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005996:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800599a:	d129      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800599c:	4b4a      	ldr	r3, [pc, #296]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800599e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059a2:	0c1b      	lsrs	r3, r3, #16
 80059a4:	f003 0303 	and.w	r3, r3, #3
 80059a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059aa:	4b47      	ldr	r3, [pc, #284]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059b0:	0f1b      	lsrs	r3, r3, #28
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	019a      	lsls	r2, r3, #6
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	041b      	lsls	r3, r3, #16
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	061b      	lsls	r3, r3, #24
 80059ca:	431a      	orrs	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	071b      	lsls	r3, r3, #28
 80059d0:	493d      	ldr	r1, [pc, #244]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059d8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059de:	f023 021f 	bic.w	r2, r3, #31
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e6:	3b01      	subs	r3, #1
 80059e8:	4937      	ldr	r1, [pc, #220]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01d      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059fc:	4b32      	ldr	r3, [pc, #200]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a02:	0e1b      	lsrs	r3, r3, #24
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a10:	0f1b      	lsrs	r3, r3, #28
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	019a      	lsls	r2, r3, #6
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	041b      	lsls	r3, r3, #16
 8005a24:	431a      	orrs	r2, r3
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	061b      	lsls	r3, r3, #24
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	071b      	lsls	r3, r3, #28
 8005a30:	4925      	ldr	r1, [pc, #148]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d011      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	019a      	lsls	r2, r3, #6
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	041b      	lsls	r3, r3, #16
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	061b      	lsls	r3, r3, #24
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	071b      	lsls	r3, r3, #28
 8005a60:	4919      	ldr	r1, [pc, #100]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a68:	4b17      	ldr	r3, [pc, #92]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a16      	ldr	r2, [pc, #88]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a74:	f7fd faa2 	bl	8002fbc <HAL_GetTick>
 8005a78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a7c:	f7fd fa9e 	bl	8002fbc <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b64      	cmp	r3, #100	@ 0x64
 8005a88:	d901      	bls.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e0d7      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f0      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	f040 80cd 	bne.w	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005aa2:	4b09      	ldr	r3, [pc, #36]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a08      	ldr	r2, [pc, #32]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aae:	f7fd fa85 	bl	8002fbc <HAL_GetTick>
 8005ab2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ab4:	e00a      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ab6:	f7fd fa81 	bl	8002fbc <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b64      	cmp	r3, #100	@ 0x64
 8005ac2:	d903      	bls.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e0ba      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005ac8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005acc:	4b5e      	ldr	r3, [pc, #376]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ad4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ad8:	d0ed      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d009      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d02e      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d12a      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b02:	4b51      	ldr	r3, [pc, #324]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b10:	4b4d      	ldr	r3, [pc, #308]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b16:	0f1b      	lsrs	r3, r3, #28
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	019a      	lsls	r2, r3, #6
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	061b      	lsls	r3, r3, #24
 8005b30:	431a      	orrs	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	071b      	lsls	r3, r3, #28
 8005b36:	4944      	ldr	r1, [pc, #272]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b3e:	4b42      	ldr	r3, [pc, #264]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b44:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	021b      	lsls	r3, r3, #8
 8005b50:	493d      	ldr	r1, [pc, #244]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d022      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b6c:	d11d      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b6e:	4b36      	ldr	r3, [pc, #216]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b74:	0e1b      	lsrs	r3, r3, #24
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b7c:	4b32      	ldr	r3, [pc, #200]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b82:	0f1b      	lsrs	r3, r3, #28
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	019a      	lsls	r2, r3, #6
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	041b      	lsls	r3, r3, #16
 8005b96:	431a      	orrs	r2, r3
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	061b      	lsls	r3, r3, #24
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	071b      	lsls	r3, r3, #28
 8005ba2:	4929      	ldr	r1, [pc, #164]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d028      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bb6:	4b24      	ldr	r3, [pc, #144]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bbc:	0e1b      	lsrs	r3, r3, #24
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bc4:	4b20      	ldr	r3, [pc, #128]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bca:	0c1b      	lsrs	r3, r3, #16
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	019a      	lsls	r2, r3, #6
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	041b      	lsls	r3, r3, #16
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	061b      	lsls	r3, r3, #24
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	071b      	lsls	r3, r3, #28
 8005bea:	4917      	ldr	r1, [pc, #92]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bf2:	4b15      	ldr	r3, [pc, #84]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bf8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c00:	4911      	ldr	r1, [pc, #68]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c08:	4b0f      	ldr	r3, [pc, #60]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c14:	f7fd f9d2 	bl	8002fbc <HAL_GetTick>
 8005c18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c1c:	f7fd f9ce 	bl	8002fbc <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b64      	cmp	r3, #100	@ 0x64
 8005c28:	d901      	bls.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e007      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c2e:	4b06      	ldr	r3, [pc, #24]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c3a:	d1ef      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40023800 	.word	0x40023800

08005c4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c6a:	f040 808d 	bne.w	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005c6e:	4b93      	ldr	r3, [pc, #588]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c74:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005c7c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c84:	d07c      	beq.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c8c:	d87b      	bhi.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d004      	beq.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c9a:	d039      	beq.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005c9c:	e073      	b.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005c9e:	4b87      	ldr	r3, [pc, #540]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d108      	bne.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005caa:	4b84      	ldr	r3, [pc, #528]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cb2:	4a83      	ldr	r2, [pc, #524]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	e007      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005cbc:	4b7f      	ldr	r3, [pc, #508]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cc4:	4a7f      	ldr	r2, [pc, #508]	@ (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cca:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005ccc:	4b7b      	ldr	r3, [pc, #492]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd2:	0e1b      	lsrs	r3, r3, #24
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005cda:	4b78      	ldr	r3, [pc, #480]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce0:	099b      	lsrs	r3, r3, #6
 8005ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	fb03 f202 	mul.w	r2, r3, r2
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005cf4:	4b71      	ldr	r3, [pc, #452]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	f003 031f 	and.w	r3, r3, #31
 8005d00:	3301      	adds	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0c:	617b      	str	r3, [r7, #20]
        break;
 8005d0e:	e03b      	b.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005d10:	4b6a      	ldr	r3, [pc, #424]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d108      	bne.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d1c:	4b67      	ldr	r3, [pc, #412]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d24:	4a66      	ldr	r2, [pc, #408]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	e007      	b.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005d2e:	4b63      	ldr	r3, [pc, #396]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d36:	4a63      	ldr	r2, [pc, #396]	@ (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005d3e:	4b5f      	ldr	r3, [pc, #380]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d44:	0e1b      	lsrs	r3, r3, #24
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005d4c:	4b5b      	ldr	r3, [pc, #364]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d52:	099b      	lsrs	r3, r3, #6
 8005d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	fb03 f202 	mul.w	r2, r3, r2
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005d66:	4b55      	ldr	r3, [pc, #340]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	3301      	adds	r3, #1
 8005d72:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7c:	617b      	str	r3, [r7, #20]
        break;
 8005d7e:	e003      	b.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005d80:	4b51      	ldr	r3, [pc, #324]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005d82:	617b      	str	r3, [r7, #20]
        break;
 8005d84:	e000      	b.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8005d86:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d8e:	f040 808d 	bne.w	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005d92:	4b4a      	ldr	r3, [pc, #296]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d98:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005da0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005da8:	d07c      	beq.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005db0:	d87b      	bhi.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d004      	beq.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dbe:	d039      	beq.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005dc0:	e073      	b.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d108      	bne.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005dce:	4b3b      	ldr	r3, [pc, #236]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dd6:	4a3a      	ldr	r2, [pc, #232]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	e007      	b.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005de0:	4b36      	ldr	r3, [pc, #216]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005de8:	4a36      	ldr	r2, [pc, #216]	@ (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dee:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005df0:	4b32      	ldr	r3, [pc, #200]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df6:	0e1b      	lsrs	r3, r3, #24
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e04:	099b      	lsrs	r3, r3, #6
 8005e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	fb03 f202 	mul.w	r2, r3, r2
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e16:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005e18:	4b28      	ldr	r3, [pc, #160]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e1e:	0a1b      	lsrs	r3, r3, #8
 8005e20:	f003 031f 	and.w	r3, r3, #31
 8005e24:	3301      	adds	r3, #1
 8005e26:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e30:	617b      	str	r3, [r7, #20]
        break;
 8005e32:	e03b      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005e34:	4b21      	ldr	r3, [pc, #132]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d108      	bne.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e40:	4b1e      	ldr	r3, [pc, #120]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e48:	4a1d      	ldr	r2, [pc, #116]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	e007      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005e52:	4b1a      	ldr	r3, [pc, #104]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e60:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005e62:	4b16      	ldr	r3, [pc, #88]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e68:	0e1b      	lsrs	r3, r3, #24
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005e70:	4b12      	ldr	r3, [pc, #72]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e76:	099b      	lsrs	r3, r3, #6
 8005e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	fb03 f202 	mul.w	r2, r3, r2
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e88:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e90:	f003 031f 	and.w	r3, r3, #31
 8005e94:	3301      	adds	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea0:	617b      	str	r3, [r7, #20]
        break;
 8005ea2:	e003      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ea4:	4b08      	ldr	r3, [pc, #32]	@ (8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005ea6:	617b      	str	r3, [r7, #20]
        break;
 8005ea8:	e000      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8005eaa:	bf00      	nop
      }
    }
  }

  return frequency;
 8005eac:	697b      	ldr	r3, [r7, #20]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	00f42400 	.word	0x00f42400
 8005ec4:	017d7840 	.word	0x017d7840
 8005ec8:	00bb8000 	.word	0x00bb8000

08005ecc <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d904      	bls.n	8005eee <HAL_SAI_InitProtocol+0x22>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	3b03      	subs	r3, #3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d812      	bhi.n	8005f12 <HAL_SAI_InitProtocol+0x46>
 8005eec:	e008      	b.n	8005f00 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fae7 	bl	80064c8 <SAI_InitI2S>
 8005efa:	4603      	mov	r3, r0
 8005efc:	75fb      	strb	r3, [r7, #23]
      break;
 8005efe:	e00b      	b.n	8005f18 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fb8c 	bl	8006624 <SAI_InitPCM>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f10:	e002      	b.n	8005f18 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	75fb      	strb	r3, [r7, #23]
      break;
 8005f16:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d104      	bne.n	8005f28 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f808 	bl	8005f34 <HAL_SAI_Init>
 8005f24:	4603      	mov	r3, r0
 8005f26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e156      	b.n	8006200 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7fb fc6c 	bl	8001844 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fc0b 	bl	8006790 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d00c      	beq.n	8005f9c <HAL_SAI_Init+0x68>
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d80d      	bhi.n	8005fa2 <HAL_SAI_Init+0x6e>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_SAI_Init+0x5c>
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d003      	beq.n	8005f96 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8005f8e:	e008      	b.n	8005fa2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]
      break;
 8005f94:	e006      	b.n	8005fa4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005f96:	2310      	movs	r3, #16
 8005f98:	61fb      	str	r3, [r7, #28]
      break;
 8005f9a:	e003      	b.n	8005fa4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005f9c:	2320      	movs	r3, #32
 8005f9e:	61fb      	str	r3, [r7, #28]
      break;
 8005fa0:	e000      	b.n	8005fa4 <HAL_SAI_Init+0x70>
      break;
 8005fa2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d81e      	bhi.n	8005fea <HAL_SAI_Init+0xb6>
 8005fac:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb4 <HAL_SAI_Init+0x80>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	08005fc5 	.word	0x08005fc5
 8005fb8:	08005fcb 	.word	0x08005fcb
 8005fbc:	08005fd3 	.word	0x08005fd3
 8005fc0:	08005fdb 	.word	0x08005fdb
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
    }
    break;
 8005fc8:	e010      	b.n	8005fec <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fce:	617b      	str	r3, [r7, #20]
    }
    break;
 8005fd0:	e00c      	b.n	8005fec <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005fd2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005fd6:	617b      	str	r3, [r7, #20]
    }
    break;
 8005fd8:	e008      	b.n	8005fec <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005fda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005fde:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005fe8:	e000      	b.n	8005fec <HAL_SAI_Init+0xb8>
    default:
      break;
 8005fea:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a85      	ldr	r2, [pc, #532]	@ (8006208 <HAL_SAI_Init+0x2d4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d004      	beq.n	8006000 <HAL_SAI_Init+0xcc>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a84      	ldr	r2, [pc, #528]	@ (800620c <HAL_SAI_Init+0x2d8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d103      	bne.n	8006008 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006000:	4a83      	ldr	r2, [pc, #524]	@ (8006210 <HAL_SAI_Init+0x2dc>)
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	e002      	b.n	800600e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006008:	4a82      	ldr	r2, [pc, #520]	@ (8006214 <HAL_SAI_Init+0x2e0>)
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d04c      	beq.n	80060b0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a7a      	ldr	r2, [pc, #488]	@ (8006208 <HAL_SAI_Init+0x2d4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d004      	beq.n	800602e <HAL_SAI_Init+0xfa>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a78      	ldr	r2, [pc, #480]	@ (800620c <HAL_SAI_Init+0x2d8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d104      	bne.n	8006038 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800602e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006032:	f7ff fe0b 	bl	8005c4c <HAL_RCCEx_GetPeriphCLKFreq>
 8006036:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a76      	ldr	r2, [pc, #472]	@ (8006218 <HAL_SAI_Init+0x2e4>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <HAL_SAI_Init+0x118>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a75      	ldr	r2, [pc, #468]	@ (800621c <HAL_SAI_Init+0x2e8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d104      	bne.n	8006056 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800604c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006050:	f7ff fdfc 	bl	8005c4c <HAL_RCCEx_GetPeriphCLKFreq>
 8006054:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	461a      	mov	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	025b      	lsls	r3, r3, #9
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
 800606c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4a6b      	ldr	r2, [pc, #428]	@ (8006220 <HAL_SAI_Init+0x2ec>)
 8006072:	fba2 2303 	umull	r2, r3, r2, r3
 8006076:	08da      	lsrs	r2, r3, #3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800607c:	68f9      	ldr	r1, [r7, #12]
 800607e:	4b68      	ldr	r3, [pc, #416]	@ (8006220 <HAL_SAI_Init+0x2ec>)
 8006080:	fba3 2301 	umull	r2, r3, r3, r1
 8006084:	08da      	lsrs	r2, r3, #3
 8006086:	4613      	mov	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	1aca      	subs	r2, r1, r3
 8006090:	2a08      	cmp	r2, #8
 8006092:	d904      	bls.n	800609e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d104      	bne.n	80060b0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	085a      	lsrs	r2, r3, #1
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <HAL_SAI_Init+0x18c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d109      	bne.n	80060d4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_SAI_Init+0x198>
 80060c8:	2300      	movs	r3, #0
 80060ca:	e001      	b.n	80060d0 <HAL_SAI_Init+0x19c>
 80060cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	e008      	b.n	80060e6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d102      	bne.n	80060e2 <HAL_SAI_Init+0x1ae>
 80060dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060e0:	e000      	b.n	80060e4 <HAL_SAI_Init+0x1b0>
 80060e2:	2300      	movs	r3, #0
 80060e4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6819      	ldr	r1, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	4b4c      	ldr	r3, [pc, #304]	@ (8006224 <HAL_SAI_Init+0x2f0>)
 80060f2:	400b      	ands	r3, r1
 80060f4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6819      	ldr	r1, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006104:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800610a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006110:	431a      	orrs	r2, r3
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800611e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800612a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	051b      	lsls	r3, r3, #20
 8006132:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6859      	ldr	r1, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b38      	ldr	r3, [pc, #224]	@ (8006228 <HAL_SAI_Init+0x2f4>)
 8006148:	400b      	ands	r3, r1
 800614a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6859      	ldr	r1, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6899      	ldr	r1, [r3, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	4b2d      	ldr	r3, [pc, #180]	@ (800622c <HAL_SAI_Init+0x2f8>)
 8006176:	400b      	ands	r3, r1
 8006178:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6899      	ldr	r1, [r3, #8]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006184:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800618a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8006190:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8006196:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800619c:	3b01      	subs	r3, #1
 800619e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80061a0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68d9      	ldr	r1, [r3, #12]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80061b8:	400b      	ands	r3, r1
 80061ba:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68d9      	ldr	r1, [r3, #12]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ca:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d0:	041b      	lsls	r3, r3, #16
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d8:	3b01      	subs	r3, #1
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3720      	adds	r7, #32
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40015804 	.word	0x40015804
 800620c:	40015824 	.word	0x40015824
 8006210:	40015800 	.word	0x40015800
 8006214:	40015c00 	.word	0x40015c00
 8006218:	40015c04 	.word	0x40015c04
 800621c:	40015c24 	.word	0x40015c24
 8006220:	cccccccd 	.word	0xcccccccd
 8006224:	ff05c010 	.word	0xff05c010
 8006228:	ffff1ff0 	.word	0xffff1ff0
 800622c:	fff88000 	.word	0xfff88000

08006230 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800623e:	f7fc febd 	bl	8002fbc <HAL_GetTick>
 8006242:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <HAL_SAI_Transmit_DMA+0x20>
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e093      	b.n	800637c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b01      	cmp	r3, #1
 800625e:	f040 808c 	bne.w	800637a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006268:	2b01      	cmp	r3, #1
 800626a:	d101      	bne.n	8006270 <HAL_SAI_Transmit_DMA+0x40>
 800626c:	2302      	movs	r3, #2
 800626e:	e085      	b.n	800637c <HAL_SAI_Transmit_DMA+0x14c>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2212      	movs	r2, #18
 800629a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062a2:	4a38      	ldr	r2, [pc, #224]	@ (8006384 <HAL_SAI_Transmit_DMA+0x154>)
 80062a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062aa:	4a37      	ldr	r2, [pc, #220]	@ (8006388 <HAL_SAI_Transmit_DMA+0x158>)
 80062ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062b2:	4a36      	ldr	r2, [pc, #216]	@ (800638c <HAL_SAI_Transmit_DMA+0x15c>)
 80062b4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ba:	2200      	movs	r2, #0
 80062bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062c6:	4619      	mov	r1, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	331c      	adds	r3, #28
 80062ce:	461a      	mov	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80062d6:	f7fd f861 	bl	800339c <HAL_DMA_Start_IT>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e047      	b.n	800637c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80062ec:	2100      	movs	r1, #0
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 fa18 	bl	8006724 <SAI_InterruptFlag>
 80062f4:	4601      	mov	r1, r0
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006312:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006314:	e015      	b.n	8006342 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8006316:	f7fc fe51 	bl	8002fbc <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006324:	d90d      	bls.n	8006342 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800632c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e01c      	b.n	800637c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0e2      	beq.n	8006316 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d107      	bne.n	800636e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800636c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	e000      	b.n	800637c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800637a:	2302      	movs	r3, #2
  }
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	08006861 	.word	0x08006861
 8006388:	08006801 	.word	0x08006801
 800638c:	080068f9 	.word	0x080068f9

08006390 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	4613      	mov	r3, r2
 800639c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <HAL_SAI_Receive_DMA+0x1a>
 80063a4:	88fb      	ldrh	r3, [r7, #6]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e074      	b.n	8006498 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d16d      	bne.n	8006496 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_SAI_Receive_DMA+0x38>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e067      	b.n	8006498 <HAL_SAI_Receive_DMA+0x108>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	88fa      	ldrh	r2, [r7, #6]
 80063da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	88fa      	ldrh	r2, [r7, #6]
 80063e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2222      	movs	r2, #34	@ 0x22
 80063f2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063fa:	4a29      	ldr	r2, [pc, #164]	@ (80064a0 <HAL_SAI_Receive_DMA+0x110>)
 80063fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006402:	4a28      	ldr	r2, [pc, #160]	@ (80064a4 <HAL_SAI_Receive_DMA+0x114>)
 8006404:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800640a:	4a27      	ldr	r2, [pc, #156]	@ (80064a8 <HAL_SAI_Receive_DMA+0x118>)
 800640c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006412:	2200      	movs	r2, #0
 8006414:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	331c      	adds	r3, #28
 8006420:	4619      	mov	r1, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006426:	461a      	mov	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800642e:	f7fc ffb5 	bl	800339c <HAL_DMA_Start_IT>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e029      	b.n	8006498 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006444:	2100      	movs	r1, #0
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 f96c 	bl	8006724 <SAI_InterruptFlag>
 800644c:	4601      	mov	r1, r0
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800646a:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d107      	bne.n	800648a <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006488:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	e000      	b.n	8006498 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8006496:	2302      	movs	r3, #2
  }
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	080068dd 	.word	0x080068dd
 80064a4:	0800687d 	.word	0x0800687d
 80064a8:	080068f9 	.word	0x080068f9

080064ac <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  return hsai->State;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80064ba:	b2db      	uxtb	r3, r3
}
 80064bc:	4618      	mov	r0, r3
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <SAI_InitI2S+0x2a>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d103      	bne.n	80064fa <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80064f8:	e002      	b.n	8006500 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006506:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800650e:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e076      	b.n	8006618 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d107      	bne.n	8006540 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800653c:	651a      	str	r2, [r3, #80]	@ 0x50
 800653e:	e006      	b.n	800654e <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006546:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b03      	cmp	r3, #3
 8006552:	d84f      	bhi.n	80065f4 <SAI_InitI2S+0x12c>
 8006554:	a201      	add	r2, pc, #4	@ (adr r2, 800655c <SAI_InitI2S+0x94>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	0800656d 	.word	0x0800656d
 8006560:	0800658f 	.word	0x0800658f
 8006564:	080065b1 	.word	0x080065b1
 8006568:	080065d3 	.word	0x080065d3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2280      	movs	r2, #128	@ 0x80
 8006570:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	085b      	lsrs	r3, r3, #1
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	011a      	lsls	r2, r3, #4
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2240      	movs	r2, #64	@ 0x40
 800658a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800658c:	e034      	b.n	80065f8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2280      	movs	r2, #128	@ 0x80
 8006592:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	085b      	lsrs	r3, r3, #1
 8006598:	019a      	lsls	r2, r3, #6
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2280      	movs	r2, #128	@ 0x80
 80065ac:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80065ae:	e023      	b.n	80065f8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	22c0      	movs	r2, #192	@ 0xc0
 80065b4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	085b      	lsrs	r3, r3, #1
 80065ba:	019a      	lsls	r2, r3, #6
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2280      	movs	r2, #128	@ 0x80
 80065ce:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80065d0:	e012      	b.n	80065f8 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	22e0      	movs	r2, #224	@ 0xe0
 80065d6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	085b      	lsrs	r3, r3, #1
 80065dc:	019a      	lsls	r2, r3, #6
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2280      	movs	r2, #128	@ 0x80
 80065f0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80065f2:	e001      	b.n	80065f8 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e00f      	b.n	8006618 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d10b      	bne.n	8006616 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d102      	bne.n	800660a <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2210      	movs	r2, #16
 8006608:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d102      	bne.n	8006616 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2208      	movs	r2, #8
 8006614:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <SAI_InitPCM+0x2a>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2b02      	cmp	r3, #2
 800664c:	d103      	bne.n	8006656 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006654:	e002      	b.n	800665c <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006668:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006670:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006684:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b04      	cmp	r3, #4
 800668a:	d103      	bne.n	8006694 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2201      	movs	r2, #1
 8006690:	645a      	str	r2, [r3, #68]	@ 0x44
 8006692:	e002      	b.n	800669a <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	220d      	movs	r2, #13
 8006698:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b03      	cmp	r3, #3
 800669e:	d837      	bhi.n	8006710 <SAI_InitPCM+0xec>
 80066a0:	a201      	add	r2, pc, #4	@ (adr r2, 80066a8 <SAI_InitPCM+0x84>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	080066b9 	.word	0x080066b9
 80066ac:	080066cf 	.word	0x080066cf
 80066b0:	080066e5 	.word	0x080066e5
 80066b4:	080066fb 	.word	0x080066fb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2280      	movs	r2, #128	@ 0x80
 80066bc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	011a      	lsls	r2, r3, #4
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2240      	movs	r2, #64	@ 0x40
 80066ca:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80066cc:	e022      	b.n	8006714 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2280      	movs	r2, #128	@ 0x80
 80066d2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2280      	movs	r2, #128	@ 0x80
 80066e0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80066e2:	e017      	b.n	8006714 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	22c0      	movs	r2, #192	@ 0xc0
 80066e8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2280      	movs	r2, #128	@ 0x80
 80066f6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80066f8:	e00c      	b.n	8006714 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	22e0      	movs	r2, #224	@ 0xe0
 80066fe:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2280      	movs	r2, #128	@ 0x80
 800670c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800670e:	e001      	b.n	8006714 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop

08006724 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800672e:	2301      	movs	r3, #1
 8006730:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d103      	bne.n	8006740 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f043 0308 	orr.w	r3, r3, #8
 800673e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006744:	2b08      	cmp	r3, #8
 8006746:	d10b      	bne.n	8006760 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800674c:	2b03      	cmp	r3, #3
 800674e:	d003      	beq.n	8006758 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d103      	bne.n	8006760 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f043 0310 	orr.w	r3, r3, #16
 800675e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	2b03      	cmp	r3, #3
 8006766:	d003      	beq.n	8006770 <SAI_InterruptFlag+0x4c>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d104      	bne.n	800677a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	e003      	b.n	8006782 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f043 0304 	orr.w	r3, r3, #4
 8006780:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006782:	68fb      	ldr	r3, [r7, #12]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006798:	4b17      	ldr	r3, [pc, #92]	@ (80067f8 <SAI_Disable+0x68>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a17      	ldr	r2, [pc, #92]	@ (80067fc <SAI_Disable+0x6c>)
 800679e:	fba2 2303 	umull	r2, r3, r2, r3
 80067a2:	0b1b      	lsrs	r3, r3, #12
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80067ba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	1e5a      	subs	r2, r3, #1
 80067c0:	60fa      	str	r2, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	72fb      	strb	r3, [r7, #11]
      break;
 80067da:	e006      	b.n	80067ea <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e8      	bne.n	80067bc <SAI_Disable+0x2c>

  return status;
 80067ea:	7afb      	ldrb	r3, [r7, #11]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	20000004 	.word	0x20000004
 80067fc:	95cbec1b 	.word	0x95cbec1b

08006800 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006816:	d01c      	beq.n	8006852 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800682e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006830:	2100      	movs	r1, #0
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f7ff ff76 	bl	8006724 <SAI_InterruptFlag>
 8006838:	4603      	mov	r3, r0
 800683a:	43d9      	mvns	r1, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691a      	ldr	r2, [r3, #16]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	400a      	ands	r2, r1
 8006848:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7fc fae7 	bl	8002e26 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7fc fae3 	bl	8002e3a <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006874:	bf00      	nop
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006888:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006892:	d01c      	beq.n	80068ce <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80068a2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80068ac:	2100      	movs	r1, #0
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7ff ff38 	bl	8006724 <SAI_InterruptFlag>
 80068b4:	4603      	mov	r3, r0
 80068b6:	43d9      	mvns	r1, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	400a      	ands	r2, r1
 80068c4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f7fc faf9 	bl	8002ec6 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80068d4:	bf00      	nop
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7fc faf5 	bl	8002eda <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80068f0:	bf00      	nop
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800690c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800691a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691c:	2b01      	cmp	r3, #1
 800691e:	d004      	beq.n	800692a <SAI_DMAError+0x32>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006926:	2b01      	cmp	r3, #1
 8006928:	d112      	bne.n	8006950 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006938:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f7ff ff28 	bl	8006790 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7fc fa7d 	bl	8002e50 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b084      	sub	sp, #16
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e09d      	b.n	8006aac <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006974:	2b00      	cmp	r3, #0
 8006976:	d108      	bne.n	800698a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006980:	d009      	beq.n	8006996 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	61da      	str	r2, [r3, #28]
 8006988:	e005      	b.n	8006996 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d106      	bne.n	80069b6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7fa fee5 	bl	8001780 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2202      	movs	r2, #2
 80069ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069cc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069d6:	d902      	bls.n	80069de <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	e002      	b.n	80069e4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80069e2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80069ec:	d007      	beq.n	80069fe <HAL_SPI_Init+0xa0>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069f6:	d002      	beq.n	80069fe <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a40:	ea42 0103 	orr.w	r1, r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	0c1b      	lsrs	r3, r3, #16
 8006a5a:	f003 0204 	and.w	r2, r3, #4
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a62:	f003 0310 	and.w	r3, r3, #16
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a6c:	f003 0308 	and.w	r3, r3, #8
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006a7a:	ea42 0103 	orr.w	r1, r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69da      	ldr	r2, [r3, #28]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <memset>:
 8006ab4:	4402      	add	r2, r0
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d100      	bne.n	8006abe <memset+0xa>
 8006abc:	4770      	bx	lr
 8006abe:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac2:	e7f9      	b.n	8006ab8 <memset+0x4>

08006ac4 <__libc_init_array>:
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8006afc <__libc_init_array+0x38>)
 8006ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8006b00 <__libc_init_array+0x3c>)
 8006aca:	1b64      	subs	r4, r4, r5
 8006acc:	10a4      	asrs	r4, r4, #2
 8006ace:	2600      	movs	r6, #0
 8006ad0:	42a6      	cmp	r6, r4
 8006ad2:	d109      	bne.n	8006ae8 <__libc_init_array+0x24>
 8006ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8006b04 <__libc_init_array+0x40>)
 8006ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8006b08 <__libc_init_array+0x44>)
 8006ad8:	f000 f818 	bl	8006b0c <_init>
 8006adc:	1b64      	subs	r4, r4, r5
 8006ade:	10a4      	asrs	r4, r4, #2
 8006ae0:	2600      	movs	r6, #0
 8006ae2:	42a6      	cmp	r6, r4
 8006ae4:	d105      	bne.n	8006af2 <__libc_init_array+0x2e>
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
 8006ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aec:	4798      	blx	r3
 8006aee:	3601      	adds	r6, #1
 8006af0:	e7ee      	b.n	8006ad0 <__libc_init_array+0xc>
 8006af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af6:	4798      	blx	r3
 8006af8:	3601      	adds	r6, #1
 8006afa:	e7f2      	b.n	8006ae2 <__libc_init_array+0x1e>
 8006afc:	08006b44 	.word	0x08006b44
 8006b00:	08006b44 	.word	0x08006b44
 8006b04:	08006b44 	.word	0x08006b44
 8006b08:	08006b48 	.word	0x08006b48

08006b0c <_init>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	bf00      	nop
 8006b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b12:	bc08      	pop	{r3}
 8006b14:	469e      	mov	lr, r3
 8006b16:	4770      	bx	lr

08006b18 <_fini>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	bf00      	nop
 8006b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1e:	bc08      	pop	{r3}
 8006b20:	469e      	mov	lr, r3
 8006b22:	4770      	bx	lr
