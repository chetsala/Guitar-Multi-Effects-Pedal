
Guitar-Multi-Effects-Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000982c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b08  080099f4  080099f4  0000a9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4fc  0800b4fc  0000d050  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4fc  0800b4fc  0000c4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b504  0800b504  0000d050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b504  0800b504  0000c504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b508  0800b508  0000c508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  0800b50c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002414  20000050  0800b55c  0000d050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002464  0800b55c  0000d464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f861  00000000  00000000  0000d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fec  00000000  00000000  0002c8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  000308d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015fa  00000000  00000000  000324f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad3d  00000000  00000000  00033aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023a26  00000000  00000000  0005e827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105ce5  00000000  00000000  0008224d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00187f32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077cc  00000000  00000000  00187f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0018f744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000050 	.word	0x20000050
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080099dc 	.word	0x080099dc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000054 	.word	0x20000054
 8000204:	080099dc 	.word	0x080099dc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <fill_buffer_with_square_wave>:




static void fill_buffer_with_square_wave(int16_t * buf, uint32_t num_samples)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b089      	sub	sp, #36	@ 0x24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	// Fill up a 100Hz square wave
	//48khz sample rate --> 480 samples in 100 hz --> toggle every 240 samples
	int toggle_period = 240;
 8000502:	23f0      	movs	r3, #240	@ 0xf0
 8000504:	613b      	str	r3, [r7, #16]
	int count = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
	int wave_state = 1;
 800050a:	2301      	movs	r3, #1
 800050c:	61bb      	str	r3, [r7, #24]
	int magnitude = 30000;
 800050e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000512:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i < num_samples; i++){
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e01b      	b.n	8000552 <fill_buffer_with_square_wave+0x5a>

		buf[i] = magnitude * wave_state;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	b29a      	uxth	r2, r3
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	b29b      	uxth	r3, r3
 8000522:	fb12 f303 	smulbb	r3, r2, r3
 8000526:	b299      	uxth	r1, r3
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	4413      	add	r3, r2
 8000530:	b20a      	sxth	r2, r1
 8000532:	801a      	strh	r2, [r3, #0]

		count++;
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	3301      	adds	r3, #1
 8000538:	61fb      	str	r3, [r7, #28]
		if(count >= toggle_period){
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	693b      	ldr	r3, [r7, #16]
 800053e:	429a      	cmp	r2, r3
 8000540:	db04      	blt.n	800054c <fill_buffer_with_square_wave+0x54>
			count = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
			wave_state = wave_state * (-1); //toggle
 8000546:	69bb      	ldr	r3, [r7, #24]
 8000548:	425b      	negs	r3, r3
 800054a:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < num_samples; i++){
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	3301      	adds	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	429a      	cmp	r2, r3
 8000558:	d8df      	bhi.n	800051a <fill_buffer_with_square_wave+0x22>
		}
	}
}
 800055a:	bf00      	nop
 800055c:	bf00      	nop
 800055e:	3724      	adds	r7, #36	@ 0x24
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <Multieffect>:


void Multieffect(void)
	{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
		/* Codec initialization, SAI */
	  if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, volume, I2S_AUDIOFREQ_48K) == AUDIO_OK)
 800056c:	4b22      	ldr	r3, [pc, #136]	@ (80005f8 <Multieffect+0x90>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000574:	4619      	mov	r1, r3
 8000576:	2002      	movs	r0, #2
 8000578:	f001 facc 	bl	8001b14 <BSP_AUDIO_OUT_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d105      	bne.n	800058e <Multieffect+0x26>
	  {
		  Display_Draw_Text("Codec Initialized", 0, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	481d      	ldr	r0, [pc, #116]	@ (80005fc <Multieffect+0x94>)
 8000588:	f000 f86a 	bl	8000660 <Display_Draw_Text>
 800058c:	e004      	b.n	8000598 <Multieffect+0x30>
	  }
	  else
	  {
		  Display_Draw_Text("Codec Initialization Failed", 0, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	481b      	ldr	r0, [pc, #108]	@ (8000600 <Multieffect+0x98>)
 8000594:	f000 f864 	bl	8000660 <Display_Draw_Text>
	  }
	  fill_buffer_with_square_wave(playbackBuffer, MY_BUFFER_SIZE_SAMPLES);
 8000598:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800059c:	4819      	ldr	r0, [pc, #100]	@ (8000604 <Multieffect+0x9c>)
 800059e:	f7ff ffab 	bl	80004f8 <fill_buffer_with_square_wave>
	  BSP_AUDIO_OUT_SetAudioFrameSlot(SAI_SLOTACTIVE_0);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f001 fb32 	bl	8001c0c <BSP_AUDIO_OUT_SetAudioFrameSlot>
	  BSP_AUDIO_OUT_Play((uint16_t*)AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE * 2);
 80005a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005ac:	4816      	ldr	r0, [pc, #88]	@ (8000608 <Multieffect+0xa0>)
 80005ae:	f001 fb03 	bl	8001bb8 <BSP_AUDIO_OUT_Play>


	 		 while (1)
	 	  {
	 	    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 80005b2:	e002      	b.n	80005ba <Multieffect+0x52>
	 	    {
	 				HAL_Delay(1);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f002 fc2b 	bl	8002e10 <HAL_Delay>
	 	    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 80005ba:	4b14      	ldr	r3, [pc, #80]	@ (800060c <Multieffect+0xa4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d1f8      	bne.n	80005b4 <Multieffect+0x4c>
	 	    }
	 	    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80005c2:	4b12      	ldr	r3, [pc, #72]	@ (800060c <Multieffect+0xa4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]

	 	    memcpy((uint16_t *)(AUDIO_BUFFER_OUT),
 80005c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005cc:	4910      	ldr	r1, [pc, #64]	@ (8000610 <Multieffect+0xa8>)
 80005ce:	480e      	ldr	r0, [pc, #56]	@ (8000608 <Multieffect+0xa0>)
 80005d0:	f009 f9f6 	bl	80099c0 <memcpy>
	 	           (uint16_t *)(AUDIO_BUFFER_IN),
	 	           AUDIO_BLOCK_SIZE);

	 	    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 80005d4:	e002      	b.n	80005dc <Multieffect+0x74>
	 	    {
	 				HAL_Delay(1);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f002 fc1a 	bl	8002e10 <HAL_Delay>
	 	    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 80005dc:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <Multieffect+0xa4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d1f8      	bne.n	80005d6 <Multieffect+0x6e>
	 	    }
	 	    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <Multieffect+0xa4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
	 	    memcpy((uint16_t *)(AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)),
 80005ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005ee:	4909      	ldr	r1, [pc, #36]	@ (8000614 <Multieffect+0xac>)
 80005f0:	4809      	ldr	r0, [pc, #36]	@ (8000618 <Multieffect+0xb0>)
 80005f2:	f009 f9e5 	bl	80099c0 <memcpy>
	 	  {
 80005f6:	e7dc      	b.n	80005b2 <Multieffect+0x4a>
 80005f8:	20000000 	.word	0x20000000
 80005fc:	080099f4 	.word	0x080099f4
 8000600:	08009a08 	.word	0x08009a08
 8000604:	2000006c 	.word	0x2000006c
 8000608:	c0115a00 	.word	0xc0115a00
 800060c:	20001c8c 	.word	0x20001c8c
 8000610:	c0115800 	.word	0xc0115800
 8000614:	c0115900 	.word	0xc0115900
 8000618:	c0115b00 	.word	0xc0115b00

0800061c <Display_Init>:




void Display_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    // Initialize the display hardware
    BSP_LCD_Init();
 8000620:	f001 fcfa 	bl	8002018 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000624:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8000628:	2000      	movs	r0, #0
 800062a:	f001 fd8d 	bl	8002148 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(0);
 800062e:	2000      	movs	r0, #0
 8000630:	f001 fdea 	bl	8002208 <BSP_LCD_SelectLayer>

    // Clear the display with a default color
    BSP_LCD_Clear(LCD_COLOR_WHITE); // Clear the LCD display
 8000634:	f04f 30ff 	mov.w	r0, #4294967295
 8000638:	f001 fe42 	bl	80022c0 <BSP_LCD_Clear>
    BSP_LCD_DisplayOn();
 800063c:	f001 ffbc 	bl	80025b8 <BSP_LCD_DisplayOn>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000640:	f04f 30ff 	mov.w	r0, #4294967295
 8000644:	f001 fe08 	bl	8002258 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000648:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800064c:	f001 fdec 	bl	8002228 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24); //set the font of the text
 8000650:	4802      	ldr	r0, [pc, #8]	@ (800065c <Display_Init+0x40>)
 8000652:	f001 fe1b 	bl	800228c <BSP_LCD_SetFont>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000008 	.word	0x20000008

08000660 <Display_Draw_Text>:


void Display_Draw_Text(const char *text, uint16_t x, uint16_t y)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	807b      	strh	r3, [r7, #2]
 800066c:	4613      	mov	r3, r2
 800066e:	803b      	strh	r3, [r7, #0]

    BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, CENTER_MODE);
 8000670:	8839      	ldrh	r1, [r7, #0]
 8000672:	8878      	ldrh	r0, [r7, #2]
 8000674:	2301      	movs	r3, #1
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	f001 fe8e 	bl	8002398 <BSP_LCD_DisplayStringAt>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f002 fb64 	bl	8002d54 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f818 	bl	80006c0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000690:	f000 f886 	bl	80007a0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 fb32 	bl	8000cfc <MX_GPIO_Init>
  MX_DMA_Init();
 8000698:	f000 fabc 	bl	8000c14 <MX_DMA_Init>
  MX_SAI2_Init();
 800069c:	f000 f98e 	bl	80009bc <MX_SAI2_Init>
  MX_USART1_UART_Init();
 80006a0:	f000 fa88 	bl	8000bb4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80006a4:	f000 fa32 	bl	8000b0c <MX_TIM1_Init>
  MX_DMA2D_Init();
 80006a8:	f000 f8a4 	bl	80007f4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80006ac:	f000 f8d4 	bl	8000858 <MX_LTDC_Init>
  MX_FMC_Init();
 80006b0:	f000 fad6 	bl	8000c60 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
   Display_Init();
 80006b4:	f7ff ffb2 	bl	800061c <Display_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Multieffect();
 80006b8:	f7ff ff56 	bl	8000568 <Multieffect>
  {
 80006bc:	bf00      	nop
 80006be:	e7fb      	b.n	80006b8 <main+0x34>

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	@ 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f009 f949 	bl	8009966 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e4:	f004 fe92 	bl	800540c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000798 <SystemClock_Config+0xd8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	4a2a      	ldr	r2, [pc, #168]	@ (8000798 <SystemClock_Config+0xd8>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f4:	4b28      	ldr	r3, [pc, #160]	@ (8000798 <SystemClock_Config+0xd8>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	4b26      	ldr	r3, [pc, #152]	@ (800079c <SystemClock_Config+0xdc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a25      	ldr	r2, [pc, #148]	@ (800079c <SystemClock_Config+0xdc>)
 8000706:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b23      	ldr	r3, [pc, #140]	@ (800079c <SystemClock_Config+0xdc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800072c:	2319      	movs	r3, #25
 800072e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000730:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000734:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fec2 	bl	80054cc <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800074e:	f000 fb65 	bl	8000e1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000752:	f004 fe6b 	bl	800542c <HAL_PWREx_EnableOverDrive>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800075c:	f000 fb5e 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2302      	movs	r3, #2
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2106      	movs	r1, #6
 800077e:	4618      	mov	r0, r3
 8000780:	f005 f948 	bl	8005a14 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800078a:	f000 fb47 	bl	8000e1c <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	@ 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0a2      	sub	sp, #136	@ 0x88
 80007a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2284      	movs	r2, #132	@ 0x84
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f009 f8da 	bl	8009966 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <PeriphCommonClock_Config+0x50>)
 80007b4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80007b6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80007ba:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80007bc:	2305      	movs	r3, #5
 80007be:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80007cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80007d0:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80007d2:	2300      	movs	r3, #0
 80007d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4618      	mov	r0, r3
 80007da:	f005 fb01 	bl	8005de0 <HAL_RCCEx_PeriphCLKConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80007e4:	f000 fb1a 	bl	8000e1c <Error_Handler>
  }
}
 80007e8:	bf00      	nop
 80007ea:	3788      	adds	r7, #136	@ 0x88
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	00100008 	.word	0x00100008

080007f4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007f8:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <MX_DMA2D_Init+0x5c>)
 80007fa:	4a16      	ldr	r2, [pc, #88]	@ (8000854 <MX_DMA2D_Init+0x60>)
 80007fc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007fe:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_DMA2D_Init+0x5c>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <MX_DMA2D_Init+0x5c>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800080a:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_DMA2D_Init+0x5c>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000810:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <MX_DMA2D_Init+0x5c>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000816:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <MX_DMA2D_Init+0x5c>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <MX_DMA2D_Init+0x5c>)
 800081e:	2200      	movs	r2, #0
 8000820:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000822:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <MX_DMA2D_Init+0x5c>)
 8000824:	2200      	movs	r2, #0
 8000826:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000828:	4809      	ldr	r0, [pc, #36]	@ (8000850 <MX_DMA2D_Init+0x5c>)
 800082a:	f002 fffd 	bl	8003828 <HAL_DMA2D_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000834:	f000 faf2 	bl	8000e1c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000838:	2101      	movs	r1, #1
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_DMA2D_Init+0x5c>)
 800083c:	f003 f952 	bl	8003ae4 <HAL_DMA2D_ConfigLayer>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000846:	f000 fae9 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20001c90 	.word	0x20001c90
 8000854:	4002b000 	.word	0x4002b000

08000858 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b09a      	sub	sp, #104	@ 0x68
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800085e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000862:	2234      	movs	r2, #52	@ 0x34
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f009 f87d 	bl	8009966 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2234      	movs	r2, #52	@ 0x34
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f009 f877 	bl	8009966 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000878:	4b4e      	ldr	r3, [pc, #312]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 800087a:	4a4f      	ldr	r2, [pc, #316]	@ (80009b8 <MX_LTDC_Init+0x160>)
 800087c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800087e:	4b4d      	ldr	r3, [pc, #308]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000884:	4b4b      	ldr	r3, [pc, #300]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800088a:	4b4a      	ldr	r3, [pc, #296]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000890:	4b48      	ldr	r3, [pc, #288]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000896:	4b47      	ldr	r3, [pc, #284]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 8000898:	2207      	movs	r2, #7
 800089a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800089c:	4b45      	ldr	r3, [pc, #276]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 800089e:	2203      	movs	r2, #3
 80008a0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80008a2:	4b44      	ldr	r3, [pc, #272]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 80008a4:	220e      	movs	r2, #14
 80008a6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80008a8:	4b42      	ldr	r3, [pc, #264]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 80008aa:	2205      	movs	r2, #5
 80008ac:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80008ae:	4b41      	ldr	r3, [pc, #260]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 80008b0:	f240 228e 	movw	r2, #654	@ 0x28e
 80008b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80008b6:	4b3f      	ldr	r3, [pc, #252]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 80008b8:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80008bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80008be:	4b3d      	ldr	r3, [pc, #244]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 80008c0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80008c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80008c6:	4b3b      	ldr	r3, [pc, #236]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 80008c8:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80008cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008ce:	4b39      	ldr	r3, [pc, #228]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008d6:	4b37      	ldr	r3, [pc, #220]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008de:	4b35      	ldr	r3, [pc, #212]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008e6:	4833      	ldr	r0, [pc, #204]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 80008e8:	f004 fada 	bl	8004ea0 <HAL_LTDC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80008f2:	f000 fa93 	bl	8000e1c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000906:	2300      	movs	r3, #0
 8000908:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000916:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000918:	2305      	movs	r3, #5
 800091a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800093a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	481c      	ldr	r0, [pc, #112]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 8000944:	f004 fb7c 	bl	8005040 <HAL_LTDC_ConfigLayer>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800094e:	f000 fa65 	bl	8000e1c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800096e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000972:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000974:	2305      	movs	r3, #5
 8000976:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	2201      	movs	r2, #1
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <MX_LTDC_Init+0x15c>)
 800099e:	f004 fb4f 	bl	8005040 <HAL_LTDC_ConfigLayer>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80009a8:	f000 fa38 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3768      	adds	r7, #104	@ 0x68
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20001cd0 	.word	0x20001cd0
 80009b8:	40016800 	.word	0x40016800

080009bc <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80009c0:	4b4d      	ldr	r3, [pc, #308]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 80009c2:	4a4e      	ldr	r2, [pc, #312]	@ (8000afc <MX_SAI2_Init+0x140>)
 80009c4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80009c6:	4b4c      	ldr	r3, [pc, #304]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80009cc:	4b4a      	ldr	r3, [pc, #296]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80009d2:	4b49      	ldr	r3, [pc, #292]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 80009d4:	2240      	movs	r2, #64	@ 0x40
 80009d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80009d8:	4b47      	ldr	r3, [pc, #284]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80009de:	4b46      	ldr	r3, [pc, #280]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80009e4:	4b44      	ldr	r3, [pc, #272]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80009ea:	4b43      	ldr	r3, [pc, #268]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80009f0:	4b41      	ldr	r3, [pc, #260]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80009f6:	4b40      	ldr	r3, [pc, #256]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80009fc:	4b3e      	ldr	r3, [pc, #248]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 80009fe:	4a40      	ldr	r2, [pc, #256]	@ (8000b00 <MX_SAI2_Init+0x144>)
 8000a00:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a02:	4b3d      	ldr	r3, [pc, #244]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a08:	4b3b      	ldr	r3, [pc, #236]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000a14:	4b38      	ldr	r3, [pc, #224]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000a1a:	4b37      	ldr	r3, [pc, #220]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000a20:	4b35      	ldr	r3, [pc, #212]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000a26:	4b34      	ldr	r3, [pc, #208]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000a2c:	4b32      	ldr	r3, [pc, #200]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000a32:	4b31      	ldr	r3, [pc, #196]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000a38:	4b2f      	ldr	r3, [pc, #188]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000a44:	4b2c      	ldr	r3, [pc, #176]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000a50:	4829      	ldr	r0, [pc, #164]	@ (8000af8 <MX_SAI2_Init+0x13c>)
 8000a52:	f006 f801 	bl	8006a58 <HAL_SAI_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000a5c:	f000 f9de 	bl	8000e1c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000a60:	4b28      	ldr	r3, [pc, #160]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000a62:	4a29      	ldr	r2, [pc, #164]	@ (8000b08 <MX_SAI2_Init+0x14c>)
 8000a64:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000a66:	4b27      	ldr	r3, [pc, #156]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000a6c:	4b25      	ldr	r3, [pc, #148]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000a6e:	2203      	movs	r2, #3
 8000a70:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000a72:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000a74:	2240      	movs	r2, #64	@ 0x40
 8000a76:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000a78:	4b22      	ldr	r3, [pc, #136]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000a84:	4b1f      	ldr	r3, [pc, #124]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a90:	4b1c      	ldr	r3, [pc, #112]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a9c:	4b19      	ldr	r3, [pc, #100]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000aba:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000ae4:	4807      	ldr	r0, [pc, #28]	@ (8000b04 <MX_SAI2_Init+0x148>)
 8000ae6:	f005 ffb7 	bl	8006a58 <HAL_SAI_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000af0:	f000 f994 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20001d78 	.word	0x20001d78
 8000afc:	40015c04 	.word	0x40015c04
 8000b00:	0002ee00 	.word	0x0002ee00
 8000b04:	20001dfc 	.word	0x20001dfc
 8000b08:	40015c24 	.word	0x40015c24

08000b0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b2a:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <MX_TIM1_Init+0xa0>)
 8000b2c:	4a20      	ldr	r2, [pc, #128]	@ (8000bb0 <MX_TIM1_Init+0xa4>)
 8000b2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b30:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <MX_TIM1_Init+0xa0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_TIM1_Init+0xa0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <MX_TIM1_Init+0xa0>)
 8000b3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b44:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <MX_TIM1_Init+0xa0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <MX_TIM1_Init+0xa0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <MX_TIM1_Init+0xa0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b56:	4815      	ldr	r0, [pc, #84]	@ (8000bac <MX_TIM1_Init+0xa0>)
 8000b58:	f006 fb60 	bl	800721c <HAL_TIM_Base_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b62:	f000 f95b 	bl	8000e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	480e      	ldr	r0, [pc, #56]	@ (8000bac <MX_TIM1_Init+0xa0>)
 8000b74:	f006 fbaa 	bl	80072cc <HAL_TIM_ConfigClockSource>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b7e:	f000 f94d 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	4619      	mov	r1, r3
 8000b92:	4806      	ldr	r0, [pc, #24]	@ (8000bac <MX_TIM1_Init+0xa0>)
 8000b94:	f006 fdaa 	bl	80076ec <HAL_TIMEx_MasterConfigSynchronization>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b9e:	f000 f93d 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	3720      	adds	r7, #32
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20001f40 	.word	0x20001f40
 8000bb0:	40010000 	.word	0x40010000

08000bb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bba:	4a15      	ldr	r2, [pc, #84]	@ (8000c10 <MX_USART1_UART_Init+0x5c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <MX_USART1_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_USART1_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_USART1_UART_Init+0x58>)
 8000bf8:	f006 fe06 	bl	8007808 <HAL_UART_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c02:	f000 f90b 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20001f8c 	.word	0x20001f8c
 8000c10:	40011000 	.word	0x40011000

08000c14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <MX_DMA_Init+0x48>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c5c <MX_DMA_Init+0x48>)
 8000c20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <MX_DMA_Init+0x48>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	203c      	movs	r0, #60	@ 0x3c
 8000c38:	f002 f9e9 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000c3c:	203c      	movs	r0, #60	@ 0x3c
 8000c3e:	f002 fa02 	bl	8003046 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2045      	movs	r0, #69	@ 0x45
 8000c48:	f002 f9e1 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c4c:	2045      	movs	r0, #69	@ 0x45
 8000c4e:	f002 f9fa 	bl	8003046 <HAL_NVIC_EnableIRQ>

}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	615a      	str	r2, [r3, #20]
 8000c76:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <MX_FMC_Init+0x94>)
 8000c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf8 <MX_FMC_Init+0x98>)
 8000c7c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <MX_FMC_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <MX_FMC_Init+0x94>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <MX_FMC_Init+0x94>)
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c90:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <MX_FMC_Init+0x94>)
 8000c92:	2210      	movs	r2, #16
 8000c94:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c96:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <MX_FMC_Init+0x94>)
 8000c98:	2240      	movs	r2, #64	@ 0x40
 8000c9a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <MX_FMC_Init+0x94>)
 8000c9e:	2280      	movs	r2, #128	@ 0x80
 8000ca0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <MX_FMC_Init+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <MX_FMC_Init+0x94>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000cae:	4b11      	ldr	r3, [pc, #68]	@ (8000cf4 <MX_FMC_Init+0x94>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <MX_FMC_Init+0x94>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000cba:	2310      	movs	r3, #16
 8000cbc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000cbe:	2310      	movs	r3, #16
 8000cc0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000cc6:	2310      	movs	r3, #16
 8000cc8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	@ (8000cf4 <MX_FMC_Init+0x94>)
 8000cdc:	f006 fa0d 	bl	80070fa <HAL_SDRAM_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000ce6:	f000 f899 	bl	8000e1c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000cea:	bf00      	nop
 8000cec:	3720      	adds	r7, #32
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20002014 	.word	0x20002014
 8000cf8:	a0000140 	.word	0xa0000140

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b08d      	sub	sp, #52	@ 0x34
 8000d00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d02:	4b45      	ldr	r3, [pc, #276]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a44      	ldr	r2, [pc, #272]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d08:	f043 0310 	orr.w	r3, r3, #16
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b42      	ldr	r3, [pc, #264]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b3c      	ldr	r3, [pc, #240]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b39      	ldr	r3, [pc, #228]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a38      	ldr	r2, [pc, #224]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b36      	ldr	r3, [pc, #216]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4a:	4b33      	ldr	r3, [pc, #204]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a32      	ldr	r2, [pc, #200]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b30      	ldr	r3, [pc, #192]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d5e:	623b      	str	r3, [r7, #32]
 8000d60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d62:	4b2d      	ldr	r3, [pc, #180]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a2c      	ldr	r2, [pc, #176]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d76:	61fb      	str	r3, [r7, #28]
 8000d78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a26      	ldr	r2, [pc, #152]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	61bb      	str	r3, [r7, #24]
 8000d90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d92:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a20      	ldr	r2, [pc, #128]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000daa:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a1a      	ldr	r2, [pc, #104]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a14      	ldr	r2, [pc, #80]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000dc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dda:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a0e      	ldr	r2, [pc, #56]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000de0:	f043 0320 	orr.w	r3, r3, #32
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0320 	and.w	r3, r3, #32
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <MX_GPIO_Init+0x11c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3734      	adds	r7, #52	@ 0x34
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <Error_Handler+0x8>

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	4a08      	ldr	r2, [pc, #32]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_MspInit+0x44>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800

08000e70 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <HAL_DMA2D_MspInit+0x38>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d10b      	bne.n	8000e9a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e82:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <HAL_DMA2D_MspInit+0x3c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a09      	ldr	r2, [pc, #36]	@ (8000eac <HAL_DMA2D_MspInit+0x3c>)
 8000e88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <HAL_DMA2D_MspInit+0x3c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	4002b000 	.word	0x4002b000
 8000eac:	40023800 	.word	0x40023800

08000eb0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b092      	sub	sp, #72	@ 0x48
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a99      	ldr	r2, [pc, #612]	@ (8001134 <HAL_LTDC_MspInit+0x284>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	f040 812b 	bne.w	800112a <HAL_LTDC_MspInit+0x27a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ed4:	4b98      	ldr	r3, [pc, #608]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed8:	4a97      	ldr	r2, [pc, #604]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000eda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ede:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee0:	4b95      	ldr	r3, [pc, #596]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ee8:	633b      	str	r3, [r7, #48]	@ 0x30
 8000eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eec:	4b92      	ldr	r3, [pc, #584]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef0:	4a91      	ldr	r2, [pc, #580]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef8:	4b8f      	ldr	r3, [pc, #572]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f04:	4b8c      	ldr	r3, [pc, #560]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f08:	4a8b      	ldr	r2, [pc, #556]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f10:	4b89      	ldr	r3, [pc, #548]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f1c:	4b86      	ldr	r3, [pc, #536]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f20:	4a85      	ldr	r2, [pc, #532]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f28:	4b83      	ldr	r3, [pc, #524]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f34:	4b80      	ldr	r3, [pc, #512]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f38:	4a7f      	ldr	r2, [pc, #508]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f40:	4b7d      	ldr	r3, [pc, #500]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f48:	623b      	str	r3, [r7, #32]
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4c:	4b7a      	ldr	r3, [pc, #488]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f50:	4a79      	ldr	r2, [pc, #484]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f58:	4b77      	ldr	r3, [pc, #476]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f64:	4b74      	ldr	r3, [pc, #464]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f68:	4a73      	ldr	r2, [pc, #460]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f70:	4b71      	ldr	r3, [pc, #452]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b6e      	ldr	r3, [pc, #440]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f80:	4a6d      	ldr	r2, [pc, #436]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f88:	4b6b      	ldr	r3, [pc, #428]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f94:	4b68      	ldr	r3, [pc, #416]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f98:	4a67      	ldr	r2, [pc, #412]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa0:	4b65      	ldr	r3, [pc, #404]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fac:	4b62      	ldr	r3, [pc, #392]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb0:	4a61      	ldr	r2, [pc, #388]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb8:	4b5f      	ldr	r3, [pc, #380]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc4:	4b5c      	ldr	r3, [pc, #368]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc8:	4a5b      	ldr	r2, [pc, #364]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd0:	4b59      	ldr	r3, [pc, #356]	@ (8001138 <HAL_LTDC_MspInit+0x288>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    PI14     ------> LTDC_CLK
    PH3     ------> LTDC_R1
    PG6     ------> LTDC_R7
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000fdc:	2370      	movs	r3, #112	@ 0x70
 8000fde:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fec:	230e      	movs	r3, #14
 8000fee:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ff0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4851      	ldr	r0, [pc, #324]	@ (800113c <HAL_LTDC_MspInit+0x28c>)
 8000ff8:	f002 fea2 	bl	8003d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ffc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001000:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800100e:	230e      	movs	r3, #14
 8001010:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001016:	4619      	mov	r1, r3
 8001018:	4849      	ldr	r0, [pc, #292]	@ (8001140 <HAL_LTDC_MspInit+0x290>)
 800101a:	f002 fe91 	bl	8003d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_6;
 800101e:	f44f 5321 	mov.w	r3, #10304	@ 0x2840
 8001022:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001030:	230e      	movs	r3, #14
 8001032:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001034:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001038:	4619      	mov	r1, r3
 800103a:	4842      	ldr	r0, [pc, #264]	@ (8001144 <HAL_LTDC_MspInit+0x294>)
 800103c:	f002 fe80 	bl	8003d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001040:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001044:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001052:	230e      	movs	r3, #14
 8001054:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001056:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800105a:	4619      	mov	r1, r3
 800105c:	483a      	ldr	r0, [pc, #232]	@ (8001148 <HAL_LTDC_MspInit+0x298>)
 800105e:	f002 fe6f 	bl	8003d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8001062:	2348      	movs	r3, #72	@ 0x48
 8001064:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001072:	230e      	movs	r3, #14
 8001074:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001076:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800107a:	4619      	mov	r1, r3
 800107c:	4833      	ldr	r0, [pc, #204]	@ (800114c <HAL_LTDC_MspInit+0x29c>)
 800107e:	f002 fe5f 	bl	8003d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001082:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001086:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001094:	230e      	movs	r3, #14
 8001096:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001098:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800109c:	4619      	mov	r1, r3
 800109e:	482c      	ldr	r0, [pc, #176]	@ (8001150 <HAL_LTDC_MspInit+0x2a0>)
 80010a0:	f002 fe4e 	bl	8003d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8;
 80010a4:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80010a8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010b6:	230e      	movs	r3, #14
 80010b8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010be:	4619      	mov	r1, r3
 80010c0:	4824      	ldr	r0, [pc, #144]	@ (8001154 <HAL_LTDC_MspInit+0x2a4>)
 80010c2:	f002 fe3d 	bl	8003d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_9
 80010c6:	f244 6313 	movw	r3, #17939	@ 0x4613
 80010ca:	637b      	str	r3, [r7, #52]	@ 0x34
                          |GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010d8:	230e      	movs	r3, #14
 80010da:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010e0:	4619      	mov	r1, r3
 80010e2:	481d      	ldr	r0, [pc, #116]	@ (8001158 <HAL_LTDC_MspInit+0x2a8>)
 80010e4:	f002 fe2c 	bl	8003d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_4;
 80010e8:	2390      	movs	r3, #144	@ 0x90
 80010ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010f8:	230e      	movs	r3, #14
 80010fa:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80010fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001100:	4619      	mov	r1, r3
 8001102:	4816      	ldr	r0, [pc, #88]	@ (800115c <HAL_LTDC_MspInit+0x2ac>)
 8001104:	f002 fe1c 	bl	8003d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 8001108:	f24e 2308 	movw	r3, #57864	@ 0xe208
 800110c:	637b      	str	r3, [r7, #52]	@ 0x34
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800111a:	230e      	movs	r3, #14
 800111c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800111e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001122:	4619      	mov	r1, r3
 8001124:	480e      	ldr	r0, [pc, #56]	@ (8001160 <HAL_LTDC_MspInit+0x2b0>)
 8001126:	f002 fe0b 	bl	8003d40 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800112a:	bf00      	nop
 800112c:	3748      	adds	r7, #72	@ 0x48
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40016800 	.word	0x40016800
 8001138:	40023800 	.word	0x40023800
 800113c:	40021000 	.word	0x40021000
 8001140:	40020400 	.word	0x40020400
 8001144:	40021800 	.word	0x40021800
 8001148:	40022400 	.word	0x40022400
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40020800 	.word	0x40020800
 8001154:	40020000 	.word	0x40020000
 8001158:	40022000 	.word	0x40022000
 800115c:	40022800 	.word	0x40022800
 8001160:	40021c00 	.word	0x40021c00

08001164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <HAL_TIM_Base_MspInit+0x38>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10b      	bne.n	800118e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	4a09      	ldr	r2, [pc, #36]	@ (80011a0 <HAL_TIM_Base_MspInit+0x3c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6453      	str	r3, [r2, #68]	@ 0x44
 8001182:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40010000 	.word	0x40010000
 80011a0:	40023800 	.word	0x40023800

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0ac      	sub	sp, #176	@ 0xb0
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011bc:	f107 0318 	add.w	r3, r7, #24
 80011c0:	2284      	movs	r2, #132	@ 0x84
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f008 fbce 	bl	8009966 <memset>
  if(huart->Instance==USART1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a32      	ldr	r2, [pc, #200]	@ (8001298 <HAL_UART_MspInit+0xf4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d15c      	bne.n	800128e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011d4:	2340      	movs	r3, #64	@ 0x40
 80011d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011d8:	2300      	movs	r3, #0
 80011da:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 fdfd 	bl	8005de0 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011ec:	f7ff fe16 	bl	8000e1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f0:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <HAL_UART_MspInit+0xf8>)
 80011f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f4:	4a29      	ldr	r2, [pc, #164]	@ (800129c <HAL_UART_MspInit+0xf8>)
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fc:	4b27      	ldr	r3, [pc, #156]	@ (800129c <HAL_UART_MspInit+0xf8>)
 80011fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001200:	f003 0310 	and.w	r3, r3, #16
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b24      	ldr	r3, [pc, #144]	@ (800129c <HAL_UART_MspInit+0xf8>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120c:	4a23      	ldr	r2, [pc, #140]	@ (800129c <HAL_UART_MspInit+0xf8>)
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	6313      	str	r3, [r2, #48]	@ 0x30
 8001214:	4b21      	ldr	r3, [pc, #132]	@ (800129c <HAL_UART_MspInit+0xf8>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <HAL_UART_MspInit+0xf8>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001224:	4a1d      	ldr	r2, [pc, #116]	@ (800129c <HAL_UART_MspInit+0xf8>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6313      	str	r3, [r2, #48]	@ 0x30
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <HAL_UART_MspInit+0xf8>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001238:	2380      	movs	r3, #128	@ 0x80
 800123a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001250:	2307      	movs	r3, #7
 8001252:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800125a:	4619      	mov	r1, r3
 800125c:	4810      	ldr	r0, [pc, #64]	@ (80012a0 <HAL_UART_MspInit+0xfc>)
 800125e:	f002 fd6f 	bl	8003d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001262:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001266:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800127c:	2307      	movs	r3, #7
 800127e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001286:	4619      	mov	r1, r3
 8001288:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <HAL_UART_MspInit+0x100>)
 800128a:	f002 fd59 	bl	8003d40 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800128e:	bf00      	nop
 8001290:	37b0      	adds	r7, #176	@ 0xb0
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40011000 	.word	0x40011000
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020400 	.word	0x40020400
 80012a4:	40020000 	.word	0x40020000

080012a8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012bc:	4b3a      	ldr	r3, [pc, #232]	@ (80013a8 <HAL_FMC_MspInit+0x100>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d16d      	bne.n	80013a0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80012c4:	4b38      	ldr	r3, [pc, #224]	@ (80013a8 <HAL_FMC_MspInit+0x100>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012ca:	4b38      	ldr	r3, [pc, #224]	@ (80013ac <HAL_FMC_MspInit+0x104>)
 80012cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ce:	4a37      	ldr	r2, [pc, #220]	@ (80013ac <HAL_FMC_MspInit+0x104>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6393      	str	r3, [r2, #56]	@ 0x38
 80012d6:	4b35      	ldr	r3, [pc, #212]	@ (80013ac <HAL_FMC_MspInit+0x104>)
 80012d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2
 80012e2:	f248 1337 	movw	r3, #33079	@ 0x8137
 80012e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f4:	230c      	movs	r3, #12
 80012f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	482c      	ldr	r0, [pc, #176]	@ (80013b0 <HAL_FMC_MspInit+0x108>)
 80012fe:	f002 fd1f 	bl	8003d40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001302:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001306:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001314:	230c      	movs	r3, #12
 8001316:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4825      	ldr	r0, [pc, #148]	@ (80013b4 <HAL_FMC_MspInit+0x10c>)
 800131e:	f002 fd0f 	bl	8003d40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001322:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001326:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001334:	230c      	movs	r3, #12
 8001336:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4619      	mov	r1, r3
 800133c:	481e      	ldr	r0, [pc, #120]	@ (80013b8 <HAL_FMC_MspInit+0x110>)
 800133e:	f002 fcff 	bl	8003d40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_2;
 8001342:	2324      	movs	r3, #36	@ 0x24
 8001344:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001352:	230c      	movs	r3, #12
 8001354:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4818      	ldr	r0, [pc, #96]	@ (80013bc <HAL_FMC_MspInit+0x114>)
 800135c:	f002 fcf0 	bl	8003d40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001360:	2304      	movs	r3, #4
 8001362:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001370:	230c      	movs	r3, #12
 8001372:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	4811      	ldr	r0, [pc, #68]	@ (80013c0 <HAL_FMC_MspInit+0x118>)
 800137a:	f002 fce1 	bl	8003d40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 800137e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001382:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001390:	230c      	movs	r3, #12
 8001392:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	480a      	ldr	r0, [pc, #40]	@ (80013c4 <HAL_FMC_MspInit+0x11c>)
 800139a:	f002 fcd1 	bl	8003d40 <HAL_GPIO_Init>
 800139e:	e000      	b.n	80013a2 <HAL_FMC_MspInit+0xfa>
    return;
 80013a0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20002048 	.word	0x20002048
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40021800 	.word	0x40021800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021400 	.word	0x40021400
 80013bc:	40021c00 	.word	0x40021c00
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40021000 	.word	0x40021000

080013c8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80013d0:	f7ff ff6a 	bl	80012a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001594 <HAL_SAI_MspInit+0x1b8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d16a      	bne.n	80014c4 <HAL_SAI_MspInit+0xe8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80013ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001598 <HAL_SAI_MspInit+0x1bc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10b      	bne.n	800140e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80013f6:	4b69      	ldr	r3, [pc, #420]	@ (800159c <HAL_SAI_MspInit+0x1c0>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a68      	ldr	r2, [pc, #416]	@ (800159c <HAL_SAI_MspInit+0x1c0>)
 80013fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b66      	ldr	r3, [pc, #408]	@ (800159c <HAL_SAI_MspInit+0x1c0>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800140e:	4b62      	ldr	r3, [pc, #392]	@ (8001598 <HAL_SAI_MspInit+0x1bc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a60      	ldr	r2, [pc, #384]	@ (8001598 <HAL_SAI_MspInit+0x1bc>)
 8001416:	6013      	str	r3, [r2, #0]
    PE0     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001418:	2301      	movs	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001428:	230a      	movs	r3, #10
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	485b      	ldr	r0, [pc, #364]	@ (80015a0 <HAL_SAI_MspInit+0x1c4>)
 8001434:	f002 fc84 	bl	8003d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 8001438:	23e0      	movs	r3, #224	@ 0xe0
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001448:	230a      	movs	r3, #10
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	4854      	ldr	r0, [pc, #336]	@ (80015a4 <HAL_SAI_MspInit+0x1c8>)
 8001454:	f002 fc74 	bl	8003d40 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8001458:	4b53      	ldr	r3, [pc, #332]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 800145a:	4a54      	ldr	r2, [pc, #336]	@ (80015ac <HAL_SAI_MspInit+0x1d0>)
 800145c:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 800145e:	4b52      	ldr	r3, [pc, #328]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 8001460:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001464:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001466:	4b50      	ldr	r3, [pc, #320]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 8001468:	2240      	movs	r2, #64	@ 0x40
 800146a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800146c:	4b4e      	ldr	r3, [pc, #312]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8001472:	4b4d      	ldr	r3, [pc, #308]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 8001474:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001478:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800147a:	4b4b      	ldr	r3, [pc, #300]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001480:	4b49      	ldr	r3, [pc, #292]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8001486:	4b48      	ldr	r3, [pc, #288]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 8001488:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800148c:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 800148e:	4b46      	ldr	r3, [pc, #280]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 8001490:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001494:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001496:	4b44      	ldr	r3, [pc, #272]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 8001498:	2200      	movs	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800149c:	4842      	ldr	r0, [pc, #264]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 800149e:	f001 fded 	bl	800307c <HAL_DMA_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_SAI_MspInit+0xd0>
    {
      Error_Handler();
 80014a8:	f7ff fcb8 	bl	8000e1c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a3e      	ldr	r2, [pc, #248]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 80014b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80014b2:	4a3d      	ldr	r2, [pc, #244]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a3b      	ldr	r2, [pc, #236]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 80014bc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80014be:	4a3a      	ldr	r2, [pc, #232]	@ (80015a8 <HAL_SAI_MspInit+0x1cc>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a39      	ldr	r2, [pc, #228]	@ (80015b0 <HAL_SAI_MspInit+0x1d4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d15d      	bne.n	800158a <HAL_SAI_MspInit+0x1ae>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80014ce:	4b32      	ldr	r3, [pc, #200]	@ (8001598 <HAL_SAI_MspInit+0x1bc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10b      	bne.n	80014ee <HAL_SAI_MspInit+0x112>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80014d6:	4b31      	ldr	r3, [pc, #196]	@ (800159c <HAL_SAI_MspInit+0x1c0>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	4a30      	ldr	r2, [pc, #192]	@ (800159c <HAL_SAI_MspInit+0x1c0>)
 80014dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e2:	4b2e      	ldr	r3, [pc, #184]	@ (800159c <HAL_SAI_MspInit+0x1c0>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <HAL_SAI_MspInit+0x1bc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3301      	adds	r3, #1
 80014f4:	4a28      	ldr	r2, [pc, #160]	@ (8001598 <HAL_SAI_MspInit+0x1bc>)
 80014f6:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800150a:	230a      	movs	r3, #10
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4827      	ldr	r0, [pc, #156]	@ (80015b4 <HAL_SAI_MspInit+0x1d8>)
 8001516:	f002 fc13 	bl	8003d40 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream6;
 800151a:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 800151c:	4a27      	ldr	r2, [pc, #156]	@ (80015bc <HAL_SAI_MspInit+0x1e0>)
 800151e:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 8001520:	4b25      	ldr	r3, [pc, #148]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 8001522:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001526:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001528:	4b23      	ldr	r3, [pc, #140]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800152e:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001534:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 8001536:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800153a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800153c:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 800153e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001542:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 8001546:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800154a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800154c:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 800154e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001552:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8001554:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 8001556:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800155a:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800155c:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001562:	4815      	ldr	r0, [pc, #84]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 8001564:	f001 fd8a 	bl	800307c <HAL_DMA_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_SAI_MspInit+0x196>
    {
      Error_Handler();
 800156e:	f7ff fc55 	bl	8000e1c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a10      	ldr	r2, [pc, #64]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 8001576:	671a      	str	r2, [r3, #112]	@ 0x70
 8001578:	4a0f      	ldr	r2, [pc, #60]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a0d      	ldr	r2, [pc, #52]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 8001582:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001584:	4a0c      	ldr	r2, [pc, #48]	@ (80015b8 <HAL_SAI_MspInit+0x1dc>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	@ 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40015c04 	.word	0x40015c04
 8001598:	2000204c 	.word	0x2000204c
 800159c:	40023800 	.word	0x40023800
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40022000 	.word	0x40022000
 80015a8:	20001e80 	.word	0x20001e80
 80015ac:	40026470 	.word	0x40026470
 80015b0:	40015c24 	.word	0x40015c24
 80015b4:	40021800 	.word	0x40021800
 80015b8:	20001ee0 	.word	0x20001ee0
 80015bc:	400264a0 	.word	0x400264a0

080015c0 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a25      	ldr	r2, [pc, #148]	@ (8001664 <HAL_SAI_MspDeInit+0xa4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d120      	bne.n	8001614 <HAL_SAI_MspDeInit+0x54>
    {
    SAI2_client --;
 80015d2:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <HAL_SAI_MspDeInit+0xa8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	4a23      	ldr	r2, [pc, #140]	@ (8001668 <HAL_SAI_MspDeInit+0xa8>)
 80015da:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 80015dc:	4b22      	ldr	r3, [pc, #136]	@ (8001668 <HAL_SAI_MspDeInit+0xa8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d105      	bne.n	80015f0 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 80015e4:	4b21      	ldr	r3, [pc, #132]	@ (800166c <HAL_SAI_MspDeInit+0xac>)
 80015e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e8:	4a20      	ldr	r2, [pc, #128]	@ (800166c <HAL_SAI_MspDeInit+0xac>)
 80015ea:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80015ee:	6453      	str	r3, [r2, #68]	@ 0x44
    PE0     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0);
 80015f0:	2101      	movs	r1, #1
 80015f2:	481f      	ldr	r0, [pc, #124]	@ (8001670 <HAL_SAI_MspDeInit+0xb0>)
 80015f4:	f002 fd50 	bl	8004098 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6);
 80015f8:	21e0      	movs	r1, #224	@ 0xe0
 80015fa:	481e      	ldr	r0, [pc, #120]	@ (8001674 <HAL_SAI_MspDeInit+0xb4>)
 80015fc:	f002 fd4c 	bl	8004098 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001604:	4618      	mov	r0, r3
 8001606:	f001 fde7 	bl	80031d8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800160e:	4618      	mov	r0, r3
 8001610:	f001 fde2 	bl	80031d8 <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a17      	ldr	r2, [pc, #92]	@ (8001678 <HAL_SAI_MspDeInit+0xb8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d11d      	bne.n	800165a <HAL_SAI_MspDeInit+0x9a>
    {
    SAI2_client --;
 800161e:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_SAI_MspDeInit+0xa8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3b01      	subs	r3, #1
 8001624:	4a10      	ldr	r2, [pc, #64]	@ (8001668 <HAL_SAI_MspDeInit+0xa8>)
 8001626:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <HAL_SAI_MspDeInit+0xa8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d105      	bne.n	800163c <HAL_SAI_MspDeInit+0x7c>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8001630:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <HAL_SAI_MspDeInit+0xac>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <HAL_SAI_MspDeInit+0xac>)
 8001636:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800163a:	6453      	str	r3, [r2, #68]	@ 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_10);
 800163c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001640:	480e      	ldr	r0, [pc, #56]	@ (800167c <HAL_SAI_MspDeInit+0xbc>)
 8001642:	f002 fd29 	bl	8004098 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164a:	4618      	mov	r0, r3
 800164c:	f001 fdc4 	bl	80031d8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001654:	4618      	mov	r0, r3
 8001656:	f001 fdbf 	bl	80031d8 <HAL_DMA_DeInit>
    }
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40015c04 	.word	0x40015c04
 8001668:	2000204c 	.word	0x2000204c
 800166c:	40023800 	.word	0x40023800
 8001670:	40021000 	.word	0x40021000
 8001674:	40022000 	.word	0x40022000
 8001678:	40015c24 	.word	0x40015c24
 800167c:	40021800 	.word	0x40021800

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <NMI_Handler+0x4>

08001688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <MemManage_Handler+0x4>

08001698 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d6:	f001 fb7b 	bl	8002dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80016e4:	4802      	ldr	r0, [pc, #8]	@ (80016f0 <DMA2_Stream4_IRQHandler+0x10>)
 80016e6:	f001 fe35 	bl	8003354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20001e80 	.word	0x20001e80

080016f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80016f8:	4802      	ldr	r0, [pc, #8]	@ (8001704 <DMA2_Stream6_IRQHandler+0x10>)
 80016fa:	f001 fe2b 	bl	8003354 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20001ee0 	.word	0x20001ee0

08001708 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <SystemInit+0x20>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001712:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <SystemInit+0x20>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001764 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001730:	f7ff ffea 	bl	8001708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	@ (8001768 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	@ (800176c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	@ (8001778 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800175a:	f008 f90d 	bl	8009978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175e:	f7fe ff91 	bl	8000684 <main>
  bx  lr    
 8001762:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001770:	0800b50c 	.word	0x0800b50c
  ldr r2, =_sbss
 8001774:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001778:	20002464 	.word	0x20002464

0800177c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC_IRQHandler>
	...

08001780 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08c      	sub	sp, #48	@ 0x30
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a51      	ldr	r2, [pc, #324]	@ (80018d0 <I2Cx_MspInit+0x150>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d14d      	bne.n	800182c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001790:	4b50      	ldr	r3, [pc, #320]	@ (80018d4 <I2Cx_MspInit+0x154>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001794:	4a4f      	ldr	r2, [pc, #316]	@ (80018d4 <I2Cx_MspInit+0x154>)
 8001796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800179a:	6313      	str	r3, [r2, #48]	@ 0x30
 800179c:	4b4d      	ldr	r3, [pc, #308]	@ (80018d4 <I2Cx_MspInit+0x154>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80017a8:	2380      	movs	r3, #128	@ 0x80
 80017aa:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80017ac:	2312      	movs	r3, #18
 80017ae:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80017b4:	2302      	movs	r3, #2
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80017b8:	2304      	movs	r3, #4
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4619      	mov	r1, r3
 80017c2:	4845      	ldr	r0, [pc, #276]	@ (80018d8 <I2Cx_MspInit+0x158>)
 80017c4:	f002 fabc 	bl	8003d40 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80017c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	4840      	ldr	r0, [pc, #256]	@ (80018d8 <I2Cx_MspInit+0x158>)
 80017d6:	f002 fab3 	bl	8003d40 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80017da:	4b3e      	ldr	r3, [pc, #248]	@ (80018d4 <I2Cx_MspInit+0x154>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	4a3d      	ldr	r2, [pc, #244]	@ (80018d4 <I2Cx_MspInit+0x154>)
 80017e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e6:	4b3b      	ldr	r3, [pc, #236]	@ (80018d4 <I2Cx_MspInit+0x154>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80017f2:	4b38      	ldr	r3, [pc, #224]	@ (80018d4 <I2Cx_MspInit+0x154>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a37      	ldr	r2, [pc, #220]	@ (80018d4 <I2Cx_MspInit+0x154>)
 80017f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017fc:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80017fe:	4b35      	ldr	r3, [pc, #212]	@ (80018d4 <I2Cx_MspInit+0x154>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4a34      	ldr	r2, [pc, #208]	@ (80018d4 <I2Cx_MspInit+0x154>)
 8001804:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001808:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	210f      	movs	r1, #15
 800180e:	2048      	movs	r0, #72	@ 0x48
 8001810:	f001 fbfd 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001814:	2048      	movs	r0, #72	@ 0x48
 8001816:	f001 fc16 	bl	8003046 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	210f      	movs	r1, #15
 800181e:	2049      	movs	r0, #73	@ 0x49
 8001820:	f001 fbf5 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001824:	2049      	movs	r0, #73	@ 0x49
 8001826:	f001 fc0e 	bl	8003046 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800182a:	e04d      	b.n	80018c8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800182c:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <I2Cx_MspInit+0x154>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001830:	4a28      	ldr	r2, [pc, #160]	@ (80018d4 <I2Cx_MspInit+0x154>)
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	6313      	str	r3, [r2, #48]	@ 0x30
 8001838:	4b26      	ldr	r3, [pc, #152]	@ (80018d4 <I2Cx_MspInit+0x154>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001844:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001848:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800184a:	2312      	movs	r3, #18
 800184c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001852:	2302      	movs	r3, #2
 8001854:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001856:	2304      	movs	r3, #4
 8001858:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	481e      	ldr	r0, [pc, #120]	@ (80018dc <I2Cx_MspInit+0x15c>)
 8001862:	f002 fa6d 	bl	8003d40 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001866:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800186a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	4619      	mov	r1, r3
 8001872:	481a      	ldr	r0, [pc, #104]	@ (80018dc <I2Cx_MspInit+0x15c>)
 8001874:	f002 fa64 	bl	8003d40 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001878:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <I2Cx_MspInit+0x154>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187c:	4a15      	ldr	r2, [pc, #84]	@ (80018d4 <I2Cx_MspInit+0x154>)
 800187e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001882:	6413      	str	r3, [r2, #64]	@ 0x40
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <I2Cx_MspInit+0x154>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001890:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <I2Cx_MspInit+0x154>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4a0f      	ldr	r2, [pc, #60]	@ (80018d4 <I2Cx_MspInit+0x154>)
 8001896:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800189a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800189c:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <I2Cx_MspInit+0x154>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a0c      	ldr	r2, [pc, #48]	@ (80018d4 <I2Cx_MspInit+0x154>)
 80018a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018a6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	210f      	movs	r1, #15
 80018ac:	201f      	movs	r0, #31
 80018ae:	f001 fbae 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80018b2:	201f      	movs	r0, #31
 80018b4:	f001 fbc7 	bl	8003046 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	210f      	movs	r1, #15
 80018bc:	2020      	movs	r0, #32
 80018be:	f001 fba6 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80018c2:	2020      	movs	r0, #32
 80018c4:	f001 fbbf 	bl	8003046 <HAL_NVIC_EnableIRQ>
}
 80018c8:	bf00      	nop
 80018ca:	3730      	adds	r7, #48	@ 0x30
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20002050 	.word	0x20002050
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40021c00 	.word	0x40021c00
 80018dc:	40020400 	.word	0x40020400

080018e0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f003 f809 	bl	8004900 <HAL_I2C_GetState>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d125      	bne.n	8001940 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <I2Cx_Init+0x68>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d103      	bne.n	8001904 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a13      	ldr	r2, [pc, #76]	@ (800194c <I2Cx_Init+0x6c>)
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e002      	b.n	800190a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a12      	ldr	r2, [pc, #72]	@ (8001950 <I2Cx_Init+0x70>)
 8001908:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a11      	ldr	r2, [pc, #68]	@ (8001954 <I2Cx_Init+0x74>)
 800190e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff23 	bl	8001780 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f002 fcd2 	bl	80042e4 <HAL_I2C_Init>
  }
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20002050 	.word	0x20002050
 800194c:	40005c00 	.word	0x40005c00
 8001950:	40005400 	.word	0x40005400
 8001954:	40912732 	.word	0x40912732

08001958 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	@ 0x28
 800195c:	af04      	add	r7, sp, #16
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	4608      	mov	r0, r1
 8001962:	4611      	mov	r1, r2
 8001964:	461a      	mov	r2, r3
 8001966:	4603      	mov	r3, r0
 8001968:	72fb      	strb	r3, [r7, #11]
 800196a:	460b      	mov	r3, r1
 800196c:	813b      	strh	r3, [r7, #8]
 800196e:	4613      	mov	r3, r2
 8001970:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001976:	7afb      	ldrb	r3, [r7, #11]
 8001978:	b299      	uxth	r1, r3
 800197a:	88f8      	ldrh	r0, [r7, #6]
 800197c:	893a      	ldrh	r2, [r7, #8]
 800197e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	4603      	mov	r3, r0
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f002 fe9c 	bl	80046cc <HAL_I2C_Mem_Read>
 8001994:	4603      	mov	r3, r0
 8001996:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800199e:	7afb      	ldrb	r3, [r7, #11]
 80019a0:	4619      	mov	r1, r3
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 f832 	bl	8001a0c <I2Cx_Error>
  }
  return status;    
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b08a      	sub	sp, #40	@ 0x28
 80019b6:	af04      	add	r7, sp, #16
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	4608      	mov	r0, r1
 80019bc:	4611      	mov	r1, r2
 80019be:	461a      	mov	r2, r3
 80019c0:	4603      	mov	r3, r0
 80019c2:	72fb      	strb	r3, [r7, #11]
 80019c4:	460b      	mov	r3, r1
 80019c6:	813b      	strh	r3, [r7, #8]
 80019c8:	4613      	mov	r3, r2
 80019ca:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019d0:	7afb      	ldrb	r3, [r7, #11]
 80019d2:	b299      	uxth	r1, r3
 80019d4:	88f8      	ldrh	r0, [r7, #6]
 80019d6:	893a      	ldrh	r2, [r7, #8]
 80019d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	4603      	mov	r3, r0
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f002 fd5b 	bl	80044a4 <HAL_I2C_Mem_Write>
 80019ee:	4603      	mov	r3, r0
 80019f0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80019f8:	7afb      	ldrb	r3, [r7, #11]
 80019fa:	4619      	mov	r1, r3
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 f805 	bl	8001a0c <I2Cx_Error>
  }
  return status;
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f002 fcff 	bl	800441c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ff5e 	bl	80018e0 <I2Cx_Init>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001a30:	4802      	ldr	r0, [pc, #8]	@ (8001a3c <AUDIO_IO_Init+0x10>)
 8001a32:	f7ff ff55 	bl	80018e0 <I2Cx_Init>
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20002050 	.word	0x20002050

08001a40 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	80bb      	strh	r3, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8001a66:	89fb      	ldrh	r3, [r7, #14]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001a6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001a82:	88ba      	ldrh	r2, [r7, #4]
 8001a84:	79f9      	ldrb	r1, [r7, #7]
 8001a86:	2302      	movs	r3, #2
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	1cbb      	adds	r3, r7, #2
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2302      	movs	r3, #2
 8001a90:	4803      	ldr	r0, [pc, #12]	@ (8001aa0 <AUDIO_IO_Write+0x50>)
 8001a92:	f7ff ff8e 	bl	80019b2 <I2Cx_WriteMultiple>
}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20002050 	.word	0x20002050

08001aa4 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460a      	mov	r2, r1
 8001aae:	71fb      	strb	r3, [r7, #7]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	81bb      	strh	r3, [r7, #12]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001abc:	88ba      	ldrh	r2, [r7, #4]
 8001abe:	79f9      	ldrb	r1, [r7, #7]
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2302      	movs	r3, #2
 8001acc:	480a      	ldr	r0, [pc, #40]	@ (8001af8 <AUDIO_IO_Read+0x54>)
 8001ace:	f7ff ff43 	bl	8001958 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8001ad2:	89bb      	ldrh	r3, [r7, #12]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8001ad8:	89bb      	ldrh	r3, [r7, #12]
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	b21a      	sxth	r2, r3
 8001ae0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8001aea:	89fb      	ldrh	r3, [r7, #14]
 8001aec:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8001aee:	89bb      	ldrh	r3, [r7, #12]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20002050 	.word	0x20002050

08001afc <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f001 f983 	bl	8002e10 <HAL_Delay>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <BSP_AUDIO_OUT_Init>:
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @note   The I2S PLL input clock must be done in the user application.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	603a      	str	r2, [r7, #0]
 8001b1e:	80fb      	strh	r3, [r7, #6]
 8001b20:	460b      	mov	r3, r1
 8001b22:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t deviceid = 0x00;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]

  /* Disable SAI */
  SAIx_Out_DeInit();
 8001b2c:	f000 fa56 	bl	8001fdc <SAIx_Out_DeInit>

  /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001b30:	2200      	movs	r2, #0
 8001b32:	6839      	ldr	r1, [r7, #0]
 8001b34:	481c      	ldr	r0, [pc, #112]	@ (8001ba8 <BSP_AUDIO_OUT_Init+0x94>)
 8001b36:	f000 f9af 	bl	8001e98 <BSP_AUDIO_OUT_ClockConfig>
 
  /* SAI data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <BSP_AUDIO_OUT_Init+0x94>)
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bac <BSP_AUDIO_OUT_Init+0x98>)
 8001b3e:	601a      	str	r2, [r3, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001b40:	4819      	ldr	r0, [pc, #100]	@ (8001ba8 <BSP_AUDIO_OUT_Init+0x94>)
 8001b42:	f005 f9ed 	bl	8006f20 <HAL_SAI_GetState>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d103      	bne.n	8001b54 <BSP_AUDIO_OUT_Init+0x40>
  {
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4816      	ldr	r0, [pc, #88]	@ (8001ba8 <BSP_AUDIO_OUT_Init+0x94>)
 8001b50:	f000 f8cc 	bl	8001cec <BSP_AUDIO_OUT_MspInit>
  }
  SAIx_Out_Init(AudioFreq);
 8001b54:	6838      	ldr	r0, [r7, #0]
 8001b56:	f000 f9e3 	bl	8001f20 <SAIx_Out_Init>

  /* wm8994 codec initialization */
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001b5a:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <BSP_AUDIO_OUT_Init+0x9c>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2034      	movs	r0, #52	@ 0x34
 8001b60:	4798      	blx	r3
 8001b62:	60b8      	str	r0, [r7, #8]
  
  if((deviceid) == WM8994_ID)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f648 1294 	movw	r2, #35220	@ 0x8994
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d109      	bne.n	8001b82 <BSP_AUDIO_OUT_Init+0x6e>
  {  
    /* Reset the Codec Registers */
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <BSP_AUDIO_OUT_Init+0x9c>)
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	2034      	movs	r0, #52	@ 0x34
 8001b74:	4798      	blx	r3
    /* Initialize the audio driver structure */
    audio_drv = &wm8994_drv; 
 8001b76:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <BSP_AUDIO_OUT_Init+0xa0>)
 8001b78:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <BSP_AUDIO_OUT_Init+0x9c>)
 8001b7a:	601a      	str	r2, [r3, #0]
    ret = AUDIO_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e001      	b.n	8001b86 <BSP_AUDIO_OUT_Init+0x72>
  }
  else
  {
    ret = AUDIO_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <BSP_AUDIO_OUT_Init+0x88>
  {
    /* Initialize the codec internal registers */
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <BSP_AUDIO_OUT_Init+0xa0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681c      	ldr	r4, [r3, #0]
 8001b92:	797a      	ldrb	r2, [r7, #5]
 8001b94:	88f9      	ldrh	r1, [r7, #6]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2034      	movs	r0, #52	@ 0x34
 8001b9a:	47a0      	blx	r4
  }
 
  return ret;
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200020a8 	.word	0x200020a8
 8001bac:	40015c04 	.word	0x40015c04
 8001bb0:	2000001c 	.word	0x2000001c
 8001bb4:	200020a4 	.word	0x200020a4

08001bb8 <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <BSP_AUDIO_OUT_Play+0x4c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	b292      	uxth	r2, r2
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	2034      	movs	r0, #52	@ 0x34
 8001bd0:	4798      	blx	r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e00f      	b.n	8001bfc <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001be2:	d203      	bcs.n	8001bec <BSP_AUDIO_OUT_Play+0x34>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	085b      	lsrs	r3, r3, #1
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	e001      	b.n	8001bf0 <BSP_AUDIO_OUT_Play+0x38>
 8001bec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4804      	ldr	r0, [pc, #16]	@ (8001c08 <BSP_AUDIO_OUT_Play+0x50>)
 8001bf6:	f005 f8e3 	bl	8006dc0 <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 8001bfa:	2300      	movs	r3, #0
  }
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200020a4 	.word	0x200020a4
 8001c08:	200020a8 	.word	0x200020a8

08001c0c <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001c22:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8001c24:	4a08      	ldr	r2, [pc, #32]	@ (8001c48 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6613      	str	r3, [r2, #96]	@ 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8001c2a:	4807      	ldr	r0, [pc, #28]	@ (8001c48 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8001c2c:	f004 ff14 	bl	8006a58 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c3e:	601a      	str	r2, [r3, #0]
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	200020a8 	.word	0x200020a8

08001c4c <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8001c54:	f000 f834 	bl	8001cc0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8001c68:	f000 f831 	bl	8001cce <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8001c7c:	480e      	ldr	r0, [pc, #56]	@ (8001cb8 <HAL_SAI_ErrorCallback+0x44>)
 8001c7e:	f005 f94f 	bl	8006f20 <HAL_SAI_GetState>
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8001c86:	480d      	ldr	r0, [pc, #52]	@ (8001cbc <HAL_SAI_ErrorCallback+0x48>)
 8001c88:	f005 f94a 	bl	8006f20 <HAL_SAI_GetState>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d002      	beq.n	8001c9c <HAL_SAI_ErrorCallback+0x28>
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b12      	cmp	r3, #18
 8001c9a:	d101      	bne.n	8001ca0 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001c9c:	f000 f81e 	bl	8001cdc <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8001ca0:	7bbb      	ldrb	r3, [r7, #14]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d002      	beq.n	8001cac <HAL_SAI_ErrorCallback+0x38>
 8001ca6:	7bbb      	ldrb	r3, [r7, #14]
 8001ca8:	2b22      	cmp	r3, #34	@ 0x22
 8001caa:	d101      	bne.n	8001cb0 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8001cac:	f000 f9ac 	bl	8002008 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200020a8 	.word	0x200020a8
 8001cbc:	2000212c 	.word	0x2000212c

08001cc0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
/**
  * @brief  Manages the DMA full Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	@ 0x30
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001cf6:	4b63      	ldr	r3, [pc, #396]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	4a62      	ldr	r2, [pc, #392]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001cfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d02:	4b60      	ldr	r3, [pc, #384]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8001d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	4a5c      	ldr	r2, [pc, #368]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1a:	4b5a      	ldr	r3, [pc, #360]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8001d26:	4b57      	ldr	r3, [pc, #348]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	4a56      	ldr	r2, [pc, #344]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d32:	4b54      	ldr	r3, [pc, #336]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001d3e:	4b51      	ldr	r3, [pc, #324]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	4a50      	ldr	r2, [pc, #320]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8001d56:	2380      	movs	r3, #128	@ 0x80
 8001d58:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001d66:	230a      	movs	r3, #10
 8001d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4845      	ldr	r0, [pc, #276]	@ (8001e88 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8001d72:	f001 ffe5 	bl	8003d40 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8001d76:	2320      	movs	r3, #32
 8001d78:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8001d86:	230a      	movs	r3, #10
 8001d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	483d      	ldr	r0, [pc, #244]	@ (8001e88 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8001d92:	f001 ffd5 	bl	8003d40 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8001d96:	2340      	movs	r3, #64	@ 0x40
 8001d98:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001da6:	230a      	movs	r3, #10
 8001da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	4619      	mov	r1, r3
 8001db0:	4835      	ldr	r0, [pc, #212]	@ (8001e88 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8001db2:	f001 ffc5 	bl	8003d40 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001db6:	2310      	movs	r3, #16
 8001db8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001dc6:	230a      	movs	r3, #10
 8001dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001dca:	f107 031c 	add.w	r3, r7, #28
 8001dce:	4619      	mov	r1, r3
 8001dd0:	482d      	ldr	r0, [pc, #180]	@ (8001e88 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8001dd2:	f001 ffb5 	bl	8003d40 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	4a2a      	ldr	r2, [pc, #168]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001ddc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de2:	4b28      	ldr	r3, [pc, #160]	@ (8001e84 <BSP_AUDIO_OUT_MspInit+0x198>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a26      	ldr	r2, [pc, #152]	@ (8001e8c <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d138      	bne.n	8001e6a <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001df8:	4b25      	ldr	r3, [pc, #148]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001dfa:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001dfe:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001e00:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e02:	2240      	movs	r2, #64	@ 0x40
 8001e04:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001e06:	4b22      	ldr	r3, [pc, #136]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001e0c:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e12:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001e14:	4b1e      	ldr	r3, [pc, #120]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e1a:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e22:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001e24:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e2a:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001e2c:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e32:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001e34:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e36:	2204      	movs	r2, #4
 8001e38:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001e40:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001e46:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001e4c:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e4e:	4a11      	ldr	r2, [pc, #68]	@ (8001e94 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8001e50:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a0e      	ldr	r2, [pc, #56]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e56:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001e58:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001e5e:	480c      	ldr	r0, [pc, #48]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e60:	f001 f9ba 	bl	80031d8 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8001e64:	480a      	ldr	r0, [pc, #40]	@ (8001e90 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8001e66:	f001 f909 	bl	800307c <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	210e      	movs	r1, #14
 8001e6e:	203c      	movs	r0, #60	@ 0x3c
 8001e70:	f001 f8cd 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8001e74:	203c      	movs	r0, #60	@ 0x3c
 8001e76:	f001 f8e6 	bl	8003046 <HAL_NVIC_EnableIRQ>
}
 8001e7a:	bf00      	nop
 8001e7c:	3730      	adds	r7, #48	@ 0x30
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40022000 	.word	0x40022000
 8001e8c:	40015c04 	.word	0x40015c04
 8001e90:	200021b0 	.word	0x200021b0
 8001e94:	40026470 	.word	0x40026470

08001e98 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b0a6      	sub	sp, #152	@ 0x98
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f004 fb89 	bl	80065c0 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <BSP_AUDIO_OUT_ClockConfig+0x34>
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d004      	beq.n	8001ecc <BSP_AUDIO_OUT_ClockConfig+0x34>
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d112      	bne.n	8001ef2 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001ecc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ed0:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001ed2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ed6:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001ed8:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8001edc:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8001ee2:	2313      	movs	r3, #19
 8001ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 ff78 	bl	8005de0 <HAL_RCCEx_PeriphCLKConfig>
 8001ef0:	e012      	b.n	8001f18 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001ef2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ef6:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001ef8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001efc:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8001efe:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8001f02:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8001f04:	2307      	movs	r3, #7
 8001f06:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4618      	mov	r0, r3
 8001f12:	f003 ff65 	bl	8005de0 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8001f16:	bf00      	nop
 8001f18:	bf00      	nop
 8001f1a:	3798      	adds	r7, #152	@ 0x98
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001f28:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd8 <SAIx_Out_Init+0xb8>)
 8001f2c:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001f2e:	4b29      	ldr	r3, [pc, #164]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b27      	ldr	r3, [pc, #156]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f3c:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001f3e:	4a25      	ldr	r2, [pc, #148]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8001f44:	4b23      	ldr	r3, [pc, #140]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001f4a:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001f50:	4b20      	ldr	r3, [pc, #128]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8001f56:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f58:	2280      	movs	r2, #128	@ 0x80
 8001f5a:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001f6e:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f74:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001f76:	4b17      	ldr	r3, [pc, #92]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  haudio_out_sai.FrameInit.FrameLength = 64; 
 8001f7c:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f7e:	2240      	movs	r2, #64	@ 0x40
 8001f80:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001f82:	4b14      	ldr	r3, [pc, #80]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f84:	2220      	movs	r2, #32
 8001f86:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f8e:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001f90:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001f96:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001f98:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f9c:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 8001faa:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001fac:	2204      	movs	r2, #4
 8001fae:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	661a      	str	r2, [r3, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8001fb6:	4807      	ldr	r0, [pc, #28]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001fb8:	f004 fd4e 	bl	8006a58 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <SAIx_Out_Init+0xb4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001fca:	601a      	str	r2, [r3, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200020a8 	.word	0x200020a8
 8001fd8:	40015c04 	.word	0x40015c04

08001fdc <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001fe0:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <SAIx_Out_DeInit+0x24>)
 8001fe2:	4a08      	ldr	r2, [pc, #32]	@ (8002004 <SAIx_Out_DeInit+0x28>)
 8001fe4:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <SAIx_Out_DeInit+0x24>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b04      	ldr	r3, [pc, #16]	@ (8002000 <SAIx_Out_DeInit+0x24>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001ff4:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8001ff6:	4802      	ldr	r0, [pc, #8]	@ (8002000 <SAIx_Out_DeInit+0x24>)
 8001ff8:	f004 feac 	bl	8006d54 <HAL_SAI_DeInit>
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	200020a8 	.word	0x200020a8
 8002004:	40015c04 	.word	0x40015c04

08002008 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800201c:	4b31      	ldr	r3, [pc, #196]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 800201e:	2228      	movs	r2, #40	@ 0x28
 8002020:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002022:	4b30      	ldr	r3, [pc, #192]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 8002024:	2209      	movs	r2, #9
 8002026:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002028:	4b2e      	ldr	r3, [pc, #184]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 800202a:	2235      	movs	r2, #53	@ 0x35
 800202c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800202e:	4b2d      	ldr	r3, [pc, #180]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 8002030:	220b      	movs	r2, #11
 8002032:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002034:	4b2b      	ldr	r3, [pc, #172]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 8002036:	f240 121b 	movw	r2, #283	@ 0x11b
 800203a:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800203c:	4b29      	ldr	r3, [pc, #164]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 800203e:	f240 2215 	movw	r2, #533	@ 0x215
 8002042:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002044:	4b27      	ldr	r3, [pc, #156]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 8002046:	f240 121d 	movw	r2, #285	@ 0x11d
 800204a:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800204c:	4b25      	ldr	r3, [pc, #148]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 800204e:	f240 2235 	movw	r2, #565	@ 0x235
 8002052:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002054:	2100      	movs	r1, #0
 8002056:	4823      	ldr	r0, [pc, #140]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 8002058:	f000 fba6 	bl	80027a8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800205c:	4b21      	ldr	r3, [pc, #132]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 800205e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002062:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002064:	4b1f      	ldr	r3, [pc, #124]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 8002066:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800206a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800206c:	4b1d      	ldr	r3, [pc, #116]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002074:	4b1b      	ldr	r3, [pc, #108]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800207c:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002084:	4b17      	ldr	r3, [pc, #92]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 8002086:	2200      	movs	r2, #0
 8002088:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800208a:	4b16      	ldr	r3, [pc, #88]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002090:	4b14      	ldr	r3, [pc, #80]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002096:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 800209e:	4a12      	ldr	r2, [pc, #72]	@ (80020e8 <BSP_LCD_Init+0xd0>)
 80020a0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80020a2:	4810      	ldr	r0, [pc, #64]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 80020a4:	f003 f80a 	bl	80050bc <HAL_LTDC_GetState>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d103      	bne.n	80020b6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80020ae:	2100      	movs	r1, #0
 80020b0:	480c      	ldr	r0, [pc, #48]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 80020b2:	f000 fa9f 	bl	80025f4 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80020b6:	480b      	ldr	r0, [pc, #44]	@ (80020e4 <BSP_LCD_Init+0xcc>)
 80020b8:	f002 fef2 	bl	8004ea0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80020bc:	2201      	movs	r2, #1
 80020be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020c2:	480a      	ldr	r0, [pc, #40]	@ (80020ec <BSP_LCD_Init+0xd4>)
 80020c4:	f002 f8f4 	bl	80042b0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80020c8:	2201      	movs	r2, #1
 80020ca:	2108      	movs	r1, #8
 80020cc:	4808      	ldr	r0, [pc, #32]	@ (80020f0 <BSP_LCD_Init+0xd8>)
 80020ce:	f002 f8ef 	bl	80042b0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80020d2:	f000 fc89 	bl	80029e8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80020d6:	4807      	ldr	r0, [pc, #28]	@ (80020f4 <BSP_LCD_Init+0xdc>)
 80020d8:	f000 f8d8 	bl	800228c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20002210 	.word	0x20002210
 80020e8:	40016800 	.word	0x40016800
 80020ec:	40022000 	.word	0x40022000
 80020f0:	40022800 	.word	0x40022800
 80020f4:	20000008 	.word	0x20000008

080020f8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <BSP_LCD_GetXSize+0x20>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a06      	ldr	r2, [pc, #24]	@ (800211c <BSP_LCD_GetXSize+0x24>)
 8002102:	2134      	movs	r1, #52	@ 0x34
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	3360      	adds	r3, #96	@ 0x60
 800210c:	681b      	ldr	r3, [r3, #0]
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	200022f8 	.word	0x200022f8
 800211c:	20002210 	.word	0x20002210

08002120 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <BSP_LCD_GetYSize+0x20>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a06      	ldr	r2, [pc, #24]	@ (8002144 <BSP_LCD_GetYSize+0x24>)
 800212a:	2134      	movs	r1, #52	@ 0x34
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	3364      	adds	r3, #100	@ 0x64
 8002134:	681b      	ldr	r3, [r3, #0]
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	200022f8 	.word	0x200022f8
 8002144:	20002210 	.word	0x20002210

08002148 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002148:	b580      	push	{r7, lr}
 800214a:	b090      	sub	sp, #64	@ 0x40
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002158:	f7ff ffce 	bl	80020f8 <BSP_LCD_GetXSize>
 800215c:	4603      	mov	r3, r0
 800215e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002164:	f7ff ffdc 	bl	8002120 <BSP_LCD_GetYSize>
 8002168:	4603      	mov	r3, r0
 800216a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8002174:	23ff      	movs	r3, #255	@ 0xff
 8002176:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800218e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002192:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002194:	2307      	movs	r3, #7
 8002196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002198:	f7ff ffae 	bl	80020f8 <BSP_LCD_GetXSize>
 800219c:	4603      	mov	r3, r0
 800219e:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80021a0:	f7ff ffbe 	bl	8002120 <BSP_LCD_GetYSize>
 80021a4:	4603      	mov	r3, r0
 80021a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80021a8:	88fa      	ldrh	r2, [r7, #6]
 80021aa:	f107 030c 	add.w	r3, r7, #12
 80021ae:	4619      	mov	r1, r3
 80021b0:	4812      	ldr	r0, [pc, #72]	@ (80021fc <BSP_LCD_LayerDefaultInit+0xb4>)
 80021b2:	f002 ff45 	bl	8005040 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	4911      	ldr	r1, [pc, #68]	@ (8002200 <BSP_LCD_LayerDefaultInit+0xb8>)
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3304      	adds	r3, #4
 80021c6:	f04f 32ff 	mov.w	r2, #4294967295
 80021ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80021cc:	88fa      	ldrh	r2, [r7, #6]
 80021ce:	490c      	ldr	r1, [pc, #48]	@ (8002200 <BSP_LCD_LayerDefaultInit+0xb8>)
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	3308      	adds	r3, #8
 80021dc:	4a09      	ldr	r2, [pc, #36]	@ (8002204 <BSP_LCD_LayerDefaultInit+0xbc>)
 80021de:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80021e0:	88fa      	ldrh	r2, [r7, #6]
 80021e2:	4907      	ldr	r1, [pc, #28]	@ (8002200 <BSP_LCD_LayerDefaultInit+0xb8>)
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80021f2:	601a      	str	r2, [r3, #0]
}
 80021f4:	bf00      	nop
 80021f6:	3740      	adds	r7, #64	@ 0x40
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20002210 	.word	0x20002210
 8002200:	200022fc 	.word	0x200022fc
 8002204:	20000008 	.word	0x20000008

08002208 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002210:	4a04      	ldr	r2, [pc, #16]	@ (8002224 <BSP_LCD_SelectLayer+0x1c>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]
} 
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	200022f8 	.word	0x200022f8

08002228 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002230:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <BSP_LCD_SetTextColor+0x28>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4907      	ldr	r1, [pc, #28]	@ (8002254 <BSP_LCD_SetTextColor+0x2c>)
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	601a      	str	r2, [r3, #0]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	200022f8 	.word	0x200022f8
 8002254:	200022fc 	.word	0x200022fc

08002258 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002260:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <BSP_LCD_SetBackColor+0x2c>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4908      	ldr	r1, [pc, #32]	@ (8002288 <BSP_LCD_SetBackColor+0x30>)
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	3304      	adds	r3, #4
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	601a      	str	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	200022f8 	.word	0x200022f8
 8002288:	200022fc 	.word	0x200022fc

0800228c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002294:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <BSP_LCD_SetFont+0x2c>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4908      	ldr	r1, [pc, #32]	@ (80022bc <BSP_LCD_SetFont+0x30>)
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	3308      	adds	r3, #8
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	601a      	str	r2, [r3, #0]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	200022f8 	.word	0x200022f8
 80022bc:	200022fc 	.word	0x200022fc

080022c0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80022c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80022c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <BSP_LCD_Clear+0x48>)
 80022ca:	681c      	ldr	r4, [r3, #0]
 80022cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <BSP_LCD_Clear+0x48>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0e      	ldr	r2, [pc, #56]	@ (800230c <BSP_LCD_Clear+0x4c>)
 80022d2:	2134      	movs	r1, #52	@ 0x34
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	335c      	adds	r3, #92	@ 0x5c
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	461e      	mov	r6, r3
 80022e0:	f7ff ff0a 	bl	80020f8 <BSP_LCD_GetXSize>
 80022e4:	4605      	mov	r5, r0
 80022e6:	f7ff ff1b 	bl	8002120 <BSP_LCD_GetYSize>
 80022ea:	4602      	mov	r2, r0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	2300      	movs	r3, #0
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	462a      	mov	r2, r5
 80022f8:	4631      	mov	r1, r6
 80022fa:	4620      	mov	r0, r4
 80022fc:	f000 fb28 	bl	8002950 <LL_FillBuffer>
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002308:	200022f8 	.word	0x200022f8
 800230c:	20002210 	.word	0x20002210

08002310 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	80fb      	strh	r3, [r7, #6]
 800231a:	460b      	mov	r3, r1
 800231c:	80bb      	strh	r3, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002322:	4b1b      	ldr	r3, [pc, #108]	@ (8002390 <BSP_LCD_DisplayChar+0x80>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	491b      	ldr	r1, [pc, #108]	@ (8002394 <BSP_LCD_DisplayChar+0x84>)
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	3308      	adds	r3, #8
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6819      	ldr	r1, [r3, #0]
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800233e:	4b14      	ldr	r3, [pc, #80]	@ (8002390 <BSP_LCD_DisplayChar+0x80>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4c14      	ldr	r4, [pc, #80]	@ (8002394 <BSP_LCD_DisplayChar+0x84>)
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4423      	add	r3, r4
 800234e:	3308      	adds	r3, #8
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002354:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002358:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <BSP_LCD_DisplayChar+0x80>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4c0d      	ldr	r4, [pc, #52]	@ (8002394 <BSP_LCD_DisplayChar+0x84>)
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4423      	add	r3, r4
 8002368:	3308      	adds	r3, #8
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	889b      	ldrh	r3, [r3, #4]
 800236e:	3307      	adds	r3, #7
 8002370:	2b00      	cmp	r3, #0
 8002372:	da00      	bge.n	8002376 <BSP_LCD_DisplayChar+0x66>
 8002374:	3307      	adds	r3, #7
 8002376:	10db      	asrs	r3, r3, #3
 8002378:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800237c:	18ca      	adds	r2, r1, r3
 800237e:	88b9      	ldrh	r1, [r7, #4]
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fa2c 	bl	80027e0 <DrawChar>
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bd90      	pop	{r4, r7, pc}
 8002390:	200022f8 	.word	0x200022f8
 8002394:	200022fc 	.word	0x200022fc

08002398 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002398:	b5b0      	push	{r4, r5, r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	60ba      	str	r2, [r7, #8]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4603      	mov	r3, r0
 80023a4:	81fb      	strh	r3, [r7, #14]
 80023a6:	460b      	mov	r3, r1
 80023a8:	81bb      	strh	r3, [r7, #12]
 80023aa:	4613      	mov	r3, r2
 80023ac:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80023ae:	2301      	movs	r3, #1
 80023b0:	83fb      	strh	r3, [r7, #30]
 80023b2:	2300      	movs	r3, #0
 80023b4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80023c2:	e002      	b.n	80023ca <BSP_LCD_DisplayStringAt+0x32>
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	3301      	adds	r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	617a      	str	r2, [r7, #20]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f6      	bne.n	80023c4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80023d6:	f7ff fe8f 	bl	80020f8 <BSP_LCD_GetXSize>
 80023da:	4601      	mov	r1, r0
 80023dc:	4b50      	ldr	r3, [pc, #320]	@ (8002520 <BSP_LCD_DisplayStringAt+0x188>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4850      	ldr	r0, [pc, #320]	@ (8002524 <BSP_LCD_DisplayStringAt+0x18c>)
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4403      	add	r3, r0
 80023ec:	3308      	adds	r3, #8
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	889b      	ldrh	r3, [r3, #4]
 80023f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023f6:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d01c      	beq.n	8002438 <BSP_LCD_DisplayStringAt+0xa0>
 80023fe:	2b03      	cmp	r3, #3
 8002400:	dc33      	bgt.n	800246a <BSP_LCD_DisplayStringAt+0xd2>
 8002402:	2b01      	cmp	r3, #1
 8002404:	d002      	beq.n	800240c <BSP_LCD_DisplayStringAt+0x74>
 8002406:	2b02      	cmp	r3, #2
 8002408:	d019      	beq.n	800243e <BSP_LCD_DisplayStringAt+0xa6>
 800240a:	e02e      	b.n	800246a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	1ad1      	subs	r1, r2, r3
 8002412:	4b43      	ldr	r3, [pc, #268]	@ (8002520 <BSP_LCD_DisplayStringAt+0x188>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4843      	ldr	r0, [pc, #268]	@ (8002524 <BSP_LCD_DisplayStringAt+0x18c>)
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4403      	add	r3, r0
 8002422:	3308      	adds	r3, #8
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	889b      	ldrh	r3, [r3, #4]
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	085b      	lsrs	r3, r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	89fb      	ldrh	r3, [r7, #14]
 8002432:	4413      	add	r3, r2
 8002434:	83fb      	strh	r3, [r7, #30]
      break;
 8002436:	e01b      	b.n	8002470 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002438:	89fb      	ldrh	r3, [r7, #14]
 800243a:	83fb      	strh	r3, [r7, #30]
      break;
 800243c:	e018      	b.n	8002470 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	b299      	uxth	r1, r3
 8002446:	4b36      	ldr	r3, [pc, #216]	@ (8002520 <BSP_LCD_DisplayStringAt+0x188>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4836      	ldr	r0, [pc, #216]	@ (8002524 <BSP_LCD_DisplayStringAt+0x18c>)
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4403      	add	r3, r0
 8002456:	3308      	adds	r3, #8
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	889b      	ldrh	r3, [r3, #4]
 800245c:	fb11 f303 	smulbb	r3, r1, r3
 8002460:	b29a      	uxth	r2, r3
 8002462:	89fb      	ldrh	r3, [r7, #14]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	83fb      	strh	r3, [r7, #30]
      break;
 8002468:	e002      	b.n	8002470 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800246a:	89fb      	ldrh	r3, [r7, #14]
 800246c:	83fb      	strh	r3, [r7, #30]
      break;
 800246e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002470:	8bfb      	ldrh	r3, [r7, #30]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <BSP_LCD_DisplayStringAt+0xe6>
 8002476:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800247a:	2b00      	cmp	r3, #0
 800247c:	da1d      	bge.n	80024ba <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800247e:	2301      	movs	r3, #1
 8002480:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002482:	e01a      	b.n	80024ba <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	89b9      	ldrh	r1, [r7, #12]
 800248a:	8bfb      	ldrh	r3, [r7, #30]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff3f 	bl	8002310 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002492:	4b23      	ldr	r3, [pc, #140]	@ (8002520 <BSP_LCD_DisplayStringAt+0x188>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	4923      	ldr	r1, [pc, #140]	@ (8002524 <BSP_LCD_DisplayStringAt+0x18c>)
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	3308      	adds	r3, #8
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	889a      	ldrh	r2, [r3, #4]
 80024a8:	8bfb      	ldrh	r3, [r7, #30]
 80024aa:	4413      	add	r3, r2
 80024ac:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	3301      	adds	r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
    i++;
 80024b4:	8bbb      	ldrh	r3, [r7, #28]
 80024b6:	3301      	adds	r3, #1
 80024b8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf14      	ite	ne
 80024c2:	2301      	movne	r3, #1
 80024c4:	2300      	moveq	r3, #0
 80024c6:	b2dc      	uxtb	r4, r3
 80024c8:	f7ff fe16 	bl	80020f8 <BSP_LCD_GetXSize>
 80024cc:	8bb9      	ldrh	r1, [r7, #28]
 80024ce:	4b14      	ldr	r3, [pc, #80]	@ (8002520 <BSP_LCD_DisplayStringAt+0x188>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	4d14      	ldr	r5, [pc, #80]	@ (8002524 <BSP_LCD_DisplayStringAt+0x18c>)
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	442b      	add	r3, r5
 80024de:	3308      	adds	r3, #8
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	889b      	ldrh	r3, [r3, #4]
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	1ac3      	subs	r3, r0, r3
 80024ea:	b299      	uxth	r1, r3
 80024ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <BSP_LCD_DisplayStringAt+0x188>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	480c      	ldr	r0, [pc, #48]	@ (8002524 <BSP_LCD_DisplayStringAt+0x18c>)
 80024f2:	4613      	mov	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4403      	add	r3, r0
 80024fc:	3308      	adds	r3, #8
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	889b      	ldrh	r3, [r3, #4]
 8002502:	4299      	cmp	r1, r3
 8002504:	bf2c      	ite	cs
 8002506:	2301      	movcs	r3, #1
 8002508:	2300      	movcc	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4023      	ands	r3, r4
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1b7      	bne.n	8002484 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bdb0      	pop	{r4, r5, r7, pc}
 800251e:	bf00      	nop
 8002520:	200022f8 	.word	0x200022f8
 8002524:	200022fc 	.word	0x200022fc

08002528 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	603a      	str	r2, [r7, #0]
 8002532:	80fb      	strh	r3, [r7, #6]
 8002534:	460b      	mov	r3, r1
 8002536:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002538:	4b1d      	ldr	r3, [pc, #116]	@ (80025b0 <BSP_LCD_DrawPixel+0x88>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1d      	ldr	r2, [pc, #116]	@ (80025b4 <BSP_LCD_DrawPixel+0x8c>)
 800253e:	2134      	movs	r1, #52	@ 0x34
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	3348      	adds	r3, #72	@ 0x48
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d116      	bne.n	800257c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800254e:	4b18      	ldr	r3, [pc, #96]	@ (80025b0 <BSP_LCD_DrawPixel+0x88>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a18      	ldr	r2, [pc, #96]	@ (80025b4 <BSP_LCD_DrawPixel+0x8c>)
 8002554:	2134      	movs	r1, #52	@ 0x34
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	335c      	adds	r3, #92	@ 0x5c
 800255e:	681c      	ldr	r4, [r3, #0]
 8002560:	88bd      	ldrh	r5, [r7, #4]
 8002562:	f7ff fdc9 	bl	80020f8 <BSP_LCD_GetXSize>
 8002566:	4603      	mov	r3, r0
 8002568:	fb03 f205 	mul.w	r2, r3, r5
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	4413      	add	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4423      	add	r3, r4
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	b292      	uxth	r2, r2
 8002578:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800257a:	e015      	b.n	80025a8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <BSP_LCD_DrawPixel+0x88>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0c      	ldr	r2, [pc, #48]	@ (80025b4 <BSP_LCD_DrawPixel+0x8c>)
 8002582:	2134      	movs	r1, #52	@ 0x34
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	335c      	adds	r3, #92	@ 0x5c
 800258c:	681c      	ldr	r4, [r3, #0]
 800258e:	88bd      	ldrh	r5, [r7, #4]
 8002590:	f7ff fdb2 	bl	80020f8 <BSP_LCD_GetXSize>
 8002594:	4603      	mov	r3, r0
 8002596:	fb03 f205 	mul.w	r2, r3, r5
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4423      	add	r3, r4
 80025a2:	461a      	mov	r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bdb0      	pop	{r4, r5, r7, pc}
 80025b0:	200022f8 	.word	0x200022f8
 80025b4:	20002210 	.word	0x20002210

080025b8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80025bc:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <BSP_LCD_DisplayOn+0x30>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <BSP_LCD_DisplayOn+0x30>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80025cc:	2201      	movs	r2, #1
 80025ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025d2:	4806      	ldr	r0, [pc, #24]	@ (80025ec <BSP_LCD_DisplayOn+0x34>)
 80025d4:	f001 fe6c 	bl	80042b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80025d8:	2201      	movs	r2, #1
 80025da:	2108      	movs	r1, #8
 80025dc:	4804      	ldr	r0, [pc, #16]	@ (80025f0 <BSP_LCD_DisplayOn+0x38>)
 80025de:	f001 fe67 	bl	80042b0 <HAL_GPIO_WritePin>
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20002210 	.word	0x20002210
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40022800 	.word	0x40022800

080025f4 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b090      	sub	sp, #64	@ 0x40
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80025fe:	4b64      	ldr	r3, [pc, #400]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	4a63      	ldr	r2, [pc, #396]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 8002604:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002608:	6453      	str	r3, [r2, #68]	@ 0x44
 800260a:	4b61      	ldr	r3, [pc, #388]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002612:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002616:	4b5e      	ldr	r3, [pc, #376]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	4a5d      	ldr	r2, [pc, #372]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 800261c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002620:	6313      	str	r3, [r2, #48]	@ 0x30
 8002622:	4b5b      	ldr	r3, [pc, #364]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800262e:	4b58      	ldr	r3, [pc, #352]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	4a57      	ldr	r2, [pc, #348]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 8002634:	f043 0310 	orr.w	r3, r3, #16
 8002638:	6313      	str	r3, [r2, #48]	@ 0x30
 800263a:	4b55      	ldr	r3, [pc, #340]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	623b      	str	r3, [r7, #32]
 8002644:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002646:	4b52      	ldr	r3, [pc, #328]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	4a51      	ldr	r2, [pc, #324]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 800264c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002650:	6313      	str	r3, [r2, #48]	@ 0x30
 8002652:	4b4f      	ldr	r3, [pc, #316]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800265e:	4b4c      	ldr	r3, [pc, #304]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	4a4b      	ldr	r2, [pc, #300]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002668:	6313      	str	r3, [r2, #48]	@ 0x30
 800266a:	4b49      	ldr	r3, [pc, #292]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002676:	4b46      	ldr	r3, [pc, #280]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	4a45      	ldr	r2, [pc, #276]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 800267c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002680:	6313      	str	r3, [r2, #48]	@ 0x30
 8002682:	4b43      	ldr	r3, [pc, #268]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800268e:	4b40      	ldr	r3, [pc, #256]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4a3f      	ldr	r2, [pc, #252]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 8002694:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4b3d      	ldr	r3, [pc, #244]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80026a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	4a39      	ldr	r2, [pc, #228]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 80026ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b2:	4b37      	ldr	r3, [pc, #220]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80026be:	4b34      	ldr	r3, [pc, #208]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	4a33      	ldr	r2, [pc, #204]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 80026c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ca:	4b31      	ldr	r3, [pc, #196]	@ (8002790 <BSP_LCD_MspInit+0x19c>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80026d6:	2310      	movs	r3, #16
 80026d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80026e2:	2302      	movs	r3, #2
 80026e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80026e6:	230e      	movs	r3, #14
 80026e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80026ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026ee:	4619      	mov	r1, r3
 80026f0:	4828      	ldr	r0, [pc, #160]	@ (8002794 <BSP_LCD_MspInit+0x1a0>)
 80026f2:	f001 fb25 	bl	8003d40 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80026f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80026fc:	2302      	movs	r3, #2
 80026fe:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002700:	2309      	movs	r3, #9
 8002702:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002704:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002708:	4619      	mov	r1, r3
 800270a:	4823      	ldr	r0, [pc, #140]	@ (8002798 <BSP_LCD_MspInit+0x1a4>)
 800270c:	f001 fb18 	bl	8003d40 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002710:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002714:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800271a:	230e      	movs	r3, #14
 800271c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800271e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002722:	4619      	mov	r1, r3
 8002724:	481d      	ldr	r0, [pc, #116]	@ (800279c <BSP_LCD_MspInit+0x1a8>)
 8002726:	f001 fb0b 	bl	8003d40 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800272a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002734:	230e      	movs	r3, #14
 8002736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002738:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800273c:	4619      	mov	r1, r3
 800273e:	4818      	ldr	r0, [pc, #96]	@ (80027a0 <BSP_LCD_MspInit+0x1ac>)
 8002740:	f001 fafe 	bl	8003d40 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002744:	23f7      	movs	r3, #247	@ 0xf7
 8002746:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800274c:	230e      	movs	r3, #14
 800274e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002750:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002754:	4619      	mov	r1, r3
 8002756:	4813      	ldr	r0, [pc, #76]	@ (80027a4 <BSP_LCD_MspInit+0x1b0>)
 8002758:	f001 faf2 	bl	8003d40 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800275c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002762:	2301      	movs	r3, #1
 8002764:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002766:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800276a:	4619      	mov	r1, r3
 800276c:	480b      	ldr	r0, [pc, #44]	@ (800279c <BSP_LCD_MspInit+0x1a8>)
 800276e:	f001 fae7 	bl	8003d40 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002772:	2308      	movs	r3, #8
 8002774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002776:	2301      	movs	r3, #1
 8002778:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800277a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800277e:	4619      	mov	r1, r3
 8002780:	4808      	ldr	r0, [pc, #32]	@ (80027a4 <BSP_LCD_MspInit+0x1b0>)
 8002782:	f001 fadd 	bl	8003d40 <HAL_GPIO_Init>
}
 8002786:	bf00      	nop
 8002788:	3740      	adds	r7, #64	@ 0x40
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	40021000 	.word	0x40021000
 8002798:	40021800 	.word	0x40021800
 800279c:	40022000 	.word	0x40022000
 80027a0:	40022400 	.word	0x40022400
 80027a4:	40022800 	.word	0x40022800

080027a8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80027b2:	4b0a      	ldr	r3, [pc, #40]	@ (80027dc <BSP_LCD_ClockConfig+0x34>)
 80027b4:	2208      	movs	r2, #8
 80027b6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80027b8:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <BSP_LCD_ClockConfig+0x34>)
 80027ba:	22c0      	movs	r2, #192	@ 0xc0
 80027bc:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80027be:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <BSP_LCD_ClockConfig+0x34>)
 80027c0:	2205      	movs	r2, #5
 80027c2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80027c4:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <BSP_LCD_ClockConfig+0x34>)
 80027c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80027cc:	4803      	ldr	r0, [pc, #12]	@ (80027dc <BSP_LCD_ClockConfig+0x34>)
 80027ce:	f003 fb07 	bl	8005de0 <HAL_RCCEx_PeriphCLKConfig>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20002314 	.word	0x20002314

080027e0 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	603a      	str	r2, [r7, #0]
 80027ea:	80fb      	strh	r3, [r7, #6]
 80027ec:	460b      	mov	r3, r1
 80027ee:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	2300      	movs	r3, #0
 80027f6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80027f8:	4b53      	ldr	r3, [pc, #332]	@ (8002948 <DrawChar+0x168>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4953      	ldr	r1, [pc, #332]	@ (800294c <DrawChar+0x16c>)
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	3308      	adds	r3, #8
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	88db      	ldrh	r3, [r3, #6]
 800280e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002810:	4b4d      	ldr	r3, [pc, #308]	@ (8002948 <DrawChar+0x168>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	494d      	ldr	r1, [pc, #308]	@ (800294c <DrawChar+0x16c>)
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3308      	adds	r3, #8
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	889b      	ldrh	r3, [r3, #4]
 8002826:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002828:	8a3b      	ldrh	r3, [r7, #16]
 800282a:	3307      	adds	r3, #7
 800282c:	2b00      	cmp	r3, #0
 800282e:	da00      	bge.n	8002832 <DrawChar+0x52>
 8002830:	3307      	adds	r3, #7
 8002832:	10db      	asrs	r3, r3, #3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	b2da      	uxtb	r2, r3
 800283a:	8a3b      	ldrh	r3, [r7, #16]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e076      	b.n	8002936 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002848:	8a3b      	ldrh	r3, [r7, #16]
 800284a:	3307      	adds	r3, #7
 800284c:	2b00      	cmp	r3, #0
 800284e:	da00      	bge.n	8002852 <DrawChar+0x72>
 8002850:	3307      	adds	r3, #7
 8002852:	10db      	asrs	r3, r3, #3
 8002854:	461a      	mov	r2, r3
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fb02 f303 	mul.w	r3, r2, r3
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	4413      	add	r3, r2
 8002860:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8002862:	8a3b      	ldrh	r3, [r7, #16]
 8002864:	3307      	adds	r3, #7
 8002866:	2b00      	cmp	r3, #0
 8002868:	da00      	bge.n	800286c <DrawChar+0x8c>
 800286a:	3307      	adds	r3, #7
 800286c:	10db      	asrs	r3, r3, #3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d002      	beq.n	8002878 <DrawChar+0x98>
 8002872:	2b02      	cmp	r3, #2
 8002874:	d004      	beq.n	8002880 <DrawChar+0xa0>
 8002876:	e00c      	b.n	8002892 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	617b      	str	r3, [r7, #20]
      break;
 800287e:	e016      	b.n	80028ae <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	3201      	adds	r2, #1
 800288a:	7812      	ldrb	r2, [r2, #0]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
      break;
 8002890:	e00d      	b.n	80028ae <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	041a      	lsls	r2, r3, #16
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	3301      	adds	r3, #1
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	4313      	orrs	r3, r2
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	3202      	adds	r2, #2
 80028a6:	7812      	ldrb	r2, [r2, #0]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]
      break;
 80028ac:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e036      	b.n	8002922 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80028b4:	8a3a      	ldrh	r2, [r7, #16]
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	1ad2      	subs	r2, r2, r3
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	4413      	add	r3, r2
 80028be:	3b01      	subs	r3, #1
 80028c0:	2201      	movs	r2, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d012      	beq.n	80028f6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	4413      	add	r3, r2
 80028d8:	b298      	uxth	r0, r3
 80028da:	4b1b      	ldr	r3, [pc, #108]	@ (8002948 <DrawChar+0x168>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	491b      	ldr	r1, [pc, #108]	@ (800294c <DrawChar+0x16c>)
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	88bb      	ldrh	r3, [r7, #4]
 80028ee:	4619      	mov	r1, r3
 80028f0:	f7ff fe1a 	bl	8002528 <BSP_LCD_DrawPixel>
 80028f4:	e012      	b.n	800291c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	4413      	add	r3, r2
 80028fe:	b298      	uxth	r0, r3
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <DrawChar+0x168>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4911      	ldr	r1, [pc, #68]	@ (800294c <DrawChar+0x16c>)
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	3304      	adds	r3, #4
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	88bb      	ldrh	r3, [r7, #4]
 8002916:	4619      	mov	r1, r3
 8002918:	f7ff fe06 	bl	8002528 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	3301      	adds	r3, #1
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	8a3b      	ldrh	r3, [r7, #16]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	429a      	cmp	r2, r3
 8002928:	d3c4      	bcc.n	80028b4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800292a:	88bb      	ldrh	r3, [r7, #4]
 800292c:	3301      	adds	r3, #1
 800292e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	3301      	adds	r3, #1
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	8a7b      	ldrh	r3, [r7, #18]
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	429a      	cmp	r2, r3
 800293c:	d384      	bcc.n	8002848 <DrawChar+0x68>
  }
}
 800293e:	bf00      	nop
 8002940:	bf00      	nop
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	200022f8 	.word	0x200022f8
 800294c:	200022fc 	.word	0x200022fc

08002950 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800295e:	4b1e      	ldr	r3, [pc, #120]	@ (80029d8 <LL_FillBuffer+0x88>)
 8002960:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002964:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002966:	4b1d      	ldr	r3, [pc, #116]	@ (80029dc <LL_FillBuffer+0x8c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1d      	ldr	r2, [pc, #116]	@ (80029e0 <LL_FillBuffer+0x90>)
 800296c:	2134      	movs	r1, #52	@ 0x34
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3348      	adds	r3, #72	@ 0x48
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d103      	bne.n	8002984 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800297c:	4b16      	ldr	r3, [pc, #88]	@ (80029d8 <LL_FillBuffer+0x88>)
 800297e:	2202      	movs	r2, #2
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	e002      	b.n	800298a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002984:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <LL_FillBuffer+0x88>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800298a:	4a13      	ldr	r2, [pc, #76]	@ (80029d8 <LL_FillBuffer+0x88>)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002990:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <LL_FillBuffer+0x88>)
 8002992:	4a14      	ldr	r2, [pc, #80]	@ (80029e4 <LL_FillBuffer+0x94>)
 8002994:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002996:	4810      	ldr	r0, [pc, #64]	@ (80029d8 <LL_FillBuffer+0x88>)
 8002998:	f000 ff46 	bl	8003828 <HAL_DMA2D_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d115      	bne.n	80029ce <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80029a2:	68f9      	ldr	r1, [r7, #12]
 80029a4:	480c      	ldr	r0, [pc, #48]	@ (80029d8 <LL_FillBuffer+0x88>)
 80029a6:	f001 f89d 	bl	8003ae4 <HAL_DMA2D_ConfigLayer>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10e      	bne.n	80029ce <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69f9      	ldr	r1, [r7, #28]
 80029ba:	4807      	ldr	r0, [pc, #28]	@ (80029d8 <LL_FillBuffer+0x88>)
 80029bc:	f000 ff7e 	bl	80038bc <HAL_DMA2D_Start>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80029c6:	210a      	movs	r1, #10
 80029c8:	4803      	ldr	r0, [pc, #12]	@ (80029d8 <LL_FillBuffer+0x88>)
 80029ca:	f000 ffa2 	bl	8003912 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200022b8 	.word	0x200022b8
 80029dc:	200022f8 	.word	0x200022f8
 80029e0:	20002210 	.word	0x20002210
 80029e4:	4002b000 	.word	0x4002b000

080029e8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80029ec:	4b29      	ldr	r3, [pc, #164]	@ (8002a94 <BSP_SDRAM_Init+0xac>)
 80029ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002a98 <BSP_SDRAM_Init+0xb0>)
 80029f0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80029f2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a9c <BSP_SDRAM_Init+0xb4>)
 80029f4:	2202      	movs	r2, #2
 80029f6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80029f8:	4b28      	ldr	r3, [pc, #160]	@ (8002a9c <BSP_SDRAM_Init+0xb4>)
 80029fa:	2207      	movs	r2, #7
 80029fc:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80029fe:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <BSP_SDRAM_Init+0xb4>)
 8002a00:	2204      	movs	r2, #4
 8002a02:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002a04:	4b25      	ldr	r3, [pc, #148]	@ (8002a9c <BSP_SDRAM_Init+0xb4>)
 8002a06:	2207      	movs	r2, #7
 8002a08:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002a0a:	4b24      	ldr	r3, [pc, #144]	@ (8002a9c <BSP_SDRAM_Init+0xb4>)
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002a10:	4b22      	ldr	r3, [pc, #136]	@ (8002a9c <BSP_SDRAM_Init+0xb4>)
 8002a12:	2202      	movs	r2, #2
 8002a14:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002a16:	4b21      	ldr	r3, [pc, #132]	@ (8002a9c <BSP_SDRAM_Init+0xb4>)
 8002a18:	2202      	movs	r2, #2
 8002a1a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <BSP_SDRAM_Init+0xac>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002a22:	4b1c      	ldr	r3, [pc, #112]	@ (8002a94 <BSP_SDRAM_Init+0xac>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002a28:	4b1a      	ldr	r3, [pc, #104]	@ (8002a94 <BSP_SDRAM_Init+0xac>)
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002a2e:	4b19      	ldr	r3, [pc, #100]	@ (8002a94 <BSP_SDRAM_Init+0xac>)
 8002a30:	2210      	movs	r2, #16
 8002a32:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002a34:	4b17      	ldr	r3, [pc, #92]	@ (8002a94 <BSP_SDRAM_Init+0xac>)
 8002a36:	2240      	movs	r2, #64	@ 0x40
 8002a38:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002a3a:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <BSP_SDRAM_Init+0xac>)
 8002a3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a40:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002a42:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <BSP_SDRAM_Init+0xac>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002a48:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <BSP_SDRAM_Init+0xac>)
 8002a4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a4e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002a50:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <BSP_SDRAM_Init+0xac>)
 8002a52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a56:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002a58:	4b0e      	ldr	r3, [pc, #56]	@ (8002a94 <BSP_SDRAM_Init+0xac>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002a5e:	2100      	movs	r1, #0
 8002a60:	480c      	ldr	r0, [pc, #48]	@ (8002a94 <BSP_SDRAM_Init+0xac>)
 8002a62:	f000 f87f 	bl	8002b64 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002a66:	490d      	ldr	r1, [pc, #52]	@ (8002a9c <BSP_SDRAM_Init+0xb4>)
 8002a68:	480a      	ldr	r0, [pc, #40]	@ (8002a94 <BSP_SDRAM_Init+0xac>)
 8002a6a:	f004 fb46 	bl	80070fa <HAL_SDRAM_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002a74:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <BSP_SDRAM_Init+0xb8>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e002      	b.n	8002a82 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002a7c:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <BSP_SDRAM_Init+0xb8>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002a82:	f240 6003 	movw	r0, #1539	@ 0x603
 8002a86:	f000 f80d 	bl	8002aa4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002a8a:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <BSP_SDRAM_Init+0xb8>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20002398 	.word	0x20002398
 8002a98:	a0000140 	.word	0xa0000140
 8002a9c:	200023cc 	.word	0x200023cc
 8002aa0:	20000010 	.word	0x20000010

08002aa4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ab6:	4b29      	ldr	r3, [pc, #164]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ab8:	2210      	movs	r2, #16
 8002aba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002abc:	4b27      	ldr	r3, [pc, #156]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002ac2:	4b26      	ldr	r3, [pc, #152]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002ac8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002acc:	4923      	ldr	r1, [pc, #140]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ace:	4824      	ldr	r0, [pc, #144]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ad0:	f004 fb47 	bl	8007162 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	f000 f99b 	bl	8002e10 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002ada:	4b20      	ldr	r3, [pc, #128]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002adc:	2202      	movs	r2, #2
 8002ade:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002aec:	4b1b      	ldr	r3, [pc, #108]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002af2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002af6:	4919      	ldr	r1, [pc, #100]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002af8:	4819      	ldr	r0, [pc, #100]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002afa:	f004 fb32 	bl	8007162 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002afe:	4b17      	ldr	r3, [pc, #92]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b00:	2203      	movs	r2, #3
 8002b02:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b04:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b06:	2210      	movs	r2, #16
 8002b08:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002b10:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002b16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b1a:	4910      	ldr	r1, [pc, #64]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b1c:	4810      	ldr	r0, [pc, #64]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b1e:	f004 fb20 	bl	8007162 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002b22:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8002b26:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b30:	2210      	movs	r2, #16
 8002b32:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002b34:	4b09      	ldr	r3, [pc, #36]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4a07      	ldr	r2, [pc, #28]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b3e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b44:	4905      	ldr	r1, [pc, #20]	@ (8002b5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b46:	4806      	ldr	r0, [pc, #24]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b48:	f004 fb0b 	bl	8007162 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4804      	ldr	r0, [pc, #16]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b50:	f004 fb3c 	bl	80071cc <HAL_SDRAM_ProgramRefreshRate>
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	200023e8 	.word	0x200023e8
 8002b60:	20002398 	.word	0x20002398

08002b64 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b090      	sub	sp, #64	@ 0x40
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b6e:	4b70      	ldr	r3, [pc, #448]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b72:	4a6f      	ldr	r2, [pc, #444]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002b86:	4b6a      	ldr	r3, [pc, #424]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	4a69      	ldr	r2, [pc, #420]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002b8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b92:	4b67      	ldr	r3, [pc, #412]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9e:	4b64      	ldr	r3, [pc, #400]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	4a63      	ldr	r2, [pc, #396]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002baa:	4b61      	ldr	r3, [pc, #388]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	623b      	str	r3, [r7, #32]
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb6:	4b5e      	ldr	r3, [pc, #376]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	4a5d      	ldr	r2, [pc, #372]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002bbc:	f043 0308 	orr.w	r3, r3, #8
 8002bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc2:	4b5b      	ldr	r3, [pc, #364]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bce:	4b58      	ldr	r3, [pc, #352]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	4a57      	ldr	r2, [pc, #348]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002bd4:	f043 0310 	orr.w	r3, r3, #16
 8002bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bda:	4b55      	ldr	r3, [pc, #340]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002be6:	4b52      	ldr	r3, [pc, #328]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	4a51      	ldr	r2, [pc, #324]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002bec:	f043 0320 	orr.w	r3, r3, #32
 8002bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bfe:	4b4c      	ldr	r3, [pc, #304]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	4a4b      	ldr	r2, [pc, #300]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0a:	4b49      	ldr	r3, [pc, #292]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c16:	4b46      	ldr	r3, [pc, #280]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	4a45      	ldr	r2, [pc, #276]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c22:	4b43      	ldr	r3, [pc, #268]	@ (8002d30 <BSP_SDRAM_MspInit+0x1cc>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002c32:	2301      	movs	r3, #1
 8002c34:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002c36:	2302      	movs	r3, #2
 8002c38:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002c3a:	230c      	movs	r3, #12
 8002c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002c3e:	2308      	movs	r3, #8
 8002c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002c42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c46:	4619      	mov	r1, r3
 8002c48:	483a      	ldr	r0, [pc, #232]	@ (8002d34 <BSP_SDRAM_MspInit+0x1d0>)
 8002c4a:	f001 f879 	bl	8003d40 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002c4e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002c54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4837      	ldr	r0, [pc, #220]	@ (8002d38 <BSP_SDRAM_MspInit+0x1d4>)
 8002c5c:	f001 f870 	bl	8003d40 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002c60:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002c66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4833      	ldr	r0, [pc, #204]	@ (8002d3c <BSP_SDRAM_MspInit+0x1d8>)
 8002c6e:	f001 f867 	bl	8003d40 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002c72:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002c78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4830      	ldr	r0, [pc, #192]	@ (8002d40 <BSP_SDRAM_MspInit+0x1dc>)
 8002c80:	f001 f85e 	bl	8003d40 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002c84:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002c8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c8e:	4619      	mov	r1, r3
 8002c90:	482c      	ldr	r0, [pc, #176]	@ (8002d44 <BSP_SDRAM_MspInit+0x1e0>)
 8002c92:	f001 f855 	bl	8003d40 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002c96:	2328      	movs	r3, #40	@ 0x28
 8002c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4829      	ldr	r0, [pc, #164]	@ (8002d48 <BSP_SDRAM_MspInit+0x1e4>)
 8002ca2:	f001 f84d 	bl	8003d40 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002ca6:	4b29      	ldr	r3, [pc, #164]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002cac:	4b27      	ldr	r3, [pc, #156]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002cae:	2280      	movs	r2, #128	@ 0x80
 8002cb0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002cb2:	4b26      	ldr	r3, [pc, #152]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002cb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002cba:	4b24      	ldr	r3, [pc, #144]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002cbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cc0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cc2:	4b22      	ldr	r3, [pc, #136]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002cc4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002cc8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002cca:	4b20      	ldr	r3, [pc, #128]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002ccc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cd0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002cda:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002cde:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002ce6:	4b19      	ldr	r3, [pc, #100]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002ce8:	2203      	movs	r2, #3
 8002cea:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002cec:	4b17      	ldr	r3, [pc, #92]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002cf2:	4b16      	ldr	r3, [pc, #88]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002cf8:	4b14      	ldr	r3, [pc, #80]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002cfa:	4a15      	ldr	r2, [pc, #84]	@ (8002d50 <BSP_SDRAM_MspInit+0x1ec>)
 8002cfc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a12      	ldr	r2, [pc, #72]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002d02:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d04:	4a11      	ldr	r2, [pc, #68]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002d0a:	4810      	ldr	r0, [pc, #64]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002d0c:	f000 fa64 	bl	80031d8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002d10:	480e      	ldr	r0, [pc, #56]	@ (8002d4c <BSP_SDRAM_MspInit+0x1e8>)
 8002d12:	f000 f9b3 	bl	800307c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002d16:	2200      	movs	r2, #0
 8002d18:	210f      	movs	r1, #15
 8002d1a:	2038      	movs	r0, #56	@ 0x38
 8002d1c:	f000 f977 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002d20:	2038      	movs	r0, #56	@ 0x38
 8002d22:	f000 f990 	bl	8003046 <HAL_NVIC_EnableIRQ>
}
 8002d26:	bf00      	nop
 8002d28:	3740      	adds	r7, #64	@ 0x40
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40021400 	.word	0x40021400
 8002d44:	40021800 	.word	0x40021800
 8002d48:	40021c00 	.word	0x40021c00
 8002d4c:	200023f8 	.word	0x200023f8
 8002d50:	40026410 	.word	0x40026410

08002d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d58:	2003      	movs	r0, #3
 8002d5a:	f000 f94d 	bl	8002ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f000 f806 	bl	8002d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d64:	f7fe f860 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d78:	4b12      	ldr	r3, [pc, #72]	@ (8002dc4 <HAL_InitTick+0x54>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b12      	ldr	r3, [pc, #72]	@ (8002dc8 <HAL_InitTick+0x58>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f967 	bl	8003062 <HAL_SYSTICK_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00e      	b.n	8002dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b0f      	cmp	r3, #15
 8002da2:	d80a      	bhi.n	8002dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da4:	2200      	movs	r2, #0
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f000 f92f 	bl	800300e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002db0:	4a06      	ldr	r2, [pc, #24]	@ (8002dcc <HAL_InitTick+0x5c>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e000      	b.n	8002dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000004 	.word	0x20000004
 8002dc8:	20000018 	.word	0x20000018
 8002dcc:	20000014 	.word	0x20000014

08002dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd4:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_IncTick+0x20>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <HAL_IncTick+0x24>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4413      	add	r3, r2
 8002de0:	4a04      	ldr	r2, [pc, #16]	@ (8002df4 <HAL_IncTick+0x24>)
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000018 	.word	0x20000018
 8002df4:	20002458 	.word	0x20002458

08002df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dfc:	4b03      	ldr	r3, [pc, #12]	@ (8002e0c <HAL_GetTick+0x14>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	20002458 	.word	0x20002458

08002e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e18:	f7ff ffee 	bl	8002df8 <HAL_GetTick>
 8002e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d005      	beq.n	8002e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e54 <HAL_Delay+0x44>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e36:	bf00      	nop
 8002e38:	f7ff ffde 	bl	8002df8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d8f7      	bhi.n	8002e38 <HAL_Delay+0x28>
  {
  }
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000018 	.word	0x20000018

08002e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <__NVIC_SetPriorityGrouping+0x40>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e74:	4013      	ands	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e86:	4a04      	ldr	r2, [pc, #16]	@ (8002e98 <__NVIC_SetPriorityGrouping+0x40>)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	60d3      	str	r3, [r2, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000ed00 	.word	0xe000ed00
 8002e9c:	05fa0000 	.word	0x05fa0000

08002ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea4:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	f003 0307 	and.w	r3, r3, #7
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	db0b      	blt.n	8002ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	4907      	ldr	r1, [pc, #28]	@ (8002ef4 <__NVIC_EnableIRQ+0x38>)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2001      	movs	r0, #1
 8002ede:	fa00 f202 	lsl.w	r2, r0, r2
 8002ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000e100 	.word	0xe000e100

08002ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	6039      	str	r1, [r7, #0]
 8002f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	db0a      	blt.n	8002f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	490c      	ldr	r1, [pc, #48]	@ (8002f44 <__NVIC_SetPriority+0x4c>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	0112      	lsls	r2, r2, #4
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f20:	e00a      	b.n	8002f38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4908      	ldr	r1, [pc, #32]	@ (8002f48 <__NVIC_SetPriority+0x50>)
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	3b04      	subs	r3, #4
 8002f30:	0112      	lsls	r2, r2, #4
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	440b      	add	r3, r1
 8002f36:	761a      	strb	r2, [r3, #24]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000e100 	.word	0xe000e100
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	@ 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f1c3 0307 	rsb	r3, r3, #7
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	bf28      	it	cs
 8002f6a:	2304      	movcs	r3, #4
 8002f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2b06      	cmp	r3, #6
 8002f74:	d902      	bls.n	8002f7c <NVIC_EncodePriority+0x30>
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3b03      	subs	r3, #3
 8002f7a:	e000      	b.n	8002f7e <NVIC_EncodePriority+0x32>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f80:	f04f 32ff 	mov.w	r2, #4294967295
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	401a      	ands	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f94:	f04f 31ff 	mov.w	r1, #4294967295
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	43d9      	mvns	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	4313      	orrs	r3, r2
         );
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3724      	adds	r7, #36	@ 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fc4:	d301      	bcc.n	8002fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e00f      	b.n	8002fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff4 <SysTick_Config+0x40>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd2:	210f      	movs	r1, #15
 8002fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd8:	f7ff ff8e 	bl	8002ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fdc:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <SysTick_Config+0x40>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe2:	4b04      	ldr	r3, [pc, #16]	@ (8002ff4 <SysTick_Config+0x40>)
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	e000e010 	.word	0xe000e010

08002ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff29 	bl	8002e58 <__NVIC_SetPriorityGrouping>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800300e:	b580      	push	{r7, lr}
 8003010:	b086      	sub	sp, #24
 8003012:	af00      	add	r7, sp, #0
 8003014:	4603      	mov	r3, r0
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003020:	f7ff ff3e 	bl	8002ea0 <__NVIC_GetPriorityGrouping>
 8003024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	6978      	ldr	r0, [r7, #20]
 800302c:	f7ff ff8e 	bl	8002f4c <NVIC_EncodePriority>
 8003030:	4602      	mov	r2, r0
 8003032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff5d 	bl	8002ef8 <__NVIC_SetPriority>
}
 800303e:	bf00      	nop
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff31 	bl	8002ebc <__NVIC_EnableIRQ>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ffa2 	bl	8002fb4 <SysTick_Config>
 8003070:	4603      	mov	r3, r0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003088:	f7ff feb6 	bl	8002df8 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e099      	b.n	80031cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b8:	e00f      	b.n	80030da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ba:	f7ff fe9d 	bl	8002df8 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d908      	bls.n	80030da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2203      	movs	r2, #3
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e078      	b.n	80031cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e8      	bne.n	80030ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	4b38      	ldr	r3, [pc, #224]	@ (80031d4 <HAL_DMA_Init+0x158>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003106:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003112:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800311e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	2b04      	cmp	r3, #4
 8003132:	d107      	bne.n	8003144 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313c:	4313      	orrs	r3, r2
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0307 	bic.w	r3, r3, #7
 800315a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	2b04      	cmp	r3, #4
 800316c:	d117      	bne.n	800319e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00e      	beq.n	800319e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fad5 	bl	8003730 <DMA_CheckFifoParam>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2240      	movs	r2, #64	@ 0x40
 8003190:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800319a:	2301      	movs	r3, #1
 800319c:	e016      	b.n	80031cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fa8c 	bl	80036c4 <DMA_CalcBaseAndBitshift>
 80031ac:	4603      	mov	r3, r0
 80031ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b4:	223f      	movs	r2, #63	@ 0x3f
 80031b6:	409a      	lsls	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	f010803f 	.word	0xf010803f

080031d8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e050      	b.n	800328c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d101      	bne.n	80031fa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
 80031f8:	e048      	b.n	800328c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0201 	bic.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2200      	movs	r2, #0
 8003218:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2200      	movs	r2, #0
 8003220:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2200      	movs	r2, #0
 8003228:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2221      	movs	r2, #33	@ 0x21
 8003238:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa42 	bl	80036c4 <DMA_CalcBaseAndBitshift>
 8003240:	4603      	mov	r3, r0
 8003242:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003248:	223f      	movs	r2, #63	@ 0x3f
 800324a:	409a      	lsls	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_DMA_Start_IT+0x26>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e048      	b.n	800334c <HAL_DMA_Start_IT+0xb8>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d137      	bne.n	800333e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2202      	movs	r2, #2
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f9c0 	bl	8003668 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ec:	223f      	movs	r2, #63	@ 0x3f
 80032ee:	409a      	lsls	r2, r3
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0216 	orr.w	r2, r2, #22
 8003302:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003312:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0208 	orr.w	r2, r2, #8
 800332a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e005      	b.n	800334a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003346:	2302      	movs	r3, #2
 8003348:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800334a:	7dfb      	ldrb	r3, [r7, #23]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003360:	4b8e      	ldr	r3, [pc, #568]	@ (800359c <HAL_DMA_IRQHandler+0x248>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a8e      	ldr	r2, [pc, #568]	@ (80035a0 <HAL_DMA_IRQHandler+0x24c>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	0a9b      	lsrs	r3, r3, #10
 800336c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003372:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337e:	2208      	movs	r2, #8
 8003380:	409a      	lsls	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01a      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d013      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0204 	bic.w	r2, r2, #4
 80033a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ac:	2208      	movs	r2, #8
 80033ae:	409a      	lsls	r2, r3
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b8:	f043 0201 	orr.w	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c4:	2201      	movs	r2, #1
 80033c6:	409a      	lsls	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00b      	beq.n	80033f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e2:	2201      	movs	r2, #1
 80033e4:	409a      	lsls	r2, r3
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ee:	f043 0202 	orr.w	r2, r3, #2
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fa:	2204      	movs	r2, #4
 80033fc:	409a      	lsls	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d012      	beq.n	800342c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00b      	beq.n	800342c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003418:	2204      	movs	r2, #4
 800341a:	409a      	lsls	r2, r3
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003424:	f043 0204 	orr.w	r2, r3, #4
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003430:	2210      	movs	r2, #16
 8003432:	409a      	lsls	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d043      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d03c      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344e:	2210      	movs	r2, #16
 8003450:	409a      	lsls	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d018      	beq.n	8003496 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d108      	bne.n	8003484 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d024      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
 8003482:	e01f      	b.n	80034c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01b      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	4798      	blx	r3
 8003494:	e016      	b.n	80034c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0208 	bic.w	r2, r2, #8
 80034b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c8:	2220      	movs	r2, #32
 80034ca:	409a      	lsls	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 808f 	beq.w	80035f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8087 	beq.w	80035f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ea:	2220      	movs	r2, #32
 80034ec:	409a      	lsls	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d136      	bne.n	800356c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0216 	bic.w	r2, r2, #22
 800350c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800351c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <HAL_DMA_IRQHandler+0x1da>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800352a:	2b00      	cmp	r3, #0
 800352c:	d007      	beq.n	800353e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0208 	bic.w	r2, r2, #8
 800353c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003542:	223f      	movs	r2, #63	@ 0x3f
 8003544:	409a      	lsls	r2, r3
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800355e:	2b00      	cmp	r3, #0
 8003560:	d07e      	beq.n	8003660 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
        }
        return;
 800356a:	e079      	b.n	8003660 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d01d      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10d      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358c:	2b00      	cmp	r3, #0
 800358e:	d031      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
 8003598:	e02c      	b.n	80035f4 <HAL_DMA_IRQHandler+0x2a0>
 800359a:	bf00      	nop
 800359c:	20000004 	.word	0x20000004
 80035a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d023      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4798      	blx	r3
 80035b4:	e01e      	b.n	80035f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10f      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0210 	bic.w	r2, r2, #16
 80035d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d032      	beq.n	8003662 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d022      	beq.n	800364e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2205      	movs	r2, #5
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	3301      	adds	r3, #1
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	429a      	cmp	r2, r3
 800362a:	d307      	bcc.n	800363c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f2      	bne.n	8003620 <HAL_DMA_IRQHandler+0x2cc>
 800363a:	e000      	b.n	800363e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800363c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
 800365e:	e000      	b.n	8003662 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003660:	bf00      	nop
    }
  }
}
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003684:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b40      	cmp	r3, #64	@ 0x40
 8003694:	d108      	bne.n	80036a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036a6:	e007      	b.n	80036b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	60da      	str	r2, [r3, #12]
}
 80036b8:	bf00      	nop
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	3b10      	subs	r3, #16
 80036d4:	4a13      	ldr	r2, [pc, #76]	@ (8003724 <DMA_CalcBaseAndBitshift+0x60>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036de:	4a12      	ldr	r2, [pc, #72]	@ (8003728 <DMA_CalcBaseAndBitshift+0x64>)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d908      	bls.n	8003704 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <DMA_CalcBaseAndBitshift+0x68>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	1d1a      	adds	r2, r3, #4
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	659a      	str	r2, [r3, #88]	@ 0x58
 8003702:	e006      	b.n	8003712 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	4b08      	ldr	r3, [pc, #32]	@ (800372c <DMA_CalcBaseAndBitshift+0x68>)
 800370c:	4013      	ands	r3, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	aaaaaaab 	.word	0xaaaaaaab
 8003728:	0800b4f4 	.word	0x0800b4f4
 800372c:	fffffc00 	.word	0xfffffc00

08003730 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003740:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d11f      	bne.n	800378a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d856      	bhi.n	80037fe <DMA_CheckFifoParam+0xce>
 8003750:	a201      	add	r2, pc, #4	@ (adr r2, 8003758 <DMA_CheckFifoParam+0x28>)
 8003752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003756:	bf00      	nop
 8003758:	08003769 	.word	0x08003769
 800375c:	0800377b 	.word	0x0800377b
 8003760:	08003769 	.word	0x08003769
 8003764:	080037ff 	.word	0x080037ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d046      	beq.n	8003802 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003778:	e043      	b.n	8003802 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003782:	d140      	bne.n	8003806 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003788:	e03d      	b.n	8003806 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003792:	d121      	bne.n	80037d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d837      	bhi.n	800380a <DMA_CheckFifoParam+0xda>
 800379a:	a201      	add	r2, pc, #4	@ (adr r2, 80037a0 <DMA_CheckFifoParam+0x70>)
 800379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a0:	080037b1 	.word	0x080037b1
 80037a4:	080037b7 	.word	0x080037b7
 80037a8:	080037b1 	.word	0x080037b1
 80037ac:	080037c9 	.word	0x080037c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
      break;
 80037b4:	e030      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d025      	beq.n	800380e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c6:	e022      	b.n	800380e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037d0:	d11f      	bne.n	8003812 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037d6:	e01c      	b.n	8003812 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d903      	bls.n	80037e6 <DMA_CheckFifoParam+0xb6>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d003      	beq.n	80037ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037e4:	e018      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
      break;
 80037ea:	e015      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00e      	beq.n	8003816 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      break;
 80037fc:	e00b      	b.n	8003816 <DMA_CheckFifoParam+0xe6>
      break;
 80037fe:	bf00      	nop
 8003800:	e00a      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      break;
 8003802:	bf00      	nop
 8003804:	e008      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      break;
 8003806:	bf00      	nop
 8003808:	e006      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      break;
 800380a:	bf00      	nop
 800380c:	e004      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      break;
 800380e:	bf00      	nop
 8003810:	e002      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      break;   
 8003812:	bf00      	nop
 8003814:	e000      	b.n	8003818 <DMA_CheckFifoParam+0xe8>
      break;
 8003816:	bf00      	nop
    }
  } 
  
  return status; 
 8003818:	7bfb      	ldrb	r3, [r7, #15]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop

08003828 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e039      	b.n	80038ae <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fb0e 	bl	8000e70 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003878:	f023 0107 	bic.w	r1, r3, #7
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800388e:	4b0a      	ldr	r3, [pc, #40]	@ (80038b8 <HAL_DMA2D_Init+0x90>)
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68d1      	ldr	r1, [r2, #12]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	430b      	orrs	r3, r1
 800389c:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	ffffc000 	.word	0xffffc000

080038bc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_DMA2D_Start+0x1c>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e018      	b.n	800390a <HAL_DMA2D_Start+0x4e>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f988 	bl	8003c08 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d056      	beq.n	80039dc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800392e:	f7ff fa63 	bl	8002df8 <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003934:	e04b      	b.n	80039ce <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003944:	2b00      	cmp	r3, #0
 8003946:	d023      	beq.n	8003990 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003956:	f043 0202 	orr.w	r2, r3, #2
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396c:	f043 0201 	orr.w	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2221      	movs	r2, #33	@ 0x21
 800397a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2204      	movs	r2, #4
 8003980:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0a5      	b.n	8003adc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d01a      	beq.n	80039ce <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003998:	f7ff fa2e 	bl	8002df8 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d302      	bcc.n	80039ae <HAL_DMA2D_PollForTransfer+0x9c>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10f      	bne.n	80039ce <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2203      	movs	r2, #3
 80039be:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e086      	b.n	8003adc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0ac      	beq.n	8003936 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d061      	beq.n	8003ac2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80039fe:	f7ff f9fb 	bl	8002df8 <HAL_GetTick>
 8003a02:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003a04:	e056      	b.n	8003ab4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d02e      	beq.n	8003a76 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a26:	f043 0204 	orr.w	r2, r3, #4
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3c:	f043 0202 	orr.w	r2, r3, #2
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a52:	f043 0201 	orr.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2229      	movs	r2, #41	@ 0x29
 8003a60:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2204      	movs	r2, #4
 8003a66:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e032      	b.n	8003adc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7c:	d01a      	beq.n	8003ab4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a7e:	f7ff f9bb 	bl	8002df8 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d302      	bcc.n	8003a94 <HAL_DMA2D_PollForTransfer+0x182>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10f      	bne.n	8003ab4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a98:	f043 0220 	orr.w	r2, r3, #32
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e013      	b.n	8003adc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0a1      	beq.n	8003a06 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2212      	movs	r2, #18
 8003ac8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_DMA2D_ConfigLayer+0x20>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e079      	b.n	8003bf8 <HAL_DMA2D_ConfigLayer+0x114>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	3318      	adds	r3, #24
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	041b      	lsls	r3, r3, #16
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003b2e:	4b35      	ldr	r3, [pc, #212]	@ (8003c04 <HAL_DMA2D_ConfigLayer+0x120>)
 8003b30:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b0a      	cmp	r3, #10
 8003b38:	d003      	beq.n	8003b42 <HAL_DMA2D_ConfigLayer+0x5e>
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b09      	cmp	r3, #9
 8003b40:	d107      	bne.n	8003b52 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	e005      	b.n	8003b5e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	061b      	lsls	r3, r3, #24
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d120      	bne.n	8003ba6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	ea02 0103 	and.w	r1, r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b0a      	cmp	r3, #10
 8003b8c:	d003      	beq.n	8003b96 <HAL_DMA2D_ConfigLayer+0xb2>
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b09      	cmp	r3, #9
 8003b94:	d127      	bne.n	8003be6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003ba2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ba4:	e01f      	b.n	8003be6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69da      	ldr	r2, [r3, #28]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	ea02 0103 	and.w	r1, r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b0a      	cmp	r3, #10
 8003bce:	d003      	beq.n	8003bd8 <HAL_DMA2D_ConfigLayer+0xf4>
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b09      	cmp	r3, #9
 8003bd6:	d106      	bne.n	8003be6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003be4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	371c      	adds	r7, #28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	ff03000f 	.word	0xff03000f

08003c08 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b08b      	sub	sp, #44	@ 0x2c
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	041a      	lsls	r2, r3, #16
 8003c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c26:	431a      	orrs	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c40:	d174      	bne.n	8003d2c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003c48:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003c50:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003c58:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d108      	bne.n	8003c7a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c78:	e053      	b.n	8003d22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d106      	bne.n	8003c90 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c8e:	e048      	b.n	8003d22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d111      	bne.n	8003cbc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	0cdb      	lsrs	r3, r3, #19
 8003c9c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	0a9b      	lsrs	r3, r3, #10
 8003ca2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	08db      	lsrs	r3, r3, #3
 8003ca8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	02db      	lsls	r3, r3, #11
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cba:	e032      	b.n	8003d22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d117      	bne.n	8003cf4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	0fdb      	lsrs	r3, r3, #31
 8003cc8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	0cdb      	lsrs	r3, r3, #19
 8003cce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	0adb      	lsrs	r3, r3, #11
 8003cd4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	08db      	lsrs	r3, r3, #3
 8003cda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	029b      	lsls	r3, r3, #10
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	03db      	lsls	r3, r3, #15
 8003cea:	4313      	orrs	r3, r2
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf2:	e016      	b.n	8003d22 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	0f1b      	lsrs	r3, r3, #28
 8003cf8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	0d1b      	lsrs	r3, r3, #20
 8003cfe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	0b1b      	lsrs	r3, r3, #12
 8003d04:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	011a      	lsls	r2, r3, #4
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	431a      	orrs	r2, r3
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	031b      	lsls	r3, r3, #12
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d28:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003d2a:	e003      	b.n	8003d34 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	60da      	str	r2, [r3, #12]
}
 8003d34:	bf00      	nop
 8003d36:	372c      	adds	r7, #44	@ 0x2c
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b089      	sub	sp, #36	@ 0x24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	e175      	b.n	800404c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d60:	2201      	movs	r2, #1
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4013      	ands	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	f040 8164 	bne.w	8004046 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d005      	beq.n	8003d96 <HAL_GPIO_Init+0x56>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d130      	bne.n	8003df8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	2203      	movs	r2, #3
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4013      	ands	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dcc:	2201      	movs	r2, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 0201 	and.w	r2, r3, #1
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d017      	beq.n	8003e34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	2203      	movs	r2, #3
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d123      	bne.n	8003e88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	08da      	lsrs	r2, r3, #3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3208      	adds	r2, #8
 8003e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	220f      	movs	r2, #15
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	08da      	lsrs	r2, r3, #3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3208      	adds	r2, #8
 8003e82:	69b9      	ldr	r1, [r7, #24]
 8003e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	2203      	movs	r2, #3
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 0203 	and.w	r2, r3, #3
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80be 	beq.w	8004046 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eca:	4b66      	ldr	r3, [pc, #408]	@ (8004064 <HAL_GPIO_Init+0x324>)
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	4a65      	ldr	r2, [pc, #404]	@ (8004064 <HAL_GPIO_Init+0x324>)
 8003ed0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ed6:	4b63      	ldr	r3, [pc, #396]	@ (8004064 <HAL_GPIO_Init+0x324>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ee2:	4a61      	ldr	r2, [pc, #388]	@ (8004068 <HAL_GPIO_Init+0x328>)
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	3302      	adds	r3, #2
 8003eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	220f      	movs	r2, #15
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a58      	ldr	r2, [pc, #352]	@ (800406c <HAL_GPIO_Init+0x32c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d037      	beq.n	8003f7e <HAL_GPIO_Init+0x23e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a57      	ldr	r2, [pc, #348]	@ (8004070 <HAL_GPIO_Init+0x330>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d031      	beq.n	8003f7a <HAL_GPIO_Init+0x23a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a56      	ldr	r2, [pc, #344]	@ (8004074 <HAL_GPIO_Init+0x334>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d02b      	beq.n	8003f76 <HAL_GPIO_Init+0x236>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a55      	ldr	r2, [pc, #340]	@ (8004078 <HAL_GPIO_Init+0x338>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d025      	beq.n	8003f72 <HAL_GPIO_Init+0x232>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a54      	ldr	r2, [pc, #336]	@ (800407c <HAL_GPIO_Init+0x33c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d01f      	beq.n	8003f6e <HAL_GPIO_Init+0x22e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a53      	ldr	r2, [pc, #332]	@ (8004080 <HAL_GPIO_Init+0x340>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d019      	beq.n	8003f6a <HAL_GPIO_Init+0x22a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a52      	ldr	r2, [pc, #328]	@ (8004084 <HAL_GPIO_Init+0x344>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <HAL_GPIO_Init+0x226>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a51      	ldr	r2, [pc, #324]	@ (8004088 <HAL_GPIO_Init+0x348>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00d      	beq.n	8003f62 <HAL_GPIO_Init+0x222>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a50      	ldr	r2, [pc, #320]	@ (800408c <HAL_GPIO_Init+0x34c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d007      	beq.n	8003f5e <HAL_GPIO_Init+0x21e>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a4f      	ldr	r2, [pc, #316]	@ (8004090 <HAL_GPIO_Init+0x350>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d101      	bne.n	8003f5a <HAL_GPIO_Init+0x21a>
 8003f56:	2309      	movs	r3, #9
 8003f58:	e012      	b.n	8003f80 <HAL_GPIO_Init+0x240>
 8003f5a:	230a      	movs	r3, #10
 8003f5c:	e010      	b.n	8003f80 <HAL_GPIO_Init+0x240>
 8003f5e:	2308      	movs	r3, #8
 8003f60:	e00e      	b.n	8003f80 <HAL_GPIO_Init+0x240>
 8003f62:	2307      	movs	r3, #7
 8003f64:	e00c      	b.n	8003f80 <HAL_GPIO_Init+0x240>
 8003f66:	2306      	movs	r3, #6
 8003f68:	e00a      	b.n	8003f80 <HAL_GPIO_Init+0x240>
 8003f6a:	2305      	movs	r3, #5
 8003f6c:	e008      	b.n	8003f80 <HAL_GPIO_Init+0x240>
 8003f6e:	2304      	movs	r3, #4
 8003f70:	e006      	b.n	8003f80 <HAL_GPIO_Init+0x240>
 8003f72:	2303      	movs	r3, #3
 8003f74:	e004      	b.n	8003f80 <HAL_GPIO_Init+0x240>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e002      	b.n	8003f80 <HAL_GPIO_Init+0x240>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <HAL_GPIO_Init+0x240>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	f002 0203 	and.w	r2, r2, #3
 8003f86:	0092      	lsls	r2, r2, #2
 8003f88:	4093      	lsls	r3, r2
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f90:	4935      	ldr	r1, [pc, #212]	@ (8004068 <HAL_GPIO_Init+0x328>)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	089b      	lsrs	r3, r3, #2
 8003f96:	3302      	adds	r3, #2
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8004094 <HAL_GPIO_Init+0x354>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4013      	ands	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fc2:	4a34      	ldr	r2, [pc, #208]	@ (8004094 <HAL_GPIO_Init+0x354>)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fc8:	4b32      	ldr	r3, [pc, #200]	@ (8004094 <HAL_GPIO_Init+0x354>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fec:	4a29      	ldr	r2, [pc, #164]	@ (8004094 <HAL_GPIO_Init+0x354>)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ff2:	4b28      	ldr	r3, [pc, #160]	@ (8004094 <HAL_GPIO_Init+0x354>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004016:	4a1f      	ldr	r2, [pc, #124]	@ (8004094 <HAL_GPIO_Init+0x354>)
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800401c:	4b1d      	ldr	r3, [pc, #116]	@ (8004094 <HAL_GPIO_Init+0x354>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004040:	4a14      	ldr	r2, [pc, #80]	@ (8004094 <HAL_GPIO_Init+0x354>)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3301      	adds	r3, #1
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	2b0f      	cmp	r3, #15
 8004050:	f67f ae86 	bls.w	8003d60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	3724      	adds	r7, #36	@ 0x24
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800
 8004068:	40013800 	.word	0x40013800
 800406c:	40020000 	.word	0x40020000
 8004070:	40020400 	.word	0x40020400
 8004074:	40020800 	.word	0x40020800
 8004078:	40020c00 	.word	0x40020c00
 800407c:	40021000 	.word	0x40021000
 8004080:	40021400 	.word	0x40021400
 8004084:	40021800 	.word	0x40021800
 8004088:	40021c00 	.word	0x40021c00
 800408c:	40022000 	.word	0x40022000
 8004090:	40022400 	.word	0x40022400
 8004094:	40013c00 	.word	0x40013c00

08004098 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	e0d9      	b.n	8004268 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80040b4:	2201      	movs	r2, #1
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4013      	ands	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	f040 80c9 	bne.w	8004262 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80040d0:	4a6b      	ldr	r2, [pc, #428]	@ (8004280 <HAL_GPIO_DeInit+0x1e8>)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	3302      	adds	r3, #2
 80040d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040dc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	220f      	movs	r2, #15
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	4013      	ands	r3, r2
 80040f0:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a63      	ldr	r2, [pc, #396]	@ (8004284 <HAL_GPIO_DeInit+0x1ec>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d037      	beq.n	800416a <HAL_GPIO_DeInit+0xd2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a62      	ldr	r2, [pc, #392]	@ (8004288 <HAL_GPIO_DeInit+0x1f0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d031      	beq.n	8004166 <HAL_GPIO_DeInit+0xce>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a61      	ldr	r2, [pc, #388]	@ (800428c <HAL_GPIO_DeInit+0x1f4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d02b      	beq.n	8004162 <HAL_GPIO_DeInit+0xca>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a60      	ldr	r2, [pc, #384]	@ (8004290 <HAL_GPIO_DeInit+0x1f8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d025      	beq.n	800415e <HAL_GPIO_DeInit+0xc6>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a5f      	ldr	r2, [pc, #380]	@ (8004294 <HAL_GPIO_DeInit+0x1fc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01f      	beq.n	800415a <HAL_GPIO_DeInit+0xc2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a5e      	ldr	r2, [pc, #376]	@ (8004298 <HAL_GPIO_DeInit+0x200>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d019      	beq.n	8004156 <HAL_GPIO_DeInit+0xbe>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a5d      	ldr	r2, [pc, #372]	@ (800429c <HAL_GPIO_DeInit+0x204>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <HAL_GPIO_DeInit+0xba>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a5c      	ldr	r2, [pc, #368]	@ (80042a0 <HAL_GPIO_DeInit+0x208>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00d      	beq.n	800414e <HAL_GPIO_DeInit+0xb6>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a5b      	ldr	r2, [pc, #364]	@ (80042a4 <HAL_GPIO_DeInit+0x20c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d007      	beq.n	800414a <HAL_GPIO_DeInit+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a5a      	ldr	r2, [pc, #360]	@ (80042a8 <HAL_GPIO_DeInit+0x210>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d101      	bne.n	8004146 <HAL_GPIO_DeInit+0xae>
 8004142:	2309      	movs	r3, #9
 8004144:	e012      	b.n	800416c <HAL_GPIO_DeInit+0xd4>
 8004146:	230a      	movs	r3, #10
 8004148:	e010      	b.n	800416c <HAL_GPIO_DeInit+0xd4>
 800414a:	2308      	movs	r3, #8
 800414c:	e00e      	b.n	800416c <HAL_GPIO_DeInit+0xd4>
 800414e:	2307      	movs	r3, #7
 8004150:	e00c      	b.n	800416c <HAL_GPIO_DeInit+0xd4>
 8004152:	2306      	movs	r3, #6
 8004154:	e00a      	b.n	800416c <HAL_GPIO_DeInit+0xd4>
 8004156:	2305      	movs	r3, #5
 8004158:	e008      	b.n	800416c <HAL_GPIO_DeInit+0xd4>
 800415a:	2304      	movs	r3, #4
 800415c:	e006      	b.n	800416c <HAL_GPIO_DeInit+0xd4>
 800415e:	2303      	movs	r3, #3
 8004160:	e004      	b.n	800416c <HAL_GPIO_DeInit+0xd4>
 8004162:	2302      	movs	r3, #2
 8004164:	e002      	b.n	800416c <HAL_GPIO_DeInit+0xd4>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <HAL_GPIO_DeInit+0xd4>
 800416a:	2300      	movs	r3, #0
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	f002 0203 	and.w	r2, r2, #3
 8004172:	0092      	lsls	r2, r2, #2
 8004174:	4093      	lsls	r3, r2
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	429a      	cmp	r2, r3
 800417a:	d132      	bne.n	80041e2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800417c:	4b4b      	ldr	r3, [pc, #300]	@ (80042ac <HAL_GPIO_DeInit+0x214>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	43db      	mvns	r3, r3
 8004184:	4949      	ldr	r1, [pc, #292]	@ (80042ac <HAL_GPIO_DeInit+0x214>)
 8004186:	4013      	ands	r3, r2
 8004188:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800418a:	4b48      	ldr	r3, [pc, #288]	@ (80042ac <HAL_GPIO_DeInit+0x214>)
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	43db      	mvns	r3, r3
 8004192:	4946      	ldr	r1, [pc, #280]	@ (80042ac <HAL_GPIO_DeInit+0x214>)
 8004194:	4013      	ands	r3, r2
 8004196:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004198:	4b44      	ldr	r3, [pc, #272]	@ (80042ac <HAL_GPIO_DeInit+0x214>)
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	43db      	mvns	r3, r3
 80041a0:	4942      	ldr	r1, [pc, #264]	@ (80042ac <HAL_GPIO_DeInit+0x214>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80041a6:	4b41      	ldr	r3, [pc, #260]	@ (80042ac <HAL_GPIO_DeInit+0x214>)
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	493f      	ldr	r1, [pc, #252]	@ (80042ac <HAL_GPIO_DeInit+0x214>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	220f      	movs	r2, #15
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80041c4:	4a2e      	ldr	r2, [pc, #184]	@ (8004280 <HAL_GPIO_DeInit+0x1e8>)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	089b      	lsrs	r3, r3, #2
 80041ca:	3302      	adds	r3, #2
 80041cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	43da      	mvns	r2, r3
 80041d4:	482a      	ldr	r0, [pc, #168]	@ (8004280 <HAL_GPIO_DeInit+0x1e8>)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	089b      	lsrs	r3, r3, #2
 80041da:	400a      	ands	r2, r1
 80041dc:	3302      	adds	r3, #2
 80041de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	2103      	movs	r1, #3
 80041ec:	fa01 f303 	lsl.w	r3, r1, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	401a      	ands	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	08da      	lsrs	r2, r3, #3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3208      	adds	r2, #8
 8004200:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	220f      	movs	r2, #15
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	43db      	mvns	r3, r3
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	08d2      	lsrs	r2, r2, #3
 8004218:	4019      	ands	r1, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3208      	adds	r2, #8
 800421e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	2103      	movs	r1, #3
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	401a      	ands	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	2101      	movs	r1, #1
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	43db      	mvns	r3, r3
 8004246:	401a      	ands	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	2103      	movs	r1, #3
 8004256:	fa01 f303 	lsl.w	r3, r1, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	401a      	ands	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	3301      	adds	r3, #1
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b0f      	cmp	r3, #15
 800426c:	f67f af22 	bls.w	80040b4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40013800 	.word	0x40013800
 8004284:	40020000 	.word	0x40020000
 8004288:	40020400 	.word	0x40020400
 800428c:	40020800 	.word	0x40020800
 8004290:	40020c00 	.word	0x40020c00
 8004294:	40021000 	.word	0x40021000
 8004298:	40021400 	.word	0x40021400
 800429c:	40021800 	.word	0x40021800
 80042a0:	40021c00 	.word	0x40021c00
 80042a4:	40022000 	.word	0x40022000
 80042a8:	40022400 	.word	0x40022400
 80042ac:	40013c00 	.word	0x40013c00

080042b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	807b      	strh	r3, [r7, #2]
 80042bc:	4613      	mov	r3, r2
 80042be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042c0:	787b      	ldrb	r3, [r7, #1]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042c6:	887a      	ldrh	r2, [r7, #2]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80042cc:	e003      	b.n	80042d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80042ce:	887b      	ldrh	r3, [r7, #2]
 80042d0:	041a      	lsls	r2, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	619a      	str	r2, [r3, #24]
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e08b      	b.n	800440e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f8b5 	bl	800447a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2224      	movs	r2, #36	@ 0x24
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004334:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004344:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	e006      	b.n	800436c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800436a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d108      	bne.n	8004386 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004382:	605a      	str	r2, [r3, #4]
 8004384:	e007      	b.n	8004396 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004394:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004418 <HAL_I2C_Init+0x134>)
 80043a2:	430b      	orrs	r3, r1
 80043a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69d9      	ldr	r1, [r3, #28]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	02008000 	.word	0x02008000

0800441c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e021      	b.n	8004472 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2224      	movs	r2, #36	@ 0x24
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0201 	bic.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f821 	bl	800448e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	4608      	mov	r0, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	817b      	strh	r3, [r7, #10]
 80044b6:	460b      	mov	r3, r1
 80044b8:	813b      	strh	r3, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	f040 80f9 	bne.w	80046be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_I2C_Mem_Write+0x34>
 80044d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d105      	bne.n	80044e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0ed      	b.n	80046c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_I2C_Mem_Write+0x4e>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e0e6      	b.n	80046c0 <HAL_I2C_Mem_Write+0x21c>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044fa:	f7fe fc7d 	bl	8002df8 <HAL_GetTick>
 80044fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	2319      	movs	r3, #25
 8004506:	2201      	movs	r2, #1
 8004508:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 fad1 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0d1      	b.n	80046c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2221      	movs	r2, #33	@ 0x21
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2240      	movs	r2, #64	@ 0x40
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a3a      	ldr	r2, [r7, #32]
 8004536:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800453c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004544:	88f8      	ldrh	r0, [r7, #6]
 8004546:	893a      	ldrh	r2, [r7, #8]
 8004548:	8979      	ldrh	r1, [r7, #10]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	4603      	mov	r3, r0
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f9e1 	bl	800491c <I2C_RequestMemoryWrite>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0a9      	b.n	80046c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	2bff      	cmp	r3, #255	@ 0xff
 8004574:	d90e      	bls.n	8004594 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	22ff      	movs	r2, #255	@ 0xff
 800457a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004580:	b2da      	uxtb	r2, r3
 8004582:	8979      	ldrh	r1, [r7, #10]
 8004584:	2300      	movs	r3, #0
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 fc55 	bl	8004e3c <I2C_TransferConfig>
 8004592:	e00f      	b.n	80045b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	8979      	ldrh	r1, [r7, #10]
 80045a6:	2300      	movs	r3, #0
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fc44 	bl	8004e3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fad4 	bl	8004b66 <I2C_WaitOnTXISFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e07b      	b.n	80046c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045cc:	781a      	ldrb	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d034      	beq.n	800466c <HAL_I2C_Mem_Write+0x1c8>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004606:	2b00      	cmp	r3, #0
 8004608:	d130      	bne.n	800466c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004610:	2200      	movs	r2, #0
 8004612:	2180      	movs	r1, #128	@ 0x80
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fa4d 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e04d      	b.n	80046c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2bff      	cmp	r3, #255	@ 0xff
 800462c:	d90e      	bls.n	800464c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	22ff      	movs	r2, #255	@ 0xff
 8004632:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004638:	b2da      	uxtb	r2, r3
 800463a:	8979      	ldrh	r1, [r7, #10]
 800463c:	2300      	movs	r3, #0
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fbf9 	bl	8004e3c <I2C_TransferConfig>
 800464a:	e00f      	b.n	800466c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800465a:	b2da      	uxtb	r2, r3
 800465c:	8979      	ldrh	r1, [r7, #10]
 800465e:	2300      	movs	r3, #0
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fbe8 	bl	8004e3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d19e      	bne.n	80045b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 faba 	bl	8004bf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e01a      	b.n	80046c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2220      	movs	r2, #32
 8004690:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6859      	ldr	r1, [r3, #4]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4b0a      	ldr	r3, [pc, #40]	@ (80046c8 <HAL_I2C_Mem_Write+0x224>)
 800469e:	400b      	ands	r3, r1
 80046a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	e000      	b.n	80046c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80046be:	2302      	movs	r3, #2
  }
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	fe00e800 	.word	0xfe00e800

080046cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	4608      	mov	r0, r1
 80046d6:	4611      	mov	r1, r2
 80046d8:	461a      	mov	r2, r3
 80046da:	4603      	mov	r3, r0
 80046dc:	817b      	strh	r3, [r7, #10]
 80046de:	460b      	mov	r3, r1
 80046e0:	813b      	strh	r3, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	f040 80fd 	bne.w	80048ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_I2C_Mem_Read+0x34>
 80046fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d105      	bne.n	800470c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004706:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0f1      	b.n	80048f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_I2C_Mem_Read+0x4e>
 8004716:	2302      	movs	r3, #2
 8004718:	e0ea      	b.n	80048f0 <HAL_I2C_Mem_Read+0x224>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004722:	f7fe fb69 	bl	8002df8 <HAL_GetTick>
 8004726:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	2319      	movs	r3, #25
 800472e:	2201      	movs	r2, #1
 8004730:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f9bd 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0d5      	b.n	80048f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2222      	movs	r2, #34	@ 0x22
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2240      	movs	r2, #64	@ 0x40
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a3a      	ldr	r2, [r7, #32]
 800475e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004764:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800476c:	88f8      	ldrh	r0, [r7, #6]
 800476e:	893a      	ldrh	r2, [r7, #8]
 8004770:	8979      	ldrh	r1, [r7, #10]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	4603      	mov	r3, r0
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f921 	bl	80049c4 <I2C_RequestMemoryRead>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0ad      	b.n	80048f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2bff      	cmp	r3, #255	@ 0xff
 800479c:	d90e      	bls.n	80047bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	8979      	ldrh	r1, [r7, #10]
 80047ac:	4b52      	ldr	r3, [pc, #328]	@ (80048f8 <HAL_I2C_Mem_Read+0x22c>)
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 fb41 	bl	8004e3c <I2C_TransferConfig>
 80047ba:	e00f      	b.n	80047dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	8979      	ldrh	r1, [r7, #10]
 80047ce:	4b4a      	ldr	r3, [pc, #296]	@ (80048f8 <HAL_I2C_Mem_Read+0x22c>)
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fb30 	bl	8004e3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e2:	2200      	movs	r2, #0
 80047e4:	2104      	movs	r1, #4
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f964 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e07c      	b.n	80048f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d034      	beq.n	800489c <HAL_I2C_Mem_Read+0x1d0>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004836:	2b00      	cmp	r3, #0
 8004838:	d130      	bne.n	800489c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004840:	2200      	movs	r2, #0
 8004842:	2180      	movs	r1, #128	@ 0x80
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f935 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e04d      	b.n	80048f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	2bff      	cmp	r3, #255	@ 0xff
 800485c:	d90e      	bls.n	800487c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004868:	b2da      	uxtb	r2, r3
 800486a:	8979      	ldrh	r1, [r7, #10]
 800486c:	2300      	movs	r3, #0
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 fae1 	bl	8004e3c <I2C_TransferConfig>
 800487a:	e00f      	b.n	800489c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488a:	b2da      	uxtb	r2, r3
 800488c:	8979      	ldrh	r1, [r7, #10]
 800488e:	2300      	movs	r3, #0
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fad0 	bl	8004e3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d19a      	bne.n	80047dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f9a2 	bl	8004bf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e01a      	b.n	80048f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2220      	movs	r2, #32
 80048c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6859      	ldr	r1, [r3, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	4b0b      	ldr	r3, [pc, #44]	@ (80048fc <HAL_I2C_Mem_Read+0x230>)
 80048ce:	400b      	ands	r3, r1
 80048d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e000      	b.n	80048f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
  }
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	80002400 	.word	0x80002400
 80048fc:	fe00e800 	.word	0xfe00e800

08004900 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800490e:	b2db      	uxtb	r3, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	4608      	mov	r0, r1
 8004926:	4611      	mov	r1, r2
 8004928:	461a      	mov	r2, r3
 800492a:	4603      	mov	r3, r0
 800492c:	817b      	strh	r3, [r7, #10]
 800492e:	460b      	mov	r3, r1
 8004930:	813b      	strh	r3, [r7, #8]
 8004932:	4613      	mov	r3, r2
 8004934:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	8979      	ldrh	r1, [r7, #10]
 800493c:	4b20      	ldr	r3, [pc, #128]	@ (80049c0 <I2C_RequestMemoryWrite+0xa4>)
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fa79 	bl	8004e3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	69b9      	ldr	r1, [r7, #24]
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f909 	bl	8004b66 <I2C_WaitOnTXISFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e02c      	b.n	80049b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d105      	bne.n	8004970 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004964:	893b      	ldrh	r3, [r7, #8]
 8004966:	b2da      	uxtb	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	629a      	str	r2, [r3, #40]	@ 0x28
 800496e:	e015      	b.n	800499c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004970:	893b      	ldrh	r3, [r7, #8]
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	b29b      	uxth	r3, r3
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	69b9      	ldr	r1, [r7, #24]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f8ef 	bl	8004b66 <I2C_WaitOnTXISFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e012      	b.n	80049b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004992:	893b      	ldrh	r3, [r7, #8]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2200      	movs	r2, #0
 80049a4:	2180      	movs	r1, #128	@ 0x80
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f884 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	80002000 	.word	0x80002000

080049c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	4608      	mov	r0, r1
 80049ce:	4611      	mov	r1, r2
 80049d0:	461a      	mov	r2, r3
 80049d2:	4603      	mov	r3, r0
 80049d4:	817b      	strh	r3, [r7, #10]
 80049d6:	460b      	mov	r3, r1
 80049d8:	813b      	strh	r3, [r7, #8]
 80049da:	4613      	mov	r3, r2
 80049dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	8979      	ldrh	r1, [r7, #10]
 80049e4:	4b20      	ldr	r3, [pc, #128]	@ (8004a68 <I2C_RequestMemoryRead+0xa4>)
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2300      	movs	r3, #0
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 fa26 	bl	8004e3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	69b9      	ldr	r1, [r7, #24]
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f8b6 	bl	8004b66 <I2C_WaitOnTXISFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e02c      	b.n	8004a5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d105      	bne.n	8004a16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a0a:	893b      	ldrh	r3, [r7, #8]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a14:	e015      	b.n	8004a42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a16:	893b      	ldrh	r3, [r7, #8]
 8004a18:	0a1b      	lsrs	r3, r3, #8
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	69b9      	ldr	r1, [r7, #24]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f89c 	bl	8004b66 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e012      	b.n	8004a5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a38:	893b      	ldrh	r3, [r7, #8]
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2140      	movs	r1, #64	@ 0x40
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f831 	bl	8004ab4 <I2C_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	80002000 	.word	0x80002000

08004a6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d103      	bne.n	8004a8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2200      	movs	r2, #0
 8004a88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d007      	beq.n	8004aa8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	619a      	str	r2, [r3, #24]
  }
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ac4:	e03b      	b.n	8004b3e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	6839      	ldr	r1, [r7, #0]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f8d6 	bl	8004c7c <I2C_IsErrorOccurred>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e041      	b.n	8004b5e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d02d      	beq.n	8004b3e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae2:	f7fe f989 	bl	8002df8 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d302      	bcc.n	8004af8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d122      	bne.n	8004b3e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	4013      	ands	r3, r2
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	bf0c      	ite	eq
 8004b08:	2301      	moveq	r3, #1
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d113      	bne.n	8004b3e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e00f      	b.n	8004b5e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699a      	ldr	r2, [r3, #24]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4013      	ands	r3, r2
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	bf0c      	ite	eq
 8004b4e:	2301      	moveq	r3, #1
 8004b50:	2300      	movne	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d0b4      	beq.n	8004ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b72:	e033      	b.n	8004bdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f87f 	bl	8004c7c <I2C_IsErrorOccurred>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e031      	b.n	8004bec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d025      	beq.n	8004bdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b90:	f7fe f932 	bl	8002df8 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d302      	bcc.n	8004ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d11a      	bne.n	8004bdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d013      	beq.n	8004bdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb8:	f043 0220 	orr.w	r2, r3, #32
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e007      	b.n	8004bec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d1c4      	bne.n	8004b74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c00:	e02f      	b.n	8004c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f838 	bl	8004c7c <I2C_IsErrorOccurred>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e02d      	b.n	8004c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c16:	f7fe f8ef 	bl	8002df8 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d302      	bcc.n	8004c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d11a      	bne.n	8004c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d013      	beq.n	8004c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3e:	f043 0220 	orr.w	r2, r3, #32
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e007      	b.n	8004c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b20      	cmp	r3, #32
 8004c6e:	d1c8      	bne.n	8004c02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08a      	sub	sp, #40	@ 0x28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d068      	beq.n	8004d7a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2210      	movs	r2, #16
 8004cae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cb0:	e049      	b.n	8004d46 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d045      	beq.n	8004d46 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004cba:	f7fe f89d 	bl	8002df8 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d302      	bcc.n	8004cd0 <I2C_IsErrorOccurred+0x54>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d13a      	bne.n	8004d46 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ce2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cf2:	d121      	bne.n	8004d38 <I2C_IsErrorOccurred+0xbc>
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cfa:	d01d      	beq.n	8004d38 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004cfc:	7cfb      	ldrb	r3, [r7, #19]
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d01a      	beq.n	8004d38 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d12:	f7fe f871 	bl	8002df8 <HAL_GetTick>
 8004d16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d18:	e00e      	b.n	8004d38 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d1a:	f7fe f86d 	bl	8002df8 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b19      	cmp	r3, #25
 8004d26:	d907      	bls.n	8004d38 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	f043 0320 	orr.w	r3, r3, #32
 8004d2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004d36:	e006      	b.n	8004d46 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d1e9      	bne.n	8004d1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d003      	beq.n	8004d5c <I2C_IsErrorOccurred+0xe0>
 8004d54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0aa      	beq.n	8004cb2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	f043 0304 	orr.w	r3, r3, #4
 8004d72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00b      	beq.n	8004da4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	f043 0308 	orr.w	r3, r3, #8
 8004db4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004dbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00b      	beq.n	8004de8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	f043 0302 	orr.w	r3, r3, #2
 8004dd6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004de0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004de8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01c      	beq.n	8004e2a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f7ff fe3b 	bl	8004a6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6859      	ldr	r1, [r3, #4]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4b0d      	ldr	r3, [pc, #52]	@ (8004e38 <I2C_IsErrorOccurred+0x1bc>)
 8004e02:	400b      	ands	r3, r1
 8004e04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3728      	adds	r7, #40	@ 0x28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	fe00e800 	.word	0xfe00e800

08004e3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	460b      	mov	r3, r1
 8004e48:	817b      	strh	r3, [r7, #10]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e4e:	897b      	ldrh	r3, [r7, #10]
 8004e50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e54:	7a7b      	ldrb	r3, [r7, #9]
 8004e56:	041b      	lsls	r3, r3, #16
 8004e58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	0d5b      	lsrs	r3, r3, #21
 8004e76:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004e7a:	4b08      	ldr	r3, [pc, #32]	@ (8004e9c <I2C_TransferConfig+0x60>)
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	ea02 0103 	and.w	r1, r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e8e:	bf00      	nop
 8004e90:	371c      	adds	r7, #28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	03ff63ff 	.word	0x03ff63ff

08004ea0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e0bf      	b.n	8005032 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fb fff2 	bl	8000eb0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004ee2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6999      	ldr	r1, [r3, #24]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ef8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6899      	ldr	r1, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b4a      	ldr	r3, [pc, #296]	@ (800503c <HAL_LTDC_Init+0x19c>)
 8004f14:	400b      	ands	r3, r1
 8004f16:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	041b      	lsls	r3, r3, #16
 8004f1e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6899      	ldr	r1, [r3, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68d9      	ldr	r1, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	4b3e      	ldr	r3, [pc, #248]	@ (800503c <HAL_LTDC_Init+0x19c>)
 8004f42:	400b      	ands	r3, r1
 8004f44:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	041b      	lsls	r3, r3, #16
 8004f4c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68d9      	ldr	r1, [r3, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1a      	ldr	r2, [r3, #32]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6919      	ldr	r1, [r3, #16]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4b33      	ldr	r3, [pc, #204]	@ (800503c <HAL_LTDC_Init+0x19c>)
 8004f70:	400b      	ands	r3, r1
 8004f72:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	041b      	lsls	r3, r3, #16
 8004f7a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6919      	ldr	r1, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6959      	ldr	r1, [r3, #20]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4b27      	ldr	r3, [pc, #156]	@ (800503c <HAL_LTDC_Init+0x19c>)
 8004f9e:	400b      	ands	r3, r1
 8004fa0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	041b      	lsls	r3, r3, #16
 8004fa8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6959      	ldr	r1, [r3, #20]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004fd0:	041b      	lsls	r3, r3, #16
 8004fd2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0206 	orr.w	r2, r2, #6
 800500e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	f000f800 	.word	0xf000f800

08005040 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005040:	b5b0      	push	{r4, r5, r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_LTDC_ConfigLayer+0x1a>
 8005056:	2302      	movs	r3, #2
 8005058:	e02c      	b.n	80050b4 <HAL_LTDC_ConfigLayer+0x74>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2202      	movs	r2, #2
 8005066:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2134      	movs	r1, #52	@ 0x34
 8005070:	fb01 f303 	mul.w	r3, r1, r3
 8005074:	4413      	add	r3, r2
 8005076:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4614      	mov	r4, r2
 800507e:	461d      	mov	r5, r3
 8005080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800508a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f81f 	bl	80050d8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2201      	movs	r2, #1
 80050a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bdb0      	pop	{r4, r5, r7, pc}

080050bc <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80050ca:	b2db      	uxtb	r3, r3
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b089      	sub	sp, #36	@ 0x24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	0c1b      	lsrs	r3, r3, #16
 80050f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f4:	4413      	add	r3, r2
 80050f6:	041b      	lsls	r3, r3, #16
 80050f8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	01db      	lsls	r3, r3, #7
 8005104:	4413      	add	r3, r2
 8005106:	3384      	adds	r3, #132	@ 0x84
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	4611      	mov	r1, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	01d2      	lsls	r2, r2, #7
 8005114:	440a      	add	r2, r1
 8005116:	3284      	adds	r2, #132	@ 0x84
 8005118:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800511c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800512e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005130:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4619      	mov	r1, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	01db      	lsls	r3, r3, #7
 800513c:	440b      	add	r3, r1
 800513e:	3384      	adds	r3, #132	@ 0x84
 8005140:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005146:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005156:	4413      	add	r3, r2
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	01db      	lsls	r3, r3, #7
 8005166:	4413      	add	r3, r2
 8005168:	3384      	adds	r3, #132	@ 0x84
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	6812      	ldr	r2, [r2, #0]
 8005170:	4611      	mov	r1, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	01d2      	lsls	r2, r2, #7
 8005176:	440a      	add	r2, r1
 8005178:	3284      	adds	r2, #132	@ 0x84
 800517a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800517e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800518e:	4413      	add	r3, r2
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4619      	mov	r1, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	01db      	lsls	r3, r3, #7
 800519c:	440b      	add	r3, r1
 800519e:	3384      	adds	r3, #132	@ 0x84
 80051a0:	4619      	mov	r1, r3
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	01db      	lsls	r3, r3, #7
 80051b2:	4413      	add	r3, r2
 80051b4:	3384      	adds	r3, #132	@ 0x84
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	4611      	mov	r1, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	01d2      	lsls	r2, r2, #7
 80051c2:	440a      	add	r2, r1
 80051c4:	3284      	adds	r2, #132	@ 0x84
 80051c6:	f023 0307 	bic.w	r3, r3, #7
 80051ca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	01db      	lsls	r3, r3, #7
 80051d6:	4413      	add	r3, r2
 80051d8:	3384      	adds	r3, #132	@ 0x84
 80051da:	461a      	mov	r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80051e8:	021b      	lsls	r3, r3, #8
 80051ea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	061b      	lsls	r3, r3, #24
 80051fc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	01db      	lsls	r3, r3, #7
 8005208:	4413      	add	r3, r2
 800520a:	3384      	adds	r3, #132	@ 0x84
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	01db      	lsls	r3, r3, #7
 8005218:	4413      	add	r3, r2
 800521a:	3384      	adds	r3, #132	@ 0x84
 800521c:	461a      	mov	r2, r3
 800521e:	2300      	movs	r3, #0
 8005220:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005228:	461a      	mov	r2, r3
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	431a      	orrs	r2, r3
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	431a      	orrs	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4619      	mov	r1, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	01db      	lsls	r3, r3, #7
 800523c:	440b      	add	r3, r1
 800523e:	3384      	adds	r3, #132	@ 0x84
 8005240:	4619      	mov	r1, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	01db      	lsls	r3, r3, #7
 8005252:	4413      	add	r3, r2
 8005254:	3384      	adds	r3, #132	@ 0x84
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	6812      	ldr	r2, [r2, #0]
 800525c:	4611      	mov	r1, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	01d2      	lsls	r2, r2, #7
 8005262:	440a      	add	r2, r1
 8005264:	3284      	adds	r2, #132	@ 0x84
 8005266:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800526a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	01db      	lsls	r3, r3, #7
 8005276:	4413      	add	r3, r2
 8005278:	3384      	adds	r3, #132	@ 0x84
 800527a:	461a      	mov	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	01db      	lsls	r3, r3, #7
 800528c:	4413      	add	r3, r2
 800528e:	3384      	adds	r3, #132	@ 0x84
 8005290:	69da      	ldr	r2, [r3, #28]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4619      	mov	r1, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	01db      	lsls	r3, r3, #7
 800529c:	440b      	add	r3, r1
 800529e:	3384      	adds	r3, #132	@ 0x84
 80052a0:	4619      	mov	r1, r3
 80052a2:	4b58      	ldr	r3, [pc, #352]	@ (8005404 <LTDC_SetConfig+0x32c>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	68f9      	ldr	r1, [r7, #12]
 80052b2:	6809      	ldr	r1, [r1, #0]
 80052b4:	4608      	mov	r0, r1
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	01c9      	lsls	r1, r1, #7
 80052ba:	4401      	add	r1, r0
 80052bc:	3184      	adds	r1, #132	@ 0x84
 80052be:	4313      	orrs	r3, r2
 80052c0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	01db      	lsls	r3, r3, #7
 80052cc:	4413      	add	r3, r2
 80052ce:	3384      	adds	r3, #132	@ 0x84
 80052d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	01db      	lsls	r3, r3, #7
 80052dc:	4413      	add	r3, r2
 80052de:	3384      	adds	r3, #132	@ 0x84
 80052e0:	461a      	mov	r2, r3
 80052e2:	2300      	movs	r3, #0
 80052e4:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	01db      	lsls	r3, r3, #7
 80052f0:	4413      	add	r3, r2
 80052f2:	3384      	adds	r3, #132	@ 0x84
 80052f4:	461a      	mov	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005304:	2304      	movs	r3, #4
 8005306:	61fb      	str	r3, [r7, #28]
 8005308:	e01b      	b.n	8005342 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d102      	bne.n	8005318 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005312:	2303      	movs	r3, #3
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	e014      	b.n	8005342 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b04      	cmp	r3, #4
 800531e:	d00b      	beq.n	8005338 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005324:	2b02      	cmp	r3, #2
 8005326:	d007      	beq.n	8005338 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800532c:	2b03      	cmp	r3, #3
 800532e:	d003      	beq.n	8005338 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005334:	2b07      	cmp	r3, #7
 8005336:	d102      	bne.n	800533e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005338:	2302      	movs	r3, #2
 800533a:	61fb      	str	r3, [r7, #28]
 800533c:	e001      	b.n	8005342 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800533e:	2301      	movs	r3, #1
 8005340:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	01db      	lsls	r3, r3, #7
 800534c:	4413      	add	r3, r2
 800534e:	3384      	adds	r3, #132	@ 0x84
 8005350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	4611      	mov	r1, r2
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	01d2      	lsls	r2, r2, #7
 800535c:	440a      	add	r2, r1
 800535e:	3284      	adds	r2, #132	@ 0x84
 8005360:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005364:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	fb02 f303 	mul.w	r3, r2, r3
 8005370:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	6859      	ldr	r1, [r3, #4]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	1acb      	subs	r3, r1, r3
 800537c:	69f9      	ldr	r1, [r7, #28]
 800537e:	fb01 f303 	mul.w	r3, r1, r3
 8005382:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005384:	68f9      	ldr	r1, [r7, #12]
 8005386:	6809      	ldr	r1, [r1, #0]
 8005388:	4608      	mov	r0, r1
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	01c9      	lsls	r1, r1, #7
 800538e:	4401      	add	r1, r0
 8005390:	3184      	adds	r1, #132	@ 0x84
 8005392:	4313      	orrs	r3, r2
 8005394:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	01db      	lsls	r3, r3, #7
 80053a0:	4413      	add	r3, r2
 80053a2:	3384      	adds	r3, #132	@ 0x84
 80053a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4619      	mov	r1, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	01db      	lsls	r3, r3, #7
 80053b0:	440b      	add	r3, r1
 80053b2:	3384      	adds	r3, #132	@ 0x84
 80053b4:	4619      	mov	r1, r3
 80053b6:	4b14      	ldr	r3, [pc, #80]	@ (8005408 <LTDC_SetConfig+0x330>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	01db      	lsls	r3, r3, #7
 80053c6:	4413      	add	r3, r2
 80053c8:	3384      	adds	r3, #132	@ 0x84
 80053ca:	461a      	mov	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	01db      	lsls	r3, r3, #7
 80053dc:	4413      	add	r3, r2
 80053de:	3384      	adds	r3, #132	@ 0x84
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	4611      	mov	r1, r2
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	01d2      	lsls	r2, r2, #7
 80053ec:	440a      	add	r2, r1
 80053ee:	3284      	adds	r2, #132	@ 0x84
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	6013      	str	r3, [r2, #0]
}
 80053f6:	bf00      	nop
 80053f8:	3724      	adds	r7, #36	@ 0x24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	fffff8f8 	.word	0xfffff8f8
 8005408:	fffff800 	.word	0xfffff800

0800540c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005410:	4b05      	ldr	r3, [pc, #20]	@ (8005428 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a04      	ldr	r2, [pc, #16]	@ (8005428 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800541a:	6013      	str	r3, [r2, #0]
}
 800541c:	bf00      	nop
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40007000 	.word	0x40007000

0800542c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005436:	4b23      	ldr	r3, [pc, #140]	@ (80054c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543a:	4a22      	ldr	r2, [pc, #136]	@ (80054c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800543c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005440:	6413      	str	r3, [r2, #64]	@ 0x40
 8005442:	4b20      	ldr	r3, [pc, #128]	@ (80054c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800544e:	4b1e      	ldr	r3, [pc, #120]	@ (80054c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1d      	ldr	r2, [pc, #116]	@ (80054c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005458:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800545a:	f7fd fccd 	bl	8002df8 <HAL_GetTick>
 800545e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005460:	e009      	b.n	8005476 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005462:	f7fd fcc9 	bl	8002df8 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005470:	d901      	bls.n	8005476 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e022      	b.n	80054bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005476:	4b14      	ldr	r3, [pc, #80]	@ (80054c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800547e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005482:	d1ee      	bne.n	8005462 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005484:	4b10      	ldr	r3, [pc, #64]	@ (80054c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a0f      	ldr	r2, [pc, #60]	@ (80054c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800548a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800548e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005490:	f7fd fcb2 	bl	8002df8 <HAL_GetTick>
 8005494:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005496:	e009      	b.n	80054ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005498:	f7fd fcae 	bl	8002df8 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80054a6:	d901      	bls.n	80054ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e007      	b.n	80054bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80054ac:	4b06      	ldr	r3, [pc, #24]	@ (80054c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054b8:	d1ee      	bne.n	8005498 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40023800 	.word	0x40023800
 80054c8:	40007000 	.word	0x40007000

080054cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80054d4:	2300      	movs	r3, #0
 80054d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e291      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 8087 	beq.w	80055fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054f0:	4b96      	ldr	r3, [pc, #600]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 030c 	and.w	r3, r3, #12
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d00c      	beq.n	8005516 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054fc:	4b93      	ldr	r3, [pc, #588]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f003 030c 	and.w	r3, r3, #12
 8005504:	2b08      	cmp	r3, #8
 8005506:	d112      	bne.n	800552e <HAL_RCC_OscConfig+0x62>
 8005508:	4b90      	ldr	r3, [pc, #576]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005510:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005514:	d10b      	bne.n	800552e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005516:	4b8d      	ldr	r3, [pc, #564]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d06c      	beq.n	80055fc <HAL_RCC_OscConfig+0x130>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d168      	bne.n	80055fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e26b      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005536:	d106      	bne.n	8005546 <HAL_RCC_OscConfig+0x7a>
 8005538:	4b84      	ldr	r3, [pc, #528]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a83      	ldr	r2, [pc, #524]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 800553e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e02e      	b.n	80055a4 <HAL_RCC_OscConfig+0xd8>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10c      	bne.n	8005568 <HAL_RCC_OscConfig+0x9c>
 800554e:	4b7f      	ldr	r3, [pc, #508]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a7e      	ldr	r2, [pc, #504]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005554:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	4b7c      	ldr	r3, [pc, #496]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a7b      	ldr	r2, [pc, #492]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005560:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e01d      	b.n	80055a4 <HAL_RCC_OscConfig+0xd8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005570:	d10c      	bne.n	800558c <HAL_RCC_OscConfig+0xc0>
 8005572:	4b76      	ldr	r3, [pc, #472]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a75      	ldr	r2, [pc, #468]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	4b73      	ldr	r3, [pc, #460]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a72      	ldr	r2, [pc, #456]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	e00b      	b.n	80055a4 <HAL_RCC_OscConfig+0xd8>
 800558c:	4b6f      	ldr	r3, [pc, #444]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a6e      	ldr	r2, [pc, #440]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	4b6c      	ldr	r3, [pc, #432]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a6b      	ldr	r2, [pc, #428]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 800559e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d013      	beq.n	80055d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ac:	f7fd fc24 	bl	8002df8 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055b4:	f7fd fc20 	bl	8002df8 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b64      	cmp	r3, #100	@ 0x64
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e21f      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c6:	4b61      	ldr	r3, [pc, #388]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0xe8>
 80055d2:	e014      	b.n	80055fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d4:	f7fd fc10 	bl	8002df8 <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055dc:	f7fd fc0c 	bl	8002df8 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b64      	cmp	r3, #100	@ 0x64
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e20b      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ee:	4b57      	ldr	r3, [pc, #348]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f0      	bne.n	80055dc <HAL_RCC_OscConfig+0x110>
 80055fa:	e000      	b.n	80055fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d069      	beq.n	80056de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800560a:	4b50      	ldr	r3, [pc, #320]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 030c 	and.w	r3, r3, #12
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00b      	beq.n	800562e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005616:	4b4d      	ldr	r3, [pc, #308]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 030c 	and.w	r3, r3, #12
 800561e:	2b08      	cmp	r3, #8
 8005620:	d11c      	bne.n	800565c <HAL_RCC_OscConfig+0x190>
 8005622:	4b4a      	ldr	r3, [pc, #296]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d116      	bne.n	800565c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800562e:	4b47      	ldr	r3, [pc, #284]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_RCC_OscConfig+0x17a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d001      	beq.n	8005646 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e1df      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005646:	4b41      	ldr	r3, [pc, #260]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	493d      	ldr	r1, [pc, #244]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800565a:	e040      	b.n	80056de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d023      	beq.n	80056ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005664:	4b39      	ldr	r3, [pc, #228]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a38      	ldr	r2, [pc, #224]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005670:	f7fd fbc2 	bl	8002df8 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005678:	f7fd fbbe 	bl	8002df8 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e1bd      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568a:	4b30      	ldr	r3, [pc, #192]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005696:	4b2d      	ldr	r3, [pc, #180]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	4929      	ldr	r1, [pc, #164]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	600b      	str	r3, [r1, #0]
 80056aa:	e018      	b.n	80056de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ac:	4b27      	ldr	r3, [pc, #156]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a26      	ldr	r2, [pc, #152]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 80056b2:	f023 0301 	bic.w	r3, r3, #1
 80056b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b8:	f7fd fb9e 	bl	8002df8 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c0:	f7fd fb9a 	bl	8002df8 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e199      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056d2:	4b1e      	ldr	r3, [pc, #120]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f0      	bne.n	80056c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d038      	beq.n	800575c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d019      	beq.n	8005726 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056f2:	4b16      	ldr	r3, [pc, #88]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 80056f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056f6:	4a15      	ldr	r2, [pc, #84]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fe:	f7fd fb7b 	bl	8002df8 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005704:	e008      	b.n	8005718 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005706:	f7fd fb77 	bl	8002df8 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e176      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005718:	4b0c      	ldr	r3, [pc, #48]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 800571a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0f0      	beq.n	8005706 <HAL_RCC_OscConfig+0x23a>
 8005724:	e01a      	b.n	800575c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005726:	4b09      	ldr	r3, [pc, #36]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 8005728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800572a:	4a08      	ldr	r2, [pc, #32]	@ (800574c <HAL_RCC_OscConfig+0x280>)
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005732:	f7fd fb61 	bl	8002df8 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005738:	e00a      	b.n	8005750 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800573a:	f7fd fb5d 	bl	8002df8 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d903      	bls.n	8005750 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e15c      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
 800574c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005750:	4b91      	ldr	r3, [pc, #580]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 8005752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1ee      	bne.n	800573a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 80a4 	beq.w	80058b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800576a:	4b8b      	ldr	r3, [pc, #556]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10d      	bne.n	8005792 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005776:	4b88      	ldr	r3, [pc, #544]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577a:	4a87      	ldr	r2, [pc, #540]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 800577c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005780:	6413      	str	r3, [r2, #64]	@ 0x40
 8005782:	4b85      	ldr	r3, [pc, #532]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800578a:	60bb      	str	r3, [r7, #8]
 800578c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800578e:	2301      	movs	r3, #1
 8005790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005792:	4b82      	ldr	r3, [pc, #520]	@ (800599c <HAL_RCC_OscConfig+0x4d0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d118      	bne.n	80057d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800579e:	4b7f      	ldr	r3, [pc, #508]	@ (800599c <HAL_RCC_OscConfig+0x4d0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a7e      	ldr	r2, [pc, #504]	@ (800599c <HAL_RCC_OscConfig+0x4d0>)
 80057a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057aa:	f7fd fb25 	bl	8002df8 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b2:	f7fd fb21 	bl	8002df8 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b64      	cmp	r3, #100	@ 0x64
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e120      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057c4:	4b75      	ldr	r3, [pc, #468]	@ (800599c <HAL_RCC_OscConfig+0x4d0>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d106      	bne.n	80057e6 <HAL_RCC_OscConfig+0x31a>
 80057d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 80057da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057dc:	4a6e      	ldr	r2, [pc, #440]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057e4:	e02d      	b.n	8005842 <HAL_RCC_OscConfig+0x376>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10c      	bne.n	8005808 <HAL_RCC_OscConfig+0x33c>
 80057ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 80057f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f2:	4a69      	ldr	r2, [pc, #420]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80057fa:	4b67      	ldr	r3, [pc, #412]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fe:	4a66      	ldr	r2, [pc, #408]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 8005800:	f023 0304 	bic.w	r3, r3, #4
 8005804:	6713      	str	r3, [r2, #112]	@ 0x70
 8005806:	e01c      	b.n	8005842 <HAL_RCC_OscConfig+0x376>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	2b05      	cmp	r3, #5
 800580e:	d10c      	bne.n	800582a <HAL_RCC_OscConfig+0x35e>
 8005810:	4b61      	ldr	r3, [pc, #388]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 8005812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005814:	4a60      	ldr	r2, [pc, #384]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 8005816:	f043 0304 	orr.w	r3, r3, #4
 800581a:	6713      	str	r3, [r2, #112]	@ 0x70
 800581c:	4b5e      	ldr	r3, [pc, #376]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 800581e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005820:	4a5d      	ldr	r2, [pc, #372]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	6713      	str	r3, [r2, #112]	@ 0x70
 8005828:	e00b      	b.n	8005842 <HAL_RCC_OscConfig+0x376>
 800582a:	4b5b      	ldr	r3, [pc, #364]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 800582c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800582e:	4a5a      	ldr	r2, [pc, #360]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 8005830:	f023 0301 	bic.w	r3, r3, #1
 8005834:	6713      	str	r3, [r2, #112]	@ 0x70
 8005836:	4b58      	ldr	r3, [pc, #352]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 8005838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800583a:	4a57      	ldr	r2, [pc, #348]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 800583c:	f023 0304 	bic.w	r3, r3, #4
 8005840:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d015      	beq.n	8005876 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800584a:	f7fd fad5 	bl	8002df8 <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005850:	e00a      	b.n	8005868 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005852:	f7fd fad1 	bl	8002df8 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005860:	4293      	cmp	r3, r2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e0ce      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005868:	4b4b      	ldr	r3, [pc, #300]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 800586a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0ee      	beq.n	8005852 <HAL_RCC_OscConfig+0x386>
 8005874:	e014      	b.n	80058a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005876:	f7fd fabf 	bl	8002df8 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800587c:	e00a      	b.n	8005894 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800587e:	f7fd fabb 	bl	8002df8 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800588c:	4293      	cmp	r3, r2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e0b8      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005894:	4b40      	ldr	r3, [pc, #256]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 8005896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1ee      	bne.n	800587e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d105      	bne.n	80058b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058a6:	4b3c      	ldr	r3, [pc, #240]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	4a3b      	ldr	r2, [pc, #236]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 80058ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058b0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 80a4 	beq.w	8005a04 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058bc:	4b36      	ldr	r3, [pc, #216]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 030c 	and.w	r3, r3, #12
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d06b      	beq.n	80059a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d149      	bne.n	8005964 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d0:	4b31      	ldr	r3, [pc, #196]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a30      	ldr	r2, [pc, #192]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 80058d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7fd fa8c 	bl	8002df8 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e4:	f7fd fa88 	bl	8002df8 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e087      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f6:	4b28      	ldr	r3, [pc, #160]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f0      	bne.n	80058e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69da      	ldr	r2, [r3, #28]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005910:	019b      	lsls	r3, r3, #6
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005918:	085b      	lsrs	r3, r3, #1
 800591a:	3b01      	subs	r3, #1
 800591c:	041b      	lsls	r3, r3, #16
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005924:	061b      	lsls	r3, r3, #24
 8005926:	4313      	orrs	r3, r2
 8005928:	4a1b      	ldr	r2, [pc, #108]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 800592a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800592e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005930:	4b19      	ldr	r3, [pc, #100]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a18      	ldr	r2, [pc, #96]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 8005936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800593a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593c:	f7fd fa5c 	bl	8002df8 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005944:	f7fd fa58 	bl	8002df8 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e057      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005956:	4b10      	ldr	r3, [pc, #64]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCC_OscConfig+0x478>
 8005962:	e04f      	b.n	8005a04 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005964:	4b0c      	ldr	r3, [pc, #48]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a0b      	ldr	r2, [pc, #44]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 800596a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800596e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005970:	f7fd fa42 	bl	8002df8 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005978:	f7fd fa3e 	bl	8002df8 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e03d      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598a:	4b03      	ldr	r3, [pc, #12]	@ (8005998 <HAL_RCC_OscConfig+0x4cc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1f0      	bne.n	8005978 <HAL_RCC_OscConfig+0x4ac>
 8005996:	e035      	b.n	8005a04 <HAL_RCC_OscConfig+0x538>
 8005998:	40023800 	.word	0x40023800
 800599c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80059a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a10 <HAL_RCC_OscConfig+0x544>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d028      	beq.n	8005a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d121      	bne.n	8005a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d11a      	bne.n	8005a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80059d0:	4013      	ands	r3, r2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059d8:	4293      	cmp	r3, r2
 80059da:	d111      	bne.n	8005a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e6:	085b      	lsrs	r3, r3, #1
 80059e8:	3b01      	subs	r3, #1
 80059ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d107      	bne.n	8005a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d001      	beq.n	8005a04 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40023800 	.word	0x40023800

08005a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e0d0      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d910      	bls.n	8005a5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3a:	4b67      	ldr	r3, [pc, #412]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f023 020f 	bic.w	r2, r3, #15
 8005a42:	4965      	ldr	r1, [pc, #404]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4a:	4b63      	ldr	r3, [pc, #396]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d001      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0b8      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d020      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a74:	4b59      	ldr	r3, [pc, #356]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	4a58      	ldr	r2, [pc, #352]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005a7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005a7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a8c:	4b53      	ldr	r3, [pc, #332]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4a52      	ldr	r2, [pc, #328]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005a92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005a96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a98:	4b50      	ldr	r3, [pc, #320]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	494d      	ldr	r1, [pc, #308]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d040      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d107      	bne.n	8005ace <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005abe:	4b47      	ldr	r3, [pc, #284]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d115      	bne.n	8005af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e07f      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d107      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad6:	4b41      	ldr	r3, [pc, #260]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d109      	bne.n	8005af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e073      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e06b      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005af6:	4b39      	ldr	r3, [pc, #228]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f023 0203 	bic.w	r2, r3, #3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	4936      	ldr	r1, [pc, #216]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b08:	f7fd f976 	bl	8002df8 <HAL_GetTick>
 8005b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b0e:	e00a      	b.n	8005b26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b10:	f7fd f972 	bl	8002df8 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e053      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b26:	4b2d      	ldr	r3, [pc, #180]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 020c 	and.w	r2, r3, #12
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d1eb      	bne.n	8005b10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b38:	4b27      	ldr	r3, [pc, #156]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d210      	bcs.n	8005b68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b46:	4b24      	ldr	r3, [pc, #144]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f023 020f 	bic.w	r2, r3, #15
 8005b4e:	4922      	ldr	r1, [pc, #136]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b56:	4b20      	ldr	r3, [pc, #128]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d001      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e032      	b.n	8005bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b74:	4b19      	ldr	r3, [pc, #100]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	4916      	ldr	r1, [pc, #88]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d009      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b92:	4b12      	ldr	r3, [pc, #72]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	490e      	ldr	r1, [pc, #56]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ba6:	f000 f821 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8005baa:	4602      	mov	r2, r0
 8005bac:	4b0b      	ldr	r3, [pc, #44]	@ (8005bdc <HAL_RCC_ClockConfig+0x1c8>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	490a      	ldr	r1, [pc, #40]	@ (8005be0 <HAL_RCC_ClockConfig+0x1cc>)
 8005bb8:	5ccb      	ldrb	r3, [r1, r3]
 8005bba:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbe:	4a09      	ldr	r2, [pc, #36]	@ (8005be4 <HAL_RCC_ClockConfig+0x1d0>)
 8005bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bc2:	4b09      	ldr	r3, [pc, #36]	@ (8005be8 <HAL_RCC_ClockConfig+0x1d4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fd f8d2 	bl	8002d70 <HAL_InitTick>

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	40023c00 	.word	0x40023c00
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	08009a24 	.word	0x08009a24
 8005be4:	20000004 	.word	0x20000004
 8005be8:	20000014 	.word	0x20000014

08005bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf0:	b090      	sub	sp, #64	@ 0x40
 8005bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c04:	4b59      	ldr	r3, [pc, #356]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f003 030c 	and.w	r3, r3, #12
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d00d      	beq.n	8005c2c <HAL_RCC_GetSysClockFreq+0x40>
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	f200 80a1 	bhi.w	8005d58 <HAL_RCC_GetSysClockFreq+0x16c>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <HAL_RCC_GetSysClockFreq+0x34>
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d003      	beq.n	8005c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c1e:	e09b      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c20:	4b53      	ldr	r3, [pc, #332]	@ (8005d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c24:	e09b      	b.n	8005d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c26:	4b53      	ldr	r3, [pc, #332]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c2a:	e098      	b.n	8005d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c2c:	4b4f      	ldr	r3, [pc, #316]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c34:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005c36:	4b4d      	ldr	r3, [pc, #308]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d028      	beq.n	8005c94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c42:	4b4a      	ldr	r3, [pc, #296]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	099b      	lsrs	r3, r3, #6
 8005c48:	2200      	movs	r2, #0
 8005c4a:	623b      	str	r3, [r7, #32]
 8005c4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c54:	2100      	movs	r1, #0
 8005c56:	4b47      	ldr	r3, [pc, #284]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c58:	fb03 f201 	mul.w	r2, r3, r1
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	fb00 f303 	mul.w	r3, r0, r3
 8005c62:	4413      	add	r3, r2
 8005c64:	4a43      	ldr	r2, [pc, #268]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c66:	fba0 1202 	umull	r1, r2, r0, r2
 8005c6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c6c:	460a      	mov	r2, r1
 8005c6e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005c70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c72:	4413      	add	r3, r2
 8005c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c78:	2200      	movs	r2, #0
 8005c7a:	61bb      	str	r3, [r7, #24]
 8005c7c:	61fa      	str	r2, [r7, #28]
 8005c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005c86:	f7fa fabf 	bl	8000208 <__aeabi_uldivmod>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4613      	mov	r3, r2
 8005c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c92:	e053      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c94:	4b35      	ldr	r3, [pc, #212]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	099b      	lsrs	r3, r3, #6
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	617a      	str	r2, [r7, #20]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005ca6:	f04f 0b00 	mov.w	fp, #0
 8005caa:	4652      	mov	r2, sl
 8005cac:	465b      	mov	r3, fp
 8005cae:	f04f 0000 	mov.w	r0, #0
 8005cb2:	f04f 0100 	mov.w	r1, #0
 8005cb6:	0159      	lsls	r1, r3, #5
 8005cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cbc:	0150      	lsls	r0, r2, #5
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	ebb2 080a 	subs.w	r8, r2, sl
 8005cc6:	eb63 090b 	sbc.w	r9, r3, fp
 8005cca:	f04f 0200 	mov.w	r2, #0
 8005cce:	f04f 0300 	mov.w	r3, #0
 8005cd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005cd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005cda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005cde:	ebb2 0408 	subs.w	r4, r2, r8
 8005ce2:	eb63 0509 	sbc.w	r5, r3, r9
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	00eb      	lsls	r3, r5, #3
 8005cf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cf4:	00e2      	lsls	r2, r4, #3
 8005cf6:	4614      	mov	r4, r2
 8005cf8:	461d      	mov	r5, r3
 8005cfa:	eb14 030a 	adds.w	r3, r4, sl
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	eb45 030b 	adc.w	r3, r5, fp
 8005d04:	607b      	str	r3, [r7, #4]
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d12:	4629      	mov	r1, r5
 8005d14:	028b      	lsls	r3, r1, #10
 8005d16:	4621      	mov	r1, r4
 8005d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	028a      	lsls	r2, r1, #10
 8005d20:	4610      	mov	r0, r2
 8005d22:	4619      	mov	r1, r3
 8005d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d26:	2200      	movs	r2, #0
 8005d28:	60bb      	str	r3, [r7, #8]
 8005d2a:	60fa      	str	r2, [r7, #12]
 8005d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d30:	f7fa fa6a 	bl	8000208 <__aeabi_uldivmod>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4613      	mov	r3, r2
 8005d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	3301      	adds	r3, #1
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005d4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d56:	e002      	b.n	8005d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d58:	4b05      	ldr	r3, [pc, #20]	@ (8005d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3740      	adds	r7, #64	@ 0x40
 8005d64:	46bd      	mov	sp, r7
 8005d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	00f42400 	.word	0x00f42400
 8005d74:	017d7840 	.word	0x017d7840

08005d78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d7c:	4b03      	ldr	r3, [pc, #12]	@ (8005d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	20000004 	.word	0x20000004

08005d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d94:	f7ff fff0 	bl	8005d78 <HAL_RCC_GetHCLKFreq>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	4b05      	ldr	r3, [pc, #20]	@ (8005db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	0a9b      	lsrs	r3, r3, #10
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	4903      	ldr	r1, [pc, #12]	@ (8005db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005da6:	5ccb      	ldrb	r3, [r1, r3]
 8005da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40023800 	.word	0x40023800
 8005db4:	08009a34 	.word	0x08009a34

08005db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005dbc:	f7ff ffdc 	bl	8005d78 <HAL_RCC_GetHCLKFreq>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	4b05      	ldr	r3, [pc, #20]	@ (8005dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	0b5b      	lsrs	r3, r3, #13
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	4903      	ldr	r1, [pc, #12]	@ (8005ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dce:	5ccb      	ldrb	r3, [r1, r3]
 8005dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	08009a34 	.word	0x08009a34

08005de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d012      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e08:	4b69      	ldr	r3, [pc, #420]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	4a68      	ldr	r2, [pc, #416]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e0e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005e12:	6093      	str	r3, [r2, #8]
 8005e14:	4b66      	ldr	r3, [pc, #408]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e1c:	4964      	ldr	r1, [pc, #400]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d017      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e48:	4959      	ldr	r1, [pc, #356]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e58:	d101      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005e66:	2301      	movs	r3, #1
 8005e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d017      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e76:	4b4e      	ldr	r3, [pc, #312]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e7c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e84:	494a      	ldr	r1, [pc, #296]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e94:	d101      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005e96:	2301      	movs	r3, #1
 8005e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0320 	and.w	r3, r3, #32
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 808b 	beq.w	8005fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec8:	4a39      	ldr	r2, [pc, #228]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ece:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ed0:	4b37      	ldr	r3, [pc, #220]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ed8:	60bb      	str	r3, [r7, #8]
 8005eda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005edc:	4b35      	ldr	r3, [pc, #212]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a34      	ldr	r2, [pc, #208]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee8:	f7fc ff86 	bl	8002df8 <HAL_GetTick>
 8005eec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ef0:	f7fc ff82 	bl	8002df8 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	@ 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e357      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f02:	4b2c      	ldr	r3, [pc, #176]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f0e:	4b28      	ldr	r3, [pc, #160]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d035      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d02e      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f2c:	4b20      	ldr	r3, [pc, #128]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f36:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f40:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f42:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f46:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f4c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005f4e:	4a18      	ldr	r2, [pc, #96]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f54:	4b16      	ldr	r3, [pc, #88]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d114      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f60:	f7fc ff4a 	bl	8002df8 <HAL_GetTick>
 8005f64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f66:	e00a      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f68:	f7fc ff46 	bl	8002df8 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e319      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0ee      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f96:	d111      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005f98:	4b05      	ldr	r3, [pc, #20]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005fa4:	4b04      	ldr	r3, [pc, #16]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005fa6:	400b      	ands	r3, r1
 8005fa8:	4901      	ldr	r1, [pc, #4]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	608b      	str	r3, [r1, #8]
 8005fae:	e00b      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	40007000 	.word	0x40007000
 8005fb8:	0ffffcff 	.word	0x0ffffcff
 8005fbc:	4baa      	ldr	r3, [pc, #680]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	4aa9      	ldr	r2, [pc, #676]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fc2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005fc6:	6093      	str	r3, [r2, #8]
 8005fc8:	4ba7      	ldr	r3, [pc, #668]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd4:	49a4      	ldr	r1, [pc, #656]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d010      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fe6:	4ba0      	ldr	r3, [pc, #640]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fec:	4a9e      	ldr	r2, [pc, #632]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ff2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005ff6:	4b9c      	ldr	r3, [pc, #624]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ff8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006000:	4999      	ldr	r1, [pc, #612]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006014:	4b94      	ldr	r3, [pc, #592]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006022:	4991      	ldr	r1, [pc, #580]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006036:	4b8c      	ldr	r3, [pc, #560]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800603c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006044:	4988      	ldr	r1, [pc, #544]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006058:	4b83      	ldr	r3, [pc, #524]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800605a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800605e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006066:	4980      	ldr	r1, [pc, #512]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800607a:	4b7b      	ldr	r3, [pc, #492]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800607c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006080:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006088:	4977      	ldr	r1, [pc, #476]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800609c:	4b72      	ldr	r3, [pc, #456]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a2:	f023 0203 	bic.w	r2, r3, #3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060aa:	496f      	ldr	r1, [pc, #444]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060be:	4b6a      	ldr	r3, [pc, #424]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c4:	f023 020c 	bic.w	r2, r3, #12
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060cc:	4966      	ldr	r1, [pc, #408]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060e0:	4b61      	ldr	r3, [pc, #388]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ee:	495e      	ldr	r1, [pc, #376]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006102:	4b59      	ldr	r3, [pc, #356]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006108:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006110:	4955      	ldr	r1, [pc, #340]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006124:	4b50      	ldr	r3, [pc, #320]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800612a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006132:	494d      	ldr	r1, [pc, #308]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006134:	4313      	orrs	r3, r2
 8006136:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006146:	4b48      	ldr	r3, [pc, #288]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800614c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006154:	4944      	ldr	r1, [pc, #272]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00a      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006168:	4b3f      	ldr	r3, [pc, #252]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800616a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006176:	493c      	ldr	r1, [pc, #240]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006178:	4313      	orrs	r3, r2
 800617a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800618a:	4b37      	ldr	r3, [pc, #220]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800618c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006190:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006198:	4933      	ldr	r1, [pc, #204]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061ac:	4b2e      	ldr	r3, [pc, #184]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061ba:	492b      	ldr	r1, [pc, #172]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d011      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80061ce:	4b26      	ldr	r3, [pc, #152]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061dc:	4922      	ldr	r1, [pc, #136]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061ec:	d101      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80061ee:	2301      	movs	r3, #1
 80061f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80061fe:	2301      	movs	r3, #1
 8006200:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800620e:	4b16      	ldr	r3, [pc, #88]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006214:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621c:	4912      	ldr	r1, [pc, #72]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00b      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006230:	4b0d      	ldr	r3, [pc, #52]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006236:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006240:	4909      	ldr	r1, [pc, #36]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006242:	4313      	orrs	r3, r2
 8006244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d006      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 80d9 	beq.w	800640e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800625c:	4b02      	ldr	r3, [pc, #8]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a01      	ldr	r2, [pc, #4]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006262:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006266:	e001      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006268:	40023800 	.word	0x40023800
 800626c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800626e:	f7fc fdc3 	bl	8002df8 <HAL_GetTick>
 8006272:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006274:	e008      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006276:	f7fc fdbf 	bl	8002df8 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b64      	cmp	r3, #100	@ 0x64
 8006282:	d901      	bls.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e194      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006288:	4b6c      	ldr	r3, [pc, #432]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1f0      	bne.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d021      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d11d      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80062a8:	4b64      	ldr	r3, [pc, #400]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ae:	0c1b      	lsrs	r3, r3, #16
 80062b0:	f003 0303 	and.w	r3, r3, #3
 80062b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80062b6:	4b61      	ldr	r3, [pc, #388]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062bc:	0e1b      	lsrs	r3, r3, #24
 80062be:	f003 030f 	and.w	r3, r3, #15
 80062c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	019a      	lsls	r2, r3, #6
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	041b      	lsls	r3, r3, #16
 80062ce:	431a      	orrs	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	061b      	lsls	r3, r3, #24
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	071b      	lsls	r3, r3, #28
 80062dc:	4957      	ldr	r1, [pc, #348]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d004      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062f8:	d00a      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006302:	2b00      	cmp	r3, #0
 8006304:	d02e      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800630e:	d129      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006310:	4b4a      	ldr	r3, [pc, #296]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006316:	0c1b      	lsrs	r3, r3, #16
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800631e:	4b47      	ldr	r3, [pc, #284]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006324:	0f1b      	lsrs	r3, r3, #28
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	019a      	lsls	r2, r3, #6
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	041b      	lsls	r3, r3, #16
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	061b      	lsls	r3, r3, #24
 800633e:	431a      	orrs	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	071b      	lsls	r3, r3, #28
 8006344:	493d      	ldr	r1, [pc, #244]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800634c:	4b3b      	ldr	r3, [pc, #236]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800634e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006352:	f023 021f 	bic.w	r2, r3, #31
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635a:	3b01      	subs	r3, #1
 800635c:	4937      	ldr	r1, [pc, #220]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01d      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006370:	4b32      	ldr	r3, [pc, #200]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006376:	0e1b      	lsrs	r3, r3, #24
 8006378:	f003 030f 	and.w	r3, r3, #15
 800637c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800637e:	4b2f      	ldr	r3, [pc, #188]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006384:	0f1b      	lsrs	r3, r3, #28
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	019a      	lsls	r2, r3, #6
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	041b      	lsls	r3, r3, #16
 8006398:	431a      	orrs	r2, r3
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	061b      	lsls	r3, r3, #24
 800639e:	431a      	orrs	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	071b      	lsls	r3, r3, #28
 80063a4:	4925      	ldr	r1, [pc, #148]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d011      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	019a      	lsls	r2, r3, #6
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	041b      	lsls	r3, r3, #16
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	061b      	lsls	r3, r3, #24
 80063cc:	431a      	orrs	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	071b      	lsls	r3, r3, #28
 80063d4:	4919      	ldr	r1, [pc, #100]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80063dc:	4b17      	ldr	r3, [pc, #92]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a16      	ldr	r2, [pc, #88]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063e8:	f7fc fd06 	bl	8002df8 <HAL_GetTick>
 80063ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80063f0:	f7fc fd02 	bl	8002df8 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b64      	cmp	r3, #100	@ 0x64
 80063fc:	d901      	bls.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e0d7      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006402:	4b0e      	ldr	r3, [pc, #56]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f0      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b01      	cmp	r3, #1
 8006412:	f040 80cd 	bne.w	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006416:	4b09      	ldr	r3, [pc, #36]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a08      	ldr	r2, [pc, #32]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800641c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006422:	f7fc fce9 	bl	8002df8 <HAL_GetTick>
 8006426:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006428:	e00a      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800642a:	f7fc fce5 	bl	8002df8 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b64      	cmp	r3, #100	@ 0x64
 8006436:	d903      	bls.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e0ba      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800643c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006440:	4b5e      	ldr	r3, [pc, #376]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800644c:	d0ed      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d009      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800646a:	2b00      	cmp	r3, #0
 800646c:	d02e      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d12a      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006476:	4b51      	ldr	r3, [pc, #324]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647c:	0c1b      	lsrs	r3, r3, #16
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006484:	4b4d      	ldr	r3, [pc, #308]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648a:	0f1b      	lsrs	r3, r3, #28
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	019a      	lsls	r2, r3, #6
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	041b      	lsls	r3, r3, #16
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	061b      	lsls	r3, r3, #24
 80064a4:	431a      	orrs	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	071b      	lsls	r3, r3, #28
 80064aa:	4944      	ldr	r1, [pc, #272]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80064b2:	4b42      	ldr	r3, [pc, #264]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c0:	3b01      	subs	r3, #1
 80064c2:	021b      	lsls	r3, r3, #8
 80064c4:	493d      	ldr	r1, [pc, #244]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d022      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064e0:	d11d      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80064e2:	4b36      	ldr	r3, [pc, #216]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e8:	0e1b      	lsrs	r3, r3, #24
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80064f0:	4b32      	ldr	r3, [pc, #200]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f6:	0f1b      	lsrs	r3, r3, #28
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	019a      	lsls	r2, r3, #6
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	041b      	lsls	r3, r3, #16
 800650a:	431a      	orrs	r2, r3
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	061b      	lsls	r3, r3, #24
 8006510:	431a      	orrs	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	071b      	lsls	r3, r3, #28
 8006516:	4929      	ldr	r1, [pc, #164]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d028      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800652a:	4b24      	ldr	r3, [pc, #144]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006530:	0e1b      	lsrs	r3, r3, #24
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006538:	4b20      	ldr	r3, [pc, #128]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800653a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653e:	0c1b      	lsrs	r3, r3, #16
 8006540:	f003 0303 	and.w	r3, r3, #3
 8006544:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	019a      	lsls	r2, r3, #6
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	041b      	lsls	r3, r3, #16
 8006550:	431a      	orrs	r2, r3
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	061b      	lsls	r3, r3, #24
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	071b      	lsls	r3, r3, #28
 800655e:	4917      	ldr	r1, [pc, #92]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006560:	4313      	orrs	r3, r2
 8006562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006566:	4b15      	ldr	r3, [pc, #84]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800656c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006574:	4911      	ldr	r1, [pc, #68]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006576:	4313      	orrs	r3, r2
 8006578:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800657c:	4b0f      	ldr	r3, [pc, #60]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0e      	ldr	r2, [pc, #56]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006588:	f7fc fc36 	bl	8002df8 <HAL_GetTick>
 800658c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800658e:	e008      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006590:	f7fc fc32 	bl	8002df8 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b64      	cmp	r3, #100	@ 0x64
 800659c:	d901      	bls.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e007      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065a2:	4b06      	ldr	r3, [pc, #24]	@ (80065bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065ae:	d1ef      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3720      	adds	r7, #32
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	40023800 	.word	0x40023800

080065c0 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a80      	ldr	r2, [pc, #512]	@ (80067d0 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 80065d0:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80065d2:	4b80      	ldr	r3, [pc, #512]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80065d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065d8:	099b      	lsrs	r3, r3, #6
 80065da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065e2:	4b7c      	ldr	r3, [pc, #496]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80065e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065e8:	0c1b      	lsrs	r3, r3, #16
 80065ea:	f003 0203 	and.w	r2, r3, #3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065f2:	4b78      	ldr	r3, [pc, #480]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80065f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065f8:	0e1b      	lsrs	r3, r3, #24
 80065fa:	f003 020f 	and.w	r2, r3, #15
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006602:	4b74      	ldr	r3, [pc, #464]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006604:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006608:	0f1b      	lsrs	r3, r3, #28
 800660a:	f003 0207 	and.w	r2, r3, #7
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8006612:	4b70      	ldr	r3, [pc, #448]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006618:	099b      	lsrs	r3, r3, #6
 800661a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006622:	4b6c      	ldr	r3, [pc, #432]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006628:	0c1b      	lsrs	r3, r3, #16
 800662a:	f003 0203 	and.w	r2, r3, #3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006632:	4b68      	ldr	r3, [pc, #416]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006638:	0e1b      	lsrs	r3, r3, #24
 800663a:	f003 020f 	and.w	r2, r3, #15
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006642:	4b64      	ldr	r3, [pc, #400]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006648:	0f1b      	lsrs	r3, r3, #28
 800664a:	f003 0207 	and.w	r2, r3, #7
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8006652:	4b60      	ldr	r3, [pc, #384]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006658:	f003 021f 	and.w	r2, r3, #31
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8006660:	4b5c      	ldr	r3, [pc, #368]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006666:	0a1b      	lsrs	r3, r3, #8
 8006668:	f003 021f 	and.w	r2, r3, #31
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8006670:	4b58      	ldr	r3, [pc, #352]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006672:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006676:	0c1b      	lsrs	r3, r3, #16
 8006678:	f003 0203 	and.w	r2, r3, #3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8006680:	4b54      	ldr	r3, [pc, #336]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006682:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006686:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800668e:	4b51      	ldr	r3, [pc, #324]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006694:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800669c:	4b4d      	ldr	r3, [pc, #308]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80066a8:	4b4a      	ldr	r3, [pc, #296]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80066aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80066b6:	4b47      	ldr	r3, [pc, #284]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80066b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066bc:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 80066c4:	4b43      	ldr	r3, [pc, #268]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80066c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ca:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 80066d2:	4b40      	ldr	r3, [pc, #256]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80066d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066d8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80066e0:	4b3c      	ldr	r3, [pc, #240]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80066e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066e6:	f003 0203 	and.w	r2, r3, #3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80066ee:	4b39      	ldr	r3, [pc, #228]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80066f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f4:	f003 020c 	and.w	r2, r3, #12
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80066fc:	4b35      	ldr	r3, [pc, #212]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80066fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006702:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800670a:	4b32      	ldr	r3, [pc, #200]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800670c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006710:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8006718:	4b2e      	ldr	r3, [pc, #184]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800671a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800671e:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8006726:	4b2b      	ldr	r3, [pc, #172]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800672c:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8006734:	4b27      	ldr	r3, [pc, #156]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800673a:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8006742:	4b24      	ldr	r3, [pc, #144]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006748:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006750:	4b20      	ldr	r3, [pc, #128]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006756:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800675e:	4b1d      	ldr	r3, [pc, #116]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006764:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800676c:	4b19      	ldr	r3, [pc, #100]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800676e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006772:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800677a:	4b16      	ldr	r3, [pc, #88]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800677c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006780:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800678a:	4b12      	ldr	r3, [pc, #72]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006792:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006794:	4b0f      	ldr	r3, [pc, #60]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006798:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80067a4:	4b0b      	ldr	r3, [pc, #44]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80067a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d103      	bne.n	80067ba <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80067b8:	e003      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067c0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	00fffff1 	.word	0x00fffff1
 80067d4:	40023800 	.word	0x40023800

080067d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80067f6:	f040 808d 	bne.w	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 80067fa:	4b93      	ldr	r3, [pc, #588]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80067fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006800:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006808:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006810:	d07c      	beq.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006818:	d87b      	bhi.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d004      	beq.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006826:	d039      	beq.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006828:	e073      	b.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800682a:	4b87      	ldr	r3, [pc, #540]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d108      	bne.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006836:	4b84      	ldr	r3, [pc, #528]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800683e:	4a83      	ldr	r2, [pc, #524]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006840:	fbb2 f3f3 	udiv	r3, r2, r3
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	e007      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006848:	4b7f      	ldr	r3, [pc, #508]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006850:	4a7f      	ldr	r2, [pc, #508]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006852:	fbb2 f3f3 	udiv	r3, r2, r3
 8006856:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006858:	4b7b      	ldr	r3, [pc, #492]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800685a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685e:	0e1b      	lsrs	r3, r3, #24
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006866:	4b78      	ldr	r3, [pc, #480]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800686c:	099b      	lsrs	r3, r3, #6
 800686e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	fb03 f202 	mul.w	r2, r3, r2
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	fbb2 f3f3 	udiv	r3, r2, r3
 800687e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006880:	4b71      	ldr	r3, [pc, #452]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006882:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006886:	0a1b      	lsrs	r3, r3, #8
 8006888:	f003 031f 	and.w	r3, r3, #31
 800688c:	3301      	adds	r3, #1
 800688e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	fbb2 f3f3 	udiv	r3, r2, r3
 8006898:	617b      	str	r3, [r7, #20]
        break;
 800689a:	e03b      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800689c:	4b6a      	ldr	r3, [pc, #424]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d108      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80068a8:	4b67      	ldr	r3, [pc, #412]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068b0:	4a66      	ldr	r2, [pc, #408]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80068b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	e007      	b.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80068ba:	4b63      	ldr	r3, [pc, #396]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068c2:	4a63      	ldr	r2, [pc, #396]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80068ca:	4b5f      	ldr	r3, [pc, #380]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068d0:	0e1b      	lsrs	r3, r3, #24
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80068d8:	4b5b      	ldr	r3, [pc, #364]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068de:	099b      	lsrs	r3, r3, #6
 80068e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	fb03 f202 	mul.w	r2, r3, r2
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80068f2:	4b55      	ldr	r3, [pc, #340]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80068f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068f8:	f003 031f 	and.w	r3, r3, #31
 80068fc:	3301      	adds	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	fbb2 f3f3 	udiv	r3, r2, r3
 8006908:	617b      	str	r3, [r7, #20]
        break;
 800690a:	e003      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800690c:	4b51      	ldr	r3, [pc, #324]	@ (8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800690e:	617b      	str	r3, [r7, #20]
        break;
 8006910:	e000      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8006912:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800691a:	f040 808d 	bne.w	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800691e:	4b4a      	ldr	r3, [pc, #296]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006924:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800692c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006934:	d07c      	beq.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800693c:	d87b      	bhi.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d004      	beq.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800694a:	d039      	beq.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800694c:	e073      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800694e:	4b3e      	ldr	r3, [pc, #248]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d108      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800695a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006962:	4a3a      	ldr	r2, [pc, #232]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006964:	fbb2 f3f3 	udiv	r3, r2, r3
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	e007      	b.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800696c:	4b36      	ldr	r3, [pc, #216]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006974:	4a36      	ldr	r2, [pc, #216]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006976:	fbb2 f3f3 	udiv	r3, r2, r3
 800697a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800697c:	4b32      	ldr	r3, [pc, #200]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800697e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006982:	0e1b      	lsrs	r3, r3, #24
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800698a:	4b2f      	ldr	r3, [pc, #188]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800698c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006990:	099b      	lsrs	r3, r3, #6
 8006992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	fb03 f202 	mul.w	r2, r3, r2
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80069a4:	4b28      	ldr	r3, [pc, #160]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80069a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069aa:	0a1b      	lsrs	r3, r3, #8
 80069ac:	f003 031f 	and.w	r3, r3, #31
 80069b0:	3301      	adds	r3, #1
 80069b2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069bc:	617b      	str	r3, [r7, #20]
        break;
 80069be:	e03b      	b.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80069c0:	4b21      	ldr	r3, [pc, #132]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d108      	bne.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80069cc:	4b1e      	ldr	r3, [pc, #120]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069d4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80069d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	e007      	b.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80069de:	4b1a      	ldr	r3, [pc, #104]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ec:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80069ee:	4b16      	ldr	r3, [pc, #88]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80069f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069f4:	0e1b      	lsrs	r3, r3, #24
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80069fc:	4b12      	ldr	r3, [pc, #72]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80069fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a02:	099b      	lsrs	r3, r3, #6
 8006a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	fb03 f202 	mul.w	r2, r3, r2
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a14:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006a16:	4b0c      	ldr	r3, [pc, #48]	@ (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a1c:	f003 031f 	and.w	r3, r3, #31
 8006a20:	3301      	adds	r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2c:	617b      	str	r3, [r7, #20]
        break;
 8006a2e:	e003      	b.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a30:	4b08      	ldr	r3, [pc, #32]	@ (8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006a32:	617b      	str	r3, [r7, #20]
        break;
 8006a34:	e000      	b.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8006a36:	bf00      	nop
      }
    }
  }

  return frequency;
 8006a38:	697b      	ldr	r3, [r7, #20]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	00f42400 	.word	0x00f42400
 8006a50:	017d7840 	.word	0x017d7840
 8006a54:	00bb8000 	.word	0x00bb8000

08006a58 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e156      	b.n	8006d24 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7fa fca6 	bl	80013dc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fa85 	bl	8006fa8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d00c      	beq.n	8006ac0 <HAL_SAI_Init+0x68>
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d80d      	bhi.n	8006ac6 <HAL_SAI_Init+0x6e>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_SAI_Init+0x5c>
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d003      	beq.n	8006aba <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8006ab2:	e008      	b.n	8006ac6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	61fb      	str	r3, [r7, #28]
      break;
 8006ab8:	e006      	b.n	8006ac8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006aba:	2310      	movs	r3, #16
 8006abc:	61fb      	str	r3, [r7, #28]
      break;
 8006abe:	e003      	b.n	8006ac8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006ac0:	2320      	movs	r3, #32
 8006ac2:	61fb      	str	r3, [r7, #28]
      break;
 8006ac4:	e000      	b.n	8006ac8 <HAL_SAI_Init+0x70>
      break;
 8006ac6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d81e      	bhi.n	8006b0e <HAL_SAI_Init+0xb6>
 8006ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad8 <HAL_SAI_Init+0x80>)
 8006ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad6:	bf00      	nop
 8006ad8:	08006ae9 	.word	0x08006ae9
 8006adc:	08006aef 	.word	0x08006aef
 8006ae0:	08006af7 	.word	0x08006af7
 8006ae4:	08006aff 	.word	0x08006aff
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	617b      	str	r3, [r7, #20]
    }
    break;
 8006aec:	e010      	b.n	8006b10 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006af2:	617b      	str	r3, [r7, #20]
    }
    break;
 8006af4:	e00c      	b.n	8006b10 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006af6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006afa:	617b      	str	r3, [r7, #20]
    }
    break;
 8006afc:	e008      	b.n	8006b10 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006afe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006b02:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	61fb      	str	r3, [r7, #28]
    }
    break;
 8006b0c:	e000      	b.n	8006b10 <HAL_SAI_Init+0xb8>
    default:
      break;
 8006b0e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a85      	ldr	r2, [pc, #532]	@ (8006d2c <HAL_SAI_Init+0x2d4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d004      	beq.n	8006b24 <HAL_SAI_Init+0xcc>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a84      	ldr	r2, [pc, #528]	@ (8006d30 <HAL_SAI_Init+0x2d8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d103      	bne.n	8006b2c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006b24:	4a83      	ldr	r2, [pc, #524]	@ (8006d34 <HAL_SAI_Init+0x2dc>)
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	e002      	b.n	8006b32 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006b2c:	4a82      	ldr	r2, [pc, #520]	@ (8006d38 <HAL_SAI_Init+0x2e0>)
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d04c      	beq.n	8006bd4 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a7a      	ldr	r2, [pc, #488]	@ (8006d2c <HAL_SAI_Init+0x2d4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_SAI_Init+0xfa>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a78      	ldr	r2, [pc, #480]	@ (8006d30 <HAL_SAI_Init+0x2d8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d104      	bne.n	8006b5c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006b52:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006b56:	f7ff fe3f 	bl	80067d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b5a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a76      	ldr	r2, [pc, #472]	@ (8006d3c <HAL_SAI_Init+0x2e4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d004      	beq.n	8006b70 <HAL_SAI_Init+0x118>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a75      	ldr	r2, [pc, #468]	@ (8006d40 <HAL_SAI_Init+0x2e8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d104      	bne.n	8006b7a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006b70:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006b74:	f7ff fe30 	bl	80067d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b78:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	461a      	mov	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	025b      	lsls	r3, r3, #9
 8006b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b90:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4a6b      	ldr	r2, [pc, #428]	@ (8006d44 <HAL_SAI_Init+0x2ec>)
 8006b96:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9a:	08da      	lsrs	r2, r3, #3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8006ba0:	68f9      	ldr	r1, [r7, #12]
 8006ba2:	4b68      	ldr	r3, [pc, #416]	@ (8006d44 <HAL_SAI_Init+0x2ec>)
 8006ba4:	fba3 2301 	umull	r2, r3, r3, r1
 8006ba8:	08da      	lsrs	r2, r3, #3
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	1aca      	subs	r2, r1, r3
 8006bb4:	2a08      	cmp	r2, #8
 8006bb6:	d904      	bls.n	8006bc2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	1c5a      	adds	r2, r3, #1
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d104      	bne.n	8006bd4 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	085a      	lsrs	r2, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <HAL_SAI_Init+0x18c>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d109      	bne.n	8006bf8 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_SAI_Init+0x198>
 8006bec:	2300      	movs	r3, #0
 8006bee:	e001      	b.n	8006bf4 <HAL_SAI_Init+0x19c>
 8006bf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	e008      	b.n	8006c0a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d102      	bne.n	8006c06 <HAL_SAI_Init+0x1ae>
 8006c00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c04:	e000      	b.n	8006c08 <HAL_SAI_Init+0x1b0>
 8006c06:	2300      	movs	r3, #0
 8006c08:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6819      	ldr	r1, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	4b4c      	ldr	r3, [pc, #304]	@ (8006d48 <HAL_SAI_Init+0x2f0>)
 8006c16:	400b      	ands	r3, r1
 8006c18:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6819      	ldr	r1, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c28:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c2e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c34:	431a      	orrs	r2, r3
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8006c42:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006c4e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	051b      	lsls	r3, r3, #20
 8006c56:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4b38      	ldr	r3, [pc, #224]	@ (8006d4c <HAL_SAI_Init+0x2f4>)
 8006c6c:	400b      	ands	r3, r1
 8006c6e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6859      	ldr	r1, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6899      	ldr	r1, [r3, #8]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	4b2d      	ldr	r3, [pc, #180]	@ (8006d50 <HAL_SAI_Init+0x2f8>)
 8006c9a:	400b      	ands	r3, r1
 8006c9c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6899      	ldr	r1, [r3, #8]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006cae:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8006cb4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8006cba:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006cc4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68d9      	ldr	r1, [r3, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8006cdc:	400b      	ands	r3, r1
 8006cde:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68d9      	ldr	r1, [r3, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cee:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf4:	041b      	lsls	r3, r3, #16
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	021b      	lsls	r3, r3, #8
 8006d00:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3720      	adds	r7, #32
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	40015804 	.word	0x40015804
 8006d30:	40015824 	.word	0x40015824
 8006d34:	40015800 	.word	0x40015800
 8006d38:	40015c00 	.word	0x40015c00
 8006d3c:	40015c04 	.word	0x40015c04
 8006d40:	40015c24 	.word	0x40015c24
 8006d44:	cccccccd 	.word	0xcccccccd
 8006d48:	ff05c010 	.word	0xff05c010
 8006d4c:	ffff1ff0 	.word	0xffff1ff0
 8006d50:	fff88000 	.word	0xfff88000

08006d54 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e027      	b.n	8006db6 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2202      	movs	r2, #2
 8006d6a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2200      	movs	r2, #0
 8006d74:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7e:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f911 	bl	8006fa8 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0208 	orr.w	r2, r2, #8
 8006d94:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fa fc12 	bl	80015c0 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8006dce:	f7fc f813 	bl	8002df8 <HAL_GetTick>
 8006dd2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <HAL_SAI_Transmit_DMA+0x20>
 8006dda:	88fb      	ldrh	r3, [r7, #6]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e093      	b.n	8006f0c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	f040 808c 	bne.w	8006f0a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_SAI_Transmit_DMA+0x40>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e085      	b.n	8006f0c <HAL_SAI_Transmit_DMA+0x14c>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	88fa      	ldrh	r2, [r7, #6]
 8006e12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	88fa      	ldrh	r2, [r7, #6]
 8006e1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2212      	movs	r2, #18
 8006e2a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e32:	4a38      	ldr	r2, [pc, #224]	@ (8006f14 <HAL_SAI_Transmit_DMA+0x154>)
 8006e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e3a:	4a37      	ldr	r2, [pc, #220]	@ (8006f18 <HAL_SAI_Transmit_DMA+0x158>)
 8006e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e42:	4a36      	ldr	r2, [pc, #216]	@ (8006f1c <HAL_SAI_Transmit_DMA+0x15c>)
 8006e44:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e56:	4619      	mov	r1, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	331c      	adds	r3, #28
 8006e5e:	461a      	mov	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006e66:	f7fc fa15 	bl	8003294 <HAL_DMA_Start_IT>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e047      	b.n	8006f0c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 f85c 	bl	8006f3c <SAI_InterruptFlag>
 8006e84:	4601      	mov	r1, r0
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	691a      	ldr	r2, [r3, #16]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006ea2:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006ea4:	e015      	b.n	8006ed2 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8006ea6:	f7fb ffa7 	bl	8002df8 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006eb4:	d90d      	bls.n	8006ed2 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ebc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e01c      	b.n	8006f0c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0e2      	beq.n	8006ea6 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d107      	bne.n	8006efe <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006efc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	e000      	b.n	8006f0c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8006f0a:	2302      	movs	r3, #2
  }
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	08007079 	.word	0x08007079
 8006f18:	08007019 	.word	0x08007019
 8006f1c:	08007095 	.word	0x08007095

08006f20 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006f2e:	b2db      	uxtb	r3, r3
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d103      	bne.n	8006f58 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f043 0308 	orr.w	r3, r3, #8
 8006f56:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d10b      	bne.n	8006f78 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d003      	beq.n	8006f70 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d103      	bne.n	8006f78 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f043 0310 	orr.w	r3, r3, #16
 8006f76:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2b03      	cmp	r3, #3
 8006f7e:	d003      	beq.n	8006f88 <SAI_InterruptFlag+0x4c>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d104      	bne.n	8006f92 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	e003      	b.n	8006f9a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f043 0304 	orr.w	r3, r3, #4
 8006f98:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006fb0:	4b17      	ldr	r3, [pc, #92]	@ (8007010 <SAI_Disable+0x68>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a17      	ldr	r2, [pc, #92]	@ (8007014 <SAI_Disable+0x6c>)
 8006fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fba:	0b1b      	lsrs	r3, r3, #12
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006fd2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	1e5a      	subs	r2, r3, #1
 8006fd8:	60fa      	str	r2, [r7, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10a      	bne.n	8006ff4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fe4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	72fb      	strb	r3, [r7, #11]
      break;
 8006ff2:	e006      	b.n	8007002 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e8      	bne.n	8006fd4 <SAI_Disable+0x2c>

  return status;
 8007002:	7afb      	ldrb	r3, [r7, #11]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	20000004 	.word	0x20000004
 8007014:	95cbec1b 	.word	0x95cbec1b

08007018 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007024:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800702e:	d01c      	beq.n	800706a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007046:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007048:	2100      	movs	r1, #0
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f7ff ff76 	bl	8006f3c <SAI_InterruptFlag>
 8007050:	4603      	mov	r3, r0
 8007052:	43d9      	mvns	r1, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	691a      	ldr	r2, [r3, #16]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	400a      	ands	r2, r1
 8007060:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f7fa fdee 	bl	8001c4c <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007084:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f7fa fdea 	bl	8001c60 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800708c:	bf00      	nop
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d004      	beq.n	80070c6 <SAI_DMAError+0x32>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d112      	bne.n	80070ec <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80070d4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f7ff ff66 	bl	8006fa8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f7fa fdc1 	bl	8001c74 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80070f2:	bf00      	nop
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e025      	b.n	800715a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d106      	bne.n	8007128 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fa f950 	bl	80013c8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3304      	adds	r3, #4
 8007138:	4619      	mov	r1, r3
 800713a:	4610      	mov	r0, r2
 800713c:	f000 ffe0 	bl	8008100 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6818      	ldr	r0, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	461a      	mov	r2, r3
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	f001 f834 	bl	80081b8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b086      	sub	sp, #24
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007174:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007176:	7dfb      	ldrb	r3, [r7, #23]
 8007178:	2b02      	cmp	r3, #2
 800717a:	d101      	bne.n	8007180 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800717c:	2302      	movs	r3, #2
 800717e:	e021      	b.n	80071c4 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d002      	beq.n	800718c <HAL_SDRAM_SendCommand+0x2a>
 8007186:	7dfb      	ldrb	r3, [r7, #23]
 8007188:	2b05      	cmp	r3, #5
 800718a:	d118      	bne.n	80071be <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	4618      	mov	r0, r3
 800719e:	f001 f875 	bl	800828c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d104      	bne.n	80071b4 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2205      	movs	r2, #5
 80071ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071b2:	e006      	b.n	80071c2 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071bc:	e001      	b.n	80071c2 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d101      	bne.n	80071e6 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80071e2:	2302      	movs	r3, #2
 80071e4:	e016      	b.n	8007214 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d10f      	bne.n	8007212 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2202      	movs	r2, #2
 80071f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	4618      	mov	r0, r3
 8007202:	f001 f867 	bl	80082d4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	e000      	b.n	8007214 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e049      	b.n	80072c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d106      	bne.n	8007248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7f9 ff8e 	bl	8001164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2202      	movs	r2, #2
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	3304      	adds	r3, #4
 8007258:	4619      	mov	r1, r3
 800725a:	4610      	mov	r0, r2
 800725c:	f000 f900 	bl	8007460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_TIM_ConfigClockSource+0x1c>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e0b4      	b.n	8007452 <HAL_TIM_ConfigClockSource+0x186>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	4b56      	ldr	r3, [pc, #344]	@ (800745c <HAL_TIM_ConfigClockSource+0x190>)
 8007304:	4013      	ands	r3, r2
 8007306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800730e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007320:	d03e      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0xd4>
 8007322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007326:	f200 8087 	bhi.w	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 800732a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800732e:	f000 8086 	beq.w	800743e <HAL_TIM_ConfigClockSource+0x172>
 8007332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007336:	d87f      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 8007338:	2b70      	cmp	r3, #112	@ 0x70
 800733a:	d01a      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0xa6>
 800733c:	2b70      	cmp	r3, #112	@ 0x70
 800733e:	d87b      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 8007340:	2b60      	cmp	r3, #96	@ 0x60
 8007342:	d050      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0x11a>
 8007344:	2b60      	cmp	r3, #96	@ 0x60
 8007346:	d877      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 8007348:	2b50      	cmp	r3, #80	@ 0x50
 800734a:	d03c      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0xfa>
 800734c:	2b50      	cmp	r3, #80	@ 0x50
 800734e:	d873      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 8007350:	2b40      	cmp	r3, #64	@ 0x40
 8007352:	d058      	beq.n	8007406 <HAL_TIM_ConfigClockSource+0x13a>
 8007354:	2b40      	cmp	r3, #64	@ 0x40
 8007356:	d86f      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 8007358:	2b30      	cmp	r3, #48	@ 0x30
 800735a:	d064      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x15a>
 800735c:	2b30      	cmp	r3, #48	@ 0x30
 800735e:	d86b      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 8007360:	2b20      	cmp	r3, #32
 8007362:	d060      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x15a>
 8007364:	2b20      	cmp	r3, #32
 8007366:	d867      	bhi.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
 8007368:	2b00      	cmp	r3, #0
 800736a:	d05c      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x15a>
 800736c:	2b10      	cmp	r3, #16
 800736e:	d05a      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x15a>
 8007370:	e062      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007382:	f000 f993 	bl	80076ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007394:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	609a      	str	r2, [r3, #8]
      break;
 800739e:	e04f      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073b0:	f000 f97c 	bl	80076ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073c2:	609a      	str	r2, [r3, #8]
      break;
 80073c4:	e03c      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073d2:	461a      	mov	r2, r3
 80073d4:	f000 f8f0 	bl	80075b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2150      	movs	r1, #80	@ 0x50
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 f949 	bl	8007676 <TIM_ITRx_SetConfig>
      break;
 80073e4:	e02c      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073f2:	461a      	mov	r2, r3
 80073f4:	f000 f90f 	bl	8007616 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2160      	movs	r1, #96	@ 0x60
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 f939 	bl	8007676 <TIM_ITRx_SetConfig>
      break;
 8007404:	e01c      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007412:	461a      	mov	r2, r3
 8007414:	f000 f8d0 	bl	80075b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2140      	movs	r1, #64	@ 0x40
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f929 	bl	8007676 <TIM_ITRx_SetConfig>
      break;
 8007424:	e00c      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4619      	mov	r1, r3
 8007430:	4610      	mov	r0, r2
 8007432:	f000 f920 	bl	8007676 <TIM_ITRx_SetConfig>
      break;
 8007436:	e003      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	73fb      	strb	r3, [r7, #15]
      break;
 800743c:	e000      	b.n	8007440 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800743e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007450:	7bfb      	ldrb	r3, [r7, #15]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	fffeff88 	.word	0xfffeff88

08007460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a46      	ldr	r2, [pc, #280]	@ (800758c <TIM_Base_SetConfig+0x12c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d013      	beq.n	80074a0 <TIM_Base_SetConfig+0x40>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800747e:	d00f      	beq.n	80074a0 <TIM_Base_SetConfig+0x40>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a43      	ldr	r2, [pc, #268]	@ (8007590 <TIM_Base_SetConfig+0x130>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d00b      	beq.n	80074a0 <TIM_Base_SetConfig+0x40>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a42      	ldr	r2, [pc, #264]	@ (8007594 <TIM_Base_SetConfig+0x134>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d007      	beq.n	80074a0 <TIM_Base_SetConfig+0x40>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a41      	ldr	r2, [pc, #260]	@ (8007598 <TIM_Base_SetConfig+0x138>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <TIM_Base_SetConfig+0x40>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a40      	ldr	r2, [pc, #256]	@ (800759c <TIM_Base_SetConfig+0x13c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d108      	bne.n	80074b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a35      	ldr	r2, [pc, #212]	@ (800758c <TIM_Base_SetConfig+0x12c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d02b      	beq.n	8007512 <TIM_Base_SetConfig+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074c0:	d027      	beq.n	8007512 <TIM_Base_SetConfig+0xb2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a32      	ldr	r2, [pc, #200]	@ (8007590 <TIM_Base_SetConfig+0x130>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d023      	beq.n	8007512 <TIM_Base_SetConfig+0xb2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a31      	ldr	r2, [pc, #196]	@ (8007594 <TIM_Base_SetConfig+0x134>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d01f      	beq.n	8007512 <TIM_Base_SetConfig+0xb2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a30      	ldr	r2, [pc, #192]	@ (8007598 <TIM_Base_SetConfig+0x138>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d01b      	beq.n	8007512 <TIM_Base_SetConfig+0xb2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a2f      	ldr	r2, [pc, #188]	@ (800759c <TIM_Base_SetConfig+0x13c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d017      	beq.n	8007512 <TIM_Base_SetConfig+0xb2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a2e      	ldr	r2, [pc, #184]	@ (80075a0 <TIM_Base_SetConfig+0x140>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d013      	beq.n	8007512 <TIM_Base_SetConfig+0xb2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a2d      	ldr	r2, [pc, #180]	@ (80075a4 <TIM_Base_SetConfig+0x144>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00f      	beq.n	8007512 <TIM_Base_SetConfig+0xb2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a2c      	ldr	r2, [pc, #176]	@ (80075a8 <TIM_Base_SetConfig+0x148>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d00b      	beq.n	8007512 <TIM_Base_SetConfig+0xb2>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a2b      	ldr	r2, [pc, #172]	@ (80075ac <TIM_Base_SetConfig+0x14c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d007      	beq.n	8007512 <TIM_Base_SetConfig+0xb2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a2a      	ldr	r2, [pc, #168]	@ (80075b0 <TIM_Base_SetConfig+0x150>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d003      	beq.n	8007512 <TIM_Base_SetConfig+0xb2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a29      	ldr	r2, [pc, #164]	@ (80075b4 <TIM_Base_SetConfig+0x154>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d108      	bne.n	8007524 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	4313      	orrs	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a10      	ldr	r2, [pc, #64]	@ (800758c <TIM_Base_SetConfig+0x12c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d003      	beq.n	8007558 <TIM_Base_SetConfig+0xf8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a12      	ldr	r2, [pc, #72]	@ (800759c <TIM_Base_SetConfig+0x13c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d103      	bne.n	8007560 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	691a      	ldr	r2, [r3, #16]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b01      	cmp	r3, #1
 8007570:	d105      	bne.n	800757e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f023 0201 	bic.w	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	611a      	str	r2, [r3, #16]
  }
}
 800757e:	bf00      	nop
 8007580:	3714      	adds	r7, #20
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	40010000 	.word	0x40010000
 8007590:	40000400 	.word	0x40000400
 8007594:	40000800 	.word	0x40000800
 8007598:	40000c00 	.word	0x40000c00
 800759c:	40010400 	.word	0x40010400
 80075a0:	40014000 	.word	0x40014000
 80075a4:	40014400 	.word	0x40014400
 80075a8:	40014800 	.word	0x40014800
 80075ac:	40001800 	.word	0x40001800
 80075b0:	40001c00 	.word	0x40001c00
 80075b4:	40002000 	.word	0x40002000

080075b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	f023 0201 	bic.w	r2, r3, #1
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	011b      	lsls	r3, r3, #4
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f023 030a 	bic.w	r3, r3, #10
 80075f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007616:	b480      	push	{r7}
 8007618:	b087      	sub	sp, #28
 800761a:	af00      	add	r7, sp, #0
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	f023 0210 	bic.w	r2, r3, #16
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007640:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	031b      	lsls	r3, r3, #12
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4313      	orrs	r3, r2
 800764a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007652:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	4313      	orrs	r3, r2
 800765c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	621a      	str	r2, [r3, #32]
}
 800766a:	bf00      	nop
 800766c:	371c      	adds	r7, #28
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007676:	b480      	push	{r7}
 8007678:	b085      	sub	sp, #20
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800768c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4313      	orrs	r3, r2
 8007694:	f043 0307 	orr.w	r3, r3, #7
 8007698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	609a      	str	r2, [r3, #8]
}
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b087      	sub	sp, #28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	021a      	lsls	r2, r3, #8
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	431a      	orrs	r2, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	609a      	str	r2, [r3, #8]
}
 80076e0:	bf00      	nop
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d101      	bne.n	8007704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007700:	2302      	movs	r3, #2
 8007702:	e06d      	b.n	80077e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a30      	ldr	r2, [pc, #192]	@ (80077ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d004      	beq.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a2f      	ldr	r2, [pc, #188]	@ (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d108      	bne.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800773e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007750:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a20      	ldr	r2, [pc, #128]	@ (80077ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d022      	beq.n	80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007776:	d01d      	beq.n	80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a1d      	ldr	r2, [pc, #116]	@ (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d018      	beq.n	80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a1c      	ldr	r2, [pc, #112]	@ (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d013      	beq.n	80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a1a      	ldr	r2, [pc, #104]	@ (80077fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00e      	beq.n	80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a15      	ldr	r2, [pc, #84]	@ (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d009      	beq.n	80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a16      	ldr	r2, [pc, #88]	@ (8007800 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d004      	beq.n	80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a15      	ldr	r2, [pc, #84]	@ (8007804 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d10c      	bne.n	80077ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	40010000 	.word	0x40010000
 80077f0:	40010400 	.word	0x40010400
 80077f4:	40000400 	.word	0x40000400
 80077f8:	40000800 	.word	0x40000800
 80077fc:	40000c00 	.word	0x40000c00
 8007800:	40014000 	.word	0x40014000
 8007804:	40001800 	.word	0x40001800

08007808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e040      	b.n	800789c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800781e:	2b00      	cmp	r3, #0
 8007820:	d106      	bne.n	8007830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7f9 fcba 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2224      	movs	r2, #36	@ 0x24
 8007834:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 0201 	bic.w	r2, r2, #1
 8007844:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa8c 	bl	8007d6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f825 	bl	80078a4 <UART_SetConfig>
 800785a:	4603      	mov	r3, r0
 800785c:	2b01      	cmp	r3, #1
 800785e:	d101      	bne.n	8007864 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e01b      	b.n	800789c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0201 	orr.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fb0b 	bl	8007eb0 <UART_CheckIdleState>
 800789a:	4603      	mov	r3, r0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b088      	sub	sp, #32
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	431a      	orrs	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	4ba6      	ldr	r3, [pc, #664]	@ (8007b68 <UART_SetConfig+0x2c4>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6812      	ldr	r2, [r2, #0]
 80078d6:	6979      	ldr	r1, [r7, #20]
 80078d8:	430b      	orrs	r3, r1
 80078da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	4313      	orrs	r3, r2
 8007900:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	430a      	orrs	r2, r1
 8007914:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a94      	ldr	r2, [pc, #592]	@ (8007b6c <UART_SetConfig+0x2c8>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d120      	bne.n	8007962 <UART_SetConfig+0xbe>
 8007920:	4b93      	ldr	r3, [pc, #588]	@ (8007b70 <UART_SetConfig+0x2cc>)
 8007922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007926:	f003 0303 	and.w	r3, r3, #3
 800792a:	2b03      	cmp	r3, #3
 800792c:	d816      	bhi.n	800795c <UART_SetConfig+0xb8>
 800792e:	a201      	add	r2, pc, #4	@ (adr r2, 8007934 <UART_SetConfig+0x90>)
 8007930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007934:	08007945 	.word	0x08007945
 8007938:	08007951 	.word	0x08007951
 800793c:	0800794b 	.word	0x0800794b
 8007940:	08007957 	.word	0x08007957
 8007944:	2301      	movs	r3, #1
 8007946:	77fb      	strb	r3, [r7, #31]
 8007948:	e150      	b.n	8007bec <UART_SetConfig+0x348>
 800794a:	2302      	movs	r3, #2
 800794c:	77fb      	strb	r3, [r7, #31]
 800794e:	e14d      	b.n	8007bec <UART_SetConfig+0x348>
 8007950:	2304      	movs	r3, #4
 8007952:	77fb      	strb	r3, [r7, #31]
 8007954:	e14a      	b.n	8007bec <UART_SetConfig+0x348>
 8007956:	2308      	movs	r3, #8
 8007958:	77fb      	strb	r3, [r7, #31]
 800795a:	e147      	b.n	8007bec <UART_SetConfig+0x348>
 800795c:	2310      	movs	r3, #16
 800795e:	77fb      	strb	r3, [r7, #31]
 8007960:	e144      	b.n	8007bec <UART_SetConfig+0x348>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a83      	ldr	r2, [pc, #524]	@ (8007b74 <UART_SetConfig+0x2d0>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d132      	bne.n	80079d2 <UART_SetConfig+0x12e>
 800796c:	4b80      	ldr	r3, [pc, #512]	@ (8007b70 <UART_SetConfig+0x2cc>)
 800796e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007972:	f003 030c 	and.w	r3, r3, #12
 8007976:	2b0c      	cmp	r3, #12
 8007978:	d828      	bhi.n	80079cc <UART_SetConfig+0x128>
 800797a:	a201      	add	r2, pc, #4	@ (adr r2, 8007980 <UART_SetConfig+0xdc>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	080079b5 	.word	0x080079b5
 8007984:	080079cd 	.word	0x080079cd
 8007988:	080079cd 	.word	0x080079cd
 800798c:	080079cd 	.word	0x080079cd
 8007990:	080079c1 	.word	0x080079c1
 8007994:	080079cd 	.word	0x080079cd
 8007998:	080079cd 	.word	0x080079cd
 800799c:	080079cd 	.word	0x080079cd
 80079a0:	080079bb 	.word	0x080079bb
 80079a4:	080079cd 	.word	0x080079cd
 80079a8:	080079cd 	.word	0x080079cd
 80079ac:	080079cd 	.word	0x080079cd
 80079b0:	080079c7 	.word	0x080079c7
 80079b4:	2300      	movs	r3, #0
 80079b6:	77fb      	strb	r3, [r7, #31]
 80079b8:	e118      	b.n	8007bec <UART_SetConfig+0x348>
 80079ba:	2302      	movs	r3, #2
 80079bc:	77fb      	strb	r3, [r7, #31]
 80079be:	e115      	b.n	8007bec <UART_SetConfig+0x348>
 80079c0:	2304      	movs	r3, #4
 80079c2:	77fb      	strb	r3, [r7, #31]
 80079c4:	e112      	b.n	8007bec <UART_SetConfig+0x348>
 80079c6:	2308      	movs	r3, #8
 80079c8:	77fb      	strb	r3, [r7, #31]
 80079ca:	e10f      	b.n	8007bec <UART_SetConfig+0x348>
 80079cc:	2310      	movs	r3, #16
 80079ce:	77fb      	strb	r3, [r7, #31]
 80079d0:	e10c      	b.n	8007bec <UART_SetConfig+0x348>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a68      	ldr	r2, [pc, #416]	@ (8007b78 <UART_SetConfig+0x2d4>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d120      	bne.n	8007a1e <UART_SetConfig+0x17a>
 80079dc:	4b64      	ldr	r3, [pc, #400]	@ (8007b70 <UART_SetConfig+0x2cc>)
 80079de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80079e6:	2b30      	cmp	r3, #48	@ 0x30
 80079e8:	d013      	beq.n	8007a12 <UART_SetConfig+0x16e>
 80079ea:	2b30      	cmp	r3, #48	@ 0x30
 80079ec:	d814      	bhi.n	8007a18 <UART_SetConfig+0x174>
 80079ee:	2b20      	cmp	r3, #32
 80079f0:	d009      	beq.n	8007a06 <UART_SetConfig+0x162>
 80079f2:	2b20      	cmp	r3, #32
 80079f4:	d810      	bhi.n	8007a18 <UART_SetConfig+0x174>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <UART_SetConfig+0x15c>
 80079fa:	2b10      	cmp	r3, #16
 80079fc:	d006      	beq.n	8007a0c <UART_SetConfig+0x168>
 80079fe:	e00b      	b.n	8007a18 <UART_SetConfig+0x174>
 8007a00:	2300      	movs	r3, #0
 8007a02:	77fb      	strb	r3, [r7, #31]
 8007a04:	e0f2      	b.n	8007bec <UART_SetConfig+0x348>
 8007a06:	2302      	movs	r3, #2
 8007a08:	77fb      	strb	r3, [r7, #31]
 8007a0a:	e0ef      	b.n	8007bec <UART_SetConfig+0x348>
 8007a0c:	2304      	movs	r3, #4
 8007a0e:	77fb      	strb	r3, [r7, #31]
 8007a10:	e0ec      	b.n	8007bec <UART_SetConfig+0x348>
 8007a12:	2308      	movs	r3, #8
 8007a14:	77fb      	strb	r3, [r7, #31]
 8007a16:	e0e9      	b.n	8007bec <UART_SetConfig+0x348>
 8007a18:	2310      	movs	r3, #16
 8007a1a:	77fb      	strb	r3, [r7, #31]
 8007a1c:	e0e6      	b.n	8007bec <UART_SetConfig+0x348>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a56      	ldr	r2, [pc, #344]	@ (8007b7c <UART_SetConfig+0x2d8>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d120      	bne.n	8007a6a <UART_SetConfig+0x1c6>
 8007a28:	4b51      	ldr	r3, [pc, #324]	@ (8007b70 <UART_SetConfig+0x2cc>)
 8007a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a32:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a34:	d013      	beq.n	8007a5e <UART_SetConfig+0x1ba>
 8007a36:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a38:	d814      	bhi.n	8007a64 <UART_SetConfig+0x1c0>
 8007a3a:	2b80      	cmp	r3, #128	@ 0x80
 8007a3c:	d009      	beq.n	8007a52 <UART_SetConfig+0x1ae>
 8007a3e:	2b80      	cmp	r3, #128	@ 0x80
 8007a40:	d810      	bhi.n	8007a64 <UART_SetConfig+0x1c0>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <UART_SetConfig+0x1a8>
 8007a46:	2b40      	cmp	r3, #64	@ 0x40
 8007a48:	d006      	beq.n	8007a58 <UART_SetConfig+0x1b4>
 8007a4a:	e00b      	b.n	8007a64 <UART_SetConfig+0x1c0>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	77fb      	strb	r3, [r7, #31]
 8007a50:	e0cc      	b.n	8007bec <UART_SetConfig+0x348>
 8007a52:	2302      	movs	r3, #2
 8007a54:	77fb      	strb	r3, [r7, #31]
 8007a56:	e0c9      	b.n	8007bec <UART_SetConfig+0x348>
 8007a58:	2304      	movs	r3, #4
 8007a5a:	77fb      	strb	r3, [r7, #31]
 8007a5c:	e0c6      	b.n	8007bec <UART_SetConfig+0x348>
 8007a5e:	2308      	movs	r3, #8
 8007a60:	77fb      	strb	r3, [r7, #31]
 8007a62:	e0c3      	b.n	8007bec <UART_SetConfig+0x348>
 8007a64:	2310      	movs	r3, #16
 8007a66:	77fb      	strb	r3, [r7, #31]
 8007a68:	e0c0      	b.n	8007bec <UART_SetConfig+0x348>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a44      	ldr	r2, [pc, #272]	@ (8007b80 <UART_SetConfig+0x2dc>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d125      	bne.n	8007ac0 <UART_SetConfig+0x21c>
 8007a74:	4b3e      	ldr	r3, [pc, #248]	@ (8007b70 <UART_SetConfig+0x2cc>)
 8007a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a82:	d017      	beq.n	8007ab4 <UART_SetConfig+0x210>
 8007a84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a88:	d817      	bhi.n	8007aba <UART_SetConfig+0x216>
 8007a8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a8e:	d00b      	beq.n	8007aa8 <UART_SetConfig+0x204>
 8007a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a94:	d811      	bhi.n	8007aba <UART_SetConfig+0x216>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <UART_SetConfig+0x1fe>
 8007a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a9e:	d006      	beq.n	8007aae <UART_SetConfig+0x20a>
 8007aa0:	e00b      	b.n	8007aba <UART_SetConfig+0x216>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	77fb      	strb	r3, [r7, #31]
 8007aa6:	e0a1      	b.n	8007bec <UART_SetConfig+0x348>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	77fb      	strb	r3, [r7, #31]
 8007aac:	e09e      	b.n	8007bec <UART_SetConfig+0x348>
 8007aae:	2304      	movs	r3, #4
 8007ab0:	77fb      	strb	r3, [r7, #31]
 8007ab2:	e09b      	b.n	8007bec <UART_SetConfig+0x348>
 8007ab4:	2308      	movs	r3, #8
 8007ab6:	77fb      	strb	r3, [r7, #31]
 8007ab8:	e098      	b.n	8007bec <UART_SetConfig+0x348>
 8007aba:	2310      	movs	r3, #16
 8007abc:	77fb      	strb	r3, [r7, #31]
 8007abe:	e095      	b.n	8007bec <UART_SetConfig+0x348>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8007b84 <UART_SetConfig+0x2e0>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d125      	bne.n	8007b16 <UART_SetConfig+0x272>
 8007aca:	4b29      	ldr	r3, [pc, #164]	@ (8007b70 <UART_SetConfig+0x2cc>)
 8007acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ad4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ad8:	d017      	beq.n	8007b0a <UART_SetConfig+0x266>
 8007ada:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ade:	d817      	bhi.n	8007b10 <UART_SetConfig+0x26c>
 8007ae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ae4:	d00b      	beq.n	8007afe <UART_SetConfig+0x25a>
 8007ae6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aea:	d811      	bhi.n	8007b10 <UART_SetConfig+0x26c>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d003      	beq.n	8007af8 <UART_SetConfig+0x254>
 8007af0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007af4:	d006      	beq.n	8007b04 <UART_SetConfig+0x260>
 8007af6:	e00b      	b.n	8007b10 <UART_SetConfig+0x26c>
 8007af8:	2301      	movs	r3, #1
 8007afa:	77fb      	strb	r3, [r7, #31]
 8007afc:	e076      	b.n	8007bec <UART_SetConfig+0x348>
 8007afe:	2302      	movs	r3, #2
 8007b00:	77fb      	strb	r3, [r7, #31]
 8007b02:	e073      	b.n	8007bec <UART_SetConfig+0x348>
 8007b04:	2304      	movs	r3, #4
 8007b06:	77fb      	strb	r3, [r7, #31]
 8007b08:	e070      	b.n	8007bec <UART_SetConfig+0x348>
 8007b0a:	2308      	movs	r3, #8
 8007b0c:	77fb      	strb	r3, [r7, #31]
 8007b0e:	e06d      	b.n	8007bec <UART_SetConfig+0x348>
 8007b10:	2310      	movs	r3, #16
 8007b12:	77fb      	strb	r3, [r7, #31]
 8007b14:	e06a      	b.n	8007bec <UART_SetConfig+0x348>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8007b88 <UART_SetConfig+0x2e4>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d138      	bne.n	8007b92 <UART_SetConfig+0x2ee>
 8007b20:	4b13      	ldr	r3, [pc, #76]	@ (8007b70 <UART_SetConfig+0x2cc>)
 8007b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b26:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007b2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b2e:	d017      	beq.n	8007b60 <UART_SetConfig+0x2bc>
 8007b30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b34:	d82a      	bhi.n	8007b8c <UART_SetConfig+0x2e8>
 8007b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b3a:	d00b      	beq.n	8007b54 <UART_SetConfig+0x2b0>
 8007b3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b40:	d824      	bhi.n	8007b8c <UART_SetConfig+0x2e8>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <UART_SetConfig+0x2aa>
 8007b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b4a:	d006      	beq.n	8007b5a <UART_SetConfig+0x2b6>
 8007b4c:	e01e      	b.n	8007b8c <UART_SetConfig+0x2e8>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	77fb      	strb	r3, [r7, #31]
 8007b52:	e04b      	b.n	8007bec <UART_SetConfig+0x348>
 8007b54:	2302      	movs	r3, #2
 8007b56:	77fb      	strb	r3, [r7, #31]
 8007b58:	e048      	b.n	8007bec <UART_SetConfig+0x348>
 8007b5a:	2304      	movs	r3, #4
 8007b5c:	77fb      	strb	r3, [r7, #31]
 8007b5e:	e045      	b.n	8007bec <UART_SetConfig+0x348>
 8007b60:	2308      	movs	r3, #8
 8007b62:	77fb      	strb	r3, [r7, #31]
 8007b64:	e042      	b.n	8007bec <UART_SetConfig+0x348>
 8007b66:	bf00      	nop
 8007b68:	efff69f3 	.word	0xefff69f3
 8007b6c:	40011000 	.word	0x40011000
 8007b70:	40023800 	.word	0x40023800
 8007b74:	40004400 	.word	0x40004400
 8007b78:	40004800 	.word	0x40004800
 8007b7c:	40004c00 	.word	0x40004c00
 8007b80:	40005000 	.word	0x40005000
 8007b84:	40011400 	.word	0x40011400
 8007b88:	40007800 	.word	0x40007800
 8007b8c:	2310      	movs	r3, #16
 8007b8e:	77fb      	strb	r3, [r7, #31]
 8007b90:	e02c      	b.n	8007bec <UART_SetConfig+0x348>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a72      	ldr	r2, [pc, #456]	@ (8007d60 <UART_SetConfig+0x4bc>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d125      	bne.n	8007be8 <UART_SetConfig+0x344>
 8007b9c:	4b71      	ldr	r3, [pc, #452]	@ (8007d64 <UART_SetConfig+0x4c0>)
 8007b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007ba6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007baa:	d017      	beq.n	8007bdc <UART_SetConfig+0x338>
 8007bac:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007bb0:	d817      	bhi.n	8007be2 <UART_SetConfig+0x33e>
 8007bb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bb6:	d00b      	beq.n	8007bd0 <UART_SetConfig+0x32c>
 8007bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bbc:	d811      	bhi.n	8007be2 <UART_SetConfig+0x33e>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <UART_SetConfig+0x326>
 8007bc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bc6:	d006      	beq.n	8007bd6 <UART_SetConfig+0x332>
 8007bc8:	e00b      	b.n	8007be2 <UART_SetConfig+0x33e>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	77fb      	strb	r3, [r7, #31]
 8007bce:	e00d      	b.n	8007bec <UART_SetConfig+0x348>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	77fb      	strb	r3, [r7, #31]
 8007bd4:	e00a      	b.n	8007bec <UART_SetConfig+0x348>
 8007bd6:	2304      	movs	r3, #4
 8007bd8:	77fb      	strb	r3, [r7, #31]
 8007bda:	e007      	b.n	8007bec <UART_SetConfig+0x348>
 8007bdc:	2308      	movs	r3, #8
 8007bde:	77fb      	strb	r3, [r7, #31]
 8007be0:	e004      	b.n	8007bec <UART_SetConfig+0x348>
 8007be2:	2310      	movs	r3, #16
 8007be4:	77fb      	strb	r3, [r7, #31]
 8007be6:	e001      	b.n	8007bec <UART_SetConfig+0x348>
 8007be8:	2310      	movs	r3, #16
 8007bea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	69db      	ldr	r3, [r3, #28]
 8007bf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bf4:	d15b      	bne.n	8007cae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007bf6:	7ffb      	ldrb	r3, [r7, #31]
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d828      	bhi.n	8007c4e <UART_SetConfig+0x3aa>
 8007bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8007c04 <UART_SetConfig+0x360>)
 8007bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c02:	bf00      	nop
 8007c04:	08007c29 	.word	0x08007c29
 8007c08:	08007c31 	.word	0x08007c31
 8007c0c:	08007c39 	.word	0x08007c39
 8007c10:	08007c4f 	.word	0x08007c4f
 8007c14:	08007c3f 	.word	0x08007c3f
 8007c18:	08007c4f 	.word	0x08007c4f
 8007c1c:	08007c4f 	.word	0x08007c4f
 8007c20:	08007c4f 	.word	0x08007c4f
 8007c24:	08007c47 	.word	0x08007c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c28:	f7fe f8b2 	bl	8005d90 <HAL_RCC_GetPCLK1Freq>
 8007c2c:	61b8      	str	r0, [r7, #24]
        break;
 8007c2e:	e013      	b.n	8007c58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c30:	f7fe f8c2 	bl	8005db8 <HAL_RCC_GetPCLK2Freq>
 8007c34:	61b8      	str	r0, [r7, #24]
        break;
 8007c36:	e00f      	b.n	8007c58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c38:	4b4b      	ldr	r3, [pc, #300]	@ (8007d68 <UART_SetConfig+0x4c4>)
 8007c3a:	61bb      	str	r3, [r7, #24]
        break;
 8007c3c:	e00c      	b.n	8007c58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c3e:	f7fd ffd5 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8007c42:	61b8      	str	r0, [r7, #24]
        break;
 8007c44:	e008      	b.n	8007c58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c4a:	61bb      	str	r3, [r7, #24]
        break;
 8007c4c:	e004      	b.n	8007c58 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	77bb      	strb	r3, [r7, #30]
        break;
 8007c56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d074      	beq.n	8007d48 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	005a      	lsls	r2, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	085b      	lsrs	r3, r3, #1
 8007c68:	441a      	add	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	2b0f      	cmp	r3, #15
 8007c78:	d916      	bls.n	8007ca8 <UART_SetConfig+0x404>
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c80:	d212      	bcs.n	8007ca8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f023 030f 	bic.w	r3, r3, #15
 8007c8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	085b      	lsrs	r3, r3, #1
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	89fb      	ldrh	r3, [r7, #14]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	89fa      	ldrh	r2, [r7, #14]
 8007ca4:	60da      	str	r2, [r3, #12]
 8007ca6:	e04f      	b.n	8007d48 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	77bb      	strb	r3, [r7, #30]
 8007cac:	e04c      	b.n	8007d48 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cae:	7ffb      	ldrb	r3, [r7, #31]
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d828      	bhi.n	8007d06 <UART_SetConfig+0x462>
 8007cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cbc <UART_SetConfig+0x418>)
 8007cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cba:	bf00      	nop
 8007cbc:	08007ce1 	.word	0x08007ce1
 8007cc0:	08007ce9 	.word	0x08007ce9
 8007cc4:	08007cf1 	.word	0x08007cf1
 8007cc8:	08007d07 	.word	0x08007d07
 8007ccc:	08007cf7 	.word	0x08007cf7
 8007cd0:	08007d07 	.word	0x08007d07
 8007cd4:	08007d07 	.word	0x08007d07
 8007cd8:	08007d07 	.word	0x08007d07
 8007cdc:	08007cff 	.word	0x08007cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ce0:	f7fe f856 	bl	8005d90 <HAL_RCC_GetPCLK1Freq>
 8007ce4:	61b8      	str	r0, [r7, #24]
        break;
 8007ce6:	e013      	b.n	8007d10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ce8:	f7fe f866 	bl	8005db8 <HAL_RCC_GetPCLK2Freq>
 8007cec:	61b8      	str	r0, [r7, #24]
        break;
 8007cee:	e00f      	b.n	8007d10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d68 <UART_SetConfig+0x4c4>)
 8007cf2:	61bb      	str	r3, [r7, #24]
        break;
 8007cf4:	e00c      	b.n	8007d10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cf6:	f7fd ff79 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8007cfa:	61b8      	str	r0, [r7, #24]
        break;
 8007cfc:	e008      	b.n	8007d10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d02:	61bb      	str	r3, [r7, #24]
        break;
 8007d04:	e004      	b.n	8007d10 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	77bb      	strb	r3, [r7, #30]
        break;
 8007d0e:	bf00      	nop
    }

    if (pclk != 0U)
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d018      	beq.n	8007d48 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	085a      	lsrs	r2, r3, #1
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	441a      	add	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	2b0f      	cmp	r3, #15
 8007d2e:	d909      	bls.n	8007d44 <UART_SetConfig+0x4a0>
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d36:	d205      	bcs.n	8007d44 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	60da      	str	r2, [r3, #12]
 8007d42:	e001      	b.n	8007d48 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007d54:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3720      	adds	r7, #32
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	40007c00 	.word	0x40007c00
 8007d64:	40023800 	.word	0x40023800
 8007d68:	00f42400 	.word	0x00f42400

08007d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d78:	f003 0308 	and.w	r3, r3, #8
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00a      	beq.n	8007d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00a      	beq.n	8007db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	430a      	orrs	r2, r1
 8007db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dbc:	f003 0302 	and.w	r3, r3, #2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00a      	beq.n	8007dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dde:	f003 0304 	and.w	r3, r3, #4
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e00:	f003 0310 	and.w	r3, r3, #16
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00a      	beq.n	8007e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e22:	f003 0320 	and.w	r3, r3, #32
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d01a      	beq.n	8007e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e6a:	d10a      	bne.n	8007e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00a      	beq.n	8007ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	605a      	str	r2, [r3, #4]
  }
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08c      	sub	sp, #48	@ 0x30
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ec0:	f7fa ff9a 	bl	8002df8 <HAL_GetTick>
 8007ec4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0308 	and.w	r3, r3, #8
 8007ed0:	2b08      	cmp	r3, #8
 8007ed2:	d12e      	bne.n	8007f32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ed4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007edc:	2200      	movs	r2, #0
 8007ede:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f83b 	bl	8007f5e <UART_WaitOnFlagUntilTimeout>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d021      	beq.n	8007f32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	e853 3f00 	ldrex	r3, [r3]
 8007efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f02:	623b      	str	r3, [r7, #32]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	61fb      	str	r3, [r7, #28]
 8007f0e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	69b9      	ldr	r1, [r7, #24]
 8007f12:	69fa      	ldr	r2, [r7, #28]
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	617b      	str	r3, [r7, #20]
   return(result);
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e6      	bne.n	8007eee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2220      	movs	r2, #32
 8007f24:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e011      	b.n	8007f56 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3728      	adds	r7, #40	@ 0x28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	603b      	str	r3, [r7, #0]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f6e:	e04f      	b.n	8008010 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f76:	d04b      	beq.n	8008010 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f78:	f7fa ff3e 	bl	8002df8 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d302      	bcc.n	8007f8e <UART_WaitOnFlagUntilTimeout+0x30>
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e04e      	b.n	8008030 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d037      	beq.n	8008010 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b80      	cmp	r3, #128	@ 0x80
 8007fa4:	d034      	beq.n	8008010 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b40      	cmp	r3, #64	@ 0x40
 8007faa:	d031      	beq.n	8008010 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	f003 0308 	and.w	r3, r3, #8
 8007fb6:	2b08      	cmp	r3, #8
 8007fb8:	d110      	bne.n	8007fdc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2208      	movs	r2, #8
 8007fc0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 f838 	bl	8008038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2208      	movs	r2, #8
 8007fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e029      	b.n	8008030 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fea:	d111      	bne.n	8008010 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ff4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 f81e 	bl	8008038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e00f      	b.n	8008030 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69da      	ldr	r2, [r3, #28]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	4013      	ands	r3, r2
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	429a      	cmp	r2, r3
 800801e:	bf0c      	ite	eq
 8008020:	2301      	moveq	r3, #1
 8008022:	2300      	movne	r3, #0
 8008024:	b2db      	uxtb	r3, r3
 8008026:	461a      	mov	r2, r3
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	429a      	cmp	r2, r3
 800802c:	d0a0      	beq.n	8007f70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008038:	b480      	push	{r7}
 800803a:	b095      	sub	sp, #84	@ 0x54
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008048:	e853 3f00 	ldrex	r3, [r3]
 800804c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800804e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800805e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008060:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008062:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008066:	e841 2300 	strex	r3, r2, [r1]
 800806a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800806c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1e6      	bne.n	8008040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3308      	adds	r3, #8
 8008078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	61fb      	str	r3, [r7, #28]
   return(result);
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	f023 0301 	bic.w	r3, r3, #1
 8008088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3308      	adds	r3, #8
 8008090:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008094:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e5      	bne.n	8008072 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d118      	bne.n	80080e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	e853 3f00 	ldrex	r3, [r3]
 80080ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f023 0310 	bic.w	r3, r3, #16
 80080c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	461a      	mov	r2, r3
 80080ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080cc:	61bb      	str	r3, [r7, #24]
 80080ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d0:	6979      	ldr	r1, [r7, #20]
 80080d2:	69ba      	ldr	r2, [r7, #24]
 80080d4:	e841 2300 	strex	r3, r2, [r1]
 80080d8:	613b      	str	r3, [r7, #16]
   return(result);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1e6      	bne.n	80080ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2220      	movs	r2, #32
 80080e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80080f4:	bf00      	nop
 80080f6:	3754      	adds	r7, #84	@ 0x54
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d121      	bne.n	8008156 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	4b27      	ldr	r3, [pc, #156]	@ (80081b4 <FMC_SDRAM_Init+0xb4>)
 8008118:	4013      	ands	r3, r2
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	6851      	ldr	r1, [r2, #4]
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	6892      	ldr	r2, [r2, #8]
 8008122:	4311      	orrs	r1, r2
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	68d2      	ldr	r2, [r2, #12]
 8008128:	4311      	orrs	r1, r2
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	6912      	ldr	r2, [r2, #16]
 800812e:	4311      	orrs	r1, r2
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	6952      	ldr	r2, [r2, #20]
 8008134:	4311      	orrs	r1, r2
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	6992      	ldr	r2, [r2, #24]
 800813a:	4311      	orrs	r1, r2
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	69d2      	ldr	r2, [r2, #28]
 8008140:	4311      	orrs	r1, r2
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	6a12      	ldr	r2, [r2, #32]
 8008146:	4311      	orrs	r1, r2
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800814c:	430a      	orrs	r2, r1
 800814e:	431a      	orrs	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	e026      	b.n	80081a4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	69d9      	ldr	r1, [r3, #28]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	4319      	orrs	r1, r3
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800816c:	430b      	orrs	r3, r1
 800816e:	431a      	orrs	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	4b0e      	ldr	r3, [pc, #56]	@ (80081b4 <FMC_SDRAM_Init+0xb4>)
 800817a:	4013      	ands	r3, r2
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	6851      	ldr	r1, [r2, #4]
 8008180:	683a      	ldr	r2, [r7, #0]
 8008182:	6892      	ldr	r2, [r2, #8]
 8008184:	4311      	orrs	r1, r2
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	68d2      	ldr	r2, [r2, #12]
 800818a:	4311      	orrs	r1, r2
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	6912      	ldr	r2, [r2, #16]
 8008190:	4311      	orrs	r1, r2
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	6952      	ldr	r2, [r2, #20]
 8008196:	4311      	orrs	r1, r2
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	6992      	ldr	r2, [r2, #24]
 800819c:	430a      	orrs	r2, r1
 800819e:	431a      	orrs	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	ffff8000 	.word	0xffff8000

080081b8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d128      	bne.n	800821c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	1e59      	subs	r1, r3, #1
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	3b01      	subs	r3, #1
 80081de:	011b      	lsls	r3, r3, #4
 80081e0:	4319      	orrs	r1, r3
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	4319      	orrs	r1, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	031b      	lsls	r3, r3, #12
 80081f4:	4319      	orrs	r1, r3
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	041b      	lsls	r3, r3, #16
 80081fe:	4319      	orrs	r1, r3
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	3b01      	subs	r3, #1
 8008206:	051b      	lsls	r3, r3, #20
 8008208:	4319      	orrs	r1, r3
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	3b01      	subs	r3, #1
 8008210:	061b      	lsls	r3, r3, #24
 8008212:	430b      	orrs	r3, r1
 8008214:	431a      	orrs	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	609a      	str	r2, [r3, #8]
 800821a:	e02d      	b.n	8008278 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	4b19      	ldr	r3, [pc, #100]	@ (8008288 <FMC_SDRAM_Timing_Init+0xd0>)
 8008222:	4013      	ands	r3, r2
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	68d2      	ldr	r2, [r2, #12]
 8008228:	3a01      	subs	r2, #1
 800822a:	0311      	lsls	r1, r2, #12
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	6952      	ldr	r2, [r2, #20]
 8008230:	3a01      	subs	r2, #1
 8008232:	0512      	lsls	r2, r2, #20
 8008234:	430a      	orrs	r2, r1
 8008236:	431a      	orrs	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	1e59      	subs	r1, r3, #1
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	3b01      	subs	r3, #1
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	4319      	orrs	r1, r3
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	3b01      	subs	r3, #1
 800825a:	021b      	lsls	r3, r3, #8
 800825c:	4319      	orrs	r1, r3
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	3b01      	subs	r3, #1
 8008264:	041b      	lsls	r3, r3, #16
 8008266:	4319      	orrs	r1, r3
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	3b01      	subs	r3, #1
 800826e:	061b      	lsls	r3, r3, #24
 8008270:	430b      	orrs	r3, r1
 8008272:	431a      	orrs	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	ff0f0fff 	.word	0xff0f0fff

0800828c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	691a      	ldr	r2, [r3, #16]
 800829c:	4b0c      	ldr	r3, [pc, #48]	@ (80082d0 <FMC_SDRAM_SendCommand+0x44>)
 800829e:	4013      	ands	r3, r2
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	6811      	ldr	r1, [r2, #0]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	6852      	ldr	r2, [r2, #4]
 80082a8:	4311      	orrs	r1, r2
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	6892      	ldr	r2, [r2, #8]
 80082ae:	3a01      	subs	r2, #1
 80082b0:	0152      	lsls	r2, r2, #5
 80082b2:	4311      	orrs	r1, r2
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	68d2      	ldr	r2, [r2, #12]
 80082b8:	0252      	lsls	r2, r2, #9
 80082ba:	430a      	orrs	r2, r1
 80082bc:	431a      	orrs	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	ffc00000 	.word	0xffc00000

080082d4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	695a      	ldr	r2, [r3, #20]
 80082e2:	4b07      	ldr	r3, [pc, #28]	@ (8008300 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80082e4:	4013      	ands	r3, r2
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	0052      	lsls	r2, r2, #1
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	ffffc001 	.word	0xffffc001

08008304 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	607b      	str	r3, [r7, #4]
 800830c:	4603      	mov	r3, r0
 800830e:	81fb      	strh	r3, [r7, #14]
 8008310:	460b      	mov	r3, r1
 8008312:	81bb      	strh	r3, [r7, #12]
 8008314:	4613      	mov	r3, r2
 8008316:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 800831c:	89bb      	ldrh	r3, [r7, #12]
 800831e:	b2db      	uxtb	r3, r3
 8008320:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8008322:	89bb      	ldrh	r3, [r7, #12]
 8008324:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008328:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800832a:	2300      	movs	r3, #0
 800832c:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800832e:	f7f9 fb7d 	bl	8001a2c <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8008332:	89fb      	ldrh	r3, [r7, #14]
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2203      	movs	r2, #3
 8008338:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800833c:	4618      	mov	r0, r3
 800833e:	f001 fafb 	bl	8009938 <CODEC_IO_Write>
 8008342:	4603      	mov	r3, r0
 8008344:	461a      	mov	r2, r3
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	4413      	add	r3, r2
 800834a:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 800834c:	89fb      	ldrh	r3, [r7, #14]
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2200      	movs	r2, #0
 8008352:	f640 0117 	movw	r1, #2071	@ 0x817
 8008356:	4618      	mov	r0, r3
 8008358:	f001 faee 	bl	8009938 <CODEC_IO_Write>
 800835c:	4603      	mov	r3, r0
 800835e:	461a      	mov	r2, r3
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	4413      	add	r3, r2
 8008364:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8008366:	89fb      	ldrh	r3, [r7, #14]
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2200      	movs	r2, #0
 800836c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8008370:	4618      	mov	r0, r3
 8008372:	f001 fae1 	bl	8009938 <CODEC_IO_Write>
 8008376:	4603      	mov	r3, r0
 8008378:	461a      	mov	r2, r3
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8008380:	89fb      	ldrh	r3, [r7, #14]
 8008382:	b2db      	uxtb	r3, r3
 8008384:	226c      	movs	r2, #108	@ 0x6c
 8008386:	2139      	movs	r1, #57	@ 0x39
 8008388:	4618      	mov	r0, r3
 800838a:	f001 fad5 	bl	8009938 <CODEC_IO_Write>
 800838e:	4603      	mov	r3, r0
 8008390:	461a      	mov	r2, r3
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	4413      	add	r3, r2
 8008396:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8008398:	8afb      	ldrh	r3, [r7, #22]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00c      	beq.n	80083b8 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800839e:	89fb      	ldrh	r3, [r7, #14]
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2213      	movs	r2, #19
 80083a4:	2101      	movs	r1, #1
 80083a6:	4618      	mov	r0, r3
 80083a8:	f001 fac6 	bl	8009938 <CODEC_IO_Write>
 80083ac:	4603      	mov	r3, r0
 80083ae:	461a      	mov	r2, r3
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	4413      	add	r3, r2
 80083b4:	61fb      	str	r3, [r7, #28]
 80083b6:	e00b      	b.n	80083d0 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80083b8:	89fb      	ldrh	r3, [r7, #14]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2203      	movs	r2, #3
 80083be:	2101      	movs	r1, #1
 80083c0:	4618      	mov	r0, r3
 80083c2:	f001 fab9 	bl	8009938 <CODEC_IO_Write>
 80083c6:	4603      	mov	r3, r0
 80083c8:	461a      	mov	r2, r3
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	4413      	add	r3, r2
 80083ce:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 80083d0:	2032      	movs	r0, #50	@ 0x32
 80083d2:	f7f9 fb93 	bl	8001afc <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80083d6:	8b3b      	ldrh	r3, [r7, #24]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 815f 	beq.w	800869c <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 80083de:	4bae      	ldr	r3, [pc, #696]	@ (8008698 <wm8994_Init+0x394>)
 80083e0:	2201      	movs	r2, #1
 80083e2:	601a      	str	r2, [r3, #0]

    switch (output_device)
 80083e4:	8b3b      	ldrh	r3, [r7, #24]
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	f000 808c 	beq.w	8008504 <wm8994_Init+0x200>
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	f300 8111 	bgt.w	8008614 <wm8994_Init+0x310>
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d002      	beq.n	80083fc <wm8994_Init+0xf8>
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d042      	beq.n	8008480 <wm8994_Init+0x17c>
 80083fa:	e10b      	b.n	8008614 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80083fc:	89fb      	ldrh	r3, [r7, #14]
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8008404:	2105      	movs	r1, #5
 8008406:	4618      	mov	r0, r3
 8008408:	f001 fa96 	bl	8009938 <CODEC_IO_Write>
 800840c:	4603      	mov	r3, r0
 800840e:	461a      	mov	r2, r3
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	4413      	add	r3, r2
 8008414:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8008416:	89fb      	ldrh	r3, [r7, #14]
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2200      	movs	r2, #0
 800841c:	f240 6101 	movw	r1, #1537	@ 0x601
 8008420:	4618      	mov	r0, r3
 8008422:	f001 fa89 	bl	8009938 <CODEC_IO_Write>
 8008426:	4603      	mov	r3, r0
 8008428:	461a      	mov	r2, r3
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	4413      	add	r3, r2
 800842e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8008430:	89fb      	ldrh	r3, [r7, #14]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2200      	movs	r2, #0
 8008436:	f240 6102 	movw	r1, #1538	@ 0x602
 800843a:	4618      	mov	r0, r3
 800843c:	f001 fa7c 	bl	8009938 <CODEC_IO_Write>
 8008440:	4603      	mov	r3, r0
 8008442:	461a      	mov	r2, r3
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	4413      	add	r3, r2
 8008448:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800844a:	89fb      	ldrh	r3, [r7, #14]
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2202      	movs	r2, #2
 8008450:	f240 6104 	movw	r1, #1540	@ 0x604
 8008454:	4618      	mov	r0, r3
 8008456:	f001 fa6f 	bl	8009938 <CODEC_IO_Write>
 800845a:	4603      	mov	r3, r0
 800845c:	461a      	mov	r2, r3
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	4413      	add	r3, r2
 8008462:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8008464:	89fb      	ldrh	r3, [r7, #14]
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2202      	movs	r2, #2
 800846a:	f240 6105 	movw	r1, #1541	@ 0x605
 800846e:	4618      	mov	r0, r3
 8008470:	f001 fa62 	bl	8009938 <CODEC_IO_Write>
 8008474:	4603      	mov	r3, r0
 8008476:	461a      	mov	r2, r3
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	4413      	add	r3, r2
 800847c:	61fb      	str	r3, [r7, #28]
      break;
 800847e:	e110      	b.n	80086a2 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8008480:	89fb      	ldrh	r3, [r7, #14]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	f240 3203 	movw	r2, #771	@ 0x303
 8008488:	2105      	movs	r1, #5
 800848a:	4618      	mov	r0, r3
 800848c:	f001 fa54 	bl	8009938 <CODEC_IO_Write>
 8008490:	4603      	mov	r3, r0
 8008492:	461a      	mov	r2, r3
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	4413      	add	r3, r2
 8008498:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800849a:	89fb      	ldrh	r3, [r7, #14]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2201      	movs	r2, #1
 80084a0:	f240 6101 	movw	r1, #1537	@ 0x601
 80084a4:	4618      	mov	r0, r3
 80084a6:	f001 fa47 	bl	8009938 <CODEC_IO_Write>
 80084aa:	4603      	mov	r3, r0
 80084ac:	461a      	mov	r2, r3
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	4413      	add	r3, r2
 80084b2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80084b4:	89fb      	ldrh	r3, [r7, #14]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2201      	movs	r2, #1
 80084ba:	f240 6102 	movw	r1, #1538	@ 0x602
 80084be:	4618      	mov	r0, r3
 80084c0:	f001 fa3a 	bl	8009938 <CODEC_IO_Write>
 80084c4:	4603      	mov	r3, r0
 80084c6:	461a      	mov	r2, r3
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	4413      	add	r3, r2
 80084cc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80084ce:	89fb      	ldrh	r3, [r7, #14]
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2200      	movs	r2, #0
 80084d4:	f240 6104 	movw	r1, #1540	@ 0x604
 80084d8:	4618      	mov	r0, r3
 80084da:	f001 fa2d 	bl	8009938 <CODEC_IO_Write>
 80084de:	4603      	mov	r3, r0
 80084e0:	461a      	mov	r2, r3
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4413      	add	r3, r2
 80084e6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80084e8:	89fb      	ldrh	r3, [r7, #14]
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2200      	movs	r2, #0
 80084ee:	f240 6105 	movw	r1, #1541	@ 0x605
 80084f2:	4618      	mov	r0, r3
 80084f4:	f001 fa20 	bl	8009938 <CODEC_IO_Write>
 80084f8:	4603      	mov	r3, r0
 80084fa:	461a      	mov	r2, r3
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	4413      	add	r3, r2
 8008500:	61fb      	str	r3, [r7, #28]
      break;
 8008502:	e0ce      	b.n	80086a2 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8008504:	8afb      	ldrh	r3, [r7, #22]
 8008506:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800850a:	d141      	bne.n	8008590 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800850c:	89fb      	ldrh	r3, [r7, #14]
 800850e:	b2db      	uxtb	r3, r3
 8008510:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8008514:	2105      	movs	r1, #5
 8008516:	4618      	mov	r0, r3
 8008518:	f001 fa0e 	bl	8009938 <CODEC_IO_Write>
 800851c:	4603      	mov	r3, r0
 800851e:	461a      	mov	r2, r3
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	4413      	add	r3, r2
 8008524:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8008526:	89fb      	ldrh	r3, [r7, #14]
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2203      	movs	r2, #3
 800852c:	f240 6101 	movw	r1, #1537	@ 0x601
 8008530:	4618      	mov	r0, r3
 8008532:	f001 fa01 	bl	8009938 <CODEC_IO_Write>
 8008536:	4603      	mov	r3, r0
 8008538:	461a      	mov	r2, r3
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	4413      	add	r3, r2
 800853e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8008540:	89fb      	ldrh	r3, [r7, #14]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2203      	movs	r2, #3
 8008546:	f240 6102 	movw	r1, #1538	@ 0x602
 800854a:	4618      	mov	r0, r3
 800854c:	f001 f9f4 	bl	8009938 <CODEC_IO_Write>
 8008550:	4603      	mov	r3, r0
 8008552:	461a      	mov	r2, r3
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	4413      	add	r3, r2
 8008558:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800855a:	89fb      	ldrh	r3, [r7, #14]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2203      	movs	r2, #3
 8008560:	f240 6104 	movw	r1, #1540	@ 0x604
 8008564:	4618      	mov	r0, r3
 8008566:	f001 f9e7 	bl	8009938 <CODEC_IO_Write>
 800856a:	4603      	mov	r3, r0
 800856c:	461a      	mov	r2, r3
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	4413      	add	r3, r2
 8008572:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8008574:	89fb      	ldrh	r3, [r7, #14]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2203      	movs	r2, #3
 800857a:	f240 6105 	movw	r1, #1541	@ 0x605
 800857e:	4618      	mov	r0, r3
 8008580:	f001 f9da 	bl	8009938 <CODEC_IO_Write>
 8008584:	4603      	mov	r3, r0
 8008586:	461a      	mov	r2, r3
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	4413      	add	r3, r2
 800858c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 800858e:	e088      	b.n	80086a2 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8008590:	89fb      	ldrh	r3, [r7, #14]
 8008592:	b2db      	uxtb	r3, r3
 8008594:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8008598:	2105      	movs	r1, #5
 800859a:	4618      	mov	r0, r3
 800859c:	f001 f9cc 	bl	8009938 <CODEC_IO_Write>
 80085a0:	4603      	mov	r3, r0
 80085a2:	461a      	mov	r2, r3
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	4413      	add	r3, r2
 80085a8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80085aa:	89fb      	ldrh	r3, [r7, #14]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2201      	movs	r2, #1
 80085b0:	f240 6101 	movw	r1, #1537	@ 0x601
 80085b4:	4618      	mov	r0, r3
 80085b6:	f001 f9bf 	bl	8009938 <CODEC_IO_Write>
 80085ba:	4603      	mov	r3, r0
 80085bc:	461a      	mov	r2, r3
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	4413      	add	r3, r2
 80085c2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80085c4:	89fb      	ldrh	r3, [r7, #14]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2201      	movs	r2, #1
 80085ca:	f240 6102 	movw	r1, #1538	@ 0x602
 80085ce:	4618      	mov	r0, r3
 80085d0:	f001 f9b2 	bl	8009938 <CODEC_IO_Write>
 80085d4:	4603      	mov	r3, r0
 80085d6:	461a      	mov	r2, r3
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	4413      	add	r3, r2
 80085dc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80085de:	89fb      	ldrh	r3, [r7, #14]
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	2202      	movs	r2, #2
 80085e4:	f240 6104 	movw	r1, #1540	@ 0x604
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 f9a5 	bl	8009938 <CODEC_IO_Write>
 80085ee:	4603      	mov	r3, r0
 80085f0:	461a      	mov	r2, r3
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	4413      	add	r3, r2
 80085f6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80085f8:	89fb      	ldrh	r3, [r7, #14]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2202      	movs	r2, #2
 80085fe:	f240 6105 	movw	r1, #1541	@ 0x605
 8008602:	4618      	mov	r0, r3
 8008604:	f001 f998 	bl	8009938 <CODEC_IO_Write>
 8008608:	4603      	mov	r3, r0
 800860a:	461a      	mov	r2, r3
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	4413      	add	r3, r2
 8008610:	61fb      	str	r3, [r7, #28]
      break;
 8008612:	e046      	b.n	80086a2 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8008614:	89fb      	ldrh	r3, [r7, #14]
 8008616:	b2db      	uxtb	r3, r3
 8008618:	f240 3203 	movw	r2, #771	@ 0x303
 800861c:	2105      	movs	r1, #5
 800861e:	4618      	mov	r0, r3
 8008620:	f001 f98a 	bl	8009938 <CODEC_IO_Write>
 8008624:	4603      	mov	r3, r0
 8008626:	461a      	mov	r2, r3
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	4413      	add	r3, r2
 800862c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800862e:	89fb      	ldrh	r3, [r7, #14]
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2201      	movs	r2, #1
 8008634:	f240 6101 	movw	r1, #1537	@ 0x601
 8008638:	4618      	mov	r0, r3
 800863a:	f001 f97d 	bl	8009938 <CODEC_IO_Write>
 800863e:	4603      	mov	r3, r0
 8008640:	461a      	mov	r2, r3
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	4413      	add	r3, r2
 8008646:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8008648:	89fb      	ldrh	r3, [r7, #14]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2201      	movs	r2, #1
 800864e:	f240 6102 	movw	r1, #1538	@ 0x602
 8008652:	4618      	mov	r0, r3
 8008654:	f001 f970 	bl	8009938 <CODEC_IO_Write>
 8008658:	4603      	mov	r3, r0
 800865a:	461a      	mov	r2, r3
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	4413      	add	r3, r2
 8008660:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8008662:	89fb      	ldrh	r3, [r7, #14]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2200      	movs	r2, #0
 8008668:	f240 6104 	movw	r1, #1540	@ 0x604
 800866c:	4618      	mov	r0, r3
 800866e:	f001 f963 	bl	8009938 <CODEC_IO_Write>
 8008672:	4603      	mov	r3, r0
 8008674:	461a      	mov	r2, r3
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	4413      	add	r3, r2
 800867a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800867c:	89fb      	ldrh	r3, [r7, #14]
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2200      	movs	r2, #0
 8008682:	f240 6105 	movw	r1, #1541	@ 0x605
 8008686:	4618      	mov	r0, r3
 8008688:	f001 f956 	bl	8009938 <CODEC_IO_Write>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	4413      	add	r3, r2
 8008694:	61fb      	str	r3, [r7, #28]
      break;
 8008696:	e004      	b.n	80086a2 <wm8994_Init+0x39e>
 8008698:	2000245c 	.word	0x2000245c
    }
  }
  else
  {
    outputEnabled = 0;
 800869c:	4b99      	ldr	r3, [pc, #612]	@ (8008904 <wm8994_Init+0x600>)
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80086a2:	8afb      	ldrh	r3, [r7, #22]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 81ab 	beq.w	8008a00 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 80086aa:	4b97      	ldr	r3, [pc, #604]	@ (8008908 <wm8994_Init+0x604>)
 80086ac:	2201      	movs	r2, #1
 80086ae:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80086b0:	8afb      	ldrh	r3, [r7, #22]
 80086b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086b6:	f000 8129 	beq.w	800890c <wm8994_Init+0x608>
 80086ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086be:	f300 819b 	bgt.w	80089f8 <wm8994_Init+0x6f4>
 80086c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086c6:	d05a      	beq.n	800877e <wm8994_Init+0x47a>
 80086c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086cc:	f300 8194 	bgt.w	80089f8 <wm8994_Init+0x6f4>
 80086d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086d4:	f000 80c6 	beq.w	8008864 <wm8994_Init+0x560>
 80086d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086dc:	f040 818c 	bne.w	80089f8 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80086e0:	89fb      	ldrh	r3, [r7, #14]
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 80086e8:	2104      	movs	r1, #4
 80086ea:	4618      	mov	r0, r3
 80086ec:	f001 f924 	bl	8009938 <CODEC_IO_Write>
 80086f0:	4603      	mov	r3, r0
 80086f2:	461a      	mov	r2, r3
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	4413      	add	r3, r2
 80086f8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80086fa:	89fb      	ldrh	r3, [r7, #14]
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	22db      	movs	r2, #219	@ 0xdb
 8008700:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8008704:	4618      	mov	r0, r3
 8008706:	f001 f917 	bl	8009938 <CODEC_IO_Write>
 800870a:	4603      	mov	r3, r0
 800870c:	461a      	mov	r2, r3
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	4413      	add	r3, r2
 8008712:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8008714:	89fb      	ldrh	r3, [r7, #14]
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 800871c:	2102      	movs	r1, #2
 800871e:	4618      	mov	r0, r3
 8008720:	f001 f90a 	bl	8009938 <CODEC_IO_Write>
 8008724:	4603      	mov	r3, r0
 8008726:	461a      	mov	r2, r3
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	4413      	add	r3, r2
 800872c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800872e:	89fb      	ldrh	r3, [r7, #14]
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2202      	movs	r2, #2
 8008734:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8008738:	4618      	mov	r0, r3
 800873a:	f001 f8fd 	bl	8009938 <CODEC_IO_Write>
 800873e:	4603      	mov	r3, r0
 8008740:	461a      	mov	r2, r3
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	4413      	add	r3, r2
 8008746:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8008748:	89fb      	ldrh	r3, [r7, #14]
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2202      	movs	r2, #2
 800874e:	f240 6109 	movw	r1, #1545	@ 0x609
 8008752:	4618      	mov	r0, r3
 8008754:	f001 f8f0 	bl	8009938 <CODEC_IO_Write>
 8008758:	4603      	mov	r3, r0
 800875a:	461a      	mov	r2, r3
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	4413      	add	r3, r2
 8008760:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8008762:	89fb      	ldrh	r3, [r7, #14]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	220e      	movs	r2, #14
 8008768:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800876c:	4618      	mov	r0, r3
 800876e:	f001 f8e3 	bl	8009938 <CODEC_IO_Write>
 8008772:	4603      	mov	r3, r0
 8008774:	461a      	mov	r2, r3
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	61fb      	str	r3, [r7, #28]
      break;
 800877c:	e143      	b.n	8008a06 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800877e:	89fb      	ldrh	r3, [r7, #14]
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2211      	movs	r2, #17
 8008784:	2128      	movs	r1, #40	@ 0x28
 8008786:	4618      	mov	r0, r3
 8008788:	f001 f8d6 	bl	8009938 <CODEC_IO_Write>
 800878c:	4603      	mov	r3, r0
 800878e:	461a      	mov	r2, r3
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	4413      	add	r3, r2
 8008794:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8008796:	89fb      	ldrh	r3, [r7, #14]
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2235      	movs	r2, #53	@ 0x35
 800879c:	2129      	movs	r1, #41	@ 0x29
 800879e:	4618      	mov	r0, r3
 80087a0:	f001 f8ca 	bl	8009938 <CODEC_IO_Write>
 80087a4:	4603      	mov	r3, r0
 80087a6:	461a      	mov	r2, r3
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	4413      	add	r3, r2
 80087ac:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80087ae:	89fb      	ldrh	r3, [r7, #14]
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2235      	movs	r2, #53	@ 0x35
 80087b4:	212a      	movs	r1, #42	@ 0x2a
 80087b6:	4618      	mov	r0, r3
 80087b8:	f001 f8be 	bl	8009938 <CODEC_IO_Write>
 80087bc:	4603      	mov	r3, r0
 80087be:	461a      	mov	r2, r3
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	4413      	add	r3, r2
 80087c4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80087c6:	89fb      	ldrh	r3, [r7, #14]
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	f240 3203 	movw	r2, #771	@ 0x303
 80087ce:	2104      	movs	r1, #4
 80087d0:	4618      	mov	r0, r3
 80087d2:	f001 f8b1 	bl	8009938 <CODEC_IO_Write>
 80087d6:	4603      	mov	r3, r0
 80087d8:	461a      	mov	r2, r3
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	4413      	add	r3, r2
 80087de:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80087e0:	89fb      	ldrh	r3, [r7, #14]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	22db      	movs	r2, #219	@ 0xdb
 80087e6:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80087ea:	4618      	mov	r0, r3
 80087ec:	f001 f8a4 	bl	8009938 <CODEC_IO_Write>
 80087f0:	4603      	mov	r3, r0
 80087f2:	461a      	mov	r2, r3
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	4413      	add	r3, r2
 80087f8:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80087fa:	89fb      	ldrh	r3, [r7, #14]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	f246 3250 	movw	r2, #25424	@ 0x6350
 8008802:	2102      	movs	r1, #2
 8008804:	4618      	mov	r0, r3
 8008806:	f001 f897 	bl	8009938 <CODEC_IO_Write>
 800880a:	4603      	mov	r3, r0
 800880c:	461a      	mov	r2, r3
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	4413      	add	r3, r2
 8008812:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8008814:	89fb      	ldrh	r3, [r7, #14]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2202      	movs	r2, #2
 800881a:	f240 6106 	movw	r1, #1542	@ 0x606
 800881e:	4618      	mov	r0, r3
 8008820:	f001 f88a 	bl	8009938 <CODEC_IO_Write>
 8008824:	4603      	mov	r3, r0
 8008826:	461a      	mov	r2, r3
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	4413      	add	r3, r2
 800882c:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800882e:	89fb      	ldrh	r3, [r7, #14]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2202      	movs	r2, #2
 8008834:	f240 6107 	movw	r1, #1543	@ 0x607
 8008838:	4618      	mov	r0, r3
 800883a:	f001 f87d 	bl	8009938 <CODEC_IO_Write>
 800883e:	4603      	mov	r3, r0
 8008840:	461a      	mov	r2, r3
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	4413      	add	r3, r2
 8008846:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8008848:	89fb      	ldrh	r3, [r7, #14]
 800884a:	b2db      	uxtb	r3, r3
 800884c:	220d      	movs	r2, #13
 800884e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8008852:	4618      	mov	r0, r3
 8008854:	f001 f870 	bl	8009938 <CODEC_IO_Write>
 8008858:	4603      	mov	r3, r0
 800885a:	461a      	mov	r2, r3
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	4413      	add	r3, r2
 8008860:	61fb      	str	r3, [r7, #28]
      break;
 8008862:	e0d0      	b.n	8008a06 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8008864:	89fb      	ldrh	r3, [r7, #14]
 8008866:	b2db      	uxtb	r3, r3
 8008868:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 800886c:	2104      	movs	r1, #4
 800886e:	4618      	mov	r0, r3
 8008870:	f001 f862 	bl	8009938 <CODEC_IO_Write>
 8008874:	4603      	mov	r3, r0
 8008876:	461a      	mov	r2, r3
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	4413      	add	r3, r2
 800887c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800887e:	89fb      	ldrh	r3, [r7, #14]
 8008880:	b2db      	uxtb	r3, r3
 8008882:	22db      	movs	r2, #219	@ 0xdb
 8008884:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8008888:	4618      	mov	r0, r3
 800888a:	f001 f855 	bl	8009938 <CODEC_IO_Write>
 800888e:	4603      	mov	r3, r0
 8008890:	461a      	mov	r2, r3
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	4413      	add	r3, r2
 8008896:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8008898:	89fb      	ldrh	r3, [r7, #14]
 800889a:	b2db      	uxtb	r3, r3
 800889c:	f246 3250 	movw	r2, #25424	@ 0x6350
 80088a0:	2102      	movs	r1, #2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 f848 	bl	8009938 <CODEC_IO_Write>
 80088a8:	4603      	mov	r3, r0
 80088aa:	461a      	mov	r2, r3
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	4413      	add	r3, r2
 80088b0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80088b2:	89fb      	ldrh	r3, [r7, #14]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2202      	movs	r2, #2
 80088b8:	f240 6106 	movw	r1, #1542	@ 0x606
 80088bc:	4618      	mov	r0, r3
 80088be:	f001 f83b 	bl	8009938 <CODEC_IO_Write>
 80088c2:	4603      	mov	r3, r0
 80088c4:	461a      	mov	r2, r3
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	4413      	add	r3, r2
 80088ca:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80088cc:	89fb      	ldrh	r3, [r7, #14]
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2202      	movs	r2, #2
 80088d2:	f240 6107 	movw	r1, #1543	@ 0x607
 80088d6:	4618      	mov	r0, r3
 80088d8:	f001 f82e 	bl	8009938 <CODEC_IO_Write>
 80088dc:	4603      	mov	r3, r0
 80088de:	461a      	mov	r2, r3
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	4413      	add	r3, r2
 80088e4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80088e6:	89fb      	ldrh	r3, [r7, #14]
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	220d      	movs	r2, #13
 80088ec:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80088f0:	4618      	mov	r0, r3
 80088f2:	f001 f821 	bl	8009938 <CODEC_IO_Write>
 80088f6:	4603      	mov	r3, r0
 80088f8:	461a      	mov	r2, r3
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	4413      	add	r3, r2
 80088fe:	61fb      	str	r3, [r7, #28]
      break; 
 8008900:	e081      	b.n	8008a06 <wm8994_Init+0x702>
 8008902:	bf00      	nop
 8008904:	2000245c 	.word	0x2000245c
 8008908:	20002460 	.word	0x20002460
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 800890c:	89fb      	ldrh	r3, [r7, #14]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8008914:	2104      	movs	r1, #4
 8008916:	4618      	mov	r0, r3
 8008918:	f001 f80e 	bl	8009938 <CODEC_IO_Write>
 800891c:	4603      	mov	r3, r0
 800891e:	461a      	mov	r2, r3
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	4413      	add	r3, r2
 8008924:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8008926:	89fb      	ldrh	r3, [r7, #14]
 8008928:	b2db      	uxtb	r3, r3
 800892a:	22db      	movs	r2, #219	@ 0xdb
 800892c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8008930:	4618      	mov	r0, r3
 8008932:	f001 f801 	bl	8009938 <CODEC_IO_Write>
 8008936:	4603      	mov	r3, r0
 8008938:	461a      	mov	r2, r3
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	4413      	add	r3, r2
 800893e:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8008940:	89fb      	ldrh	r3, [r7, #14]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	22db      	movs	r2, #219	@ 0xdb
 8008946:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fff4 	bl	8009938 <CODEC_IO_Write>
 8008950:	4603      	mov	r3, r0
 8008952:	461a      	mov	r2, r3
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	4413      	add	r3, r2
 8008958:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800895a:	89fb      	ldrh	r3, [r7, #14]
 800895c:	b2db      	uxtb	r3, r3
 800895e:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8008962:	2102      	movs	r1, #2
 8008964:	4618      	mov	r0, r3
 8008966:	f000 ffe7 	bl	8009938 <CODEC_IO_Write>
 800896a:	4603      	mov	r3, r0
 800896c:	461a      	mov	r2, r3
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	4413      	add	r3, r2
 8008972:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8008974:	89fb      	ldrh	r3, [r7, #14]
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2202      	movs	r2, #2
 800897a:	f240 6106 	movw	r1, #1542	@ 0x606
 800897e:	4618      	mov	r0, r3
 8008980:	f000 ffda 	bl	8009938 <CODEC_IO_Write>
 8008984:	4603      	mov	r3, r0
 8008986:	461a      	mov	r2, r3
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	4413      	add	r3, r2
 800898c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800898e:	89fb      	ldrh	r3, [r7, #14]
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2202      	movs	r2, #2
 8008994:	f240 6107 	movw	r1, #1543	@ 0x607
 8008998:	4618      	mov	r0, r3
 800899a:	f000 ffcd 	bl	8009938 <CODEC_IO_Write>
 800899e:	4603      	mov	r3, r0
 80089a0:	461a      	mov	r2, r3
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	4413      	add	r3, r2
 80089a6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80089a8:	89fb      	ldrh	r3, [r7, #14]
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2202      	movs	r2, #2
 80089ae:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 ffc0 	bl	8009938 <CODEC_IO_Write>
 80089b8:	4603      	mov	r3, r0
 80089ba:	461a      	mov	r2, r3
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	4413      	add	r3, r2
 80089c0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80089c2:	89fb      	ldrh	r3, [r7, #14]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2202      	movs	r2, #2
 80089c8:	f240 6109 	movw	r1, #1545	@ 0x609
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 ffb3 	bl	8009938 <CODEC_IO_Write>
 80089d2:	4603      	mov	r3, r0
 80089d4:	461a      	mov	r2, r3
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	4413      	add	r3, r2
 80089da:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80089dc:	89fb      	ldrh	r3, [r7, #14]
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	220d      	movs	r2, #13
 80089e2:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 ffa6 	bl	8009938 <CODEC_IO_Write>
 80089ec:	4603      	mov	r3, r0
 80089ee:	461a      	mov	r2, r3
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	4413      	add	r3, r2
 80089f4:	61fb      	str	r3, [r7, #28]
      break;    
 80089f6:	e006      	b.n	8008a06 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	3301      	adds	r3, #1
 80089fc:	61fb      	str	r3, [r7, #28]
      break;
 80089fe:	e002      	b.n	8008a06 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8008a00:	4ba4      	ldr	r3, [pc, #656]	@ (8008c94 <wm8994_Init+0x990>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4aa3      	ldr	r2, [pc, #652]	@ (8008c98 <wm8994_Init+0x994>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d079      	beq.n	8008b02 <wm8994_Init+0x7fe>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4aa1      	ldr	r2, [pc, #644]	@ (8008c98 <wm8994_Init+0x994>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	f200 80ad 	bhi.w	8008b72 <wm8994_Init+0x86e>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d061      	beq.n	8008ae6 <wm8994_Init+0x7e2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	f200 80a2 	bhi.w	8008b72 <wm8994_Init+0x86e>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8008a34:	4293      	cmp	r3, r2
 8008a36:	f000 808e 	beq.w	8008b56 <wm8994_Init+0x852>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8008a40:	4293      	cmp	r3, r2
 8008a42:	f200 8096 	bhi.w	8008b72 <wm8994_Init+0x86e>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8008a4c:	d03d      	beq.n	8008aca <wm8994_Init+0x7c6>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8008a54:	f200 808d 	bhi.w	8008b72 <wm8994_Init+0x86e>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f245 6222 	movw	r2, #22050	@ 0x5622
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d06b      	beq.n	8008b3a <wm8994_Init+0x836>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f245 6222 	movw	r2, #22050	@ 0x5622
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	f200 8082 	bhi.w	8008b72 <wm8994_Init+0x86e>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8008a74:	d01b      	beq.n	8008aae <wm8994_Init+0x7aa>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8008a7c:	d879      	bhi.n	8008b72 <wm8994_Init+0x86e>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8008a84:	d005      	beq.n	8008a92 <wm8994_Init+0x78e>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d046      	beq.n	8008b1e <wm8994_Init+0x81a>
 8008a90:	e06f      	b.n	8008b72 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8008a92:	89fb      	ldrh	r3, [r7, #14]
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2203      	movs	r2, #3
 8008a98:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 ff4b 	bl	8009938 <CODEC_IO_Write>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	61fb      	str	r3, [r7, #28]
    break;
 8008aac:	e06f      	b.n	8008b8e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8008aae:	89fb      	ldrh	r3, [r7, #14]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2233      	movs	r2, #51	@ 0x33
 8008ab4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 ff3d 	bl	8009938 <CODEC_IO_Write>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	61fb      	str	r3, [r7, #28]
    break;
 8008ac8:	e061      	b.n	8008b8e <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8008aca:	89fb      	ldrh	r3, [r7, #14]
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2263      	movs	r2, #99	@ 0x63
 8008ad0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 ff2f 	bl	8009938 <CODEC_IO_Write>
 8008ada:	4603      	mov	r3, r0
 8008adc:	461a      	mov	r2, r3
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	61fb      	str	r3, [r7, #28]
    break;
 8008ae4:	e053      	b.n	8008b8e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8008ae6:	89fb      	ldrh	r3, [r7, #14]
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2283      	movs	r2, #131	@ 0x83
 8008aec:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 ff21 	bl	8009938 <CODEC_IO_Write>
 8008af6:	4603      	mov	r3, r0
 8008af8:	461a      	mov	r2, r3
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	4413      	add	r3, r2
 8008afe:	61fb      	str	r3, [r7, #28]
    break;
 8008b00:	e045      	b.n	8008b8e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8008b02:	89fb      	ldrh	r3, [r7, #14]
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	22a3      	movs	r2, #163	@ 0xa3
 8008b08:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 ff13 	bl	8009938 <CODEC_IO_Write>
 8008b12:	4603      	mov	r3, r0
 8008b14:	461a      	mov	r2, r3
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	4413      	add	r3, r2
 8008b1a:	61fb      	str	r3, [r7, #28]
    break;
 8008b1c:	e037      	b.n	8008b8e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8008b1e:	89fb      	ldrh	r3, [r7, #14]
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2213      	movs	r2, #19
 8008b24:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 ff05 	bl	8009938 <CODEC_IO_Write>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	461a      	mov	r2, r3
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	4413      	add	r3, r2
 8008b36:	61fb      	str	r3, [r7, #28]
    break;
 8008b38:	e029      	b.n	8008b8e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8008b3a:	89fb      	ldrh	r3, [r7, #14]
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2243      	movs	r2, #67	@ 0x43
 8008b40:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008b44:	4618      	mov	r0, r3
 8008b46:	f000 fef7 	bl	8009938 <CODEC_IO_Write>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	4413      	add	r3, r2
 8008b52:	61fb      	str	r3, [r7, #28]
    break;
 8008b54:	e01b      	b.n	8008b8e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8008b56:	89fb      	ldrh	r3, [r7, #14]
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2273      	movs	r2, #115	@ 0x73
 8008b5c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 fee9 	bl	8009938 <CODEC_IO_Write>
 8008b66:	4603      	mov	r3, r0
 8008b68:	461a      	mov	r2, r3
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	61fb      	str	r3, [r7, #28]
    break; 
 8008b70:	e00d      	b.n	8008b8e <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8008b72:	89fb      	ldrh	r3, [r7, #14]
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2283      	movs	r2, #131	@ 0x83
 8008b78:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 fedb 	bl	8009938 <CODEC_IO_Write>
 8008b82:	4603      	mov	r3, r0
 8008b84:	461a      	mov	r2, r3
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	4413      	add	r3, r2
 8008b8a:	61fb      	str	r3, [r7, #28]
    break; 
 8008b8c:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8008b8e:	8afb      	ldrh	r3, [r7, #22]
 8008b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b94:	d10e      	bne.n	8008bb4 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8008b96:	89fb      	ldrh	r3, [r7, #14]
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	f244 0218 	movw	r2, #16408	@ 0x4018
 8008b9e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fec8 	bl	8009938 <CODEC_IO_Write>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	461a      	mov	r2, r3
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	4413      	add	r3, r2
 8008bb0:	61fb      	str	r3, [r7, #28]
 8008bb2:	e00d      	b.n	8008bd0 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8008bb4:	89fb      	ldrh	r3, [r7, #14]
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	f244 0210 	movw	r2, #16400	@ 0x4010
 8008bbc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 feb9 	bl	8009938 <CODEC_IO_Write>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	461a      	mov	r2, r3
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	4413      	add	r3, r2
 8008bce:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8008bd0:	89fb      	ldrh	r3, [r7, #14]
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f240 3102 	movw	r1, #770	@ 0x302
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 feac 	bl	8009938 <CODEC_IO_Write>
 8008be0:	4603      	mov	r3, r0
 8008be2:	461a      	mov	r2, r3
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	4413      	add	r3, r2
 8008be8:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8008bea:	89fb      	ldrh	r3, [r7, #14]
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	220a      	movs	r2, #10
 8008bf0:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 fe9f 	bl	8009938 <CODEC_IO_Write>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	4413      	add	r3, r2
 8008c02:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8008c04:	89fb      	ldrh	r3, [r7, #14]
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 fe92 	bl	8009938 <CODEC_IO_Write>
 8008c14:	4603      	mov	r3, r0
 8008c16:	461a      	mov	r2, r3
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8008c1e:	8b3b      	ldrh	r3, [r7, #24]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 817b 	beq.w	8008f1c <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8008c26:	8b3b      	ldrh	r3, [r7, #24]
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d157      	bne.n	8008cdc <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8008c2c:	89fb      	ldrh	r3, [r7, #14]
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c34:	212d      	movs	r1, #45	@ 0x2d
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fe7e 	bl	8009938 <CODEC_IO_Write>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	461a      	mov	r2, r3
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	4413      	add	r3, r2
 8008c44:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8008c46:	89fb      	ldrh	r3, [r7, #14]
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c4e:	212e      	movs	r1, #46	@ 0x2e
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 fe71 	bl	8009938 <CODEC_IO_Write>
 8008c56:	4603      	mov	r3, r0
 8008c58:	461a      	mov	r2, r3
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8008c60:	4b0e      	ldr	r3, [pc, #56]	@ (8008c9c <wm8994_Init+0x998>)
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d01b      	beq.n	8008ca0 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8008c68:	89fb      	ldrh	r3, [r7, #14]
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8008c70:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 fe5f 	bl	8009938 <CODEC_IO_Write>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	4413      	add	r3, r2
 8008c82:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8008c84:	4b05      	ldr	r3, [pc, #20]	@ (8008c9c <wm8994_Init+0x998>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8008c8a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008c8e:	f7f8 ff35 	bl	8001afc <AUDIO_IO_Delay>
 8008c92:	e016      	b.n	8008cc2 <wm8994_Init+0x9be>
 8008c94:	20002460 	.word	0x20002460
 8008c98:	00017700 	.word	0x00017700
 8008c9c:	2000004c 	.word	0x2000004c
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8008ca0:	89fb      	ldrh	r3, [r7, #14]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	f248 1208 	movw	r2, #33032	@ 0x8108
 8008ca8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fe43 	bl	8009938 <CODEC_IO_Write>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	4413      	add	r3, r2
 8008cba:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8008cbc:	2032      	movs	r0, #50	@ 0x32
 8008cbe:	f7f8 ff1d 	bl	8001afc <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8008cc2:	89fb      	ldrh	r3, [r7, #14]
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 fe33 	bl	8009938 <CODEC_IO_Write>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	4413      	add	r3, r2
 8008cda:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8008cdc:	89fb      	ldrh	r3, [r7, #14]
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8008ce4:	2103      	movs	r1, #3
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 fe26 	bl	8009938 <CODEC_IO_Write>
 8008cec:	4603      	mov	r3, r0
 8008cee:	461a      	mov	r2, r3
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8008cf6:	89fb      	ldrh	r3, [r7, #14]
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2122      	movs	r1, #34	@ 0x22
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 fe1a 	bl	8009938 <CODEC_IO_Write>
 8008d04:	4603      	mov	r3, r0
 8008d06:	461a      	mov	r2, r3
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8008d0e:	89fb      	ldrh	r3, [r7, #14]
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2200      	movs	r2, #0
 8008d14:	2123      	movs	r1, #35	@ 0x23
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fe0e 	bl	8009938 <CODEC_IO_Write>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	461a      	mov	r2, r3
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	4413      	add	r3, r2
 8008d24:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8008d26:	89fb      	ldrh	r3, [r7, #14]
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8008d2e:	2136      	movs	r1, #54	@ 0x36
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 fe01 	bl	8009938 <CODEC_IO_Write>
 8008d36:	4603      	mov	r3, r0
 8008d38:	461a      	mov	r2, r3
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8008d40:	89fb      	ldrh	r3, [r7, #14]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	f243 0203 	movw	r2, #12291	@ 0x3003
 8008d48:	2101      	movs	r1, #1
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fdf4 	bl	8009938 <CODEC_IO_Write>
 8008d50:	4603      	mov	r3, r0
 8008d52:	461a      	mov	r2, r3
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	4413      	add	r3, r2
 8008d58:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8008d5a:	8afb      	ldrh	r3, [r7, #22]
 8008d5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d60:	d10d      	bne.n	8008d7e <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8008d62:	89fb      	ldrh	r3, [r7, #14]
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	f240 2205 	movw	r2, #517	@ 0x205
 8008d6a:	2151      	movs	r1, #81	@ 0x51
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 fde3 	bl	8009938 <CODEC_IO_Write>
 8008d72:	4603      	mov	r3, r0
 8008d74:	461a      	mov	r2, r3
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	4413      	add	r3, r2
 8008d7a:	61fb      	str	r3, [r7, #28]
 8008d7c:	e00b      	b.n	8008d96 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8008d7e:	89fb      	ldrh	r3, [r7, #14]
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2205      	movs	r2, #5
 8008d84:	2151      	movs	r1, #81	@ 0x51
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fdd6 	bl	8009938 <CODEC_IO_Write>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	461a      	mov	r2, r3
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	4413      	add	r3, r2
 8008d94:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8008d96:	8b7b      	ldrh	r3, [r7, #26]
 8008d98:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8008d9c:	f043 0303 	orr.w	r3, r3, #3
 8008da0:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8008da2:	89fb      	ldrh	r3, [r7, #14]
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	8b7a      	ldrh	r2, [r7, #26]
 8008da8:	2101      	movs	r1, #1
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 fdc4 	bl	8009938 <CODEC_IO_Write>
 8008db0:	4603      	mov	r3, r0
 8008db2:	461a      	mov	r2, r3
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	4413      	add	r3, r2
 8008db8:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8008dba:	89fb      	ldrh	r3, [r7, #14]
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2222      	movs	r2, #34	@ 0x22
 8008dc0:	2160      	movs	r1, #96	@ 0x60
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 fdb8 	bl	8009938 <CODEC_IO_Write>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	461a      	mov	r2, r3
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	4413      	add	r3, r2
 8008dd0:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8008dd2:	89fb      	ldrh	r3, [r7, #14]
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8008dda:	214c      	movs	r1, #76	@ 0x4c
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f000 fdab 	bl	8009938 <CODEC_IO_Write>
 8008de2:	4603      	mov	r3, r0
 8008de4:	461a      	mov	r2, r3
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	4413      	add	r3, r2
 8008dea:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8008dec:	200f      	movs	r0, #15
 8008dee:	f7f8 fe85 	bl	8001afc <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8008df2:	89fb      	ldrh	r3, [r7, #14]
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2201      	movs	r2, #1
 8008df8:	212d      	movs	r1, #45	@ 0x2d
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fd9c 	bl	8009938 <CODEC_IO_Write>
 8008e00:	4603      	mov	r3, r0
 8008e02:	461a      	mov	r2, r3
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	4413      	add	r3, r2
 8008e08:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8008e0a:	89fb      	ldrh	r3, [r7, #14]
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2201      	movs	r2, #1
 8008e10:	212e      	movs	r1, #46	@ 0x2e
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fd90 	bl	8009938 <CODEC_IO_Write>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	4413      	add	r3, r2
 8008e20:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8008e22:	89fb      	ldrh	r3, [r7, #14]
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8008e2a:	2103      	movs	r1, #3
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 fd83 	bl	8009938 <CODEC_IO_Write>
 8008e32:	4603      	mov	r3, r0
 8008e34:	461a      	mov	r2, r3
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	4413      	add	r3, r2
 8008e3a:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8008e3c:	89fb      	ldrh	r3, [r7, #14]
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2233      	movs	r2, #51	@ 0x33
 8008e42:	2154      	movs	r1, #84	@ 0x54
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 fd77 	bl	8009938 <CODEC_IO_Write>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	4413      	add	r3, r2
 8008e52:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8008e54:	f240 1001 	movw	r0, #257	@ 0x101
 8008e58:	f7f8 fe50 	bl	8001afc <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8008e5c:	89fb      	ldrh	r3, [r7, #14]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	22ee      	movs	r2, #238	@ 0xee
 8008e62:	2160      	movs	r1, #96	@ 0x60
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 fd67 	bl	8009938 <CODEC_IO_Write>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	4413      	add	r3, r2
 8008e72:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8008e74:	89fb      	ldrh	r3, [r7, #14]
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	22c0      	movs	r2, #192	@ 0xc0
 8008e7a:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 fd5a 	bl	8009938 <CODEC_IO_Write>
 8008e84:	4603      	mov	r3, r0
 8008e86:	461a      	mov	r2, r3
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8008e8e:	89fb      	ldrh	r3, [r7, #14]
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	22c0      	movs	r2, #192	@ 0xc0
 8008e94:	f240 6111 	movw	r1, #1553	@ 0x611
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f000 fd4d 	bl	8009938 <CODEC_IO_Write>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8008ea8:	89fb      	ldrh	r3, [r7, #14]
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2210      	movs	r2, #16
 8008eae:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 fd40 	bl	8009938 <CODEC_IO_Write>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	461a      	mov	r2, r3
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8008ec2:	89fb      	ldrh	r3, [r7, #14]
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	22c0      	movs	r2, #192	@ 0xc0
 8008ec8:	f240 6112 	movw	r1, #1554	@ 0x612
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 fd33 	bl	8009938 <CODEC_IO_Write>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	4413      	add	r3, r2
 8008eda:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8008edc:	89fb      	ldrh	r3, [r7, #14]
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	22c0      	movs	r2, #192	@ 0xc0
 8008ee2:	f240 6113 	movw	r1, #1555	@ 0x613
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 fd26 	bl	8009938 <CODEC_IO_Write>
 8008eec:	4603      	mov	r3, r0
 8008eee:	461a      	mov	r2, r3
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8008ef6:	89fb      	ldrh	r3, [r7, #14]
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2210      	movs	r2, #16
 8008efc:	f240 4122 	movw	r1, #1058	@ 0x422
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fd19 	bl	8009938 <CODEC_IO_Write>
 8008f06:	4603      	mov	r3, r0
 8008f08:	461a      	mov	r2, r3
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8008f10:	7afa      	ldrb	r2, [r7, #11]
 8008f12:	89fb      	ldrh	r3, [r7, #14]
 8008f14:	4611      	mov	r1, r2
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 f984 	bl	8009224 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8008f1c:	8afb      	ldrh	r3, [r7, #22]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 80a6 	beq.w	8009070 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8008f24:	8afb      	ldrh	r3, [r7, #22]
 8008f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f2a:	d003      	beq.n	8008f34 <wm8994_Init+0xc30>
 8008f2c:	8afb      	ldrh	r3, [r7, #22]
 8008f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f32:	d12b      	bne.n	8008f8c <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8008f34:	8b7b      	ldrh	r3, [r7, #26]
 8008f36:	f043 0313 	orr.w	r3, r3, #19
 8008f3a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8008f3c:	89fb      	ldrh	r3, [r7, #14]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	8b7a      	ldrh	r2, [r7, #26]
 8008f42:	2101      	movs	r1, #1
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fcf7 	bl	8009938 <CODEC_IO_Write>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	4413      	add	r3, r2
 8008f52:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8008f54:	89fb      	ldrh	r3, [r7, #14]
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2202      	movs	r2, #2
 8008f5a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fcea 	bl	8009938 <CODEC_IO_Write>
 8008f64:	4603      	mov	r3, r0
 8008f66:	461a      	mov	r2, r3
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8008f6e:	89fb      	ldrh	r3, [r7, #14]
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8008f76:	f240 4111 	movw	r1, #1041	@ 0x411
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 fcdc 	bl	8009938 <CODEC_IO_Write>
 8008f80:	4603      	mov	r3, r0
 8008f82:	461a      	mov	r2, r3
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	4413      	add	r3, r2
 8008f88:	61fb      	str	r3, [r7, #28]
 8008f8a:	e06b      	b.n	8009064 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8008f8c:	8afb      	ldrh	r3, [r7, #22]
 8008f8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f92:	d139      	bne.n	8009008 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8008f94:	8b7b      	ldrh	r3, [r7, #26]
 8008f96:	f043 0313 	orr.w	r3, r3, #19
 8008f9a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8008f9c:	89fb      	ldrh	r3, [r7, #14]
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	8b7a      	ldrh	r2, [r7, #26]
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 fcc7 	bl	8009938 <CODEC_IO_Write>
 8008faa:	4603      	mov	r3, r0
 8008fac:	461a      	mov	r2, r3
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8008fb4:	89fb      	ldrh	r3, [r7, #14]
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2202      	movs	r2, #2
 8008fba:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 fcba 	bl	8009938 <CODEC_IO_Write>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	4413      	add	r3, r2
 8008fcc:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8008fce:	89fb      	ldrh	r3, [r7, #14]
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8008fd6:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fcac 	bl	8009938 <CODEC_IO_Write>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8008fea:	89fb      	ldrh	r3, [r7, #14]
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8008ff2:	f240 4111 	movw	r1, #1041	@ 0x411
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 fc9e 	bl	8009938 <CODEC_IO_Write>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	461a      	mov	r2, r3
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	4413      	add	r3, r2
 8009004:	61fb      	str	r3, [r7, #28]
 8009006:	e02d      	b.n	8009064 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8009008:	8afb      	ldrh	r3, [r7, #22]
 800900a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800900e:	d003      	beq.n	8009018 <wm8994_Init+0xd14>
 8009010:	8afb      	ldrh	r3, [r7, #22]
 8009012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009016:	d125      	bne.n	8009064 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8009018:	89fb      	ldrh	r3, [r7, #14]
 800901a:	b2db      	uxtb	r3, r3
 800901c:	220b      	movs	r2, #11
 800901e:	2118      	movs	r1, #24
 8009020:	4618      	mov	r0, r3
 8009022:	f000 fc89 	bl	8009938 <CODEC_IO_Write>
 8009026:	4603      	mov	r3, r0
 8009028:	461a      	mov	r2, r3
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	4413      	add	r3, r2
 800902e:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8009030:	89fb      	ldrh	r3, [r7, #14]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	220b      	movs	r2, #11
 8009036:	211a      	movs	r1, #26
 8009038:	4618      	mov	r0, r3
 800903a:	f000 fc7d 	bl	8009938 <CODEC_IO_Write>
 800903e:	4603      	mov	r3, r0
 8009040:	461a      	mov	r2, r3
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	4413      	add	r3, r2
 8009046:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8009048:	89fb      	ldrh	r3, [r7, #14]
 800904a:	b2db      	uxtb	r3, r3
 800904c:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8009050:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8009054:	4618      	mov	r0, r3
 8009056:	f000 fc6f 	bl	8009938 <CODEC_IO_Write>
 800905a:	4603      	mov	r3, r0
 800905c:	461a      	mov	r2, r3
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	4413      	add	r3, r2
 8009062:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8009064:	7afa      	ldrb	r2, [r7, #11]
 8009066:	89fb      	ldrh	r3, [r7, #14]
 8009068:	4611      	mov	r1, r2
 800906a:	4618      	mov	r0, r3
 800906c:	f000 f8da 	bl	8009224 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8009070:	69fb      	ldr	r3, [r7, #28]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3720      	adds	r7, #32
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop

0800907c <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8009080:	f7f8 fcde 	bl	8001a40 <AUDIO_IO_DeInit>
}
 8009084:	bf00      	nop
 8009086:	bd80      	pop	{r7, pc}

08009088 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	4603      	mov	r3, r0
 8009090:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8009092:	f7f8 fccb 	bl	8001a2c <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8009096:	88fb      	ldrh	r3, [r7, #6]
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2100      	movs	r1, #0
 800909c:	4618      	mov	r0, r3
 800909e:	f7f8 fd01 	bl	8001aa4 <AUDIO_IO_Read>
 80090a2:	4603      	mov	r3, r0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	6039      	str	r1, [r7, #0]
 80090b6:	80fb      	strh	r3, [r7, #6]
 80090b8:	4613      	mov	r3, r2
 80090ba:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80090c0:	88fb      	ldrh	r3, [r7, #6]
 80090c2:	2100      	movs	r1, #0
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 f9d1 	bl	800946c <wm8994_SetMute>
 80090ca:	4602      	mov	r2, r0
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4413      	add	r3, r2
 80090d0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80090d2:	68fb      	ldr	r3, [r7, #12]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	4603      	mov	r3, r0
 80090e4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80090ea:	88fb      	ldrh	r3, [r7, #6]
 80090ec:	2101      	movs	r1, #1
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f9bc 	bl	800946c <wm8994_SetMute>
 80090f4:	4602      	mov	r2, r0
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4413      	add	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80090fc:	88fb      	ldrh	r3, [r7, #6]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	2201      	movs	r2, #1
 8009102:	2102      	movs	r1, #2
 8009104:	4618      	mov	r0, r3
 8009106:	f000 fc17 	bl	8009938 <CODEC_IO_Write>
 800910a:	4603      	mov	r3, r0
 800910c:	461a      	mov	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4413      	add	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8009114:	68fb      	ldr	r3, [r7, #12]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b084      	sub	sp, #16
 8009122:	af00      	add	r7, sp, #0
 8009124:	4603      	mov	r3, r0
 8009126:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800912c:	88fb      	ldrh	r3, [r7, #6]
 800912e:	2100      	movs	r1, #0
 8009130:	4618      	mov	r0, r3
 8009132:	f000 f99b 	bl	800946c <wm8994_SetMute>
 8009136:	4602      	mov	r2, r0
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4413      	add	r3, r2
 800913c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800913e:	68fb      	ldr	r3, [r7, #12]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	6039      	str	r1, [r7, #0]
 8009152:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009154:	2300      	movs	r3, #0
 8009156:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8009158:	4b31      	ldr	r3, [pc, #196]	@ (8009220 <wm8994_Stop+0xd8>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d05a      	beq.n	8009216 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8009160:	88fb      	ldrh	r3, [r7, #6]
 8009162:	2101      	movs	r1, #1
 8009164:	4618      	mov	r0, r3
 8009166:	f000 f981 	bl	800946c <wm8994_SetMute>
 800916a:	4602      	mov	r2, r0
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4413      	add	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	2b02      	cmp	r3, #2
 8009176:	d04e      	beq.n	8009216 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8009178:	88fb      	ldrh	r3, [r7, #6]
 800917a:	b2db      	uxtb	r3, r3
 800917c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009180:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fbd7 	bl	8009938 <CODEC_IO_Write>
 800918a:	4603      	mov	r3, r0
 800918c:	461a      	mov	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	4413      	add	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8009194:	88fb      	ldrh	r3, [r7, #6]
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800919c:	f240 4122 	movw	r1, #1058	@ 0x422
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 fbc9 	bl	8009938 <CODEC_IO_Write>
 80091a6:	4603      	mov	r3, r0
 80091a8:	461a      	mov	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4413      	add	r3, r2
 80091ae:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80091b0:	88fb      	ldrh	r3, [r7, #6]
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	2200      	movs	r2, #0
 80091b6:	212d      	movs	r1, #45	@ 0x2d
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fbbd 	bl	8009938 <CODEC_IO_Write>
 80091be:	4603      	mov	r3, r0
 80091c0:	461a      	mov	r2, r3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4413      	add	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80091c8:	88fb      	ldrh	r3, [r7, #6]
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2200      	movs	r2, #0
 80091ce:	212e      	movs	r1, #46	@ 0x2e
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fbb1 	bl	8009938 <CODEC_IO_Write>
 80091d6:	4603      	mov	r3, r0
 80091d8:	461a      	mov	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	4413      	add	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80091e0:	88fb      	ldrh	r3, [r7, #6]
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2200      	movs	r2, #0
 80091e6:	2105      	movs	r1, #5
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 fba5 	bl	8009938 <CODEC_IO_Write>
 80091ee:	4603      	mov	r3, r0
 80091f0:	461a      	mov	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4413      	add	r3, r2
 80091f6:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80091f8:	88fb      	ldrh	r3, [r7, #6]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2200      	movs	r2, #0
 80091fe:	2100      	movs	r1, #0
 8009200:	4618      	mov	r0, r3
 8009202:	f000 fb99 	bl	8009938 <CODEC_IO_Write>
 8009206:	4603      	mov	r3, r0
 8009208:	461a      	mov	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4413      	add	r3, r2
 800920e:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8009210:	4b03      	ldr	r3, [pc, #12]	@ (8009220 <wm8994_Stop+0xd8>)
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8009216:	68fb      	ldr	r3, [r7, #12]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	2000245c 	.word	0x2000245c

08009224 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	460a      	mov	r2, r1
 800922e:	80fb      	strh	r3, [r7, #6]
 8009230:	4613      	mov	r3, r2
 8009232:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8009234:	2300      	movs	r3, #0
 8009236:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8009238:	797b      	ldrb	r3, [r7, #5]
 800923a:	2b64      	cmp	r3, #100	@ 0x64
 800923c:	d80b      	bhi.n	8009256 <wm8994_SetVolume+0x32>
 800923e:	797a      	ldrb	r2, [r7, #5]
 8009240:	4613      	mov	r3, r2
 8009242:	019b      	lsls	r3, r3, #6
 8009244:	1a9b      	subs	r3, r3, r2
 8009246:	4a86      	ldr	r2, [pc, #536]	@ (8009460 <wm8994_SetVolume+0x23c>)
 8009248:	fb82 1203 	smull	r1, r2, r2, r3
 800924c:	1152      	asrs	r2, r2, #5
 800924e:	17db      	asrs	r3, r3, #31
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	b2db      	uxtb	r3, r3
 8009254:	e000      	b.n	8009258 <wm8994_SetVolume+0x34>
 8009256:	2364      	movs	r3, #100	@ 0x64
 8009258:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 800925a:	4b82      	ldr	r3, [pc, #520]	@ (8009464 <wm8994_SetVolume+0x240>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	f000 809b 	beq.w	800939a <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8009264:	7afb      	ldrb	r3, [r7, #11]
 8009266:	2b3e      	cmp	r3, #62	@ 0x3e
 8009268:	d93d      	bls.n	80092e6 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800926a:	88fb      	ldrh	r3, [r7, #6]
 800926c:	2100      	movs	r1, #0
 800926e:	4618      	mov	r0, r3
 8009270:	f000 f8fc 	bl	800946c <wm8994_SetMute>
 8009274:	4602      	mov	r2, r0
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	4413      	add	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800927c:	88fb      	ldrh	r3, [r7, #6]
 800927e:	b2db      	uxtb	r3, r3
 8009280:	f240 127f 	movw	r2, #383	@ 0x17f
 8009284:	211c      	movs	r1, #28
 8009286:	4618      	mov	r0, r3
 8009288:	f000 fb56 	bl	8009938 <CODEC_IO_Write>
 800928c:	4603      	mov	r3, r0
 800928e:	461a      	mov	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4413      	add	r3, r2
 8009294:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8009296:	88fb      	ldrh	r3, [r7, #6]
 8009298:	b2db      	uxtb	r3, r3
 800929a:	f240 127f 	movw	r2, #383	@ 0x17f
 800929e:	211d      	movs	r1, #29
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 fb49 	bl	8009938 <CODEC_IO_Write>
 80092a6:	4603      	mov	r3, r0
 80092a8:	461a      	mov	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	4413      	add	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80092b0:	88fb      	ldrh	r3, [r7, #6]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	f240 127f 	movw	r2, #383	@ 0x17f
 80092b8:	2126      	movs	r1, #38	@ 0x26
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 fb3c 	bl	8009938 <CODEC_IO_Write>
 80092c0:	4603      	mov	r3, r0
 80092c2:	461a      	mov	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4413      	add	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80092ca:	88fb      	ldrh	r3, [r7, #6]
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f240 127f 	movw	r2, #383	@ 0x17f
 80092d2:	2127      	movs	r1, #39	@ 0x27
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 fb2f 	bl	8009938 <CODEC_IO_Write>
 80092da:	4603      	mov	r3, r0
 80092dc:	461a      	mov	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	4413      	add	r3, r2
 80092e2:	60fb      	str	r3, [r7, #12]
 80092e4:	e059      	b.n	800939a <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80092e6:	797b      	ldrb	r3, [r7, #5]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d109      	bne.n	8009300 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80092ec:	88fb      	ldrh	r3, [r7, #6]
 80092ee:	2101      	movs	r1, #1
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 f8bb 	bl	800946c <wm8994_SetMute>
 80092f6:	4602      	mov	r2, r0
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4413      	add	r3, r2
 80092fc:	60fb      	str	r3, [r7, #12]
 80092fe:	e04c      	b.n	800939a <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8009300:	88fb      	ldrh	r3, [r7, #6]
 8009302:	2100      	movs	r1, #0
 8009304:	4618      	mov	r0, r3
 8009306:	f000 f8b1 	bl	800946c <wm8994_SetMute>
 800930a:	4602      	mov	r2, r0
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4413      	add	r3, r2
 8009310:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8009312:	88fb      	ldrh	r3, [r7, #6]
 8009314:	b2d8      	uxtb	r0, r3
 8009316:	7afb      	ldrb	r3, [r7, #11]
 8009318:	b21b      	sxth	r3, r3
 800931a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800931e:	b21b      	sxth	r3, r3
 8009320:	b29b      	uxth	r3, r3
 8009322:	461a      	mov	r2, r3
 8009324:	211c      	movs	r1, #28
 8009326:	f000 fb07 	bl	8009938 <CODEC_IO_Write>
 800932a:	4603      	mov	r3, r0
 800932c:	461a      	mov	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	4413      	add	r3, r2
 8009332:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8009334:	88fb      	ldrh	r3, [r7, #6]
 8009336:	b2d8      	uxtb	r0, r3
 8009338:	7afb      	ldrb	r3, [r7, #11]
 800933a:	b21b      	sxth	r3, r3
 800933c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009340:	b21b      	sxth	r3, r3
 8009342:	b29b      	uxth	r3, r3
 8009344:	461a      	mov	r2, r3
 8009346:	211d      	movs	r1, #29
 8009348:	f000 faf6 	bl	8009938 <CODEC_IO_Write>
 800934c:	4603      	mov	r3, r0
 800934e:	461a      	mov	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4413      	add	r3, r2
 8009354:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8009356:	88fb      	ldrh	r3, [r7, #6]
 8009358:	b2d8      	uxtb	r0, r3
 800935a:	7afb      	ldrb	r3, [r7, #11]
 800935c:	b21b      	sxth	r3, r3
 800935e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009362:	b21b      	sxth	r3, r3
 8009364:	b29b      	uxth	r3, r3
 8009366:	461a      	mov	r2, r3
 8009368:	2126      	movs	r1, #38	@ 0x26
 800936a:	f000 fae5 	bl	8009938 <CODEC_IO_Write>
 800936e:	4603      	mov	r3, r0
 8009370:	461a      	mov	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4413      	add	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8009378:	88fb      	ldrh	r3, [r7, #6]
 800937a:	b2d8      	uxtb	r0, r3
 800937c:	7afb      	ldrb	r3, [r7, #11]
 800937e:	b21b      	sxth	r3, r3
 8009380:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8009384:	b21b      	sxth	r3, r3
 8009386:	b29b      	uxth	r3, r3
 8009388:	461a      	mov	r2, r3
 800938a:	2127      	movs	r1, #39	@ 0x27
 800938c:	f000 fad4 	bl	8009938 <CODEC_IO_Write>
 8009390:	4603      	mov	r3, r0
 8009392:	461a      	mov	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	4413      	add	r3, r2
 8009398:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800939a:	4b33      	ldr	r3, [pc, #204]	@ (8009468 <wm8994_SetVolume+0x244>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d059      	beq.n	8009456 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80093a2:	797b      	ldrb	r3, [r7, #5]
 80093a4:	2b63      	cmp	r3, #99	@ 0x63
 80093a6:	d80c      	bhi.n	80093c2 <wm8994_SetVolume+0x19e>
 80093a8:	797a      	ldrb	r2, [r7, #5]
 80093aa:	4613      	mov	r3, r2
 80093ac:	011b      	lsls	r3, r3, #4
 80093ae:	1a9b      	subs	r3, r3, r2
 80093b0:	011b      	lsls	r3, r3, #4
 80093b2:	4a2b      	ldr	r2, [pc, #172]	@ (8009460 <wm8994_SetVolume+0x23c>)
 80093b4:	fb82 1203 	smull	r1, r2, r2, r3
 80093b8:	1152      	asrs	r2, r2, #5
 80093ba:	17db      	asrs	r3, r3, #31
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	e000      	b.n	80093c4 <wm8994_SetVolume+0x1a0>
 80093c2:	23ef      	movs	r3, #239	@ 0xef
 80093c4:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80093c6:	88fb      	ldrh	r3, [r7, #6]
 80093c8:	b2d8      	uxtb	r0, r3
 80093ca:	7afb      	ldrb	r3, [r7, #11]
 80093cc:	b21b      	sxth	r3, r3
 80093ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093d2:	b21b      	sxth	r3, r3
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	461a      	mov	r2, r3
 80093d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80093dc:	f000 faac 	bl	8009938 <CODEC_IO_Write>
 80093e0:	4603      	mov	r3, r0
 80093e2:	461a      	mov	r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	4413      	add	r3, r2
 80093e8:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80093ea:	88fb      	ldrh	r3, [r7, #6]
 80093ec:	b2d8      	uxtb	r0, r3
 80093ee:	7afb      	ldrb	r3, [r7, #11]
 80093f0:	b21b      	sxth	r3, r3
 80093f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093f6:	b21b      	sxth	r3, r3
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	461a      	mov	r2, r3
 80093fc:	f240 4101 	movw	r1, #1025	@ 0x401
 8009400:	f000 fa9a 	bl	8009938 <CODEC_IO_Write>
 8009404:	4603      	mov	r3, r0
 8009406:	461a      	mov	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	4413      	add	r3, r2
 800940c:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 800940e:	88fb      	ldrh	r3, [r7, #6]
 8009410:	b2d8      	uxtb	r0, r3
 8009412:	7afb      	ldrb	r3, [r7, #11]
 8009414:	b21b      	sxth	r3, r3
 8009416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800941a:	b21b      	sxth	r3, r3
 800941c:	b29b      	uxth	r3, r3
 800941e:	461a      	mov	r2, r3
 8009420:	f240 4104 	movw	r1, #1028	@ 0x404
 8009424:	f000 fa88 	bl	8009938 <CODEC_IO_Write>
 8009428:	4603      	mov	r3, r0
 800942a:	461a      	mov	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	4413      	add	r3, r2
 8009430:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8009432:	88fb      	ldrh	r3, [r7, #6]
 8009434:	b2d8      	uxtb	r0, r3
 8009436:	7afb      	ldrb	r3, [r7, #11]
 8009438:	b21b      	sxth	r3, r3
 800943a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800943e:	b21b      	sxth	r3, r3
 8009440:	b29b      	uxth	r3, r3
 8009442:	461a      	mov	r2, r3
 8009444:	f240 4105 	movw	r1, #1029	@ 0x405
 8009448:	f000 fa76 	bl	8009938 <CODEC_IO_Write>
 800944c:	4603      	mov	r3, r0
 800944e:	461a      	mov	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	4413      	add	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8009456:	68fb      	ldr	r3, [r7, #12]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	51eb851f 	.word	0x51eb851f
 8009464:	2000245c 	.word	0x2000245c
 8009468:	20002460 	.word	0x20002460

0800946c <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	6039      	str	r1, [r7, #0]
 8009476:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 800947c:	4b21      	ldr	r3, [pc, #132]	@ (8009504 <wm8994_SetMute+0x98>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d039      	beq.n	80094f8 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	2b01      	cmp	r3, #1
 8009488:	d11c      	bne.n	80094c4 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800948a:	88fb      	ldrh	r3, [r7, #6]
 800948c:	b2db      	uxtb	r3, r3
 800948e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009492:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8009496:	4618      	mov	r0, r3
 8009498:	f000 fa4e 	bl	8009938 <CODEC_IO_Write>
 800949c:	4603      	mov	r3, r0
 800949e:	461a      	mov	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4413      	add	r3, r2
 80094a4:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80094a6:	88fb      	ldrh	r3, [r7, #6]
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094ae:	f240 4122 	movw	r1, #1058	@ 0x422
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 fa40 	bl	8009938 <CODEC_IO_Write>
 80094b8:	4603      	mov	r3, r0
 80094ba:	461a      	mov	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	4413      	add	r3, r2
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	e019      	b.n	80094f8 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80094c4:	88fb      	ldrh	r3, [r7, #6]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2210      	movs	r2, #16
 80094ca:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 fa32 	bl	8009938 <CODEC_IO_Write>
 80094d4:	4603      	mov	r3, r0
 80094d6:	461a      	mov	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	4413      	add	r3, r2
 80094dc:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80094de:	88fb      	ldrh	r3, [r7, #6]
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2210      	movs	r2, #16
 80094e4:	f240 4122 	movw	r1, #1058	@ 0x422
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 fa25 	bl	8009938 <CODEC_IO_Write>
 80094ee:	4603      	mov	r3, r0
 80094f0:	461a      	mov	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	4413      	add	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80094f8:	68fb      	ldr	r3, [r7, #12]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	2000245c 	.word	0x2000245c

08009508 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	460a      	mov	r2, r1
 8009512:	80fb      	strh	r3, [r7, #6]
 8009514:	4613      	mov	r3, r2
 8009516:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8009518:	2300      	movs	r3, #0
 800951a:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 800951c:	797b      	ldrb	r3, [r7, #5]
 800951e:	2b03      	cmp	r3, #3
 8009520:	f000 808c 	beq.w	800963c <wm8994_SetOutputMode+0x134>
 8009524:	2b03      	cmp	r3, #3
 8009526:	f300 80cb 	bgt.w	80096c0 <wm8994_SetOutputMode+0x1b8>
 800952a:	2b01      	cmp	r3, #1
 800952c:	d002      	beq.n	8009534 <wm8994_SetOutputMode+0x2c>
 800952e:	2b02      	cmp	r3, #2
 8009530:	d042      	beq.n	80095b8 <wm8994_SetOutputMode+0xb0>
 8009532:	e0c5      	b.n	80096c0 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8009534:	88fb      	ldrh	r3, [r7, #6]
 8009536:	b2db      	uxtb	r3, r3
 8009538:	f640 420c 	movw	r2, #3084	@ 0xc0c
 800953c:	2105      	movs	r1, #5
 800953e:	4618      	mov	r0, r3
 8009540:	f000 f9fa 	bl	8009938 <CODEC_IO_Write>
 8009544:	4603      	mov	r3, r0
 8009546:	461a      	mov	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	4413      	add	r3, r2
 800954c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800954e:	88fb      	ldrh	r3, [r7, #6]
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2200      	movs	r2, #0
 8009554:	f240 6101 	movw	r1, #1537	@ 0x601
 8009558:	4618      	mov	r0, r3
 800955a:	f000 f9ed 	bl	8009938 <CODEC_IO_Write>
 800955e:	4603      	mov	r3, r0
 8009560:	461a      	mov	r2, r3
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	4413      	add	r3, r2
 8009566:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8009568:	88fb      	ldrh	r3, [r7, #6]
 800956a:	b2db      	uxtb	r3, r3
 800956c:	2200      	movs	r2, #0
 800956e:	f240 6102 	movw	r1, #1538	@ 0x602
 8009572:	4618      	mov	r0, r3
 8009574:	f000 f9e0 	bl	8009938 <CODEC_IO_Write>
 8009578:	4603      	mov	r3, r0
 800957a:	461a      	mov	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4413      	add	r3, r2
 8009580:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8009582:	88fb      	ldrh	r3, [r7, #6]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2202      	movs	r2, #2
 8009588:	f240 6104 	movw	r1, #1540	@ 0x604
 800958c:	4618      	mov	r0, r3
 800958e:	f000 f9d3 	bl	8009938 <CODEC_IO_Write>
 8009592:	4603      	mov	r3, r0
 8009594:	461a      	mov	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	4413      	add	r3, r2
 800959a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800959c:	88fb      	ldrh	r3, [r7, #6]
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2202      	movs	r2, #2
 80095a2:	f240 6105 	movw	r1, #1541	@ 0x605
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 f9c6 	bl	8009938 <CODEC_IO_Write>
 80095ac:	4603      	mov	r3, r0
 80095ae:	461a      	mov	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	4413      	add	r3, r2
 80095b4:	60fb      	str	r3, [r7, #12]
    break;
 80095b6:	e0c5      	b.n	8009744 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80095b8:	88fb      	ldrh	r3, [r7, #6]
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	f240 3203 	movw	r2, #771	@ 0x303
 80095c0:	2105      	movs	r1, #5
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 f9b8 	bl	8009938 <CODEC_IO_Write>
 80095c8:	4603      	mov	r3, r0
 80095ca:	461a      	mov	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4413      	add	r3, r2
 80095d0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2201      	movs	r2, #1
 80095d8:	f240 6101 	movw	r1, #1537	@ 0x601
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 f9ab 	bl	8009938 <CODEC_IO_Write>
 80095e2:	4603      	mov	r3, r0
 80095e4:	461a      	mov	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	4413      	add	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80095ec:	88fb      	ldrh	r3, [r7, #6]
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2201      	movs	r2, #1
 80095f2:	f240 6102 	movw	r1, #1538	@ 0x602
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 f99e 	bl	8009938 <CODEC_IO_Write>
 80095fc:	4603      	mov	r3, r0
 80095fe:	461a      	mov	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	4413      	add	r3, r2
 8009604:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8009606:	88fb      	ldrh	r3, [r7, #6]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2200      	movs	r2, #0
 800960c:	f240 6104 	movw	r1, #1540	@ 0x604
 8009610:	4618      	mov	r0, r3
 8009612:	f000 f991 	bl	8009938 <CODEC_IO_Write>
 8009616:	4603      	mov	r3, r0
 8009618:	461a      	mov	r2, r3
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	4413      	add	r3, r2
 800961e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8009620:	88fb      	ldrh	r3, [r7, #6]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2200      	movs	r2, #0
 8009626:	f240 6105 	movw	r1, #1541	@ 0x605
 800962a:	4618      	mov	r0, r3
 800962c:	f000 f984 	bl	8009938 <CODEC_IO_Write>
 8009630:	4603      	mov	r3, r0
 8009632:	461a      	mov	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4413      	add	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]
    break;
 800963a:	e083      	b.n	8009744 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800963c:	88fb      	ldrh	r3, [r7, #6]
 800963e:	b2db      	uxtb	r3, r3
 8009640:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8009644:	2105      	movs	r1, #5
 8009646:	4618      	mov	r0, r3
 8009648:	f000 f976 	bl	8009938 <CODEC_IO_Write>
 800964c:	4603      	mov	r3, r0
 800964e:	461a      	mov	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	4413      	add	r3, r2
 8009654:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8009656:	88fb      	ldrh	r3, [r7, #6]
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2201      	movs	r2, #1
 800965c:	f240 6101 	movw	r1, #1537	@ 0x601
 8009660:	4618      	mov	r0, r3
 8009662:	f000 f969 	bl	8009938 <CODEC_IO_Write>
 8009666:	4603      	mov	r3, r0
 8009668:	461a      	mov	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	4413      	add	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8009670:	88fb      	ldrh	r3, [r7, #6]
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2201      	movs	r2, #1
 8009676:	f240 6102 	movw	r1, #1538	@ 0x602
 800967a:	4618      	mov	r0, r3
 800967c:	f000 f95c 	bl	8009938 <CODEC_IO_Write>
 8009680:	4603      	mov	r3, r0
 8009682:	461a      	mov	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4413      	add	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800968a:	88fb      	ldrh	r3, [r7, #6]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2202      	movs	r2, #2
 8009690:	f240 6104 	movw	r1, #1540	@ 0x604
 8009694:	4618      	mov	r0, r3
 8009696:	f000 f94f 	bl	8009938 <CODEC_IO_Write>
 800969a:	4603      	mov	r3, r0
 800969c:	461a      	mov	r2, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	4413      	add	r3, r2
 80096a2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80096a4:	88fb      	ldrh	r3, [r7, #6]
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2202      	movs	r2, #2
 80096aa:	f240 6105 	movw	r1, #1541	@ 0x605
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 f942 	bl	8009938 <CODEC_IO_Write>
 80096b4:	4603      	mov	r3, r0
 80096b6:	461a      	mov	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	4413      	add	r3, r2
 80096bc:	60fb      	str	r3, [r7, #12]
    break;
 80096be:	e041      	b.n	8009744 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80096c0:	88fb      	ldrh	r3, [r7, #6]
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	f240 3203 	movw	r2, #771	@ 0x303
 80096c8:	2105      	movs	r1, #5
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 f934 	bl	8009938 <CODEC_IO_Write>
 80096d0:	4603      	mov	r3, r0
 80096d2:	461a      	mov	r2, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4413      	add	r3, r2
 80096d8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80096da:	88fb      	ldrh	r3, [r7, #6]
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2201      	movs	r2, #1
 80096e0:	f240 6101 	movw	r1, #1537	@ 0x601
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 f927 	bl	8009938 <CODEC_IO_Write>
 80096ea:	4603      	mov	r3, r0
 80096ec:	461a      	mov	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	4413      	add	r3, r2
 80096f2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80096f4:	88fb      	ldrh	r3, [r7, #6]
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2201      	movs	r2, #1
 80096fa:	f240 6102 	movw	r1, #1538	@ 0x602
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 f91a 	bl	8009938 <CODEC_IO_Write>
 8009704:	4603      	mov	r3, r0
 8009706:	461a      	mov	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4413      	add	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800970e:	88fb      	ldrh	r3, [r7, #6]
 8009710:	b2db      	uxtb	r3, r3
 8009712:	2200      	movs	r2, #0
 8009714:	f240 6104 	movw	r1, #1540	@ 0x604
 8009718:	4618      	mov	r0, r3
 800971a:	f000 f90d 	bl	8009938 <CODEC_IO_Write>
 800971e:	4603      	mov	r3, r0
 8009720:	461a      	mov	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4413      	add	r3, r2
 8009726:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8009728:	88fb      	ldrh	r3, [r7, #6]
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2200      	movs	r2, #0
 800972e:	f240 6105 	movw	r1, #1541	@ 0x605
 8009732:	4618      	mov	r0, r3
 8009734:	f000 f900 	bl	8009938 <CODEC_IO_Write>
 8009738:	4603      	mov	r3, r0
 800973a:	461a      	mov	r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	60fb      	str	r3, [r7, #12]
    break;    
 8009742:	bf00      	nop
  }  
  return counter;
 8009744:	68fb      	ldr	r3, [r7, #12]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
	...

08009750 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	4603      	mov	r3, r0
 8009758:	6039      	str	r1, [r7, #0]
 800975a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	4a64      	ldr	r2, [pc, #400]	@ (80098f4 <wm8994_SetFrequency+0x1a4>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d079      	beq.n	800985c <wm8994_SetFrequency+0x10c>
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	4a62      	ldr	r2, [pc, #392]	@ (80098f4 <wm8994_SetFrequency+0x1a4>)
 800976c:	4293      	cmp	r3, r2
 800976e:	f200 80ad 	bhi.w	80098cc <wm8994_SetFrequency+0x17c>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8009778:	4293      	cmp	r3, r2
 800977a:	d061      	beq.n	8009840 <wm8994_SetFrequency+0xf0>
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8009782:	4293      	cmp	r3, r2
 8009784:	f200 80a2 	bhi.w	80098cc <wm8994_SetFrequency+0x17c>
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800978e:	4293      	cmp	r3, r2
 8009790:	f000 808e 	beq.w	80098b0 <wm8994_SetFrequency+0x160>
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800979a:	4293      	cmp	r3, r2
 800979c:	f200 8096 	bhi.w	80098cc <wm8994_SetFrequency+0x17c>
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80097a6:	d03d      	beq.n	8009824 <wm8994_SetFrequency+0xd4>
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80097ae:	f200 808d 	bhi.w	80098cc <wm8994_SetFrequency+0x17c>
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	f245 6222 	movw	r2, #22050	@ 0x5622
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d06b      	beq.n	8009894 <wm8994_SetFrequency+0x144>
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	f245 6222 	movw	r2, #22050	@ 0x5622
 80097c2:	4293      	cmp	r3, r2
 80097c4:	f200 8082 	bhi.w	80098cc <wm8994_SetFrequency+0x17c>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80097ce:	d01b      	beq.n	8009808 <wm8994_SetFrequency+0xb8>
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80097d6:	d879      	bhi.n	80098cc <wm8994_SetFrequency+0x17c>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80097de:	d005      	beq.n	80097ec <wm8994_SetFrequency+0x9c>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d046      	beq.n	8009878 <wm8994_SetFrequency+0x128>
 80097ea:	e06f      	b.n	80098cc <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80097ec:	88fb      	ldrh	r3, [r7, #6]
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	2203      	movs	r2, #3
 80097f2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 f89e 	bl	8009938 <CODEC_IO_Write>
 80097fc:	4603      	mov	r3, r0
 80097fe:	461a      	mov	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4413      	add	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]
    break;
 8009806:	e06f      	b.n	80098e8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8009808:	88fb      	ldrh	r3, [r7, #6]
 800980a:	b2db      	uxtb	r3, r3
 800980c:	2233      	movs	r2, #51	@ 0x33
 800980e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009812:	4618      	mov	r0, r3
 8009814:	f000 f890 	bl	8009938 <CODEC_IO_Write>
 8009818:	4603      	mov	r3, r0
 800981a:	461a      	mov	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	4413      	add	r3, r2
 8009820:	60fb      	str	r3, [r7, #12]
    break;
 8009822:	e061      	b.n	80098e8 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8009824:	88fb      	ldrh	r3, [r7, #6]
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2263      	movs	r2, #99	@ 0x63
 800982a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800982e:	4618      	mov	r0, r3
 8009830:	f000 f882 	bl	8009938 <CODEC_IO_Write>
 8009834:	4603      	mov	r3, r0
 8009836:	461a      	mov	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	4413      	add	r3, r2
 800983c:	60fb      	str	r3, [r7, #12]
    break;
 800983e:	e053      	b.n	80098e8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8009840:	88fb      	ldrh	r3, [r7, #6]
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2283      	movs	r2, #131	@ 0x83
 8009846:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800984a:	4618      	mov	r0, r3
 800984c:	f000 f874 	bl	8009938 <CODEC_IO_Write>
 8009850:	4603      	mov	r3, r0
 8009852:	461a      	mov	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4413      	add	r3, r2
 8009858:	60fb      	str	r3, [r7, #12]
    break;
 800985a:	e045      	b.n	80098e8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800985c:	88fb      	ldrh	r3, [r7, #6]
 800985e:	b2db      	uxtb	r3, r3
 8009860:	22a3      	movs	r2, #163	@ 0xa3
 8009862:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009866:	4618      	mov	r0, r3
 8009868:	f000 f866 	bl	8009938 <CODEC_IO_Write>
 800986c:	4603      	mov	r3, r0
 800986e:	461a      	mov	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4413      	add	r3, r2
 8009874:	60fb      	str	r3, [r7, #12]
    break;
 8009876:	e037      	b.n	80098e8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8009878:	88fb      	ldrh	r3, [r7, #6]
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2213      	movs	r2, #19
 800987e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8009882:	4618      	mov	r0, r3
 8009884:	f000 f858 	bl	8009938 <CODEC_IO_Write>
 8009888:	4603      	mov	r3, r0
 800988a:	461a      	mov	r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	4413      	add	r3, r2
 8009890:	60fb      	str	r3, [r7, #12]
    break;
 8009892:	e029      	b.n	80098e8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8009894:	88fb      	ldrh	r3, [r7, #6]
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2243      	movs	r2, #67	@ 0x43
 800989a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 f84a 	bl	8009938 <CODEC_IO_Write>
 80098a4:	4603      	mov	r3, r0
 80098a6:	461a      	mov	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4413      	add	r3, r2
 80098ac:	60fb      	str	r3, [r7, #12]
    break;
 80098ae:	e01b      	b.n	80098e8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80098b0:	88fb      	ldrh	r3, [r7, #6]
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2273      	movs	r2, #115	@ 0x73
 80098b6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 f83c 	bl	8009938 <CODEC_IO_Write>
 80098c0:	4603      	mov	r3, r0
 80098c2:	461a      	mov	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	4413      	add	r3, r2
 80098c8:	60fb      	str	r3, [r7, #12]
    break; 
 80098ca:	e00d      	b.n	80098e8 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80098cc:	88fb      	ldrh	r3, [r7, #6]
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	2283      	movs	r2, #131	@ 0x83
 80098d2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 f82e 	bl	8009938 <CODEC_IO_Write>
 80098dc:	4603      	mov	r3, r0
 80098de:	461a      	mov	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4413      	add	r3, r2
 80098e4:	60fb      	str	r3, [r7, #12]
    break; 
 80098e6:	bf00      	nop
  }
  return counter;
 80098e8:	68fb      	ldr	r3, [r7, #12]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	00017700 	.word	0x00017700

080098f8 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8009906:	88fb      	ldrh	r3, [r7, #6]
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2200      	movs	r2, #0
 800990c:	2100      	movs	r1, #0
 800990e:	4618      	mov	r0, r3
 8009910:	f000 f812 	bl	8009938 <CODEC_IO_Write>
 8009914:	4603      	mov	r3, r0
 8009916:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8009918:	4b05      	ldr	r3, [pc, #20]	@ (8009930 <wm8994_Reset+0x38>)
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800991e:	4b05      	ldr	r3, [pc, #20]	@ (8009934 <wm8994_Reset+0x3c>)
 8009920:	2200      	movs	r2, #0
 8009922:	601a      	str	r2, [r3, #0]

  return counter;
 8009924:	68fb      	ldr	r3, [r7, #12]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	2000245c 	.word	0x2000245c
 8009934:	20002460 	.word	0x20002460

08009938 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	71fb      	strb	r3, [r7, #7]
 8009942:	460b      	mov	r3, r1
 8009944:	80bb      	strh	r3, [r7, #4]
 8009946:	4613      	mov	r3, r2
 8009948:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800994e:	887a      	ldrh	r2, [r7, #2]
 8009950:	88b9      	ldrh	r1, [r7, #4]
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	4618      	mov	r0, r3
 8009956:	f7f8 f87b 	bl	8001a50 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	b2db      	uxtb	r3, r3
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <memset>:
 8009966:	4402      	add	r2, r0
 8009968:	4603      	mov	r3, r0
 800996a:	4293      	cmp	r3, r2
 800996c:	d100      	bne.n	8009970 <memset+0xa>
 800996e:	4770      	bx	lr
 8009970:	f803 1b01 	strb.w	r1, [r3], #1
 8009974:	e7f9      	b.n	800996a <memset+0x4>
	...

08009978 <__libc_init_array>:
 8009978:	b570      	push	{r4, r5, r6, lr}
 800997a:	4d0d      	ldr	r5, [pc, #52]	@ (80099b0 <__libc_init_array+0x38>)
 800997c:	4c0d      	ldr	r4, [pc, #52]	@ (80099b4 <__libc_init_array+0x3c>)
 800997e:	1b64      	subs	r4, r4, r5
 8009980:	10a4      	asrs	r4, r4, #2
 8009982:	2600      	movs	r6, #0
 8009984:	42a6      	cmp	r6, r4
 8009986:	d109      	bne.n	800999c <__libc_init_array+0x24>
 8009988:	4d0b      	ldr	r5, [pc, #44]	@ (80099b8 <__libc_init_array+0x40>)
 800998a:	4c0c      	ldr	r4, [pc, #48]	@ (80099bc <__libc_init_array+0x44>)
 800998c:	f000 f826 	bl	80099dc <_init>
 8009990:	1b64      	subs	r4, r4, r5
 8009992:	10a4      	asrs	r4, r4, #2
 8009994:	2600      	movs	r6, #0
 8009996:	42a6      	cmp	r6, r4
 8009998:	d105      	bne.n	80099a6 <__libc_init_array+0x2e>
 800999a:	bd70      	pop	{r4, r5, r6, pc}
 800999c:	f855 3b04 	ldr.w	r3, [r5], #4
 80099a0:	4798      	blx	r3
 80099a2:	3601      	adds	r6, #1
 80099a4:	e7ee      	b.n	8009984 <__libc_init_array+0xc>
 80099a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80099aa:	4798      	blx	r3
 80099ac:	3601      	adds	r6, #1
 80099ae:	e7f2      	b.n	8009996 <__libc_init_array+0x1e>
 80099b0:	0800b504 	.word	0x0800b504
 80099b4:	0800b504 	.word	0x0800b504
 80099b8:	0800b504 	.word	0x0800b504
 80099bc:	0800b508 	.word	0x0800b508

080099c0 <memcpy>:
 80099c0:	440a      	add	r2, r1
 80099c2:	4291      	cmp	r1, r2
 80099c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80099c8:	d100      	bne.n	80099cc <memcpy+0xc>
 80099ca:	4770      	bx	lr
 80099cc:	b510      	push	{r4, lr}
 80099ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099d6:	4291      	cmp	r1, r2
 80099d8:	d1f9      	bne.n	80099ce <memcpy+0xe>
 80099da:	bd10      	pop	{r4, pc}

080099dc <_init>:
 80099dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099de:	bf00      	nop
 80099e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099e2:	bc08      	pop	{r3}
 80099e4:	469e      	mov	lr, r3
 80099e6:	4770      	bx	lr

080099e8 <_fini>:
 80099e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ea:	bf00      	nop
 80099ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ee:	bc08      	pop	{r3}
 80099f0:	469e      	mov	lr, r3
 80099f2:	4770      	bx	lr
