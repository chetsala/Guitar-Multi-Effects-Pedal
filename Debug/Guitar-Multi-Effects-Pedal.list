
Guitar-Multi-Effects-Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bbc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08008d8c  08008d8c  00009d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009268  08009268  0000b098  2**0
                  CONTENTS
  4 .ARM          00000008  08009268  08009268  0000a268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009270  08009270  0000b098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009270  08009270  0000a270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009274  08009274  0000a274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08009278  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000098  08009310  0000b098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  08009310  0000b8f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162ed  00000000  00000000  0000b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033fb  00000000  00000000  000213b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  000247b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f1a  00000000  00000000  00025b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6a6  00000000  00000000  00026a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b7b  00000000  00000000  00051110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101887  00000000  00000000  00068c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a512  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005668  00000000  00000000  0016a558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0016fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008d74 	.word	0x08008d74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	08008d74 	.word	0x08008d74

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <Audio_Init>:
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size);
 */


void Audio_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
// Codec and SAI Initialization


	// uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)

	if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1, OUTPUT_DEVICE_HEADPHONE,DEFAULT_VOL_70_PERCENT, I2S_AUDIOFREQ_48K) == AUDIO_OK)
 80005a4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80005a8:	22b3      	movs	r2, #179	@ 0xb3
 80005aa:	2102      	movs	r1, #2
 80005ac:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80005b0:	f003 f95c 	bl	800386c <BSP_AUDIO_IN_OUT_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d108      	bne.n	80005cc <Audio_Init+0x2c>
	{
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80005ba:	f04f 30ff 	mov.w	r0, #4294967295
 80005be:	f003 fb7b 	bl	8003cb8 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80005c2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80005c6:	f003 fb5f 	bl	8003c88 <BSP_LCD_SetTextColor>
 80005ca:	e008      	b.n	80005de <Audio_Init+0x3e>

	}
	else
	{
		sprintf(current_info_text, "Codec Error. Reset Device");
 80005cc:	490c      	ldr	r1, [pc, #48]	@ (8000600 <Audio_Init+0x60>)
 80005ce:	480d      	ldr	r0, [pc, #52]	@ (8000604 <Audio_Init+0x64>)
 80005d0:	f007 ff30 	bl	8008434 <siprintf>
		Display_Info((uint8_t *)current_info_text, 10, LCD_COLOR_RED);
 80005d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000608 <Audio_Init+0x68>)
 80005d6:	210a      	movs	r1, #10
 80005d8:	480a      	ldr	r0, [pc, #40]	@ (8000604 <Audio_Init+0x64>)
 80005da:	f000 f825 	bl	8000628 <Display_Info>

	}

	is_codec_initialized = AUDIO_OK;
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <Audio_Init+0x6c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
	memset((uint16_t*)AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE*2);
 80005e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005e8:	2100      	movs	r1, #0
 80005ea:	4809      	ldr	r0, [pc, #36]	@ (8000610 <Audio_Init+0x70>)
 80005ec:	f007 ff42 	bl	8008474 <memset>
	memset((uint16_t*)AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE*4);
 80005f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005f4:	2100      	movs	r1, #0
 80005f6:	4807      	ldr	r0, [pc, #28]	@ (8000614 <Audio_Init+0x74>)
 80005f8:	f007 ff3c 	bl	8008474 <memset>

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	08008d8c 	.word	0x08008d8c
 8000604:	20000448 	.word	0x20000448
 8000608:	ffff0000 	.word	0xffff0000
 800060c:	20000000 	.word	0x20000000
 8000610:	c0115800 	.word	0xc0115800
 8000614:	c0115c00 	.word	0xc0115c00

08000618 <Audio_Play>:

// Start audio playback and capture using DMA
void Audio_Play(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0





}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <Display_Info>:
	}

}

void Display_Info(uint8_t *info, uint8_t indent, uint32_t color)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	460b      	mov	r3, r1
 8000632:	607a      	str	r2, [r7, #4]
 8000634:	72fb      	strb	r3, [r7, #11]
	BSP_LCD_SetFont(&Font12);
 8000636:	480f      	ldr	r0, [pc, #60]	@ (8000674 <Display_Info+0x4c>)
 8000638:	f003 fb58 	bl	8003cec <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 800063c:	480e      	ldr	r0, [pc, #56]	@ (8000678 <Display_Info+0x50>)
 800063e:	f003 fb23 	bl	8003c88 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(INFO_XPOS, INFO_YPOS, INFO_WIDTH, INFO_HEIGHT);
 8000642:	2314      	movs	r3, #20
 8000644:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000648:	2100      	movs	r1, #0
 800064a:	2000      	movs	r0, #0
 800064c:	f003 fcbc 	bl	8003fc8 <BSP_LCD_FillRect>
	BSP_LCD_SetBackColor(LCD_COLOR_BROWN);
 8000650:	4809      	ldr	r0, [pc, #36]	@ (8000678 <Display_Info+0x50>)
 8000652:	f003 fb31 	bl	8003cb8 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(color);
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f003 fb16 	bl	8003c88 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(INFO_XPOS+indent, INFO_YPOS+(INFO_HEIGHT/3) +3, (uint8_t *)info, LEFT_MODE);
 800065c:	7afb      	ldrb	r3, [r7, #11]
 800065e:	b298      	uxth	r0, r3
 8000660:	2303      	movs	r3, #3
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	2109      	movs	r1, #9
 8000666:	f003 fb9f 	bl	8003da8 <BSP_LCD_DisplayStringAt>
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000038 	.word	0x20000038
 8000678:	ffa52a2a 	.word	0xffa52a2a

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f003 fe20 	bl	80042c4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f81a 	bl	80006bc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000688:	f000 f886 	bl	8000798 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fa88 	bl	8000ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000690:	f000 fa60 	bl	8000b54 <MX_DMA_Init>
  MX_I2C2_Init();
 8000694:	f000 f8e6 	bl	8000864 <MX_I2C2_Init>
  MX_SAI2_Init();
 8000698:	f000 f9ba 	bl	8000a10 <MX_SAI2_Init>
  MX_SPI2_Init();
 800069c:	f000 fa1c 	bl	8000ad8 <MX_SPI2_Init>
  MX_I2S3_Init();
 80006a0:	f000 f98a 	bl	80009b8 <MX_I2S3_Init>
  MX_I2S1_Init();
 80006a4:	f000 f95e 	bl	8000964 <MX_I2S1_Init>
  MX_I2C3_Init();
 80006a8:	f000 f91c 	bl	80008e4 <MX_I2C3_Init>
  MX_DMA2D_Init();
 80006ac:	f000 f8a8 	bl	8000800 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */

  Audio_Init();
 80006b0:	f7ff ff76 	bl	80005a0 <Audio_Init>
  Audio_Play();
 80006b4:	f7ff ffb0 	bl	8000618 <Audio_Play>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <main+0x3c>

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	@ 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	@ 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f007 fed2 	bl	8008474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <SystemClock_Config+0xd4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000790 <SystemClock_Config+0xd4>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ec:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <SystemClock_Config+0xd4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <SystemClock_Config+0xd8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a25      	ldr	r2, [pc, #148]	@ (8000794 <SystemClock_Config+0xd8>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <SystemClock_Config+0xd8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000724:	2319      	movs	r3, #25
 8000726:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000728:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800072c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	4618      	mov	r0, r3
 800073c:	f005 ffe0 	bl	8006700 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000746:	f000 fe39 	bl	80013bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074a:	f005 ff89 	bl	8006660 <HAL_PWREx_EnableOverDrive>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000754:	f000 fe32 	bl	80013bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2106      	movs	r1, #6
 8000776:	4618      	mov	r0, r3
 8000778:	f006 fa66 	bl	8006c48 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000782:	f000 fe1b 	bl	80013bc <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	@ 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0a2      	sub	sp, #136	@ 0x88
 800079c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2284      	movs	r2, #132	@ 0x84
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f007 fe65 	bl	8008474 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2S;
 80007aa:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <PeriphCommonClock_Config+0x64>)
 80007ac:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80007ae:	23c0      	movs	r3, #192	@ 0xc0
 80007b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80007be:	23c0      	movs	r3, #192	@ 0xc0
 80007c0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80007d6:	2300      	movs	r3, #0
 80007d8:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 80007da:	2300      	movs	r3, #0
 80007dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80007de:	2300      	movs	r3, #0
 80007e0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4618      	mov	r0, r3
 80007e6:	f006 fbe1 	bl	8006fac <HAL_RCCEx_PeriphCLKConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80007f0:	f000 fde4 	bl	80013bc <Error_Handler>
  }
}
 80007f4:	bf00      	nop
 80007f6:	3788      	adds	r7, #136	@ 0x88
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	00100001 	.word	0x00100001

08000800 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000804:	4b15      	ldr	r3, [pc, #84]	@ (800085c <MX_DMA2D_Init+0x5c>)
 8000806:	4a16      	ldr	r2, [pc, #88]	@ (8000860 <MX_DMA2D_Init+0x60>)
 8000808:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800080a:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_DMA2D_Init+0x5c>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <MX_DMA2D_Init+0x5c>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_DMA2D_Init+0x5c>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_DMA2D_Init+0x5c>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_DMA2D_Init+0x5c>)
 8000824:	2200      	movs	r2, #0
 8000826:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_DMA2D_Init+0x5c>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_DMA2D_Init+0x5c>)
 8000830:	2200      	movs	r2, #0
 8000832:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000834:	4809      	ldr	r0, [pc, #36]	@ (800085c <MX_DMA2D_Init+0x5c>)
 8000836:	f004 fa21 	bl	8004c7c <HAL_DMA2D_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000840:	f000 fdbc 	bl	80013bc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000844:	2101      	movs	r1, #1
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_DMA2D_Init+0x5c>)
 8000848:	f004 fb76 	bl	8004f38 <HAL_DMA2D_ConfigLayer>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000852:	f000 fdb3 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000b4 	.word	0x200000b4
 8000860:	4002b000 	.word	0x4002b000

08000864 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <MX_I2C2_Init+0x74>)
 800086a:	4a1c      	ldr	r2, [pc, #112]	@ (80008dc <MX_I2C2_Init+0x78>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 800086e:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <MX_I2C2_Init+0x74>)
 8000870:	4a1b      	ldr	r2, [pc, #108]	@ (80008e0 <MX_I2C2_Init+0x7c>)
 8000872:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000874:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087a:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <MX_I2C2_Init+0x74>)
 800087c:	2201      	movs	r2, #1
 800087e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <MX_I2C2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000886:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <MX_I2C2_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <MX_I2C2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_I2C2_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_I2C2_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800089e:	480e      	ldr	r0, [pc, #56]	@ (80008d8 <MX_I2C2_Init+0x74>)
 80008a0:	f004 ff4a 	bl	8005738 <HAL_I2C_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008aa:	f000 fd87 	bl	80013bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4809      	ldr	r0, [pc, #36]	@ (80008d8 <MX_I2C2_Init+0x74>)
 80008b2:	f005 fd0b 	bl	80062cc <HAL_I2CEx_ConfigAnalogFilter>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008bc:	f000 fd7e 	bl	80013bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008c0:	2100      	movs	r1, #0
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <MX_I2C2_Init+0x74>)
 80008c4:	f005 fd4d 	bl	8006362 <HAL_I2CEx_ConfigDigitalFilter>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ce:	f000 fd75 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000f4 	.word	0x200000f4
 80008dc:	40005800 	.word	0x40005800
 80008e0:	00c0eaff 	.word	0x00c0eaff

080008e4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <MX_I2C3_Init+0x74>)
 80008ea:	4a1c      	ldr	r2, [pc, #112]	@ (800095c <MX_I2C3_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <MX_I2C3_Init+0x74>)
 80008f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000960 <MX_I2C3_Init+0x7c>)
 80008f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <MX_I2C3_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <MX_I2C3_Init+0x74>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <MX_I2C3_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000906:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <MX_I2C3_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <MX_I2C3_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <MX_I2C3_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_I2C3_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800091e:	480e      	ldr	r0, [pc, #56]	@ (8000958 <MX_I2C3_Init+0x74>)
 8000920:	f004 ff0a 	bl	8005738 <HAL_I2C_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800092a:	f000 fd47 	bl	80013bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800092e:	2100      	movs	r1, #0
 8000930:	4809      	ldr	r0, [pc, #36]	@ (8000958 <MX_I2C3_Init+0x74>)
 8000932:	f005 fccb 	bl	80062cc <HAL_I2CEx_ConfigAnalogFilter>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800093c:	f000 fd3e 	bl	80013bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_I2C3_Init+0x74>)
 8000944:	f005 fd0d 	bl	8006362 <HAL_I2CEx_ConfigDigitalFilter>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800094e:	f000 fd35 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000148 	.word	0x20000148
 800095c:	40005c00 	.word	0x40005c00
 8000960:	00c0eaff 	.word	0x00c0eaff

08000964 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_I2S1_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <MX_I2S1_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <MX_I2S1_Init+0x4c>)
 8000970:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000974:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_I2S1_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_I2S1_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_I2S1_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_I2S1_Init+0x4c>)
 800098a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800098e:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <MX_I2S1_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_I2S1_Init+0x4c>)
 8000998:	2202      	movs	r2, #2
 800099a:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <MX_I2S1_Init+0x4c>)
 800099e:	f005 fd2d 	bl	80063fc <HAL_I2S_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 80009a8:	f000 fd08 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000019c 	.word	0x2000019c
 80009b4:	40013000 	.word	0x40013000

080009b8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_I2S3_Init+0x50>)
 80009be:	4a13      	ldr	r2, [pc, #76]	@ (8000a0c <MX_I2S3_Init+0x54>)
 80009c0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_I2S3_Init+0x50>)
 80009c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009c8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_I2S3_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <MX_I2S3_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_I2S3_Init+0x50>)
 80009d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009dc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80009de:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <MX_I2S3_Init+0x50>)
 80009e0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80009e4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <MX_I2S3_Init+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_I2S3_Init+0x50>)
 80009ee:	2202      	movs	r2, #2
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_I2S3_Init+0x50>)
 80009f4:	f005 fd02 	bl	80063fc <HAL_I2S_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_I2S3_Init+0x4a>
  {
    Error_Handler();
 80009fe:	f000 fcdd 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200001dc 	.word	0x200001dc
 8000a0c:	40003c00 	.word	0x40003c00

08000a10 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000a14:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac8 <MX_SAI2_Init+0xb8>)
 8000a16:	4a2d      	ldr	r2, [pc, #180]	@ (8000acc <MX_SAI2_Init+0xbc>)
 8000a18:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac8 <MX_SAI2_Init+0xb8>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000a20:	4b29      	ldr	r3, [pc, #164]	@ (8000ac8 <MX_SAI2_Init+0xb8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000a26:	4b28      	ldr	r3, [pc, #160]	@ (8000ac8 <MX_SAI2_Init+0xb8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000a2c:	4b26      	ldr	r3, [pc, #152]	@ (8000ac8 <MX_SAI2_Init+0xb8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a32:	4b25      	ldr	r3, [pc, #148]	@ (8000ac8 <MX_SAI2_Init+0xb8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000a38:	4b23      	ldr	r3, [pc, #140]	@ (8000ac8 <MX_SAI2_Init+0xb8>)
 8000a3a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000a3e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a40:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <MX_SAI2_Init+0xb8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a46:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <MX_SAI2_Init+0xb8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac8 <MX_SAI2_Init+0xb8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000a52:	2302      	movs	r3, #2
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	481b      	ldr	r0, [pc, #108]	@ (8000ac8 <MX_SAI2_Init+0xb8>)
 8000a5a:	f007 f8e3 	bl	8007c24 <HAL_SAI_InitProtocol>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_SAI2_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 fcaa 	bl	80013bc <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <MX_SAI2_Init+0xc0>)
 8000a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ad4 <MX_SAI2_Init+0xc4>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <MX_SAI2_Init+0xc0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <MX_SAI2_Init+0xc0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <MX_SAI2_Init+0xc0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000a80:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <MX_SAI2_Init+0xc0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a86:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <MX_SAI2_Init+0xc0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000a8c:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <MX_SAI2_Init+0xc0>)
 8000a8e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000a92:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <MX_SAI2_Init+0xc0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <MX_SAI2_Init+0xc0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <MX_SAI2_Init+0xc0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <MX_SAI2_Init+0xc0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000aac:	2302      	movs	r3, #2
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4807      	ldr	r0, [pc, #28]	@ (8000ad0 <MX_SAI2_Init+0xc0>)
 8000ab4:	f007 f8b6 	bl	8007c24 <HAL_SAI_InitProtocol>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_SAI2_Init+0xb2>
  {
    Error_Handler();
 8000abe:	f000 fc7d 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000021c 	.word	0x2000021c
 8000acc:	40015c04 	.word	0x40015c04
 8000ad0:	200002a0 	.word	0x200002a0
 8000ad4:	40015c24 	.word	0x40015c24

08000ad8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000ade:	4a1c      	ldr	r2, [pc, #112]	@ (8000b50 <MX_SPI2_Init+0x78>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000ae4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ae8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000af2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000af6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af8:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000afe:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b0a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000b26:	2207      	movs	r2, #7
 8000b28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000b32:	2208      	movs	r2, #8
 8000b34:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_SPI2_Init+0x74>)
 8000b38:	f007 fbd0 	bl	80082dc <HAL_SPI_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b42:	f000 fc3b 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200003e4 	.word	0x200003e4
 8000b50:	40003800 	.word	0x40003800

08000b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_DMA_Init+0x48>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b9c <MX_DMA_Init+0x48>)
 8000b60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <MX_DMA_Init+0x48>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	203c      	movs	r0, #60	@ 0x3c
 8000b78:	f003 fd01 	bl	800457e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000b7c:	203c      	movs	r0, #60	@ 0x3c
 8000b7e:	f003 fd1a 	bl	80045b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	2045      	movs	r0, #69	@ 0x45
 8000b88:	f003 fcf9 	bl	800457e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b8c:	2045      	movs	r0, #69	@ 0x45
 8000b8e:	f003 fd12 	bl	80045b6 <HAL_NVIC_EnableIRQ>

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b090      	sub	sp, #64	@ 0x40
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb6:	4bad      	ldr	r3, [pc, #692]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4aac      	ldr	r2, [pc, #688]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4baa      	ldr	r3, [pc, #680]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bce:	4ba7      	ldr	r3, [pc, #668]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4aa6      	ldr	r2, [pc, #664]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4ba4      	ldr	r3, [pc, #656]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4ba1      	ldr	r3, [pc, #644]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4aa0      	ldr	r2, [pc, #640]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b9e      	ldr	r3, [pc, #632]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	623b      	str	r3, [r7, #32]
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	4b9b      	ldr	r3, [pc, #620]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a9a      	ldr	r2, [pc, #616]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b98      	ldr	r3, [pc, #608]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	61fb      	str	r3, [r7, #28]
 8000c14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b95      	ldr	r3, [pc, #596]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a94      	ldr	r2, [pc, #592]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b92      	ldr	r3, [pc, #584]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	61bb      	str	r3, [r7, #24]
 8000c2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b8f      	ldr	r3, [pc, #572]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a8e      	ldr	r2, [pc, #568]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b8c      	ldr	r3, [pc, #560]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c46:	4b89      	ldr	r3, [pc, #548]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a88      	ldr	r2, [pc, #544]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b86      	ldr	r3, [pc, #536]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c5e:	4b83      	ldr	r3, [pc, #524]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a82      	ldr	r2, [pc, #520]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b80      	ldr	r3, [pc, #512]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c76:	4b7d      	ldr	r3, [pc, #500]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a7c      	ldr	r2, [pc, #496]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b7a      	ldr	r3, [pc, #488]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c8e:	4b77      	ldr	r3, [pc, #476]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a76      	ldr	r2, [pc, #472]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c94:	f043 0320 	orr.w	r3, r3, #32
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b74      	ldr	r3, [pc, #464]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0320 	and.w	r3, r3, #32
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	4b71      	ldr	r3, [pc, #452]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a70      	ldr	r2, [pc, #448]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b6e      	ldr	r3, [pc, #440]	@ (8000e6c <MX_GPIO_Init+0x2cc>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	486b      	ldr	r0, [pc, #428]	@ (8000e70 <MX_GPIO_Init+0x2d0>)
 8000cc4:	f004 fd1e 	bl	8005704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000cce:	4869      	ldr	r0, [pc, #420]	@ (8000e74 <MX_GPIO_Init+0x2d4>)
 8000cd0:	f004 fd18 	bl	8005704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	4867      	ldr	r0, [pc, #412]	@ (8000e78 <MX_GPIO_Init+0x2d8>)
 8000cda:	f004 fd13 	bl	8005704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ce4:	4865      	ldr	r0, [pc, #404]	@ (8000e7c <MX_GPIO_Init+0x2dc>)
 8000ce6:	f004 fd0d 	bl	8005704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	21c8      	movs	r1, #200	@ 0xc8
 8000cee:	4864      	ldr	r0, [pc, #400]	@ (8000e80 <MX_GPIO_Init+0x2e0>)
 8000cf0:	f004 fd08 	bl	8005704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d04:	230e      	movs	r3, #14
 8000d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	485d      	ldr	r0, [pc, #372]	@ (8000e84 <MX_GPIO_Init+0x2e4>)
 8000d10:	f004 fa40 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d14:	2308      	movs	r3, #8
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d24:	4619      	mov	r1, r3
 8000d26:	4857      	ldr	r0, [pc, #348]	@ (8000e84 <MX_GPIO_Init+0x2e4>)
 8000d28:	f004 fa34 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d3c:	2309      	movs	r3, #9
 8000d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d44:	4619      	mov	r1, r3
 8000d46:	484f      	ldr	r0, [pc, #316]	@ (8000e84 <MX_GPIO_Init+0x2e4>)
 8000d48:	f004 fa24 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000d4c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5e:	230b      	movs	r3, #11
 8000d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d66:	4619      	mov	r1, r3
 8000d68:	4845      	ldr	r0, [pc, #276]	@ (8000e80 <MX_GPIO_Init+0x2e0>)
 8000d6a:	f004 fa13 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000d6e:	f64d 7383 	movw	r3, #57219	@ 0xdf83
 8000d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d80:	230c      	movs	r3, #12
 8000d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d88:	4619      	mov	r1, r3
 8000d8a:	483e      	ldr	r0, [pc, #248]	@ (8000e84 <MX_GPIO_Init+0x2e4>)
 8000d8c:	f004 fa02 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000d90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d96:	2312      	movs	r3, #18
 8000d98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da2:	2304      	movs	r3, #4
 8000da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000daa:	4619      	mov	r1, r3
 8000dac:	4836      	ldr	r0, [pc, #216]	@ (8000e88 <MX_GPIO_Init+0x2e8>)
 8000dae:	f004 f9f1 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D3_Pin ULPI_D2_Pin ULPI_D1_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D2_Pin|ULPI_D1_Pin;
 8000db2:	f240 4323 	movw	r3, #1059	@ 0x423
 8000db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dc4:	230a      	movs	r3, #10
 8000dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	482e      	ldr	r0, [pc, #184]	@ (8000e88 <MX_GPIO_Init+0x2e8>)
 8000dd0:	f004 f9e0 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000de4:	2307      	movs	r3, #7
 8000de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dec:	4619      	mov	r1, r3
 8000dee:	4826      	ldr	r0, [pc, #152]	@ (8000e88 <MX_GPIO_Init+0x2e8>)
 8000df0:	f004 f9d0 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000df4:	2380      	movs	r3, #128	@ 0x80
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000e04:	2308      	movs	r3, #8
 8000e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4818      	ldr	r0, [pc, #96]	@ (8000e70 <MX_GPIO_Init+0x2d0>)
 8000e10:	f004 f9c0 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D6_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8000e14:	2320      	movs	r3, #32
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e24:	230d      	movs	r3, #13
 8000e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4815      	ldr	r0, [pc, #84]	@ (8000e84 <MX_GPIO_Init+0x2e4>)
 8000e30:	f004 f9b0 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e34:	2380      	movs	r3, #128	@ 0x80
 8000e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e44:	2307      	movs	r3, #7
 8000e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480e      	ldr	r0, [pc, #56]	@ (8000e88 <MX_GPIO_Init+0x2e8>)
 8000e50:	f004 f9a0 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000e54:	2340      	movs	r3, #64	@ 0x40
 8000e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e64:	230a      	movs	r3, #10
 8000e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000e68:	e010      	b.n	8000e8c <MX_GPIO_Init+0x2ec>
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020c00 	.word	0x40020c00
 8000e74:	40022000 	.word	0x40022000
 8000e78:	40022800 	.word	0x40022800
 8000e7c:	40021c00 	.word	0x40021c00
 8000e80:	40021800 	.word	0x40021800
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40020400 	.word	0x40020400
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	48bd      	ldr	r0, [pc, #756]	@ (8001188 <MX_GPIO_Init+0x5e8>)
 8000e94:	f004 f97e 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000e98:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eaa:	230c      	movs	r3, #12
 8000eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	48b5      	ldr	r0, [pc, #724]	@ (800118c <MX_GPIO_Init+0x5ec>)
 8000eb6:	f004 f96d 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000eba:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ecc:	230e      	movs	r3, #14
 8000ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	48ae      	ldr	r0, [pc, #696]	@ (8001190 <MX_GPIO_Init+0x5f0>)
 8000ed8:	f004 f95c 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000edc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	48a7      	ldr	r0, [pc, #668]	@ (8001190 <MX_GPIO_Init+0x5f0>)
 8000ef2:	f004 f94f 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000ef6:	2340      	movs	r3, #64	@ 0x40
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000efa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000efe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f08:	4619      	mov	r1, r3
 8000f0a:	48a2      	ldr	r0, [pc, #648]	@ (8001194 <MX_GPIO_Init+0x5f4>)
 8000f0c:	f004 f942 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000f10:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f22:	230c      	movs	r3, #12
 8000f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4899      	ldr	r0, [pc, #612]	@ (8001194 <MX_GPIO_Init+0x5f4>)
 8000f2e:	f004 f931 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin PC8 */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|GPIO_PIN_8;
 8000f32:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f44:	230c      	movs	r3, #12
 8000f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4892      	ldr	r0, [pc, #584]	@ (8001198 <MX_GPIO_Init+0x5f8>)
 8000f50:	f004 f920 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000f54:	23f7      	movs	r3, #247	@ 0xf7
 8000f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f64:	230e      	movs	r3, #14
 8000f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	488b      	ldr	r0, [pc, #556]	@ (800119c <MX_GPIO_Init+0x5fc>)
 8000f70:	f004 f910 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000f74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f86:	2309      	movs	r3, #9
 8000f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	487e      	ldr	r0, [pc, #504]	@ (800118c <MX_GPIO_Init+0x5ec>)
 8000f92:	f004 f8ff 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f96:	2320      	movs	r3, #32
 8000f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000faa:	4619      	mov	r1, r3
 8000fac:	4879      	ldr	r0, [pc, #484]	@ (8001194 <MX_GPIO_Init+0x5f4>)
 8000fae:	f004 f8f1 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000fb2:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4875      	ldr	r0, [pc, #468]	@ (80011a0 <MX_GPIO_Init+0x600>)
 8000fcc:	f004 f8e2 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000fd0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fea:	4619      	mov	r1, r3
 8000fec:	486d      	ldr	r0, [pc, #436]	@ (80011a4 <MX_GPIO_Init+0x604>)
 8000fee:	f004 f8d1 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000ff2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001004:	4619      	mov	r1, r3
 8001006:	4864      	ldr	r0, [pc, #400]	@ (8001198 <MX_GPIO_Init+0x5f8>)
 8001008:	f004 f8c4 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800100c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800101e:	230e      	movs	r3, #14
 8001020:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001022:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001026:	4619      	mov	r1, r3
 8001028:	485d      	ldr	r0, [pc, #372]	@ (80011a0 <MX_GPIO_Init+0x600>)
 800102a:	f004 f8b3 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800102e:	2308      	movs	r3, #8
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001042:	4619      	mov	r1, r3
 8001044:	4855      	ldr	r0, [pc, #340]	@ (800119c <MX_GPIO_Init+0x5fc>)
 8001046:	f004 f8a5 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800104a:	2310      	movs	r3, #16
 800104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104e:	2300      	movs	r3, #0
 8001050:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800105a:	4619      	mov	r1, r3
 800105c:	484d      	ldr	r0, [pc, #308]	@ (8001194 <MX_GPIO_Init+0x5f4>)
 800105e:	f004 f899 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001062:	2304      	movs	r3, #4
 8001064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001072:	230c      	movs	r3, #12
 8001074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800107a:	4619      	mov	r1, r3
 800107c:	4845      	ldr	r0, [pc, #276]	@ (8001194 <MX_GPIO_Init+0x5f4>)
 800107e:	f004 f889 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP3_Pin */
  GPIO_InitStruct.Pin = TP3_Pin;
 8001082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TP3_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001094:	4619      	mov	r1, r3
 8001096:	4844      	ldr	r0, [pc, #272]	@ (80011a8 <MX_GPIO_Init+0x608>)
 8001098:	f004 f87c 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A1_Pin FMC_A3_Pin FMC_A4_Pin FMC_A5_Pin
                           FMC_A6_Pin FMC_A9_Pin FMC_A7_Pin FMC_A8_Pin
                           FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A1_Pin|FMC_A3_Pin|FMC_A4_Pin|FMC_A5_Pin
 800109c:	f64f 033a 	movw	r3, #63546	@ 0xf83a
 80010a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_A7_Pin|FMC_A8_Pin
                          |FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010ae:	230c      	movs	r3, #12
 80010b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b6:	4619      	mov	r1, r3
 80010b8:	483c      	ldr	r0, [pc, #240]	@ (80011ac <MX_GPIO_Init+0x60c>)
 80010ba:	f004 f86b 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80010be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d4:	4619      	mov	r1, r3
 80010d6:	4834      	ldr	r0, [pc, #208]	@ (80011a8 <MX_GPIO_Init+0x608>)
 80010d8:	f004 f85c 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80010dc:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80010e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010ee:	230d      	movs	r3, #13
 80010f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f6:	4619      	mov	r1, r3
 80010f8:	482b      	ldr	r0, [pc, #172]	@ (80011a8 <MX_GPIO_Init+0x608>)
 80010fa:	f004 f84b 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80010fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001110:	2307      	movs	r3, #7
 8001112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001118:	4619      	mov	r1, r3
 800111a:	4822      	ldr	r0, [pc, #136]	@ (80011a4 <MX_GPIO_Init+0x604>)
 800111c:	f004 f83a 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001120:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001132:	2305      	movs	r3, #5
 8001134:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001136:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800113a:	4619      	mov	r1, r3
 800113c:	4816      	ldr	r0, [pc, #88]	@ (8001198 <MX_GPIO_Init+0x5f8>)
 800113e:	f004 f829 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001142:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001154:	2301      	movs	r3, #1
 8001156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800115c:	4619      	mov	r1, r3
 800115e:	4811      	ldr	r0, [pc, #68]	@ (80011a4 <MX_GPIO_Init+0x604>)
 8001160:	f004 f818 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001164:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001168:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800116a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800116e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001178:	4619      	mov	r1, r3
 800117a:	4809      	ldr	r0, [pc, #36]	@ (80011a0 <MX_GPIO_Init+0x600>)
 800117c:	f004 f80a 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8001180:	2348      	movs	r3, #72	@ 0x48
 8001182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	e013      	b.n	80011b0 <MX_GPIO_Init+0x610>
 8001188:	40020400 	.word	0x40020400
 800118c:	40021800 	.word	0x40021800
 8001190:	40022400 	.word	0x40022400
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40020800 	.word	0x40020800
 800119c:	40022800 	.word	0x40022800
 80011a0:	40022000 	.word	0x40022000
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40021c00 	.word	0x40021c00
 80011ac:	40021400 	.word	0x40021400
 80011b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ba:	2305      	movs	r3, #5
 80011bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	4876      	ldr	r0, [pc, #472]	@ (80013a0 <MX_GPIO_Init+0x800>)
 80011c6:	f003 ffe5 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80011ca:	2328      	movs	r3, #40	@ 0x28
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011da:	230c      	movs	r3, #12
 80011dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011e2:	4619      	mov	r1, r3
 80011e4:	486f      	ldr	r0, [pc, #444]	@ (80013a4 <MX_GPIO_Init+0x804>)
 80011e6:	f003 ffd5 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80011ea:	23c8      	movs	r3, #200	@ 0xc8
 80011ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011fe:	4619      	mov	r1, r3
 8001200:	4869      	ldr	r0, [pc, #420]	@ (80013a8 <MX_GPIO_Init+0x808>)
 8001202:	f003 ffc7 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A3_Pin;
 8001206:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120c:	2303      	movs	r3, #3
 800120e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001214:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001218:	4619      	mov	r1, r3
 800121a:	4864      	ldr	r0, [pc, #400]	@ (80013ac <MX_GPIO_Init+0x80c>)
 800121c:	f003 ffba 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001220:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001232:	2305      	movs	r3, #5
 8001234:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800123a:	4619      	mov	r1, r3
 800123c:	485c      	ldr	r0, [pc, #368]	@ (80013b0 <MX_GPIO_Init+0x810>)
 800123e:	f003 ffa9 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001242:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001254:	2306      	movs	r3, #6
 8001256:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001258:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800125c:	4619      	mov	r1, r3
 800125e:	4853      	ldr	r0, [pc, #332]	@ (80013ac <MX_GPIO_Init+0x80c>)
 8001260:	f003 ff98 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001264:	2305      	movs	r3, #5
 8001266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001274:	230a      	movs	r3, #10
 8001276:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800127c:	4619      	mov	r1, r3
 800127e:	4848      	ldr	r0, [pc, #288]	@ (80013a0 <MX_GPIO_Init+0x800>)
 8001280:	f003 ff88 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin;
 8001284:	2322      	movs	r3, #34	@ 0x22
 8001286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001294:	230b      	movs	r3, #11
 8001296:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001298:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800129c:	4619      	mov	r1, r3
 800129e:	4840      	ldr	r0, [pc, #256]	@ (80013a0 <MX_GPIO_Init+0x800>)
 80012a0:	f003 ff78 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012a4:	2304      	movs	r3, #4
 80012a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012b4:	2309      	movs	r3, #9
 80012b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012bc:	4619      	mov	r1, r3
 80012be:	483c      	ldr	r0, [pc, #240]	@ (80013b0 <MX_GPIO_Init+0x810>)
 80012c0:	f003 ff68 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80012c4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80012c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012d6:	2309      	movs	r3, #9
 80012d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012de:	4619      	mov	r1, r3
 80012e0:	4834      	ldr	r0, [pc, #208]	@ (80013b4 <MX_GPIO_Init+0x814>)
 80012e2:	f003 ff57 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80012e6:	2304      	movs	r3, #4
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ea:	2300      	movs	r3, #0
 80012ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012f6:	4619      	mov	r1, r3
 80012f8:	482b      	ldr	r0, [pc, #172]	@ (80013a8 <MX_GPIO_Init+0x808>)
 80012fa:	f003 ff4b 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_REF_CLK_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin;
 80012fe:	2302      	movs	r3, #2
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800130e:	230b      	movs	r3, #11
 8001310:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(RMII_REF_CLK_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001316:	4619      	mov	r1, r3
 8001318:	4827      	ldr	r0, [pc, #156]	@ (80013b8 <MX_GPIO_Init+0x818>)
 800131a:	f003 ff3b 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800131e:	2301      	movs	r3, #1
 8001320:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001322:	2303      	movs	r3, #3
 8001324:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800132e:	4619      	mov	r1, r3
 8001330:	4821      	ldr	r0, [pc, #132]	@ (80013b8 <MX_GPIO_Init+0x818>)
 8001332:	f003 ff2f 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001336:	2340      	movs	r3, #64	@ 0x40
 8001338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001346:	230d      	movs	r3, #13
 8001348:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800134e:	4619      	mov	r1, r3
 8001350:	4819      	ldr	r0, [pc, #100]	@ (80013b8 <MX_GPIO_Init+0x818>)
 8001352:	f003 ff1f 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001356:	2340      	movs	r3, #64	@ 0x40
 8001358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001366:	2309      	movs	r3, #9
 8001368:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800136e:	4619      	mov	r1, r3
 8001370:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <MX_GPIO_Init+0x804>)
 8001372:	f003 ff0f 	bl	8005194 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_D0_Pin;
 8001376:	2308      	movs	r3, #8
 8001378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001386:	230a      	movs	r3, #10
 8001388:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_D0_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800138e:	4619      	mov	r1, r3
 8001390:	4809      	ldr	r0, [pc, #36]	@ (80013b8 <MX_GPIO_Init+0x818>)
 8001392:	f003 feff 	bl	8005194 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001396:	bf00      	nop
 8001398:	3740      	adds	r7, #64	@ 0x40
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40021c00 	.word	0x40021c00
 80013a8:	40021800 	.word	0x40021800
 80013ac:	40021400 	.word	0x40021400
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40020000 	.word	0x40020000

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <Error_Handler+0x8>

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <HAL_MspInit+0x44>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	4a0e      	ldr	r2, [pc, #56]	@ (800140c <HAL_MspInit+0x44>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <HAL_MspInit+0x44>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <HAL_MspInit+0x44>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	4a08      	ldr	r2, [pc, #32]	@ (800140c <HAL_MspInit+0x44>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_MspInit+0x44>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0a      	ldr	r2, [pc, #40]	@ (8001448 <HAL_DMA2D_MspInit+0x38>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10b      	bne.n	800143a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001422:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <HAL_DMA2D_MspInit+0x3c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a09      	ldr	r2, [pc, #36]	@ (800144c <HAL_DMA2D_MspInit+0x3c>)
 8001428:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b07      	ldr	r3, [pc, #28]	@ (800144c <HAL_DMA2D_MspInit+0x3c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	4002b000 	.word	0x4002b000
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b0ae      	sub	sp, #184	@ 0xb8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	2284      	movs	r2, #132	@ 0x84
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f006 ffff 	bl	8008474 <memset>
  if(hi2c->Instance==I2C2)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a54      	ldr	r2, [pc, #336]	@ (80015cc <HAL_I2C_MspInit+0x17c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d15e      	bne.n	800153e <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001484:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	4618      	mov	r0, r3
 8001492:	f005 fd8b 	bl	8006fac <HAL_RCCEx_PeriphCLKConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800149c:	f7ff ff8e 	bl	80013bc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014a0:	4b4b      	ldr	r3, [pc, #300]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a4:	4a4a      	ldr	r2, [pc, #296]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 80014a6:	f043 0320 	orr.w	r3, r3, #32
 80014aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ac:	4b48      	ldr	r3, [pc, #288]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b8:	4b45      	ldr	r3, [pc, #276]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014bc:	4a44      	ldr	r2, [pc, #272]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 80014be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c4:	4b42      	ldr	r3, [pc, #264]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF2     ------> I2C2_SMBA
    PH4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80014d0:	2305      	movs	r3, #5
 80014d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d6:	2312      	movs	r3, #18
 80014d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014e8:	2304      	movs	r3, #4
 80014ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4837      	ldr	r0, [pc, #220]	@ (80015d4 <HAL_I2C_MspInit+0x184>)
 80014f6:	f003 fe4d 	bl	8005194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014fa:	2310      	movs	r3, #16
 80014fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001500:	2312      	movs	r3, #18
 8001502:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001512:	2304      	movs	r3, #4
 8001514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001518:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800151c:	4619      	mov	r1, r3
 800151e:	482e      	ldr	r0, [pc, #184]	@ (80015d8 <HAL_I2C_MspInit+0x188>)
 8001520:	f003 fe38 	bl	8005194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001524:	4b2a      	ldr	r3, [pc, #168]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	4a29      	ldr	r2, [pc, #164]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 800152a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800152e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001530:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001534:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800153c:	e042      	b.n	80015c4 <HAL_I2C_MspInit+0x174>
  else if(hi2c->Instance==I2C3)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a26      	ldr	r2, [pc, #152]	@ (80015dc <HAL_I2C_MspInit+0x18c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d13d      	bne.n	80015c4 <HAL_I2C_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001548:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800154c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001554:	f107 0320 	add.w	r3, r7, #32
 8001558:	4618      	mov	r0, r3
 800155a:	f005 fd27 	bl	8006fac <HAL_RCCEx_PeriphCLKConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 8001564:	f7ff ff2a 	bl	80013bc <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001568:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156c:	4a18      	ldr	r2, [pc, #96]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 800156e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001572:	6313      	str	r3, [r2, #48]	@ 0x30
 8001574:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001580:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001584:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001588:	2312      	movs	r3, #18
 800158a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800159a:	2304      	movs	r3, #4
 800159c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015a0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015a4:	4619      	mov	r1, r3
 80015a6:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <HAL_I2C_MspInit+0x188>)
 80015a8:	f003 fdf4 	bl	8005194 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b0:	4a07      	ldr	r2, [pc, #28]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 80015b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b8:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <HAL_I2C_MspInit+0x180>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	bf00      	nop
 80015c6:	37b8      	adds	r7, #184	@ 0xb8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40005800 	.word	0x40005800
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40021400 	.word	0x40021400
 80015d8:	40021c00 	.word	0x40021c00
 80015dc:	40005c00 	.word	0x40005c00

080015e0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a16      	ldr	r2, [pc, #88]	@ (8001648 <HAL_I2C_MspDeInit+0x68>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d112      	bne.n	8001618 <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80015f2:	4b16      	ldr	r3, [pc, #88]	@ (800164c <HAL_I2C_MspDeInit+0x6c>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	4a15      	ldr	r2, [pc, #84]	@ (800164c <HAL_I2C_MspDeInit+0x6c>)
 80015f8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80015fc:	6413      	str	r3, [r2, #64]	@ 0x40
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF2     ------> I2C2_SMBA
    PH4     ------> I2C2_SCL
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_0);
 80015fe:	2101      	movs	r1, #1
 8001600:	4813      	ldr	r0, [pc, #76]	@ (8001650 <HAL_I2C_MspDeInit+0x70>)
 8001602:	f003 ff73 	bl	80054ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2);
 8001606:	2104      	movs	r1, #4
 8001608:	4811      	ldr	r0, [pc, #68]	@ (8001650 <HAL_I2C_MspDeInit+0x70>)
 800160a:	f003 ff6f 	bl	80054ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_4);
 800160e:	2110      	movs	r1, #16
 8001610:	4810      	ldr	r0, [pc, #64]	@ (8001654 <HAL_I2C_MspDeInit+0x74>)
 8001612:	f003 ff6b 	bl	80054ec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001616:	e013      	b.n	8001640 <HAL_I2C_MspDeInit+0x60>
  else if(hi2c->Instance==I2C3)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0e      	ldr	r2, [pc, #56]	@ (8001658 <HAL_I2C_MspDeInit+0x78>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d10e      	bne.n	8001640 <HAL_I2C_MspDeInit+0x60>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001622:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <HAL_I2C_MspDeInit+0x6c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	4a09      	ldr	r2, [pc, #36]	@ (800164c <HAL_I2C_MspDeInit+0x6c>)
 8001628:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800162c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800162e:	2180      	movs	r1, #128	@ 0x80
 8001630:	4808      	ldr	r0, [pc, #32]	@ (8001654 <HAL_I2C_MspDeInit+0x74>)
 8001632:	f003 ff5b 	bl	80054ec <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8001636:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800163a:	4806      	ldr	r0, [pc, #24]	@ (8001654 <HAL_I2C_MspDeInit+0x74>)
 800163c:	f003 ff56 	bl	80054ec <HAL_GPIO_DeInit>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40005800 	.word	0x40005800
 800164c:	40023800 	.word	0x40023800
 8001650:	40021400 	.word	0x40021400
 8001654:	40021c00 	.word	0x40021c00
 8001658:	40005c00 	.word	0x40005c00

0800165c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08e      	sub	sp, #56	@ 0x38
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a4b      	ldr	r2, [pc, #300]	@ (80017a8 <HAL_I2S_MspInit+0x14c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d145      	bne.n	800170a <HAL_I2S_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800167e:	4b4b      	ldr	r3, [pc, #300]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	4a4a      	ldr	r2, [pc, #296]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 8001684:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001688:	6453      	str	r3, [r2, #68]	@ 0x44
 800168a:	4b48      	ldr	r3, [pc, #288]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001692:	623b      	str	r3, [r7, #32]
 8001694:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b45      	ldr	r3, [pc, #276]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a44      	ldr	r2, [pc, #272]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b42      	ldr	r3, [pc, #264]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	4b3f      	ldr	r3, [pc, #252]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a3e      	ldr	r2, [pc, #248]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b3c      	ldr	r3, [pc, #240]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	69bb      	ldr	r3, [r7, #24]
    PA15     ------> I2S1_WS
    PC4     ------> I2S1_MCK
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 80016c6:	f248 03a0 	movw	r3, #32928	@ 0x80a0
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016d8:	2305      	movs	r3, #5
 80016da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e0:	4619      	mov	r1, r3
 80016e2:	4833      	ldr	r0, [pc, #204]	@ (80017b0 <HAL_I2S_MspInit+0x154>)
 80016e4:	f003 fd56 	bl	8005194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016e8:	2310      	movs	r3, #16
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016f8:	2305      	movs	r3, #5
 80016fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	482c      	ldr	r0, [pc, #176]	@ (80017b4 <HAL_I2S_MspInit+0x158>)
 8001704:	f003 fd46 	bl	8005194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001708:	e049      	b.n	800179e <HAL_I2S_MspInit+0x142>
  else if(hi2s->Instance==SPI3)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a2a      	ldr	r2, [pc, #168]	@ (80017b8 <HAL_I2S_MspInit+0x15c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d144      	bne.n	800179e <HAL_I2S_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001714:	4b25      	ldr	r3, [pc, #148]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	4a24      	ldr	r2, [pc, #144]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 800171a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800171e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001720:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001730:	4a1e      	ldr	r2, [pc, #120]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6313      	str	r3, [r2, #48]	@ 0x30
 8001738:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001748:	4a18      	ldr	r2, [pc, #96]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001750:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <HAL_I2S_MspInit+0x150>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_7;
 800175c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800176e:	2306      	movs	r3, #6
 8001770:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	480e      	ldr	r0, [pc, #56]	@ (80017b4 <HAL_I2S_MspInit+0x158>)
 800177a:	f003 fd0b 	bl	8005194 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800177e:	2310      	movs	r3, #16
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800178e:	2306      	movs	r3, #6
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <HAL_I2S_MspInit+0x154>)
 800179a:	f003 fcfb 	bl	8005194 <HAL_GPIO_Init>
}
 800179e:	bf00      	nop
 80017a0:	3738      	adds	r7, #56	@ 0x38
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40013000 	.word	0x40013000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000
 80017b4:	40020800 	.word	0x40020800
 80017b8:	40003c00 	.word	0x40003c00

080017bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a25      	ldr	r2, [pc, #148]	@ (8001870 <HAL_SPI_MspInit+0xb4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d144      	bne.n	8001868 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017de:	4b25      	ldr	r3, [pc, #148]	@ (8001874 <HAL_SPI_MspInit+0xb8>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	4a24      	ldr	r2, [pc, #144]	@ (8001874 <HAL_SPI_MspInit+0xb8>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ea:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <HAL_SPI_MspInit+0xb8>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80017f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001874 <HAL_SPI_MspInit+0xb8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001874 <HAL_SPI_MspInit+0xb8>)
 80017fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <HAL_SPI_MspInit+0xb8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_SPI_MspInit+0xb8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a18      	ldr	r2, [pc, #96]	@ (8001874 <HAL_SPI_MspInit+0xb8>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <HAL_SPI_MspInit+0xb8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001826:	2302      	movs	r3, #2
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001836:	2305      	movs	r3, #5
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	480d      	ldr	r0, [pc, #52]	@ (8001878 <HAL_SPI_MspInit+0xbc>)
 8001842:	f003 fca7 	bl	8005194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001846:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001858:	2305      	movs	r3, #5
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	4806      	ldr	r0, [pc, #24]	@ (800187c <HAL_SPI_MspInit+0xc0>)
 8001864:	f003 fc96 	bl	8005194 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001868:	bf00      	nop
 800186a:	3728      	adds	r7, #40	@ 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40003800 	.word	0x40003800
 8001874:	40023800 	.word	0x40023800
 8001878:	40022000 	.word	0x40022000
 800187c:	40020400 	.word	0x40020400

08001880 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	@ 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a7c      	ldr	r2, [pc, #496]	@ (8001a80 <HAL_SAI_MspInit+0x200>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d15c      	bne.n	800194c <HAL_SAI_MspInit+0xcc>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8001892:	4b7c      	ldr	r3, [pc, #496]	@ (8001a84 <HAL_SAI_MspInit+0x204>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10b      	bne.n	80018b2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800189a:	4b7b      	ldr	r3, [pc, #492]	@ (8001a88 <HAL_SAI_MspInit+0x208>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	4a7a      	ldr	r2, [pc, #488]	@ (8001a88 <HAL_SAI_MspInit+0x208>)
 80018a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a6:	4b78      	ldr	r3, [pc, #480]	@ (8001a88 <HAL_SAI_MspInit+0x208>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80018b2:	4b74      	ldr	r3, [pc, #464]	@ (8001a84 <HAL_SAI_MspInit+0x204>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	4a72      	ldr	r2, [pc, #456]	@ (8001a84 <HAL_SAI_MspInit+0x204>)
 80018ba:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80018bc:	23f0      	movs	r3, #240	@ 0xf0
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80018cc:	230a      	movs	r3, #10
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	486d      	ldr	r0, [pc, #436]	@ (8001a8c <HAL_SAI_MspInit+0x20c>)
 80018d8:	f003 fc5c 	bl	8005194 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 80018dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 80018de:	4a6d      	ldr	r2, [pc, #436]	@ (8001a94 <HAL_SAI_MspInit+0x214>)
 80018e0:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 80018e2:	4b6b      	ldr	r3, [pc, #428]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 80018e4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80018e8:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ea:	4b69      	ldr	r3, [pc, #420]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f0:	4b67      	ldr	r3, [pc, #412]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80018f6:	4b66      	ldr	r3, [pc, #408]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 80018f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018fc:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018fe:	4b64      	ldr	r3, [pc, #400]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 8001900:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001904:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001906:	4b62      	ldr	r3, [pc, #392]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 8001908:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800190c:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800190e:	4b60      	ldr	r3, [pc, #384]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 8001910:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001914:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001916:	4b5e      	ldr	r3, [pc, #376]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 8001918:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800191c:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800191e:	4b5c      	ldr	r3, [pc, #368]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 8001920:	2200      	movs	r2, #0
 8001922:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8001924:	485a      	ldr	r0, [pc, #360]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 8001926:	f002 fe61 	bl	80045ec <HAL_DMA_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_SAI_MspInit+0xb4>
    {
      Error_Handler();
 8001930:	f7ff fd44 	bl	80013bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a56      	ldr	r2, [pc, #344]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 8001938:	671a      	str	r2, [r3, #112]	@ 0x70
 800193a:	4a55      	ldr	r2, [pc, #340]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a53      	ldr	r2, [pc, #332]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 8001944:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001946:	4a52      	ldr	r2, [pc, #328]	@ (8001a90 <HAL_SAI_MspInit+0x210>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a51      	ldr	r2, [pc, #324]	@ (8001a98 <HAL_SAI_MspInit+0x218>)
 8001952:	4293      	cmp	r3, r2
 8001954:	f040 808f 	bne.w	8001a76 <HAL_SAI_MspInit+0x1f6>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8001958:	4b4a      	ldr	r3, [pc, #296]	@ (8001a84 <HAL_SAI_MspInit+0x204>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10b      	bne.n	8001978 <HAL_SAI_MspInit+0xf8>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001960:	4b49      	ldr	r3, [pc, #292]	@ (8001a88 <HAL_SAI_MspInit+0x208>)
 8001962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001964:	4a48      	ldr	r2, [pc, #288]	@ (8001a88 <HAL_SAI_MspInit+0x208>)
 8001966:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800196a:	6453      	str	r3, [r2, #68]	@ 0x44
 800196c:	4b46      	ldr	r3, [pc, #280]	@ (8001a88 <HAL_SAI_MspInit+0x208>)
 800196e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001970:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001978:	4b42      	ldr	r3, [pc, #264]	@ (8001a84 <HAL_SAI_MspInit+0x204>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	4a41      	ldr	r2, [pc, #260]	@ (8001a84 <HAL_SAI_MspInit+0x204>)
 8001980:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PA12     ------> SAI2_FS_B
    PG10     ------> SAI2_SD_B
    PH2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001982:	2340      	movs	r3, #64	@ 0x40
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001992:	230a      	movs	r3, #10
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	483f      	ldr	r0, [pc, #252]	@ (8001a9c <HAL_SAI_MspInit+0x21c>)
 800199e:	f003 fbf9 	bl	8005194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 80019b4:	2308      	movs	r3, #8
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	4838      	ldr	r0, [pc, #224]	@ (8001aa0 <HAL_SAI_MspInit+0x220>)
 80019c0:	f003 fbe8 	bl	8005194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80019c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80019d6:	230a      	movs	r3, #10
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4830      	ldr	r0, [pc, #192]	@ (8001aa4 <HAL_SAI_MspInit+0x224>)
 80019e2:	f003 fbd7 	bl	8005194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019e6:	2304      	movs	r3, #4
 80019e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80019f6:	230a      	movs	r3, #10
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4829      	ldr	r0, [pc, #164]	@ (8001aa8 <HAL_SAI_MspInit+0x228>)
 8001a02:	f003 fbc7 	bl	8005194 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream6;
 8001a06:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a08:	4a29      	ldr	r2, [pc, #164]	@ (8001ab0 <HAL_SAI_MspInit+0x230>)
 8001a0a:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 8001a0c:	4b27      	ldr	r3, [pc, #156]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a0e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001a12:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a14:	4b25      	ldr	r3, [pc, #148]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a16:	2240      	movs	r2, #64	@ 0x40
 8001a18:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001a20:	4b22      	ldr	r3, [pc, #136]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a26:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a28:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a2e:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a30:	4b1e      	ldr	r3, [pc, #120]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a36:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a3e:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a42:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a46:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001a4e:	4817      	ldr	r0, [pc, #92]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a50:	f002 fdcc 	bl	80045ec <HAL_DMA_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_SAI_MspInit+0x1de>
    {
      Error_Handler();
 8001a5a:	f7ff fcaf 	bl	80013bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a62:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a64:	4a11      	ldr	r2, [pc, #68]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a6e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001a70:	4a0e      	ldr	r2, [pc, #56]	@ (8001aac <HAL_SAI_MspInit+0x22c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	@ 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40015c04 	.word	0x40015c04
 8001a84:	20000470 	.word	0x20000470
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	20000324 	.word	0x20000324
 8001a94:	40026470 	.word	0x40026470
 8001a98:	40015c24 	.word	0x40015c24
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	40021c00 	.word	0x40021c00
 8001aac:	20000384 	.word	0x20000384
 8001ab0:	400264a0 	.word	0x400264a0

08001ab4 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a29      	ldr	r2, [pc, #164]	@ (8001b68 <HAL_SAI_MspDeInit+0xb4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d11c      	bne.n	8001b00 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 8001ac6:	4b29      	ldr	r3, [pc, #164]	@ (8001b6c <HAL_SAI_MspDeInit+0xb8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	4a27      	ldr	r2, [pc, #156]	@ (8001b6c <HAL_SAI_MspDeInit+0xb8>)
 8001ace:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8001ad0:	4b26      	ldr	r3, [pc, #152]	@ (8001b6c <HAL_SAI_MspDeInit+0xb8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8001ad8:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <HAL_SAI_MspDeInit+0xbc>)
 8001ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001adc:	4a24      	ldr	r2, [pc, #144]	@ (8001b70 <HAL_SAI_MspDeInit+0xbc>)
 8001ade:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001ae2:	6453      	str	r3, [r2, #68]	@ 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_4|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8001ae4:	21f0      	movs	r1, #240	@ 0xf0
 8001ae6:	4823      	ldr	r0, [pc, #140]	@ (8001b74 <HAL_SAI_MspDeInit+0xc0>)
 8001ae8:	f003 fd00 	bl	80054ec <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fe29 	bl	8004748 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 fe24 	bl	8004748 <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1c      	ldr	r2, [pc, #112]	@ (8001b78 <HAL_SAI_MspDeInit+0xc4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d12a      	bne.n	8001b60 <HAL_SAI_MspDeInit+0xac>
    {
    SAI2_client --;
 8001b0a:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <HAL_SAI_MspDeInit+0xb8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	4a16      	ldr	r2, [pc, #88]	@ (8001b6c <HAL_SAI_MspDeInit+0xb8>)
 8001b12:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8001b14:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <HAL_SAI_MspDeInit+0xb8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8001b1c:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <HAL_SAI_MspDeInit+0xbc>)
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b20:	4a13      	ldr	r2, [pc, #76]	@ (8001b70 <HAL_SAI_MspDeInit+0xbc>)
 8001b22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001b26:	6453      	str	r3, [r2, #68]	@ 0x44
    PE6     ------> SAI2_MCLK_B
    PA12     ------> SAI2_FS_B
    PG10     ------> SAI2_SD_B
    PH2     ------> SAI2_SCK_B
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_6);
 8001b28:	2140      	movs	r1, #64	@ 0x40
 8001b2a:	4814      	ldr	r0, [pc, #80]	@ (8001b7c <HAL_SAI_MspDeInit+0xc8>)
 8001b2c:	f003 fcde 	bl	80054ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8001b30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b34:	4812      	ldr	r0, [pc, #72]	@ (8001b80 <HAL_SAI_MspDeInit+0xcc>)
 8001b36:	f003 fcd9 	bl	80054ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8001b3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b3e:	4811      	ldr	r0, [pc, #68]	@ (8001b84 <HAL_SAI_MspDeInit+0xd0>)
 8001b40:	f003 fcd4 	bl	80054ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_2);
 8001b44:	2104      	movs	r1, #4
 8001b46:	4810      	ldr	r0, [pc, #64]	@ (8001b88 <HAL_SAI_MspDeInit+0xd4>)
 8001b48:	f003 fcd0 	bl	80054ec <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fdf9 	bl	8004748 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 fdf4 	bl	8004748 <HAL_DMA_DeInit>
    }
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40015c04 	.word	0x40015c04
 8001b6c:	20000470 	.word	0x20000470
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40022000 	.word	0x40022000
 8001b78:	40015c24 	.word	0x40015c24
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40021800 	.word	0x40021800
 8001b88:	40021c00 	.word	0x40021c00

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <NMI_Handler+0x4>

08001b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <BusFault_Handler+0x4>

08001bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <UsageFault_Handler+0x4>

08001bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be2:	f002 fbad 	bl	8004340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001bf0:	4802      	ldr	r0, [pc, #8]	@ (8001bfc <DMA2_Stream4_IRQHandler+0x10>)
 8001bf2:	f002 fe07 	bl	8004804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000324 	.word	0x20000324

08001c00 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001c04:	4802      	ldr	r0, [pc, #8]	@ (8001c10 <DMA2_Stream6_IRQHandler+0x10>)
 8001c06:	f002 fdfd 	bl	8004804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000384 	.word	0x20000384

08001c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c1c:	4a14      	ldr	r2, [pc, #80]	@ (8001c70 <_sbrk+0x5c>)
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <_sbrk+0x60>)
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <_sbrk+0x64>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	@ (8001c7c <_sbrk+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c36:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d207      	bcs.n	8001c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c44:	f006 fc1e 	bl	8008484 <__errno>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	e009      	b.n	8001c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c54:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a05      	ldr	r2, [pc, #20]	@ (8001c78 <_sbrk+0x64>)
 8001c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20050000 	.word	0x20050000
 8001c74:	00000400 	.word	0x00000400
 8001c78:	20000474 	.word	0x20000474
 8001c7c:	200008f0 	.word	0x200008f0

08001c80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <SystemInit+0x20>)
 8001c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ca0 <SystemInit+0x20>)
 8001c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ca4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ca8:	f7ff ffea 	bl	8001c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cac:	480c      	ldr	r0, [pc, #48]	@ (8001ce0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cae:	490d      	ldr	r1, [pc, #52]	@ (8001ce4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb4:	e002      	b.n	8001cbc <LoopCopyDataInit>

08001cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cba:	3304      	adds	r3, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc0:	d3f9      	bcc.n	8001cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc8:	e001      	b.n	8001cce <LoopFillZerobss>

08001cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ccc:	3204      	adds	r2, #4

08001cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd0:	d3fb      	bcc.n	8001cca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cd2:	f006 fbdd 	bl	8008490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd6:	f7fe fcd1 	bl	800067c <main>
  bx  lr    
 8001cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cdc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce4:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001ce8:	08009278 	.word	0x08009278
  ldr r2, =_sbss
 8001cec:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001cf0:	200008f0 	.word	0x200008f0

08001cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC_IRQHandler>
	...

08001cf8 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	4603      	mov	r3, r0
 8001d02:	81fb      	strh	r3, [r7, #14]
 8001d04:	460b      	mov	r3, r1
 8001d06:	81bb      	strh	r3, [r7, #12]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8001d10:	89bb      	ldrh	r3, [r7, #12]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001d16:	89bb      	ldrh	r3, [r7, #12]
 8001d18:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d1c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001d22:	f001 fbff 	bl	8003524 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001d26:	89fb      	ldrh	r3, [r7, #14]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 fa89 	bl	8003248 <CODEC_IO_Write>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8001d40:	89fb      	ldrh	r3, [r7, #14]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2200      	movs	r2, #0
 8001d46:	f640 0117 	movw	r1, #2071	@ 0x817
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f001 fa7c 	bl	8003248 <CODEC_IO_Write>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	4413      	add	r3, r2
 8001d58:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001d64:	4618      	mov	r0, r3
 8001d66:	f001 fa6f 	bl	8003248 <CODEC_IO_Write>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	4413      	add	r3, r2
 8001d72:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8001d74:	89fb      	ldrh	r3, [r7, #14]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	226c      	movs	r2, #108	@ 0x6c
 8001d7a:	2139      	movs	r1, #57	@ 0x39
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 fa63 	bl	8003248 <CODEC_IO_Write>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	4413      	add	r3, r2
 8001d8a:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8001d8c:	8afb      	ldrh	r3, [r7, #22]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00c      	beq.n	8001dac <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8001d92:	89fb      	ldrh	r3, [r7, #14]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2213      	movs	r2, #19
 8001d98:	2101      	movs	r1, #1
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f001 fa54 	bl	8003248 <CODEC_IO_Write>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	4413      	add	r3, r2
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	e00b      	b.n	8001dc4 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8001dac:	89fb      	ldrh	r3, [r7, #14]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2203      	movs	r2, #3
 8001db2:	2101      	movs	r1, #1
 8001db4:	4618      	mov	r0, r3
 8001db6:	f001 fa47 	bl	8003248 <CODEC_IO_Write>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8001dc4:	2032      	movs	r0, #50	@ 0x32
 8001dc6:	f001 fc15 	bl	80035f4 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8001dca:	8b3b      	ldrh	r3, [r7, #24]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 815f 	beq.w	8002090 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8001dd2:	4bae      	ldr	r3, [pc, #696]	@ (800208c <wm8994_Init+0x394>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8001dd8:	8b3b      	ldrh	r3, [r7, #24]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	f000 808c 	beq.w	8001ef8 <wm8994_Init+0x200>
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	f300 8111 	bgt.w	8002008 <wm8994_Init+0x310>
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d002      	beq.n	8001df0 <wm8994_Init+0xf8>
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d042      	beq.n	8001e74 <wm8994_Init+0x17c>
 8001dee:	e10b      	b.n	8002008 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8001df0:	89fb      	ldrh	r3, [r7, #14]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8001df8:	2105      	movs	r1, #5
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f001 fa24 	bl	8003248 <CODEC_IO_Write>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	4413      	add	r3, r2
 8001e08:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8001e0a:	89fb      	ldrh	r3, [r7, #14]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f240 6101 	movw	r1, #1537	@ 0x601
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fa17 	bl	8003248 <CODEC_IO_Write>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	4413      	add	r3, r2
 8001e22:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8001e24:	89fb      	ldrh	r3, [r7, #14]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f240 6102 	movw	r1, #1538	@ 0x602
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f001 fa0a 	bl	8003248 <CODEC_IO_Write>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001e3e:	89fb      	ldrh	r3, [r7, #14]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2202      	movs	r2, #2
 8001e44:	f240 6104 	movw	r1, #1540	@ 0x604
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f001 f9fd 	bl	8003248 <CODEC_IO_Write>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	4413      	add	r3, r2
 8001e56:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8001e58:	89fb      	ldrh	r3, [r7, #14]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	f240 6105 	movw	r1, #1541	@ 0x605
 8001e62:	4618      	mov	r0, r3
 8001e64:	f001 f9f0 	bl	8003248 <CODEC_IO_Write>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	4413      	add	r3, r2
 8001e70:	61fb      	str	r3, [r7, #28]
      break;
 8001e72:	e110      	b.n	8002096 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001e74:	89fb      	ldrh	r3, [r7, #14]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f240 3203 	movw	r2, #771	@ 0x303
 8001e7c:	2105      	movs	r1, #5
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f001 f9e2 	bl	8003248 <CODEC_IO_Write>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001e8e:	89fb      	ldrh	r3, [r7, #14]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2201      	movs	r2, #1
 8001e94:	f240 6101 	movw	r1, #1537	@ 0x601
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f001 f9d5 	bl	8003248 <CODEC_IO_Write>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2201      	movs	r2, #1
 8001eae:	f240 6102 	movw	r1, #1538	@ 0x602
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 f9c8 	bl	8003248 <CODEC_IO_Write>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001ec2:	89fb      	ldrh	r3, [r7, #14]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f240 6104 	movw	r1, #1540	@ 0x604
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f001 f9bb 	bl	8003248 <CODEC_IO_Write>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	4413      	add	r3, r2
 8001eda:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f240 6105 	movw	r1, #1541	@ 0x605
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f001 f9ae 	bl	8003248 <CODEC_IO_Write>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	61fb      	str	r3, [r7, #28]
      break;
 8001ef6:	e0ce      	b.n	8002096 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001ef8:	8afb      	ldrh	r3, [r7, #22]
 8001efa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001efe:	d141      	bne.n	8001f84 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001f00:	89fb      	ldrh	r3, [r7, #14]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8001f08:	2105      	movs	r1, #5
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 f99c 	bl	8003248 <CODEC_IO_Write>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	4413      	add	r3, r2
 8001f18:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8001f1a:	89fb      	ldrh	r3, [r7, #14]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2203      	movs	r2, #3
 8001f20:	f240 6101 	movw	r1, #1537	@ 0x601
 8001f24:	4618      	mov	r0, r3
 8001f26:	f001 f98f 	bl	8003248 <CODEC_IO_Write>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	4413      	add	r3, r2
 8001f32:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8001f34:	89fb      	ldrh	r3, [r7, #14]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2203      	movs	r2, #3
 8001f3a:	f240 6102 	movw	r1, #1538	@ 0x602
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f001 f982 	bl	8003248 <CODEC_IO_Write>
 8001f44:	4603      	mov	r3, r0
 8001f46:	461a      	mov	r2, r3
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8001f4e:	89fb      	ldrh	r3, [r7, #14]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2203      	movs	r2, #3
 8001f54:	f240 6104 	movw	r1, #1540	@ 0x604
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f001 f975 	bl	8003248 <CODEC_IO_Write>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461a      	mov	r2, r3
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	4413      	add	r3, r2
 8001f66:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8001f68:	89fb      	ldrh	r3, [r7, #14]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	f240 6105 	movw	r1, #1541	@ 0x605
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 f968 	bl	8003248 <CODEC_IO_Write>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	4413      	add	r3, r2
 8001f80:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8001f82:	e088      	b.n	8002096 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001f84:	89fb      	ldrh	r3, [r7, #14]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8001f8c:	2105      	movs	r1, #5
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 f95a 	bl	8003248 <CODEC_IO_Write>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001f9e:	89fb      	ldrh	r3, [r7, #14]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f240 6101 	movw	r1, #1537	@ 0x601
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f001 f94d 	bl	8003248 <CODEC_IO_Write>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001fb8:	89fb      	ldrh	r3, [r7, #14]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f240 6102 	movw	r1, #1538	@ 0x602
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f001 f940 	bl	8003248 <CODEC_IO_Write>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	4413      	add	r3, r2
 8001fd0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001fd2:	89fb      	ldrh	r3, [r7, #14]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f240 6104 	movw	r1, #1540	@ 0x604
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 f933 	bl	8003248 <CODEC_IO_Write>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8001fec:	89fb      	ldrh	r3, [r7, #14]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	f240 6105 	movw	r1, #1541	@ 0x605
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f001 f926 	bl	8003248 <CODEC_IO_Write>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	4413      	add	r3, r2
 8002004:	61fb      	str	r3, [r7, #28]
      break;
 8002006:	e046      	b.n	8002096 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002008:	89fb      	ldrh	r3, [r7, #14]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f240 3203 	movw	r2, #771	@ 0x303
 8002010:	2105      	movs	r1, #5
 8002012:	4618      	mov	r0, r3
 8002014:	f001 f918 	bl	8003248 <CODEC_IO_Write>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	4413      	add	r3, r2
 8002020:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002022:	89fb      	ldrh	r3, [r7, #14]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2201      	movs	r2, #1
 8002028:	f240 6101 	movw	r1, #1537	@ 0x601
 800202c:	4618      	mov	r0, r3
 800202e:	f001 f90b 	bl	8003248 <CODEC_IO_Write>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	4413      	add	r3, r2
 800203a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800203c:	89fb      	ldrh	r3, [r7, #14]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2201      	movs	r2, #1
 8002042:	f240 6102 	movw	r1, #1538	@ 0x602
 8002046:	4618      	mov	r0, r3
 8002048:	f001 f8fe 	bl	8003248 <CODEC_IO_Write>
 800204c:	4603      	mov	r3, r0
 800204e:	461a      	mov	r2, r3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	4413      	add	r3, r2
 8002054:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002056:	89fb      	ldrh	r3, [r7, #14]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2200      	movs	r2, #0
 800205c:	f240 6104 	movw	r1, #1540	@ 0x604
 8002060:	4618      	mov	r0, r3
 8002062:	f001 f8f1 	bl	8003248 <CODEC_IO_Write>
 8002066:	4603      	mov	r3, r0
 8002068:	461a      	mov	r2, r3
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	4413      	add	r3, r2
 800206e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002070:	89fb      	ldrh	r3, [r7, #14]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2200      	movs	r2, #0
 8002076:	f240 6105 	movw	r1, #1541	@ 0x605
 800207a:	4618      	mov	r0, r3
 800207c:	f001 f8e4 	bl	8003248 <CODEC_IO_Write>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	4413      	add	r3, r2
 8002088:	61fb      	str	r3, [r7, #28]
      break;
 800208a:	e004      	b.n	8002096 <wm8994_Init+0x39e>
 800208c:	20000478 	.word	0x20000478
    }
  }
  else
  {
    outputEnabled = 0;
 8002090:	4b99      	ldr	r3, [pc, #612]	@ (80022f8 <wm8994_Init+0x600>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002096:	8afb      	ldrh	r3, [r7, #22]
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 81ab 	beq.w	80023f4 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800209e:	4b97      	ldr	r3, [pc, #604]	@ (80022fc <wm8994_Init+0x604>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80020a4:	8afb      	ldrh	r3, [r7, #22]
 80020a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020aa:	f000 8129 	beq.w	8002300 <wm8994_Init+0x608>
 80020ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020b2:	f300 819b 	bgt.w	80023ec <wm8994_Init+0x6f4>
 80020b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020ba:	d05a      	beq.n	8002172 <wm8994_Init+0x47a>
 80020bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020c0:	f300 8194 	bgt.w	80023ec <wm8994_Init+0x6f4>
 80020c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020c8:	f000 80c6 	beq.w	8002258 <wm8994_Init+0x560>
 80020cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020d0:	f040 818c 	bne.w	80023ec <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80020d4:	89fb      	ldrh	r3, [r7, #14]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 80020dc:	2104      	movs	r1, #4
 80020de:	4618      	mov	r0, r3
 80020e0:	f001 f8b2 	bl	8003248 <CODEC_IO_Write>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	4413      	add	r3, r2
 80020ec:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80020ee:	89fb      	ldrh	r3, [r7, #14]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	22db      	movs	r2, #219	@ 0xdb
 80020f4:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80020f8:	4618      	mov	r0, r3
 80020fa:	f001 f8a5 	bl	8003248 <CODEC_IO_Write>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	4413      	add	r3, r2
 8002106:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8002110:	2102      	movs	r1, #2
 8002112:	4618      	mov	r0, r3
 8002114:	f001 f898 	bl	8003248 <CODEC_IO_Write>
 8002118:	4603      	mov	r3, r0
 800211a:	461a      	mov	r2, r3
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	4413      	add	r3, r2
 8002120:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002122:	89fb      	ldrh	r3, [r7, #14]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2202      	movs	r2, #2
 8002128:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 800212c:	4618      	mov	r0, r3
 800212e:	f001 f88b 	bl	8003248 <CODEC_IO_Write>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	4413      	add	r3, r2
 800213a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800213c:	89fb      	ldrh	r3, [r7, #14]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2202      	movs	r2, #2
 8002142:	f240 6109 	movw	r1, #1545	@ 0x609
 8002146:	4618      	mov	r0, r3
 8002148:	f001 f87e 	bl	8003248 <CODEC_IO_Write>
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	4413      	add	r3, r2
 8002154:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8002156:	89fb      	ldrh	r3, [r7, #14]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	220e      	movs	r2, #14
 800215c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002160:	4618      	mov	r0, r3
 8002162:	f001 f871 	bl	8003248 <CODEC_IO_Write>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	4413      	add	r3, r2
 800216e:	61fb      	str	r3, [r7, #28]
      break;
 8002170:	e143      	b.n	80023fa <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8002172:	89fb      	ldrh	r3, [r7, #14]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2211      	movs	r2, #17
 8002178:	2128      	movs	r1, #40	@ 0x28
 800217a:	4618      	mov	r0, r3
 800217c:	f001 f864 	bl	8003248 <CODEC_IO_Write>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	4413      	add	r3, r2
 8002188:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800218a:	89fb      	ldrh	r3, [r7, #14]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2235      	movs	r2, #53	@ 0x35
 8002190:	2129      	movs	r1, #41	@ 0x29
 8002192:	4618      	mov	r0, r3
 8002194:	f001 f858 	bl	8003248 <CODEC_IO_Write>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	4413      	add	r3, r2
 80021a0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80021a2:	89fb      	ldrh	r3, [r7, #14]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2235      	movs	r2, #53	@ 0x35
 80021a8:	212a      	movs	r1, #42	@ 0x2a
 80021aa:	4618      	mov	r0, r3
 80021ac:	f001 f84c 	bl	8003248 <CODEC_IO_Write>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	4413      	add	r3, r2
 80021b8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80021ba:	89fb      	ldrh	r3, [r7, #14]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f240 3203 	movw	r2, #771	@ 0x303
 80021c2:	2104      	movs	r1, #4
 80021c4:	4618      	mov	r0, r3
 80021c6:	f001 f83f 	bl	8003248 <CODEC_IO_Write>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	4413      	add	r3, r2
 80021d2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80021d4:	89fb      	ldrh	r3, [r7, #14]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	22db      	movs	r2, #219	@ 0xdb
 80021da:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80021de:	4618      	mov	r0, r3
 80021e0:	f001 f832 	bl	8003248 <CODEC_IO_Write>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	4413      	add	r3, r2
 80021ec:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80021ee:	89fb      	ldrh	r3, [r7, #14]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f246 3250 	movw	r2, #25424	@ 0x6350
 80021f6:	2102      	movs	r1, #2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 f825 	bl	8003248 <CODEC_IO_Write>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4413      	add	r3, r2
 8002206:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002208:	89fb      	ldrh	r3, [r7, #14]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2202      	movs	r2, #2
 800220e:	f240 6106 	movw	r1, #1542	@ 0x606
 8002212:	4618      	mov	r0, r3
 8002214:	f001 f818 	bl	8003248 <CODEC_IO_Write>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	4413      	add	r3, r2
 8002220:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002222:	89fb      	ldrh	r3, [r7, #14]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2202      	movs	r2, #2
 8002228:	f240 6107 	movw	r1, #1543	@ 0x607
 800222c:	4618      	mov	r0, r3
 800222e:	f001 f80b 	bl	8003248 <CODEC_IO_Write>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	4413      	add	r3, r2
 800223a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800223c:	89fb      	ldrh	r3, [r7, #14]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	220d      	movs	r2, #13
 8002242:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fffe 	bl	8003248 <CODEC_IO_Write>
 800224c:	4603      	mov	r3, r0
 800224e:	461a      	mov	r2, r3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	4413      	add	r3, r2
 8002254:	61fb      	str	r3, [r7, #28]
      break;
 8002256:	e0d0      	b.n	80023fa <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8002258:	89fb      	ldrh	r3, [r7, #14]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8002260:	2104      	movs	r1, #4
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fff0 	bl	8003248 <CODEC_IO_Write>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4413      	add	r3, r2
 8002270:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002272:	89fb      	ldrh	r3, [r7, #14]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	22db      	movs	r2, #219	@ 0xdb
 8002278:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800227c:	4618      	mov	r0, r3
 800227e:	f000 ffe3 	bl	8003248 <CODEC_IO_Write>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	4413      	add	r3, r2
 800228a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800228c:	89fb      	ldrh	r3, [r7, #14]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002294:	2102      	movs	r1, #2
 8002296:	4618      	mov	r0, r3
 8002298:	f000 ffd6 	bl	8003248 <CODEC_IO_Write>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	4413      	add	r3, r2
 80022a4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80022a6:	89fb      	ldrh	r3, [r7, #14]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2202      	movs	r2, #2
 80022ac:	f240 6106 	movw	r1, #1542	@ 0x606
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 ffc9 	bl	8003248 <CODEC_IO_Write>
 80022b6:	4603      	mov	r3, r0
 80022b8:	461a      	mov	r2, r3
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	4413      	add	r3, r2
 80022be:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80022c0:	89fb      	ldrh	r3, [r7, #14]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2202      	movs	r2, #2
 80022c6:	f240 6107 	movw	r1, #1543	@ 0x607
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 ffbc 	bl	8003248 <CODEC_IO_Write>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	4413      	add	r3, r2
 80022d8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80022da:	89fb      	ldrh	r3, [r7, #14]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	220d      	movs	r2, #13
 80022e0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 ffaf 	bl	8003248 <CODEC_IO_Write>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461a      	mov	r2, r3
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	61fb      	str	r3, [r7, #28]
      break; 
 80022f4:	e081      	b.n	80023fa <wm8994_Init+0x702>
 80022f6:	bf00      	nop
 80022f8:	20000478 	.word	0x20000478
 80022fc:	2000047c 	.word	0x2000047c
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002300:	89fb      	ldrh	r3, [r7, #14]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002308:	2104      	movs	r1, #4
 800230a:	4618      	mov	r0, r3
 800230c:	f000 ff9c 	bl	8003248 <CODEC_IO_Write>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	4413      	add	r3, r2
 8002318:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800231a:	89fb      	ldrh	r3, [r7, #14]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	22db      	movs	r2, #219	@ 0xdb
 8002320:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002324:	4618      	mov	r0, r3
 8002326:	f000 ff8f 	bl	8003248 <CODEC_IO_Write>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	4413      	add	r3, r2
 8002332:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002334:	89fb      	ldrh	r3, [r7, #14]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	22db      	movs	r2, #219	@ 0xdb
 800233a:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800233e:	4618      	mov	r0, r3
 8002340:	f000 ff82 	bl	8003248 <CODEC_IO_Write>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	4413      	add	r3, r2
 800234c:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800234e:	89fb      	ldrh	r3, [r7, #14]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8002356:	2102      	movs	r1, #2
 8002358:	4618      	mov	r0, r3
 800235a:	f000 ff75 	bl	8003248 <CODEC_IO_Write>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4413      	add	r3, r2
 8002366:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002368:	89fb      	ldrh	r3, [r7, #14]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2202      	movs	r2, #2
 800236e:	f240 6106 	movw	r1, #1542	@ 0x606
 8002372:	4618      	mov	r0, r3
 8002374:	f000 ff68 	bl	8003248 <CODEC_IO_Write>
 8002378:	4603      	mov	r3, r0
 800237a:	461a      	mov	r2, r3
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	4413      	add	r3, r2
 8002380:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002382:	89fb      	ldrh	r3, [r7, #14]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2202      	movs	r2, #2
 8002388:	f240 6107 	movw	r1, #1543	@ 0x607
 800238c:	4618      	mov	r0, r3
 800238e:	f000 ff5b 	bl	8003248 <CODEC_IO_Write>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	4413      	add	r3, r2
 800239a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800239c:	89fb      	ldrh	r3, [r7, #14]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2202      	movs	r2, #2
 80023a2:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 ff4e 	bl	8003248 <CODEC_IO_Write>
 80023ac:	4603      	mov	r3, r0
 80023ae:	461a      	mov	r2, r3
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	4413      	add	r3, r2
 80023b4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80023b6:	89fb      	ldrh	r3, [r7, #14]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2202      	movs	r2, #2
 80023bc:	f240 6109 	movw	r1, #1545	@ 0x609
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 ff41 	bl	8003248 <CODEC_IO_Write>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461a      	mov	r2, r3
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	4413      	add	r3, r2
 80023ce:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80023d0:	89fb      	ldrh	r3, [r7, #14]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	220d      	movs	r2, #13
 80023d6:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 ff34 	bl	8003248 <CODEC_IO_Write>
 80023e0:	4603      	mov	r3, r0
 80023e2:	461a      	mov	r2, r3
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	4413      	add	r3, r2
 80023e8:	61fb      	str	r3, [r7, #28]
      break;    
 80023ea:	e006      	b.n	80023fa <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	3301      	adds	r3, #1
 80023f0:	61fb      	str	r3, [r7, #28]
      break;
 80023f2:	e002      	b.n	80023fa <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 80023f4:	4bb1      	ldr	r3, [pc, #708]	@ (80026bc <wm8994_Init+0x9c4>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4ab0      	ldr	r2, [pc, #704]	@ (80026c0 <wm8994_Init+0x9c8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d079      	beq.n	80024f6 <wm8994_Init+0x7fe>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4aae      	ldr	r2, [pc, #696]	@ (80026c0 <wm8994_Init+0x9c8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	f200 80ad 	bhi.w	8002566 <wm8994_Init+0x86e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002412:	4293      	cmp	r3, r2
 8002414:	d061      	beq.n	80024da <wm8994_Init+0x7e2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800241c:	4293      	cmp	r3, r2
 800241e:	f200 80a2 	bhi.w	8002566 <wm8994_Init+0x86e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002428:	4293      	cmp	r3, r2
 800242a:	f000 808e 	beq.w	800254a <wm8994_Init+0x852>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002434:	4293      	cmp	r3, r2
 8002436:	f200 8096 	bhi.w	8002566 <wm8994_Init+0x86e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002440:	d03d      	beq.n	80024be <wm8994_Init+0x7c6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002448:	f200 808d 	bhi.w	8002566 <wm8994_Init+0x86e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002452:	4293      	cmp	r3, r2
 8002454:	d06b      	beq.n	800252e <wm8994_Init+0x836>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f245 6222 	movw	r2, #22050	@ 0x5622
 800245c:	4293      	cmp	r3, r2
 800245e:	f200 8082 	bhi.w	8002566 <wm8994_Init+0x86e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002468:	d01b      	beq.n	80024a2 <wm8994_Init+0x7aa>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002470:	d879      	bhi.n	8002566 <wm8994_Init+0x86e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002478:	d005      	beq.n	8002486 <wm8994_Init+0x78e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8002480:	4293      	cmp	r3, r2
 8002482:	d046      	beq.n	8002512 <wm8994_Init+0x81a>
 8002484:	e06f      	b.n	8002566 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002486:	89fb      	ldrh	r3, [r7, #14]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2203      	movs	r2, #3
 800248c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fed9 	bl	8003248 <CODEC_IO_Write>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	4413      	add	r3, r2
 800249e:	61fb      	str	r3, [r7, #28]
    break;
 80024a0:	e06f      	b.n	8002582 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80024a2:	89fb      	ldrh	r3, [r7, #14]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2233      	movs	r2, #51	@ 0x33
 80024a8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fecb 	bl	8003248 <CODEC_IO_Write>
 80024b2:	4603      	mov	r3, r0
 80024b4:	461a      	mov	r2, r3
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4413      	add	r3, r2
 80024ba:	61fb      	str	r3, [r7, #28]
    break;
 80024bc:	e061      	b.n	8002582 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80024be:	89fb      	ldrh	r3, [r7, #14]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2263      	movs	r2, #99	@ 0x63
 80024c4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 febd 	bl	8003248 <CODEC_IO_Write>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	4413      	add	r3, r2
 80024d6:	61fb      	str	r3, [r7, #28]
    break;
 80024d8:	e053      	b.n	8002582 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80024da:	89fb      	ldrh	r3, [r7, #14]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2283      	movs	r2, #131	@ 0x83
 80024e0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 feaf 	bl	8003248 <CODEC_IO_Write>
 80024ea:	4603      	mov	r3, r0
 80024ec:	461a      	mov	r2, r3
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	4413      	add	r3, r2
 80024f2:	61fb      	str	r3, [r7, #28]
    break;
 80024f4:	e045      	b.n	8002582 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80024f6:	89fb      	ldrh	r3, [r7, #14]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	22a3      	movs	r2, #163	@ 0xa3
 80024fc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fea1 	bl	8003248 <CODEC_IO_Write>
 8002506:	4603      	mov	r3, r0
 8002508:	461a      	mov	r2, r3
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	4413      	add	r3, r2
 800250e:	61fb      	str	r3, [r7, #28]
    break;
 8002510:	e037      	b.n	8002582 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002512:	89fb      	ldrh	r3, [r7, #14]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2213      	movs	r2, #19
 8002518:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800251c:	4618      	mov	r0, r3
 800251e:	f000 fe93 	bl	8003248 <CODEC_IO_Write>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	4413      	add	r3, r2
 800252a:	61fb      	str	r3, [r7, #28]
    break;
 800252c:	e029      	b.n	8002582 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800252e:	89fb      	ldrh	r3, [r7, #14]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2243      	movs	r2, #67	@ 0x43
 8002534:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fe85 	bl	8003248 <CODEC_IO_Write>
 800253e:	4603      	mov	r3, r0
 8002540:	461a      	mov	r2, r3
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	4413      	add	r3, r2
 8002546:	61fb      	str	r3, [r7, #28]
    break;
 8002548:	e01b      	b.n	8002582 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800254a:	89fb      	ldrh	r3, [r7, #14]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2273      	movs	r2, #115	@ 0x73
 8002550:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fe77 	bl	8003248 <CODEC_IO_Write>
 800255a:	4603      	mov	r3, r0
 800255c:	461a      	mov	r2, r3
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	4413      	add	r3, r2
 8002562:	61fb      	str	r3, [r7, #28]
    break; 
 8002564:	e00d      	b.n	8002582 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2283      	movs	r2, #131	@ 0x83
 800256c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fe69 	bl	8003248 <CODEC_IO_Write>
 8002576:	4603      	mov	r3, r0
 8002578:	461a      	mov	r2, r3
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	61fb      	str	r3, [r7, #28]
    break; 
 8002580:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002582:	8afb      	ldrh	r3, [r7, #22]
 8002584:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002588:	d10e      	bne.n	80025a8 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800258a:	89fb      	ldrh	r3, [r7, #14]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f244 0218 	movw	r2, #16408	@ 0x4018
 8002592:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fe56 	bl	8003248 <CODEC_IO_Write>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	4413      	add	r3, r2
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	e00d      	b.n	80025c4 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80025a8:	89fb      	ldrh	r3, [r7, #14]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f244 0210 	movw	r2, #16400	@ 0x4010
 80025b0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 fe47 	bl	8003248 <CODEC_IO_Write>
 80025ba:	4603      	mov	r3, r0
 80025bc:	461a      	mov	r2, r3
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	4413      	add	r3, r2
 80025c2:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80025c4:	89fb      	ldrh	r3, [r7, #14]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2200      	movs	r2, #0
 80025ca:	f240 3102 	movw	r1, #770	@ 0x302
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fe3a 	bl	8003248 <CODEC_IO_Write>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80025de:	89fb      	ldrh	r3, [r7, #14]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	220a      	movs	r2, #10
 80025e4:	f44f 7102 	mov.w	r1, #520	@ 0x208
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fe2d 	bl	8003248 <CODEC_IO_Write>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461a      	mov	r2, r3
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4413      	add	r3, r2
 80025f6:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80025f8:	89fb      	ldrh	r3, [r7, #14]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2201      	movs	r2, #1
 80025fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fe20 	bl	8003248 <CODEC_IO_Write>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8002612:	8b3b      	ldrh	r3, [r7, #24]
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 8123 	beq.w	8002860 <wm8994_Init+0xb68>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 800261a:	89fb      	ldrh	r3, [r7, #14]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002622:	2103      	movs	r1, #3
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fe0f 	bl	8003248 <CODEC_IO_Write>
 800262a:	4603      	mov	r3, r0
 800262c:	461a      	mov	r2, r3
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	4413      	add	r3, r2
 8002632:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8002634:	89fb      	ldrh	r3, [r7, #14]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2200      	movs	r2, #0
 800263a:	2122      	movs	r1, #34	@ 0x22
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fe03 	bl	8003248 <CODEC_IO_Write>
 8002642:	4603      	mov	r3, r0
 8002644:	461a      	mov	r2, r3
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800264c:	89fb      	ldrh	r3, [r7, #14]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2200      	movs	r2, #0
 8002652:	2123      	movs	r1, #35	@ 0x23
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fdf7 	bl	8003248 <CODEC_IO_Write>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	4413      	add	r3, r2
 8002662:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8002664:	89fb      	ldrh	r3, [r7, #14]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800266c:	2136      	movs	r1, #54	@ 0x36
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fdea 	bl	8003248 <CODEC_IO_Write>
 8002674:	4603      	mov	r3, r0
 8002676:	461a      	mov	r2, r3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	4413      	add	r3, r2
 800267c:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 800267e:	89fb      	ldrh	r3, [r7, #14]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f243 0203 	movw	r2, #12291	@ 0x3003
 8002686:	2101      	movs	r1, #1
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fddd 	bl	8003248 <CODEC_IO_Write>
 800268e:	4603      	mov	r3, r0
 8002690:	461a      	mov	r2, r3
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002698:	8afb      	ldrh	r3, [r7, #22]
 800269a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800269e:	d111      	bne.n	80026c4 <wm8994_Init+0x9cc>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80026a0:	89fb      	ldrh	r3, [r7, #14]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f240 2205 	movw	r2, #517	@ 0x205
 80026a8:	2151      	movs	r1, #81	@ 0x51
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fdcc 	bl	8003248 <CODEC_IO_Write>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	e00f      	b.n	80026dc <wm8994_Init+0x9e4>
 80026bc:	2000047c 	.word	0x2000047c
 80026c0:	00017700 	.word	0x00017700
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80026c4:	89fb      	ldrh	r3, [r7, #14]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2205      	movs	r2, #5
 80026ca:	2151      	movs	r1, #81	@ 0x51
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fdbb 	bl	8003248 <CODEC_IO_Write>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	4413      	add	r3, r2
 80026da:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80026dc:	8b7b      	ldrh	r3, [r7, #26]
 80026de:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 80026e2:	f043 0303 	orr.w	r3, r3, #3
 80026e6:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80026e8:	89fb      	ldrh	r3, [r7, #14]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	8b7a      	ldrh	r2, [r7, #26]
 80026ee:	2101      	movs	r1, #1
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fda9 	bl	8003248 <CODEC_IO_Write>
 80026f6:	4603      	mov	r3, r0
 80026f8:	461a      	mov	r2, r3
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	4413      	add	r3, r2
 80026fe:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002700:	89fb      	ldrh	r3, [r7, #14]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2222      	movs	r2, #34	@ 0x22
 8002706:	2160      	movs	r1, #96	@ 0x60
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fd9d 	bl	8003248 <CODEC_IO_Write>
 800270e:	4603      	mov	r3, r0
 8002710:	461a      	mov	r2, r3
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	4413      	add	r3, r2
 8002716:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002718:	89fb      	ldrh	r3, [r7, #14]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8002720:	214c      	movs	r1, #76	@ 0x4c
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fd90 	bl	8003248 <CODEC_IO_Write>
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	4413      	add	r3, r2
 8002730:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002732:	200f      	movs	r0, #15
 8002734:	f000 ff5e 	bl	80035f4 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002738:	89fb      	ldrh	r3, [r7, #14]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2201      	movs	r2, #1
 800273e:	212d      	movs	r1, #45	@ 0x2d
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fd81 	bl	8003248 <CODEC_IO_Write>
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8002750:	89fb      	ldrh	r3, [r7, #14]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2201      	movs	r2, #1
 8002756:	212e      	movs	r1, #46	@ 0x2e
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fd75 	bl	8003248 <CODEC_IO_Write>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	4413      	add	r3, r2
 8002766:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002768:	89fb      	ldrh	r3, [r7, #14]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8002770:	2103      	movs	r1, #3
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fd68 	bl	8003248 <CODEC_IO_Write>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002782:	89fb      	ldrh	r3, [r7, #14]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2233      	movs	r2, #51	@ 0x33
 8002788:	2154      	movs	r1, #84	@ 0x54
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fd5c 	bl	8003248 <CODEC_IO_Write>
 8002790:	4603      	mov	r3, r0
 8002792:	461a      	mov	r2, r3
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	4413      	add	r3, r2
 8002798:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(250);
 800279a:	20fa      	movs	r0, #250	@ 0xfa
 800279c:	f000 ff2a 	bl	80035f4 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80027a0:	89fb      	ldrh	r3, [r7, #14]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	22ee      	movs	r2, #238	@ 0xee
 80027a6:	2160      	movs	r1, #96	@ 0x60
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fd4d 	bl	8003248 <CODEC_IO_Write>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80027b8:	89fb      	ldrh	r3, [r7, #14]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	22c0      	movs	r2, #192	@ 0xc0
 80027be:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fd40 	bl	8003248 <CODEC_IO_Write>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	4413      	add	r3, r2
 80027d0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80027d2:	89fb      	ldrh	r3, [r7, #14]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	22c0      	movs	r2, #192	@ 0xc0
 80027d8:	f240 6111 	movw	r1, #1553	@ 0x611
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fd33 	bl	8003248 <CODEC_IO_Write>
 80027e2:	4603      	mov	r3, r0
 80027e4:	461a      	mov	r2, r3
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4413      	add	r3, r2
 80027ea:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80027ec:	89fb      	ldrh	r3, [r7, #14]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2200      	movs	r2, #0
 80027f2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 fd26 	bl	8003248 <CODEC_IO_Write>
 80027fc:	4603      	mov	r3, r0
 80027fe:	461a      	mov	r2, r3
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	4413      	add	r3, r2
 8002804:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002806:	89fb      	ldrh	r3, [r7, #14]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	22c0      	movs	r2, #192	@ 0xc0
 800280c:	f240 6112 	movw	r1, #1554	@ 0x612
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fd19 	bl	8003248 <CODEC_IO_Write>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	4413      	add	r3, r2
 800281e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8002820:	89fb      	ldrh	r3, [r7, #14]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	22c0      	movs	r2, #192	@ 0xc0
 8002826:	f240 6113 	movw	r1, #1555	@ 0x613
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fd0c 	bl	8003248 <CODEC_IO_Write>
 8002830:	4603      	mov	r3, r0
 8002832:	461a      	mov	r2, r3
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	4413      	add	r3, r2
 8002838:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 800283a:	89fb      	ldrh	r3, [r7, #14]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2200      	movs	r2, #0
 8002840:	f240 4122 	movw	r1, #1058	@ 0x422
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fcff 	bl	8003248 <CODEC_IO_Write>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	4413      	add	r3, r2
 8002852:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002854:	7afa      	ldrb	r2, [r7, #11]
 8002856:	89fb      	ldrh	r3, [r7, #14]
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f984 	bl	8002b68 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8002860:	8afb      	ldrh	r3, [r7, #22]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80a6 	beq.w	80029b4 <wm8994_Init+0xcbc>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8002868:	8afb      	ldrh	r3, [r7, #22]
 800286a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800286e:	d003      	beq.n	8002878 <wm8994_Init+0xb80>
 8002870:	8afb      	ldrh	r3, [r7, #22]
 8002872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002876:	d12b      	bne.n	80028d0 <wm8994_Init+0xbd8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002878:	8b7b      	ldrh	r3, [r7, #26]
 800287a:	f043 0313 	orr.w	r3, r3, #19
 800287e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002880:	89fb      	ldrh	r3, [r7, #14]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	8b7a      	ldrh	r2, [r7, #26]
 8002886:	2101      	movs	r1, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fcdd 	bl	8003248 <CODEC_IO_Write>
 800288e:	4603      	mov	r3, r0
 8002890:	461a      	mov	r2, r3
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2202      	movs	r2, #2
 800289e:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fcd0 	bl	8003248 <CODEC_IO_Write>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80028b2:	89fb      	ldrh	r3, [r7, #14]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80028ba:	f240 4111 	movw	r1, #1041	@ 0x411
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fcc2 	bl	8003248 <CODEC_IO_Write>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4413      	add	r3, r2
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	e06b      	b.n	80029a8 <wm8994_Init+0xcb0>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80028d0:	8afb      	ldrh	r3, [r7, #22]
 80028d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028d6:	d139      	bne.n	800294c <wm8994_Init+0xc54>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80028d8:	8b7b      	ldrh	r3, [r7, #26]
 80028da:	f043 0313 	orr.w	r3, r3, #19
 80028de:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80028e0:	89fb      	ldrh	r3, [r7, #14]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	8b7a      	ldrh	r2, [r7, #26]
 80028e6:	2101      	movs	r1, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fcad 	bl	8003248 <CODEC_IO_Write>
 80028ee:	4603      	mov	r3, r0
 80028f0:	461a      	mov	r2, r3
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4413      	add	r3, r2
 80028f6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80028f8:	89fb      	ldrh	r3, [r7, #14]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2202      	movs	r2, #2
 80028fe:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fca0 	bl	8003248 <CODEC_IO_Write>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	4413      	add	r3, r2
 8002910:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002912:	89fb      	ldrh	r3, [r7, #14]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800291a:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fc92 	bl	8003248 <CODEC_IO_Write>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4413      	add	r3, r2
 800292c:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800292e:	89fb      	ldrh	r3, [r7, #14]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002936:	f240 4111 	movw	r1, #1041	@ 0x411
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fc84 	bl	8003248 <CODEC_IO_Write>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	4413      	add	r3, r2
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	e02d      	b.n	80029a8 <wm8994_Init+0xcb0>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 800294c:	8afb      	ldrh	r3, [r7, #22]
 800294e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002952:	d003      	beq.n	800295c <wm8994_Init+0xc64>
 8002954:	8afb      	ldrh	r3, [r7, #22]
 8002956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800295a:	d125      	bne.n	80029a8 <wm8994_Init+0xcb0>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 800295c:	89fb      	ldrh	r3, [r7, #14]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	220b      	movs	r2, #11
 8002962:	2118      	movs	r1, #24
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fc6f 	bl	8003248 <CODEC_IO_Write>
 800296a:	4603      	mov	r3, r0
 800296c:	461a      	mov	r2, r3
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	4413      	add	r3, r2
 8002972:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8002974:	89fb      	ldrh	r3, [r7, #14]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	220b      	movs	r2, #11
 800297a:	211a      	movs	r1, #26
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fc63 	bl	8003248 <CODEC_IO_Write>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4413      	add	r3, r2
 800298a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800298c:	89fb      	ldrh	r3, [r7, #14]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002994:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fc55 	bl	8003248 <CODEC_IO_Write>
 800299e:	4603      	mov	r3, r0
 80029a0:	461a      	mov	r2, r3
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	4413      	add	r3, r2
 80029a6:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80029a8:	7afa      	ldrb	r2, [r7, #11]
 80029aa:	89fb      	ldrh	r3, [r7, #14]
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f8da 	bl	8002b68 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 80029b4:	69fb      	ldr	r3, [r7, #28]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop

080029c0 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80029c4:	f000 fdb8 	bl	8003538 <AUDIO_IO_DeInit>
}
 80029c8:	bf00      	nop
 80029ca:	bd80      	pop	{r7, pc}

080029cc <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80029d6:	f000 fda5 	bl	8003524 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fddb 	bl	800359c <AUDIO_IO_Read>
 80029e6:	4603      	mov	r3, r0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	80fb      	strh	r3, [r7, #6]
 80029fc:	4613      	mov	r3, r2
 80029fe:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 f9d1 	bl	8002db0 <wm8994_SetMute>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002a16:	68fb      	ldr	r3, [r7, #12]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	2101      	movs	r1, #1
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f9bc 	bl	8002db0 <wm8994_SetMute>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2201      	movs	r2, #1
 8002a46:	2102      	movs	r1, #2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fbfd 	bl	8003248 <CODEC_IO_Write>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	461a      	mov	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4413      	add	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8002a58:	68fb      	ldr	r3, [r7, #12]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f99b 	bl	8002db0 <wm8994_SetMute>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4413      	add	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002a82:	68fb      	ldr	r3, [r7, #12]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	6039      	str	r1, [r7, #0]
 8002a96:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8002a9c:	4b31      	ldr	r3, [pc, #196]	@ (8002b64 <wm8994_Stop+0xd8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d05a      	beq.n	8002b5a <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f981 	bl	8002db0 <wm8994_SetMute>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d04e      	beq.n	8002b5a <wm8994_Stop+0xce>
       /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ac4:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fbbd 	bl	8003248 <CODEC_IO_Write>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ae0:	f240 4122 	movw	r1, #1058	@ 0x422
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fbaf 	bl	8003248 <CODEC_IO_Write>
 8002aea:	4603      	mov	r3, r0
 8002aec:	461a      	mov	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4413      	add	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2200      	movs	r2, #0
 8002afa:	212d      	movs	r1, #45	@ 0x2d
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fba3 	bl	8003248 <CODEC_IO_Write>
 8002b02:	4603      	mov	r3, r0
 8002b04:	461a      	mov	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4413      	add	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2200      	movs	r2, #0
 8002b12:	212e      	movs	r1, #46	@ 0x2e
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fb97 	bl	8003248 <CODEC_IO_Write>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4413      	add	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2105      	movs	r1, #5
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fb8b 	bl	8003248 <CODEC_IO_Write>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4413      	add	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2200      	movs	r2, #0
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 fb7f 	bl	8003248 <CODEC_IO_Write>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4413      	add	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8002b54:	4b03      	ldr	r3, [pc, #12]	@ (8002b64 <wm8994_Stop+0xd8>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000478 	.word	0x20000478

08002b68 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	460a      	mov	r2, r1
 8002b72:	80fb      	strh	r3, [r7, #6]
 8002b74:	4613      	mov	r3, r2
 8002b76:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8002b7c:	797b      	ldrb	r3, [r7, #5]
 8002b7e:	2b64      	cmp	r3, #100	@ 0x64
 8002b80:	d80b      	bhi.n	8002b9a <wm8994_SetVolume+0x32>
 8002b82:	797a      	ldrb	r2, [r7, #5]
 8002b84:	4613      	mov	r3, r2
 8002b86:	019b      	lsls	r3, r3, #6
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	4a86      	ldr	r2, [pc, #536]	@ (8002da4 <wm8994_SetVolume+0x23c>)
 8002b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8002b90:	1152      	asrs	r2, r2, #5
 8002b92:	17db      	asrs	r3, r3, #31
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	e000      	b.n	8002b9c <wm8994_SetVolume+0x34>
 8002b9a:	2364      	movs	r3, #100	@ 0x64
 8002b9c:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8002b9e:	4b82      	ldr	r3, [pc, #520]	@ (8002da8 <wm8994_SetVolume+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 809b 	beq.w	8002cde <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
 8002baa:	2b3e      	cmp	r3, #62	@ 0x3e
 8002bac:	d93d      	bls.n	8002c2a <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f8fc 	bl	8002db0 <wm8994_SetMute>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f240 127f 	movw	r2, #383	@ 0x17f
 8002bc8:	211c      	movs	r1, #28
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fb3c 	bl	8003248 <CODEC_IO_Write>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f240 127f 	movw	r2, #383	@ 0x17f
 8002be2:	211d      	movs	r1, #29
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fb2f 	bl	8003248 <CODEC_IO_Write>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461a      	mov	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f240 127f 	movw	r2, #383	@ 0x17f
 8002bfc:	2126      	movs	r1, #38	@ 0x26
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fb22 	bl	8003248 <CODEC_IO_Write>
 8002c04:	4603      	mov	r3, r0
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f240 127f 	movw	r2, #383	@ 0x17f
 8002c16:	2127      	movs	r1, #39	@ 0x27
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fb15 	bl	8003248 <CODEC_IO_Write>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461a      	mov	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4413      	add	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e059      	b.n	8002cde <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8002c2a:	797b      	ldrb	r3, [r7, #5]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	2101      	movs	r1, #1
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 f8bb 	bl	8002db0 <wm8994_SetMute>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4413      	add	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	e04c      	b.n	8002cde <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 f8b1 	bl	8002db0 <wm8994_SetMute>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4413      	add	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	b2d8      	uxtb	r0, r3
 8002c5a:	7afb      	ldrb	r3, [r7, #11]
 8002c5c:	b21b      	sxth	r3, r3
 8002c5e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002c62:	b21b      	sxth	r3, r3
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	211c      	movs	r1, #28
 8002c6a:	f000 faed 	bl	8003248 <CODEC_IO_Write>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	461a      	mov	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4413      	add	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	b2d8      	uxtb	r0, r3
 8002c7c:	7afb      	ldrb	r3, [r7, #11]
 8002c7e:	b21b      	sxth	r3, r3
 8002c80:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002c84:	b21b      	sxth	r3, r3
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	211d      	movs	r1, #29
 8002c8c:	f000 fadc 	bl	8003248 <CODEC_IO_Write>
 8002c90:	4603      	mov	r3, r0
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	b2d8      	uxtb	r0, r3
 8002c9e:	7afb      	ldrb	r3, [r7, #11]
 8002ca0:	b21b      	sxth	r3, r3
 8002ca2:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002ca6:	b21b      	sxth	r3, r3
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	2126      	movs	r1, #38	@ 0x26
 8002cae:	f000 facb 	bl	8003248 <CODEC_IO_Write>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4413      	add	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	b2d8      	uxtb	r0, r3
 8002cc0:	7afb      	ldrb	r3, [r7, #11]
 8002cc2:	b21b      	sxth	r3, r3
 8002cc4:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002cc8:	b21b      	sxth	r3, r3
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2127      	movs	r1, #39	@ 0x27
 8002cd0:	f000 faba 	bl	8003248 <CODEC_IO_Write>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8002cde:	4b33      	ldr	r3, [pc, #204]	@ (8002dac <wm8994_SetVolume+0x244>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d059      	beq.n	8002d9a <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8002ce6:	797b      	ldrb	r3, [r7, #5]
 8002ce8:	2b63      	cmp	r3, #99	@ 0x63
 8002cea:	d80c      	bhi.n	8002d06 <wm8994_SetVolume+0x19e>
 8002cec:	797a      	ldrb	r2, [r7, #5]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	4a2b      	ldr	r2, [pc, #172]	@ (8002da4 <wm8994_SetVolume+0x23c>)
 8002cf8:	fb82 1203 	smull	r1, r2, r2, r3
 8002cfc:	1152      	asrs	r2, r2, #5
 8002cfe:	17db      	asrs	r3, r3, #31
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	e000      	b.n	8002d08 <wm8994_SetVolume+0x1a0>
 8002d06:	23ef      	movs	r3, #239	@ 0xef
 8002d08:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	b2d8      	uxtb	r0, r3
 8002d0e:	7afb      	ldrb	r3, [r7, #11]
 8002d10:	b21b      	sxth	r3, r3
 8002d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d16:	b21b      	sxth	r3, r3
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d20:	f000 fa92 	bl	8003248 <CODEC_IO_Write>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	b2d8      	uxtb	r0, r3
 8002d32:	7afb      	ldrb	r3, [r7, #11]
 8002d34:	b21b      	sxth	r3, r3
 8002d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d3a:	b21b      	sxth	r3, r3
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f240 4101 	movw	r1, #1025	@ 0x401
 8002d44:	f000 fa80 	bl	8003248 <CODEC_IO_Write>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	b2d8      	uxtb	r0, r3
 8002d56:	7afb      	ldrb	r3, [r7, #11]
 8002d58:	b21b      	sxth	r3, r3
 8002d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	f240 4104 	movw	r1, #1028	@ 0x404
 8002d68:	f000 fa6e 	bl	8003248 <CODEC_IO_Write>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4413      	add	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	b2d8      	uxtb	r0, r3
 8002d7a:	7afb      	ldrb	r3, [r7, #11]
 8002d7c:	b21b      	sxth	r3, r3
 8002d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d82:	b21b      	sxth	r3, r3
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	f240 4105 	movw	r1, #1029	@ 0x405
 8002d8c:	f000 fa5c 	bl	8003248 <CODEC_IO_Write>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	51eb851f 	.word	0x51eb851f
 8002da8:	20000478 	.word	0x20000478
 8002dac:	2000047c 	.word	0x2000047c

08002db0 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	6039      	str	r1, [r7, #0]
 8002dba:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8002dc0:	4b21      	ldr	r3, [pc, #132]	@ (8002e48 <wm8994_SetMute+0x98>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d039      	beq.n	8002e3c <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d11c      	bne.n	8002e08 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dd6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fa34 	bl	8003248 <CODEC_IO_Write>
 8002de0:	4603      	mov	r3, r0
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002df2:	f240 4122 	movw	r1, #1058	@ 0x422
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fa26 	bl	8003248 <CODEC_IO_Write>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	e019      	b.n	8002e3c <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fa18 	bl	8003248 <CODEC_IO_Write>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2200      	movs	r2, #0
 8002e28:	f240 4122 	movw	r1, #1058	@ 0x422
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fa0b 	bl	8003248 <CODEC_IO_Write>
 8002e32:	4603      	mov	r3, r0
 8002e34:	461a      	mov	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4413      	add	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000478 	.word	0x20000478

08002e4c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	460a      	mov	r2, r1
 8002e56:	80fb      	strh	r3, [r7, #6]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8002e60:	797b      	ldrb	r3, [r7, #5]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	f000 808c 	beq.w	8002f80 <wm8994_SetOutputMode+0x134>
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	f300 80cb 	bgt.w	8003004 <wm8994_SetOutputMode+0x1b8>
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d002      	beq.n	8002e78 <wm8994_SetOutputMode+0x2c>
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d042      	beq.n	8002efc <wm8994_SetOutputMode+0xb0>
 8002e76:	e0c5      	b.n	8003004 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8002e80:	2105      	movs	r1, #5
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f9e0 	bl	8003248 <CODEC_IO_Write>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2200      	movs	r2, #0
 8002e98:	f240 6101 	movw	r1, #1537	@ 0x601
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 f9d3 	bl	8003248 <CODEC_IO_Write>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f240 6102 	movw	r1, #1538	@ 0x602
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f9c6 	bl	8003248 <CODEC_IO_Write>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f240 6104 	movw	r1, #1540	@ 0x604
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 f9b9 	bl	8003248 <CODEC_IO_Write>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	461a      	mov	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4413      	add	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f240 6105 	movw	r1, #1541	@ 0x605
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 f9ac 	bl	8003248 <CODEC_IO_Write>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
    break;
 8002efa:	e0c5      	b.n	8003088 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f240 3203 	movw	r2, #771	@ 0x303
 8002f04:	2105      	movs	r1, #5
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f99e 	bl	8003248 <CODEC_IO_Write>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f240 6101 	movw	r1, #1537	@ 0x601
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 f991 	bl	8003248 <CODEC_IO_Write>
 8002f26:	4603      	mov	r3, r0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2201      	movs	r2, #1
 8002f36:	f240 6102 	movw	r1, #1538	@ 0x602
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 f984 	bl	8003248 <CODEC_IO_Write>
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f240 6104 	movw	r1, #1540	@ 0x604
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 f977 	bl	8003248 <CODEC_IO_Write>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4413      	add	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f240 6105 	movw	r1, #1541	@ 0x605
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f96a 	bl	8003248 <CODEC_IO_Write>
 8002f74:	4603      	mov	r3, r0
 8002f76:	461a      	mov	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
    break;
 8002f7e:	e083      	b.n	8003088 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002f88:	2105      	movs	r1, #5
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f95c 	bl	8003248 <CODEC_IO_Write>
 8002f90:	4603      	mov	r3, r0
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f240 6101 	movw	r1, #1537	@ 0x601
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 f94f 	bl	8003248 <CODEC_IO_Write>
 8002faa:	4603      	mov	r3, r0
 8002fac:	461a      	mov	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f240 6102 	movw	r1, #1538	@ 0x602
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f942 	bl	8003248 <CODEC_IO_Write>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f240 6104 	movw	r1, #1540	@ 0x604
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 f935 	bl	8003248 <CODEC_IO_Write>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2202      	movs	r2, #2
 8002fee:	f240 6105 	movw	r1, #1541	@ 0x605
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f928 	bl	8003248 <CODEC_IO_Write>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
    break;
 8003002:	e041      	b.n	8003088 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f240 3203 	movw	r2, #771	@ 0x303
 800300c:	2105      	movs	r1, #5
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f91a 	bl	8003248 <CODEC_IO_Write>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2201      	movs	r2, #1
 8003024:	f240 6101 	movw	r1, #1537	@ 0x601
 8003028:	4618      	mov	r0, r3
 800302a:	f000 f90d 	bl	8003248 <CODEC_IO_Write>
 800302e:	4603      	mov	r3, r0
 8003030:	461a      	mov	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4413      	add	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2201      	movs	r2, #1
 800303e:	f240 6102 	movw	r1, #1538	@ 0x602
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f900 	bl	8003248 <CODEC_IO_Write>
 8003048:	4603      	mov	r3, r0
 800304a:	461a      	mov	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4413      	add	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2200      	movs	r2, #0
 8003058:	f240 6104 	movw	r1, #1540	@ 0x604
 800305c:	4618      	mov	r0, r3
 800305e:	f000 f8f3 	bl	8003248 <CODEC_IO_Write>
 8003062:	4603      	mov	r3, r0
 8003064:	461a      	mov	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4413      	add	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2200      	movs	r2, #0
 8003072:	f240 6105 	movw	r1, #1541	@ 0x605
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f8e6 	bl	8003248 <CODEC_IO_Write>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
    break;    
 8003086:	bf00      	nop
  }  
  return counter;
 8003088:	68fb      	ldr	r3, [r7, #12]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4a57      	ldr	r2, [pc, #348]	@ (8003204 <wm8994_SetFrequency+0x170>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d05f      	beq.n	800316c <wm8994_SetFrequency+0xd8>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4a55      	ldr	r2, [pc, #340]	@ (8003204 <wm8994_SetFrequency+0x170>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	f200 8093 	bhi.w	80031dc <wm8994_SetFrequency+0x148>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80030bc:	4293      	cmp	r3, r2
 80030be:	d047      	beq.n	8003150 <wm8994_SetFrequency+0xbc>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80030c6:	4293      	cmp	r3, r2
 80030c8:	f200 8088 	bhi.w	80031dc <wm8994_SetFrequency+0x148>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d074      	beq.n	80031c0 <wm8994_SetFrequency+0x12c>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80030dc:	4293      	cmp	r3, r2
 80030de:	d87d      	bhi.n	80031dc <wm8994_SetFrequency+0x148>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f245 6222 	movw	r2, #22050	@ 0x5622
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d05c      	beq.n	80031a4 <wm8994_SetFrequency+0x110>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	f245 6222 	movw	r2, #22050	@ 0x5622
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d873      	bhi.n	80031dc <wm8994_SetFrequency+0x148>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80030fa:	d01b      	beq.n	8003134 <wm8994_SetFrequency+0xa0>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003102:	d86b      	bhi.n	80031dc <wm8994_SetFrequency+0x148>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800310a:	d005      	beq.n	8003118 <wm8994_SetFrequency+0x84>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003112:	4293      	cmp	r3, r2
 8003114:	d038      	beq.n	8003188 <wm8994_SetFrequency+0xf4>
 8003116:	e061      	b.n	80031dc <wm8994_SetFrequency+0x148>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003118:	88fb      	ldrh	r3, [r7, #6]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2203      	movs	r2, #3
 800311e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f890 	bl	8003248 <CODEC_IO_Write>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
    break;
 8003132:	e061      	b.n	80031f8 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2233      	movs	r2, #51	@ 0x33
 800313a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f882 	bl	8003248 <CODEC_IO_Write>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
    break;
 800314e:	e053      	b.n	80031f8 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2283      	movs	r2, #131	@ 0x83
 8003156:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f874 	bl	8003248 <CODEC_IO_Write>
 8003160:	4603      	mov	r3, r0
 8003162:	461a      	mov	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
    break;
 800316a:	e045      	b.n	80031f8 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	22a3      	movs	r2, #163	@ 0xa3
 8003172:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f866 	bl	8003248 <CODEC_IO_Write>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
    break;
 8003186:	e037      	b.n	80031f8 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2213      	movs	r2, #19
 800318e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f858 	bl	8003248 <CODEC_IO_Write>
 8003198:	4603      	mov	r3, r0
 800319a:	461a      	mov	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
    break;
 80031a2:	e029      	b.n	80031f8 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2243      	movs	r2, #67	@ 0x43
 80031aa:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 f84a 	bl	8003248 <CODEC_IO_Write>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4413      	add	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
    break;
 80031be:	e01b      	b.n	80031f8 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2273      	movs	r2, #115	@ 0x73
 80031c6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f83c 	bl	8003248 <CODEC_IO_Write>
 80031d0:	4603      	mov	r3, r0
 80031d2:	461a      	mov	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
    break; 
 80031da:	e00d      	b.n	80031f8 <wm8994_SetFrequency+0x164>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2283      	movs	r2, #131	@ 0x83
 80031e2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f82e 	bl	8003248 <CODEC_IO_Write>
 80031ec:	4603      	mov	r3, r0
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
    break; 
 80031f6:	bf00      	nop
  }
  return counter;
 80031f8:	68fb      	ldr	r3, [r7, #12]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	00017700 	.word	0x00017700

08003208 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2200      	movs	r2, #0
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f812 	bl	8003248 <CODEC_IO_Write>
 8003224:	4603      	mov	r3, r0
 8003226:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003228:	4b05      	ldr	r3, [pc, #20]	@ (8003240 <wm8994_Reset+0x38>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800322e:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <wm8994_Reset+0x3c>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

  return counter;
 8003234:	68fb      	ldr	r3, [r7, #12]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000478 	.word	0x20000478
 8003244:	2000047c 	.word	0x2000047c

08003248 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
 8003252:	460b      	mov	r3, r1
 8003254:	80bb      	strh	r3, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800325e:	887a      	ldrh	r2, [r7, #2]
 8003260:	88b9      	ldrh	r1, [r7, #4]
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f96f 	bl	8003548 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	b2db      	uxtb	r3, r3
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08c      	sub	sp, #48	@ 0x30
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a51      	ldr	r2, [pc, #324]	@ (80033c8 <I2Cx_MspInit+0x150>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d14d      	bne.n	8003324 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003288:	4b50      	ldr	r3, [pc, #320]	@ (80033cc <I2Cx_MspInit+0x154>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328c:	4a4f      	ldr	r2, [pc, #316]	@ (80033cc <I2Cx_MspInit+0x154>)
 800328e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003292:	6313      	str	r3, [r2, #48]	@ 0x30
 8003294:	4b4d      	ldr	r3, [pc, #308]	@ (80033cc <I2Cx_MspInit+0x154>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80032a0:	2380      	movs	r3, #128	@ 0x80
 80032a2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80032a4:	2312      	movs	r3, #18
 80032a6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80032ac:	2302      	movs	r3, #2
 80032ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80032b0:	2304      	movs	r3, #4
 80032b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	4619      	mov	r1, r3
 80032ba:	4845      	ldr	r0, [pc, #276]	@ (80033d0 <I2Cx_MspInit+0x158>)
 80032bc:	f001 ff6a 	bl	8005194 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80032c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80032c6:	f107 031c 	add.w	r3, r7, #28
 80032ca:	4619      	mov	r1, r3
 80032cc:	4840      	ldr	r0, [pc, #256]	@ (80033d0 <I2Cx_MspInit+0x158>)
 80032ce:	f001 ff61 	bl	8005194 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80032d2:	4b3e      	ldr	r3, [pc, #248]	@ (80033cc <I2Cx_MspInit+0x154>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	4a3d      	ldr	r2, [pc, #244]	@ (80033cc <I2Cx_MspInit+0x154>)
 80032d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032de:	4b3b      	ldr	r3, [pc, #236]	@ (80033cc <I2Cx_MspInit+0x154>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80032ea:	4b38      	ldr	r3, [pc, #224]	@ (80033cc <I2Cx_MspInit+0x154>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	4a37      	ldr	r2, [pc, #220]	@ (80033cc <I2Cx_MspInit+0x154>)
 80032f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032f4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80032f6:	4b35      	ldr	r3, [pc, #212]	@ (80033cc <I2Cx_MspInit+0x154>)
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	4a34      	ldr	r2, [pc, #208]	@ (80033cc <I2Cx_MspInit+0x154>)
 80032fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003300:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	210f      	movs	r1, #15
 8003306:	2048      	movs	r0, #72	@ 0x48
 8003308:	f001 f939 	bl	800457e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800330c:	2048      	movs	r0, #72	@ 0x48
 800330e:	f001 f952 	bl	80045b6 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003312:	2200      	movs	r2, #0
 8003314:	210f      	movs	r1, #15
 8003316:	2049      	movs	r0, #73	@ 0x49
 8003318:	f001 f931 	bl	800457e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800331c:	2049      	movs	r0, #73	@ 0x49
 800331e:	f001 f94a 	bl	80045b6 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003322:	e04d      	b.n	80033c0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003324:	4b29      	ldr	r3, [pc, #164]	@ (80033cc <I2Cx_MspInit+0x154>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003328:	4a28      	ldr	r2, [pc, #160]	@ (80033cc <I2Cx_MspInit+0x154>)
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003330:	4b26      	ldr	r3, [pc, #152]	@ (80033cc <I2Cx_MspInit+0x154>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800333c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003340:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003342:	2312      	movs	r3, #18
 8003344:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800334a:	2302      	movs	r3, #2
 800334c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800334e:	2304      	movs	r3, #4
 8003350:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003352:	f107 031c 	add.w	r3, r7, #28
 8003356:	4619      	mov	r1, r3
 8003358:	481e      	ldr	r0, [pc, #120]	@ (80033d4 <I2Cx_MspInit+0x15c>)
 800335a:	f001 ff1b 	bl	8005194 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800335e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003364:	f107 031c 	add.w	r3, r7, #28
 8003368:	4619      	mov	r1, r3
 800336a:	481a      	ldr	r0, [pc, #104]	@ (80033d4 <I2Cx_MspInit+0x15c>)
 800336c:	f001 ff12 	bl	8005194 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003370:	4b16      	ldr	r3, [pc, #88]	@ (80033cc <I2Cx_MspInit+0x154>)
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	4a15      	ldr	r2, [pc, #84]	@ (80033cc <I2Cx_MspInit+0x154>)
 8003376:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800337a:	6413      	str	r3, [r2, #64]	@ 0x40
 800337c:	4b13      	ldr	r3, [pc, #76]	@ (80033cc <I2Cx_MspInit+0x154>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003388:	4b10      	ldr	r3, [pc, #64]	@ (80033cc <I2Cx_MspInit+0x154>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4a0f      	ldr	r2, [pc, #60]	@ (80033cc <I2Cx_MspInit+0x154>)
 800338e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003392:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003394:	4b0d      	ldr	r3, [pc, #52]	@ (80033cc <I2Cx_MspInit+0x154>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4a0c      	ldr	r2, [pc, #48]	@ (80033cc <I2Cx_MspInit+0x154>)
 800339a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800339e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80033a0:	2200      	movs	r2, #0
 80033a2:	210f      	movs	r1, #15
 80033a4:	201f      	movs	r0, #31
 80033a6:	f001 f8ea 	bl	800457e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80033aa:	201f      	movs	r0, #31
 80033ac:	f001 f903 	bl	80045b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80033b0:	2200      	movs	r2, #0
 80033b2:	210f      	movs	r1, #15
 80033b4:	2020      	movs	r0, #32
 80033b6:	f001 f8e2 	bl	800457e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80033ba:	2020      	movs	r0, #32
 80033bc:	f001 f8fb 	bl	80045b6 <HAL_NVIC_EnableIRQ>
}
 80033c0:	bf00      	nop
 80033c2:	3730      	adds	r7, #48	@ 0x30
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000480 	.word	0x20000480
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40021c00 	.word	0x40021c00
 80033d4:	40020400 	.word	0x40020400

080033d8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f002 fca3 	bl	8005d2c <HAL_I2C_GetState>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d125      	bne.n	8003438 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a14      	ldr	r2, [pc, #80]	@ (8003440 <I2Cx_Init+0x68>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d103      	bne.n	80033fc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a13      	ldr	r2, [pc, #76]	@ (8003444 <I2Cx_Init+0x6c>)
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e002      	b.n	8003402 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a12      	ldr	r2, [pc, #72]	@ (8003448 <I2Cx_Init+0x70>)
 8003400:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a11      	ldr	r2, [pc, #68]	@ (800344c <I2Cx_Init+0x74>)
 8003406:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ff23 	bl	8003278 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f002 f980 	bl	8005738 <HAL_I2C_Init>
  }
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20000480 	.word	0x20000480
 8003444:	40005c00 	.word	0x40005c00
 8003448:	40005400 	.word	0x40005400
 800344c:	40912732 	.word	0x40912732

08003450 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	@ 0x28
 8003454:	af04      	add	r7, sp, #16
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	4608      	mov	r0, r1
 800345a:	4611      	mov	r1, r2
 800345c:	461a      	mov	r2, r3
 800345e:	4603      	mov	r3, r0
 8003460:	72fb      	strb	r3, [r7, #11]
 8003462:	460b      	mov	r3, r1
 8003464:	813b      	strh	r3, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800346e:	7afb      	ldrb	r3, [r7, #11]
 8003470:	b299      	uxth	r1, r3
 8003472:	88f8      	ldrh	r0, [r7, #6]
 8003474:	893a      	ldrh	r2, [r7, #8]
 8003476:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800347a:	9302      	str	r3, [sp, #8]
 800347c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4603      	mov	r3, r0
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f002 fb36 	bl	8005af8 <HAL_I2C_Mem_Read>
 800348c:	4603      	mov	r3, r0
 800348e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d004      	beq.n	80034a0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003496:	7afb      	ldrb	r3, [r7, #11]
 8003498:	4619      	mov	r1, r3
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f832 	bl	8003504 <I2Cx_Error>
  }
  return status;    
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b08a      	sub	sp, #40	@ 0x28
 80034ae:	af04      	add	r7, sp, #16
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	4608      	mov	r0, r1
 80034b4:	4611      	mov	r1, r2
 80034b6:	461a      	mov	r2, r3
 80034b8:	4603      	mov	r3, r0
 80034ba:	72fb      	strb	r3, [r7, #11]
 80034bc:	460b      	mov	r3, r1
 80034be:	813b      	strh	r3, [r7, #8]
 80034c0:	4613      	mov	r3, r2
 80034c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80034c8:	7afb      	ldrb	r3, [r7, #11]
 80034ca:	b299      	uxth	r1, r3
 80034cc:	88f8      	ldrh	r0, [r7, #6]
 80034ce:	893a      	ldrh	r2, [r7, #8]
 80034d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034d4:	9302      	str	r3, [sp, #8]
 80034d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	4603      	mov	r3, r0
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f002 f9f5 	bl	80058d0 <HAL_I2C_Mem_Write>
 80034e6:	4603      	mov	r3, r0
 80034e8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80034f0:	7afb      	ldrb	r3, [r7, #11]
 80034f2:	4619      	mov	r1, r3
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f805 	bl	8003504 <I2Cx_Error>
  }
  return status;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f002 f9ad 	bl	8005870 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ff5e 	bl	80033d8 <I2Cx_Init>
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003528:	4802      	ldr	r0, [pc, #8]	@ (8003534 <AUDIO_IO_Init+0x10>)
 800352a:	f7ff ff55 	bl	80033d8 <I2Cx_Init>
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000480 	.word	0x20000480

08003538 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af02      	add	r7, sp, #8
 800354e:	4603      	mov	r3, r0
 8003550:	71fb      	strb	r3, [r7, #7]
 8003552:	460b      	mov	r3, r1
 8003554:	80bb      	strh	r3, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800355a:	887b      	ldrh	r3, [r7, #2]
 800355c:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800355e:	89fb      	ldrh	r3, [r7, #14]
 8003560:	0a1b      	lsrs	r3, r3, #8
 8003562:	b29b      	uxth	r3, r3
 8003564:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	b21a      	sxth	r2, r3
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	b21b      	sxth	r3, r3
 8003572:	4313      	orrs	r3, r2
 8003574:	b21b      	sxth	r3, r3
 8003576:	b29b      	uxth	r3, r3
 8003578:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800357a:	88ba      	ldrh	r2, [r7, #4]
 800357c:	79f9      	ldrb	r1, [r7, #7]
 800357e:	2302      	movs	r3, #2
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	1cbb      	adds	r3, r7, #2
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	2302      	movs	r3, #2
 8003588:	4803      	ldr	r0, [pc, #12]	@ (8003598 <AUDIO_IO_Write+0x50>)
 800358a:	f7ff ff8e 	bl	80034aa <I2Cx_WriteMultiple>
}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000480 	.word	0x20000480

0800359c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	4603      	mov	r3, r0
 80035a4:	460a      	mov	r2, r1
 80035a6:	71fb      	strb	r3, [r7, #7]
 80035a8:	4613      	mov	r3, r2
 80035aa:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	81bb      	strh	r3, [r7, #12]
 80035b0:	2300      	movs	r3, #0
 80035b2:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80035b4:	88ba      	ldrh	r2, [r7, #4]
 80035b6:	79f9      	ldrb	r1, [r7, #7]
 80035b8:	2302      	movs	r3, #2
 80035ba:	9301      	str	r3, [sp, #4]
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	2302      	movs	r3, #2
 80035c4:	480a      	ldr	r0, [pc, #40]	@ (80035f0 <AUDIO_IO_Read+0x54>)
 80035c6:	f7ff ff43 	bl	8003450 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80035ca:	89bb      	ldrh	r3, [r7, #12]
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80035d0:	89bb      	ldrh	r3, [r7, #12]
 80035d2:	b21b      	sxth	r3, r3
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	b21a      	sxth	r2, r3
 80035d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035dc:	4313      	orrs	r3, r2
 80035de:	b21b      	sxth	r3, r3
 80035e0:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80035e2:	89fb      	ldrh	r3, [r7, #14]
 80035e4:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80035e6:	89bb      	ldrh	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000480 	.word	0x20000480

080035f4 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 febf 	bl	8004380 <HAL_Delay>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 800360c:	b580      	push	{r7, lr}
 800360e:	b08c      	sub	sp, #48	@ 0x30
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8003616:	4b63      	ldr	r3, [pc, #396]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361a:	4a62      	ldr	r2, [pc, #392]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800361c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003620:	6453      	str	r3, [r2, #68]	@ 0x44
 8003622:	4b60      	ldr	r3, [pc, #384]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003626:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800362e:	4b5d      	ldr	r3, [pc, #372]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003632:	4a5c      	ldr	r2, [pc, #368]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003638:	6313      	str	r3, [r2, #48]	@ 0x30
 800363a:	4b5a      	ldr	r3, [pc, #360]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8003646:	4b57      	ldr	r3, [pc, #348]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	4a56      	ldr	r2, [pc, #344]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003650:	6313      	str	r3, [r2, #48]	@ 0x30
 8003652:	4b54      	ldr	r3, [pc, #336]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 800365e:	4b51      	ldr	r3, [pc, #324]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003662:	4a50      	ldr	r2, [pc, #320]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003668:	6313      	str	r3, [r2, #48]	@ 0x30
 800366a:	4b4e      	ldr	r3, [pc, #312]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8003676:	2380      	movs	r3, #128	@ 0x80
 8003678:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003682:	2303      	movs	r3, #3
 8003684:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003686:	230a      	movs	r3, #10
 8003688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800368a:	f107 031c 	add.w	r3, r7, #28
 800368e:	4619      	mov	r1, r3
 8003690:	4845      	ldr	r0, [pc, #276]	@ (80037a8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003692:	f001 fd7f 	bl	8005194 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8003696:	2320      	movs	r3, #32
 8003698:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800369a:	2302      	movs	r3, #2
 800369c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80036a2:	2303      	movs	r3, #3
 80036a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80036a6:	230a      	movs	r3, #10
 80036a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80036aa:	f107 031c 	add.w	r3, r7, #28
 80036ae:	4619      	mov	r1, r3
 80036b0:	483d      	ldr	r0, [pc, #244]	@ (80037a8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80036b2:	f001 fd6f 	bl	8005194 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80036b6:	2340      	movs	r3, #64	@ 0x40
 80036b8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80036ba:	2302      	movs	r3, #2
 80036bc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80036c2:	2303      	movs	r3, #3
 80036c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80036c6:	230a      	movs	r3, #10
 80036c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80036ca:	f107 031c 	add.w	r3, r7, #28
 80036ce:	4619      	mov	r1, r3
 80036d0:	4835      	ldr	r0, [pc, #212]	@ (80037a8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80036d2:	f001 fd5f 	bl	8005194 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80036d6:	2310      	movs	r3, #16
 80036d8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80036da:	2302      	movs	r3, #2
 80036dc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80036e2:	2303      	movs	r3, #3
 80036e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80036e6:	230a      	movs	r3, #10
 80036e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80036ea:	f107 031c 	add.w	r3, r7, #28
 80036ee:	4619      	mov	r1, r3
 80036f0:	482d      	ldr	r0, [pc, #180]	@ (80037a8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80036f2:	f001 fd4f 	bl	8005194 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80036f6:	4b2b      	ldr	r3, [pc, #172]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	4a2a      	ldr	r2, [pc, #168]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 80036fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003700:	6313      	str	r3, [r2, #48]	@ 0x30
 8003702:	4b28      	ldr	r3, [pc, #160]	@ (80037a4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a26      	ldr	r2, [pc, #152]	@ (80037ac <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d138      	bne.n	800378a <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8003718:	4b25      	ldr	r3, [pc, #148]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800371a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800371e:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003720:	4b23      	ldr	r3, [pc, #140]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003722:	2240      	movs	r2, #64	@ 0x40
 8003724:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003726:	4b22      	ldr	r3, [pc, #136]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003728:	2200      	movs	r2, #0
 800372a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800372c:	4b20      	ldr	r3, [pc, #128]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800372e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003732:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003734:	4b1e      	ldr	r3, [pc, #120]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003736:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800373a:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 800373c:	4b1c      	ldr	r3, [pc, #112]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800373e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003742:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8003744:	4b1a      	ldr	r3, [pc, #104]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003746:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800374a:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800374c:	4b18      	ldr	r3, [pc, #96]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800374e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003752:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8003754:	4b16      	ldr	r3, [pc, #88]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003756:	2204      	movs	r2, #4
 8003758:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800375a:	4b15      	ldr	r3, [pc, #84]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800375c:	2203      	movs	r2, #3
 800375e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003760:	4b13      	ldr	r3, [pc, #76]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003762:	2200      	movs	r2, #0
 8003764:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003766:	4b12      	ldr	r3, [pc, #72]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800376c:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800376e:	4a11      	ldr	r2, [pc, #68]	@ (80037b4 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8003770:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a0e      	ldr	r2, [pc, #56]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003776:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003778:	4a0d      	ldr	r2, [pc, #52]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 800377e:	480c      	ldr	r0, [pc, #48]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003780:	f000 ffe2 	bl	8004748 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8003784:	480a      	ldr	r0, [pc, #40]	@ (80037b0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003786:	f000 ff31 	bl	80045ec <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800378a:	2200      	movs	r2, #0
 800378c:	210e      	movs	r1, #14
 800378e:	203c      	movs	r0, #60	@ 0x3c
 8003790:	f000 fef5 	bl	800457e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8003794:	203c      	movs	r0, #60	@ 0x3c
 8003796:	f000 ff0e 	bl	80045b6 <HAL_NVIC_EnableIRQ>
}
 800379a:	bf00      	nop
 800379c:	3730      	adds	r7, #48	@ 0x30
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40022000 	.word	0x40022000
 80037ac:	40015c04 	.word	0x40015c04
 80037b0:	200005e0 	.word	0x200005e0
 80037b4:	40026470 	.word	0x40026470

080037b8 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b0a6      	sub	sp, #152	@ 0x98
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 ffdf 	bl	800778c <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d009      	beq.n	80037ec <BSP_AUDIO_OUT_ClockConfig+0x34>
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f245 6222 	movw	r2, #22050	@ 0x5622
 80037de:	4293      	cmp	r3, r2
 80037e0:	d004      	beq.n	80037ec <BSP_AUDIO_OUT_ClockConfig+0x34>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d112      	bne.n	8003812 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80037ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80037f0:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80037f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80037f6:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 80037f8:	f240 13ad 	movw	r3, #429	@ 0x1ad
 80037fc:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80037fe:	2302      	movs	r3, #2
 8003800:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8003802:	2313      	movs	r3, #19
 8003804:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003806:	f107 0314 	add.w	r3, r7, #20
 800380a:	4618      	mov	r0, r3
 800380c:	f003 fbce 	bl	8006fac <HAL_RCCEx_PeriphCLKConfig>
 8003810:	e012      	b.n	8003838 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003812:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003816:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003818:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800381c:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800381e:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8003822:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8003824:	2307      	movs	r3, #7
 8003826:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8003828:	2301      	movs	r3, #1
 800382a:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800382c:	f107 0314 	add.w	r3, r7, #20
 8003830:	4618      	mov	r0, r3
 8003832:	f003 fbbb 	bl	8006fac <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8003836:	bf00      	nop
 8003838:	bf00      	nop
 800383a:	3798      	adds	r7, #152	@ 0x98
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003844:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <SAIx_Out_DeInit+0x24>)
 8003846:	4a08      	ldr	r2, [pc, #32]	@ (8003868 <SAIx_Out_DeInit+0x28>)
 8003848:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <SAIx_Out_DeInit+0x24>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4b04      	ldr	r3, [pc, #16]	@ (8003864 <SAIx_Out_DeInit+0x24>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003858:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 800385a:	4802      	ldr	r0, [pc, #8]	@ (8003864 <SAIx_Out_DeInit+0x24>)
 800385c:	f004 fb94 	bl	8007f88 <HAL_SAI_DeInit>
}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	200004d8 	.word	0x200004d8
 8003868:	40015c04 	.word	0x40015c04

0800386c <BSP_AUDIO_IN_OUT_Init>:
  * @param  Volume: Initial volume level (in range 0(Mute)..80(+0dB)..100(+17.625dB))
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b089      	sub	sp, #36	@ 0x24
 8003870:	af00      	add	r7, sp, #0
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	4603      	mov	r3, r0
 8003876:	81fb      	strh	r3, [r7, #14]
 8003878:	460b      	mov	r3, r1
 800387a:	81bb      	strh	r3, [r7, #12]
 800387c:	4613      	mov	r3, r2
 800387e:	72fb      	strb	r3, [r7, #11]
  uint8_t ret = AUDIO_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)  /* Only MICROPHONE_2 input supported */
 8003888:	89fb      	ldrh	r3, [r7, #14]
 800388a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800388e:	d002      	beq.n	8003896 <BSP_AUDIO_IN_OUT_Init+0x2a>
  {
    ret = AUDIO_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e054      	b.n	8003940 <BSP_AUDIO_IN_OUT_Init+0xd4>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8003896:	f000 f9cd 	bl	8003c34 <SAIx_In_DeInit>
    SAIx_Out_DeInit();
 800389a:	f7ff ffd1 	bl	8003840 <SAIx_Out_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 800389e:	2200      	movs	r2, #0
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	482a      	ldr	r0, [pc, #168]	@ (800394c <BSP_AUDIO_IN_OUT_Init+0xe0>)
 80038a4:	f7ff ff88 	bl	80037b8 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80038a8:	4b28      	ldr	r3, [pc, #160]	@ (800394c <BSP_AUDIO_IN_OUT_Init+0xe0>)
 80038aa:	4a29      	ldr	r2, [pc, #164]	@ (8003950 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80038ac:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80038ae:	4827      	ldr	r0, [pc, #156]	@ (800394c <BSP_AUDIO_IN_OUT_Init+0xe0>)
 80038b0:	f004 fb9f 	bl	8007ff2 <HAL_SAI_GetState>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d103      	bne.n	80038c2 <BSP_AUDIO_IN_OUT_Init+0x56>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80038ba:	2100      	movs	r1, #0
 80038bc:	4823      	ldr	r0, [pc, #140]	@ (800394c <BSP_AUDIO_IN_OUT_Init+0xe0>)
 80038be:	f000 f851 	bl	8003964 <BSP_AUDIO_IN_MspInit>
    }

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80038c2:	4b24      	ldr	r3, [pc, #144]	@ (8003954 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 80038c4:	4a24      	ldr	r2, [pc, #144]	@ (8003958 <BSP_AUDIO_IN_OUT_Init+0xec>)
 80038c6:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 80038c8:	4822      	ldr	r0, [pc, #136]	@ (8003954 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 80038ca:	f004 fb92 	bl	8007ff2 <HAL_SAI_GetState>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d103      	bne.n	80038dc <BSP_AUDIO_IN_OUT_Init+0x70>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 80038d4:	2100      	movs	r1, #0
 80038d6:	481f      	ldr	r0, [pc, #124]	@ (8003954 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 80038d8:	f7ff fe98 	bl	800360c <BSP_AUDIO_OUT_MspInit>

    /* Configure SAI in master mode :
     *   - SAI2_block_A in master TX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 80038dc:	89fb      	ldrh	r3, [r7, #14]
 80038de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038e2:	d102      	bne.n	80038ea <BSP_AUDIO_IN_OUT_Init+0x7e>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 80038e4:	230a      	movs	r3, #10
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	e001      	b.n	80038ee <BSP_AUDIO_IN_OUT_Init+0x82>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80038ea:	2305      	movs	r3, #5
 80038ec:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	69b9      	ldr	r1, [r7, #24]
 80038f2:	2000      	movs	r0, #0
 80038f4:	f000 f8e8 	bl	8003ac8 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80038f8:	4b18      	ldr	r3, [pc, #96]	@ (800395c <BSP_AUDIO_IN_OUT_Init+0xf0>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2034      	movs	r0, #52	@ 0x34
 80038fe:	4798      	blx	r3
 8003900:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f648 1294 	movw	r2, #35220	@ 0x8994
 8003908:	4293      	cmp	r3, r2
 800390a:	d109      	bne.n	8003920 <BSP_AUDIO_IN_OUT_Init+0xb4>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800390c:	4b13      	ldr	r3, [pc, #76]	@ (800395c <BSP_AUDIO_IN_OUT_Init+0xf0>)
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	2034      	movs	r0, #52	@ 0x34
 8003912:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8003914:	4b12      	ldr	r3, [pc, #72]	@ (8003960 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8003916:	4a11      	ldr	r2, [pc, #68]	@ (800395c <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8003918:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e001      	b.n	8003924 <BSP_AUDIO_IN_OUT_Init+0xb8>
    }
    else
    {
      ret = AUDIO_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8003924:	7ffb      	ldrb	r3, [r7, #31]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <BSP_AUDIO_IN_OUT_Init+0xd4>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, Volume, AudioFreq);
 800392a:	4b0d      	ldr	r3, [pc, #52]	@ (8003960 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681c      	ldr	r4, [r3, #0]
 8003930:	89fa      	ldrh	r2, [r7, #14]
 8003932:	89bb      	ldrh	r3, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	b299      	uxth	r1, r3
 8003938:	7afa      	ldrb	r2, [r7, #11]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2034      	movs	r0, #52	@ 0x34
 800393e:	47a0      	blx	r4
    }
  }
  return ret;
 8003940:	7ffb      	ldrb	r3, [r7, #31]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3724      	adds	r7, #36	@ 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd90      	pop	{r4, r7, pc}
 800394a:	bf00      	nop
 800394c:	2000055c 	.word	0x2000055c
 8003950:	40015c24 	.word	0x40015c24
 8003954:	200004d8 	.word	0x200004d8
 8003958:	40015c04 	.word	0x40015c04
 800395c:	20000008 	.word	0x20000008
 8003960:	200004d4 	.word	0x200004d4

08003964 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08c      	sub	sp, #48	@ 0x30
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 800396e:	4b50      	ldr	r3, [pc, #320]	@ (8003ab0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	4a4f      	ldr	r2, [pc, #316]	@ (8003ab0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003974:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003978:	6453      	str	r3, [r2, #68]	@ 0x44
 800397a:	4b4d      	ldr	r3, [pc, #308]	@ (8003ab0 <BSP_AUDIO_IN_MspInit+0x14c>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003982:	61bb      	str	r3, [r7, #24]
 8003984:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8003986:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	4a49      	ldr	r2, [pc, #292]	@ (8003ab0 <BSP_AUDIO_IN_MspInit+0x14c>)
 800398c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003990:	6313      	str	r3, [r2, #48]	@ 0x30
 8003992:	4b47      	ldr	r3, [pc, #284]	@ (8003ab0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800399e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039a2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80039a4:	2302      	movs	r3, #2
 80039a6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80039ac:	2302      	movs	r3, #2
 80039ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 80039b0:	230a      	movs	r3, #10
 80039b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80039b4:	f107 031c 	add.w	r3, r7, #28
 80039b8:	4619      	mov	r1, r3
 80039ba:	483e      	ldr	r0, [pc, #248]	@ (8003ab4 <BSP_AUDIO_IN_MspInit+0x150>)
 80039bc:	f001 fbea 	bl	8005194 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 80039c0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ab0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80039c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80039cc:	4b38      	ldr	r3, [pc, #224]	@ (8003ab0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80039ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80039d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039dc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80039de:	2300      	movs	r3, #0
 80039e0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80039e6:	2302      	movs	r3, #2
 80039e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80039ea:	f107 031c 	add.w	r3, r7, #28
 80039ee:	4619      	mov	r1, r3
 80039f0:	4831      	ldr	r0, [pc, #196]	@ (8003ab8 <BSP_AUDIO_IN_MspInit+0x154>)
 80039f2:	f001 fbcf 	bl	8005194 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80039f6:	4b2e      	ldr	r3, [pc, #184]	@ (8003ab0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fa:	4a2d      	ldr	r2, [pc, #180]	@ (8003ab0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80039fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a02:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2a      	ldr	r2, [pc, #168]	@ (8003abc <BSP_AUDIO_IN_MspInit+0x158>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d137      	bne.n	8003a88 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8003a18:	4b29      	ldr	r3, [pc, #164]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003a1e:	4b28      	ldr	r3, [pc, #160]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003a24:	4b26      	ldr	r3, [pc, #152]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8003a2a:	4b25      	ldr	r3, [pc, #148]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a30:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003a32:	4b23      	ldr	r3, [pc, #140]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a38:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8003a3a:	4b21      	ldr	r3, [pc, #132]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a40:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8003a42:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a48:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a50:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003a52:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003a58:	4b19      	ldr	r3, [pc, #100]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003a5e:	4b18      	ldr	r3, [pc, #96]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8003a64:	4b16      	ldr	r3, [pc, #88]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8003a6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a6c:	4a15      	ldr	r2, [pc, #84]	@ (8003ac4 <BSP_AUDIO_IN_MspInit+0x160>)
 8003a6e:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a13      	ldr	r2, [pc, #76]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a74:	671a      	str	r2, [r3, #112]	@ 0x70
 8003a76:	4a12      	ldr	r2, [pc, #72]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8003a7c:	4810      	ldr	r0, [pc, #64]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a7e:	f000 fe63 	bl	8004748 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8003a82:	480f      	ldr	r0, [pc, #60]	@ (8003ac0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003a84:	f000 fdb2 	bl	80045ec <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	210f      	movs	r1, #15
 8003a8c:	2046      	movs	r0, #70	@ 0x46
 8003a8e:	f000 fd76 	bl	800457e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8003a92:	2046      	movs	r0, #70	@ 0x46
 8003a94:	f000 fd8f 	bl	80045b6 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	210f      	movs	r1, #15
 8003a9c:	2028      	movs	r0, #40	@ 0x28
 8003a9e:	f000 fd6e 	bl	800457e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8003aa2:	2028      	movs	r0, #40	@ 0x28
 8003aa4:	f000 fd87 	bl	80045b6 <HAL_NVIC_EnableIRQ>
}
 8003aa8:	bf00      	nop
 8003aaa:	3730      	adds	r7, #48	@ 0x30
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40021800 	.word	0x40021800
 8003ab8:	40021c00 	.word	0x40021c00
 8003abc:	40015c24 	.word	0x40015c24
 8003ac0:	20000640 	.word	0x20000640
 8003ac4:	400264b8 	.word	0x400264b8

08003ac8 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003ad4:	4b53      	ldr	r3, [pc, #332]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003ad6:	4a54      	ldr	r2, [pc, #336]	@ (8003c28 <SAIx_In_Init+0x160>)
 8003ad8:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003ada:	4b52      	ldr	r3, [pc, #328]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b50      	ldr	r3, [pc, #320]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ae8:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8003aea:	4a4e      	ldr	r2, [pc, #312]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8003af0:	4a4c      	ldr	r2, [pc, #304]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8003af6:	4b4b      	ldr	r3, [pc, #300]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8003afc:	4b49      	ldr	r3, [pc, #292]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8003b02:	4b48      	ldr	r3, [pc, #288]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b04:	2280      	movs	r2, #128	@ 0x80
 8003b06:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003b08:	4b46      	ldr	r3, [pc, #280]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8003b0e:	4b45      	ldr	r3, [pc, #276]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8003b14:	4b43      	ldr	r3, [pc, #268]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8003b1a:	4b42      	ldr	r3, [pc, #264]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b20:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003b22:	4b40      	ldr	r3, [pc, #256]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8003b28:	4b3e      	ldr	r3, [pc, #248]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b2a:	2240      	movs	r2, #64	@ 0x40
 8003b2c:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8003b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b30:	2220      	movs	r2, #32
 8003b32:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8003b34:	4b3b      	ldr	r3, [pc, #236]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b3a:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003b3c:	4b39      	ldr	r3, [pc, #228]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8003b42:	4b38      	ldr	r3, [pc, #224]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b44:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003b48:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8003b4a:	4b36      	ldr	r3, [pc, #216]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003b50:	4b34      	ldr	r3, [pc, #208]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8003b56:	4b33      	ldr	r3, [pc, #204]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b58:	2204      	movs	r2, #4
 8003b5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8003b5c:	4a31      	ldr	r2, [pc, #196]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8003b62:	4830      	ldr	r0, [pc, #192]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003b64:	f004 f892 	bl	8007c8c <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003b68:	4b30      	ldr	r3, [pc, #192]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003b6a:	4a31      	ldr	r2, [pc, #196]	@ (8003c30 <SAIx_In_Init+0x168>)
 8003b6c:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8003b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b2d      	ldr	r3, [pc, #180]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003b7c:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8003b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8003b84:	4b29      	ldr	r3, [pc, #164]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003b86:	2203      	movs	r2, #3
 8003b88:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8003b8a:	4b28      	ldr	r3, [pc, #160]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8003b90:	4b26      	ldr	r3, [pc, #152]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8003b96:	4b25      	ldr	r3, [pc, #148]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003b98:	2280      	movs	r2, #128	@ 0x80
 8003b9a:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003b9c:	4b23      	ldr	r3, [pc, #140]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8003ba2:	4b22      	ldr	r3, [pc, #136]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8003ba8:	4b20      	ldr	r3, [pc, #128]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8003bae:	4b1f      	ldr	r3, [pc, #124]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8003bba:	4b1c      	ldr	r3, [pc, #112]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003bbc:	2240      	movs	r2, #64	@ 0x40
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8003bc6:	4b19      	ldr	r3, [pc, #100]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003bc8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003bcc:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003bce:	4b17      	ldr	r3, [pc, #92]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8003bd4:	4b15      	ldr	r3, [pc, #84]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003bd6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003bda:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8003bdc:	4b13      	ldr	r3, [pc, #76]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003be2:	4b12      	ldr	r3, [pc, #72]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8003be8:	4b10      	ldr	r3, [pc, #64]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003bea:	2204      	movs	r2, #4
 8003bec:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8003bee:	4a0f      	ldr	r2, [pc, #60]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8003bf4:	480d      	ldr	r0, [pc, #52]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003bf6:	f004 f849 	bl	8007c8c <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b08      	ldr	r3, [pc, #32]	@ (8003c24 <SAIx_In_Init+0x15c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003c08:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8003c0a:	4b08      	ldr	r3, [pc, #32]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4b06      	ldr	r3, [pc, #24]	@ (8003c2c <SAIx_In_Init+0x164>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003c18:	601a      	str	r2, [r3, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200004d8 	.word	0x200004d8
 8003c28:	40015c04 	.word	0x40015c04
 8003c2c:	2000055c 	.word	0x2000055c
 8003c30:	40015c24 	.word	0x40015c24

08003c34 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003c38:	4b07      	ldr	r3, [pc, #28]	@ (8003c58 <SAIx_In_DeInit+0x24>)
 8003c3a:	4a08      	ldr	r2, [pc, #32]	@ (8003c5c <SAIx_In_DeInit+0x28>)
 8003c3c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8003c3e:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <SAIx_In_DeInit+0x24>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b04      	ldr	r3, [pc, #16]	@ (8003c58 <SAIx_In_DeInit+0x24>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003c4c:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8003c4e:	4802      	ldr	r0, [pc, #8]	@ (8003c58 <SAIx_In_DeInit+0x24>)
 8003c50:	f004 f99a 	bl	8007f88 <HAL_SAI_DeInit>
}
 8003c54:	bf00      	nop
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	2000055c 	.word	0x2000055c
 8003c5c:	40015c24 	.word	0x40015c24

08003c60 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003c64:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <BSP_LCD_GetXSize+0x20>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a06      	ldr	r2, [pc, #24]	@ (8003c84 <BSP_LCD_GetXSize+0x24>)
 8003c6a:	2134      	movs	r1, #52	@ 0x34
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	3360      	adds	r3, #96	@ 0x60
 8003c74:	681b      	ldr	r3, [r3, #0]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	20000788 	.word	0x20000788
 8003c84:	200006a0 	.word	0x200006a0

08003c88 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003c90:	4b07      	ldr	r3, [pc, #28]	@ (8003cb0 <BSP_LCD_SetTextColor+0x28>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4907      	ldr	r1, [pc, #28]	@ (8003cb4 <BSP_LCD_SetTextColor+0x2c>)
 8003c96:	4613      	mov	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	601a      	str	r2, [r3, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	20000788 	.word	0x20000788
 8003cb4:	2000078c 	.word	0x2000078c

08003cb8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003cc0:	4b08      	ldr	r3, [pc, #32]	@ (8003ce4 <BSP_LCD_SetBackColor+0x2c>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4908      	ldr	r1, [pc, #32]	@ (8003ce8 <BSP_LCD_SetBackColor+0x30>)
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	601a      	str	r2, [r3, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000788 	.word	0x20000788
 8003ce8:	2000078c 	.word	0x2000078c

08003cec <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003cf4:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <BSP_LCD_SetFont+0x2c>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4908      	ldr	r1, [pc, #32]	@ (8003d1c <BSP_LCD_SetFont+0x30>)
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3308      	adds	r3, #8
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	601a      	str	r2, [r3, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20000788 	.word	0x20000788
 8003d1c:	2000078c 	.word	0x2000078c

08003d20 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	80fb      	strh	r3, [r7, #6]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	80bb      	strh	r3, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003d32:	4b1b      	ldr	r3, [pc, #108]	@ (8003da0 <BSP_LCD_DisplayChar+0x80>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	491b      	ldr	r1, [pc, #108]	@ (8003da4 <BSP_LCD_DisplayChar+0x84>)
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	3308      	adds	r3, #8
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6819      	ldr	r1, [r3, #0]
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003d4e:	4b14      	ldr	r3, [pc, #80]	@ (8003da0 <BSP_LCD_DisplayChar+0x80>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4c14      	ldr	r4, [pc, #80]	@ (8003da4 <BSP_LCD_DisplayChar+0x84>)
 8003d54:	4613      	mov	r3, r2
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4423      	add	r3, r4
 8003d5e:	3308      	adds	r3, #8
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003d64:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003d68:	4b0d      	ldr	r3, [pc, #52]	@ (8003da0 <BSP_LCD_DisplayChar+0x80>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4c0d      	ldr	r4, [pc, #52]	@ (8003da4 <BSP_LCD_DisplayChar+0x84>)
 8003d6e:	4613      	mov	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4423      	add	r3, r4
 8003d78:	3308      	adds	r3, #8
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	889b      	ldrh	r3, [r3, #4]
 8003d7e:	3307      	adds	r3, #7
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	da00      	bge.n	8003d86 <BSP_LCD_DisplayChar+0x66>
 8003d84:	3307      	adds	r3, #7
 8003d86:	10db      	asrs	r3, r3, #3
 8003d88:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003d8c:	18ca      	adds	r2, r1, r3
 8003d8e:	88b9      	ldrh	r1, [r7, #4]
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f992 	bl	80040bc <DrawChar>
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd90      	pop	{r4, r7, pc}
 8003da0:	20000788 	.word	0x20000788
 8003da4:	2000078c 	.word	0x2000078c

08003da8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003da8:	b5b0      	push	{r4, r5, r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60ba      	str	r2, [r7, #8]
 8003db0:	461a      	mov	r2, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	81fb      	strh	r3, [r7, #14]
 8003db6:	460b      	mov	r3, r1
 8003db8:	81bb      	strh	r3, [r7, #12]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	83fb      	strh	r3, [r7, #30]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003dd2:	e002      	b.n	8003dda <BSP_LCD_DisplayStringAt+0x32>
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	617a      	str	r2, [r7, #20]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f6      	bne.n	8003dd4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003de6:	f7ff ff3b 	bl	8003c60 <BSP_LCD_GetXSize>
 8003dea:	4601      	mov	r1, r0
 8003dec:	4b50      	ldr	r3, [pc, #320]	@ (8003f30 <BSP_LCD_DisplayStringAt+0x188>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	4850      	ldr	r0, [pc, #320]	@ (8003f34 <BSP_LCD_DisplayStringAt+0x18c>)
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4403      	add	r3, r0
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	889b      	ldrh	r3, [r3, #4]
 8003e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e06:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d01c      	beq.n	8003e48 <BSP_LCD_DisplayStringAt+0xa0>
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	dc33      	bgt.n	8003e7a <BSP_LCD_DisplayStringAt+0xd2>
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d002      	beq.n	8003e1c <BSP_LCD_DisplayStringAt+0x74>
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d019      	beq.n	8003e4e <BSP_LCD_DisplayStringAt+0xa6>
 8003e1a:	e02e      	b.n	8003e7a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	1ad1      	subs	r1, r2, r3
 8003e22:	4b43      	ldr	r3, [pc, #268]	@ (8003f30 <BSP_LCD_DisplayStringAt+0x188>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4843      	ldr	r0, [pc, #268]	@ (8003f34 <BSP_LCD_DisplayStringAt+0x18c>)
 8003e28:	4613      	mov	r3, r2
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4403      	add	r3, r0
 8003e32:	3308      	adds	r3, #8
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	889b      	ldrh	r3, [r3, #4]
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	89fb      	ldrh	r3, [r7, #14]
 8003e42:	4413      	add	r3, r2
 8003e44:	83fb      	strh	r3, [r7, #30]
      break;
 8003e46:	e01b      	b.n	8003e80 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003e48:	89fb      	ldrh	r3, [r7, #14]
 8003e4a:	83fb      	strh	r3, [r7, #30]
      break;
 8003e4c:	e018      	b.n	8003e80 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	b299      	uxth	r1, r3
 8003e56:	4b36      	ldr	r3, [pc, #216]	@ (8003f30 <BSP_LCD_DisplayStringAt+0x188>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4836      	ldr	r0, [pc, #216]	@ (8003f34 <BSP_LCD_DisplayStringAt+0x18c>)
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4403      	add	r3, r0
 8003e66:	3308      	adds	r3, #8
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	889b      	ldrh	r3, [r3, #4]
 8003e6c:	fb11 f303 	smulbb	r3, r1, r3
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	89fb      	ldrh	r3, [r7, #14]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	83fb      	strh	r3, [r7, #30]
      break;
 8003e78:	e002      	b.n	8003e80 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003e7a:	89fb      	ldrh	r3, [r7, #14]
 8003e7c:	83fb      	strh	r3, [r7, #30]
      break;
 8003e7e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003e80:	8bfb      	ldrh	r3, [r7, #30]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <BSP_LCD_DisplayStringAt+0xe6>
 8003e86:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	da1d      	bge.n	8003eca <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003e92:	e01a      	b.n	8003eca <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	781a      	ldrb	r2, [r3, #0]
 8003e98:	89b9      	ldrh	r1, [r7, #12]
 8003e9a:	8bfb      	ldrh	r3, [r7, #30]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff3f 	bl	8003d20 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003ea2:	4b23      	ldr	r3, [pc, #140]	@ (8003f30 <BSP_LCD_DisplayStringAt+0x188>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4923      	ldr	r1, [pc, #140]	@ (8003f34 <BSP_LCD_DisplayStringAt+0x18c>)
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	889a      	ldrh	r2, [r3, #4]
 8003eb8:	8bfb      	ldrh	r3, [r7, #30]
 8003eba:	4413      	add	r3, r2
 8003ebc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	60bb      	str	r3, [r7, #8]
    i++;
 8003ec4:	8bbb      	ldrh	r3, [r7, #28]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bf14      	ite	ne
 8003ed2:	2301      	movne	r3, #1
 8003ed4:	2300      	moveq	r3, #0
 8003ed6:	b2dc      	uxtb	r4, r3
 8003ed8:	f7ff fec2 	bl	8003c60 <BSP_LCD_GetXSize>
 8003edc:	8bb9      	ldrh	r1, [r7, #28]
 8003ede:	4b14      	ldr	r3, [pc, #80]	@ (8003f30 <BSP_LCD_DisplayStringAt+0x188>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4d14      	ldr	r5, [pc, #80]	@ (8003f34 <BSP_LCD_DisplayStringAt+0x18c>)
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	442b      	add	r3, r5
 8003eee:	3308      	adds	r3, #8
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	889b      	ldrh	r3, [r3, #4]
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	1ac3      	subs	r3, r0, r3
 8003efa:	b299      	uxth	r1, r3
 8003efc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f30 <BSP_LCD_DisplayStringAt+0x188>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	480c      	ldr	r0, [pc, #48]	@ (8003f34 <BSP_LCD_DisplayStringAt+0x18c>)
 8003f02:	4613      	mov	r3, r2
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4403      	add	r3, r0
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	889b      	ldrh	r3, [r3, #4]
 8003f12:	4299      	cmp	r1, r3
 8003f14:	bf2c      	ite	cs
 8003f16:	2301      	movcs	r3, #1
 8003f18:	2300      	movcc	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	4023      	ands	r3, r4
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1b7      	bne.n	8003e94 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000788 	.word	0x20000788
 8003f34:	2000078c 	.word	0x2000078c

08003f38 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003f38:	b5b0      	push	{r4, r5, r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	603a      	str	r2, [r7, #0]
 8003f42:	80fb      	strh	r3, [r7, #6]
 8003f44:	460b      	mov	r3, r1
 8003f46:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003f48:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <BSP_LCD_DrawPixel+0x88>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fc4 <BSP_LCD_DrawPixel+0x8c>)
 8003f4e:	2134      	movs	r1, #52	@ 0x34
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	3348      	adds	r3, #72	@ 0x48
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d116      	bne.n	8003f8c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003f5e:	4b18      	ldr	r3, [pc, #96]	@ (8003fc0 <BSP_LCD_DrawPixel+0x88>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a18      	ldr	r2, [pc, #96]	@ (8003fc4 <BSP_LCD_DrawPixel+0x8c>)
 8003f64:	2134      	movs	r1, #52	@ 0x34
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	335c      	adds	r3, #92	@ 0x5c
 8003f6e:	681c      	ldr	r4, [r3, #0]
 8003f70:	88bd      	ldrh	r5, [r7, #4]
 8003f72:	f7ff fe75 	bl	8003c60 <BSP_LCD_GetXSize>
 8003f76:	4603      	mov	r3, r0
 8003f78:	fb03 f205 	mul.w	r2, r3, r5
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	4413      	add	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4423      	add	r3, r4
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	b292      	uxth	r2, r2
 8003f88:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003f8a:	e015      	b.n	8003fb8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc0 <BSP_LCD_DrawPixel+0x88>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a0c      	ldr	r2, [pc, #48]	@ (8003fc4 <BSP_LCD_DrawPixel+0x8c>)
 8003f92:	2134      	movs	r1, #52	@ 0x34
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	4413      	add	r3, r2
 8003f9a:	335c      	adds	r3, #92	@ 0x5c
 8003f9c:	681c      	ldr	r4, [r3, #0]
 8003f9e:	88bd      	ldrh	r5, [r7, #4]
 8003fa0:	f7ff fe5e 	bl	8003c60 <BSP_LCD_GetXSize>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	fb03 f205 	mul.w	r2, r3, r5
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4423      	add	r3, r4
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	6013      	str	r3, [r2, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc0:	20000788 	.word	0x20000788
 8003fc4:	200006a0 	.word	0x200006a0

08003fc8 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fcc:	b086      	sub	sp, #24
 8003fce:	af02      	add	r7, sp, #8
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	4608      	mov	r0, r1
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4623      	mov	r3, r4
 8003fda:	80fb      	strh	r3, [r7, #6]
 8003fdc:	4603      	mov	r3, r0
 8003fde:	80bb      	strh	r3, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003fec:	4b30      	ldr	r3, [pc, #192]	@ (80040b0 <BSP_LCD_FillRect+0xe8>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4930      	ldr	r1, [pc, #192]	@ (80040b4 <BSP_LCD_FillRect+0xec>)
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff fe42 	bl	8003c88 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004004:	4b2a      	ldr	r3, [pc, #168]	@ (80040b0 <BSP_LCD_FillRect+0xe8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a2b      	ldr	r2, [pc, #172]	@ (80040b8 <BSP_LCD_FillRect+0xf0>)
 800400a:	2134      	movs	r1, #52	@ 0x34
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	4413      	add	r3, r2
 8004012:	3348      	adds	r3, #72	@ 0x48
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d114      	bne.n	8004044 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800401a:	4b25      	ldr	r3, [pc, #148]	@ (80040b0 <BSP_LCD_FillRect+0xe8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a26      	ldr	r2, [pc, #152]	@ (80040b8 <BSP_LCD_FillRect+0xf0>)
 8004020:	2134      	movs	r1, #52	@ 0x34
 8004022:	fb01 f303 	mul.w	r3, r1, r3
 8004026:	4413      	add	r3, r2
 8004028:	335c      	adds	r3, #92	@ 0x5c
 800402a:	681c      	ldr	r4, [r3, #0]
 800402c:	f7ff fe18 	bl	8003c60 <BSP_LCD_GetXSize>
 8004030:	4602      	mov	r2, r0
 8004032:	88bb      	ldrh	r3, [r7, #4]
 8004034:	fb03 f202 	mul.w	r2, r3, r2
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	4413      	add	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4423      	add	r3, r4
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	e013      	b.n	800406c <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004044:	4b1a      	ldr	r3, [pc, #104]	@ (80040b0 <BSP_LCD_FillRect+0xe8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1b      	ldr	r2, [pc, #108]	@ (80040b8 <BSP_LCD_FillRect+0xf0>)
 800404a:	2134      	movs	r1, #52	@ 0x34
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	4413      	add	r3, r2
 8004052:	335c      	adds	r3, #92	@ 0x5c
 8004054:	681c      	ldr	r4, [r3, #0]
 8004056:	f7ff fe03 	bl	8003c60 <BSP_LCD_GetXSize>
 800405a:	4602      	mov	r2, r0
 800405c:	88bb      	ldrh	r3, [r7, #4]
 800405e:	fb03 f202 	mul.w	r2, r3, r2
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4423      	add	r3, r4
 800406a:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800406c:	4b10      	ldr	r3, [pc, #64]	@ (80040b0 <BSP_LCD_FillRect+0xe8>)
 800406e:	681c      	ldr	r4, [r3, #0]
 8004070:	68fd      	ldr	r5, [r7, #12]
 8004072:	887e      	ldrh	r6, [r7, #2]
 8004074:	f8b7 8000 	ldrh.w	r8, [r7]
 8004078:	f7ff fdf2 	bl	8003c60 <BSP_LCD_GetXSize>
 800407c:	4602      	mov	r2, r0
 800407e:	887b      	ldrh	r3, [r7, #2]
 8004080:	1ad1      	subs	r1, r2, r3
 8004082:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <BSP_LCD_FillRect+0xe8>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	480b      	ldr	r0, [pc, #44]	@ (80040b4 <BSP_LCD_FillRect+0xec>)
 8004088:	4613      	mov	r3, r2
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4403      	add	r3, r0
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	9100      	str	r1, [sp, #0]
 8004098:	4643      	mov	r3, r8
 800409a:	4632      	mov	r2, r6
 800409c:	4629      	mov	r1, r5
 800409e:	4620      	mov	r0, r4
 80040a0:	f000 f8c4 	bl	800422c <LL_FillBuffer>
}
 80040a4:	bf00      	nop
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040ae:	bf00      	nop
 80040b0:	20000788 	.word	0x20000788
 80040b4:	2000078c 	.word	0x2000078c
 80040b8:	200006a0 	.word	0x200006a0

080040bc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	603a      	str	r2, [r7, #0]
 80040c6:	80fb      	strh	r3, [r7, #6]
 80040c8:	460b      	mov	r3, r1
 80040ca:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]
 80040d0:	2300      	movs	r3, #0
 80040d2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80040d4:	4b53      	ldr	r3, [pc, #332]	@ (8004224 <DrawChar+0x168>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4953      	ldr	r1, [pc, #332]	@ (8004228 <DrawChar+0x16c>)
 80040da:	4613      	mov	r3, r2
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	3308      	adds	r3, #8
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	88db      	ldrh	r3, [r3, #6]
 80040ea:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80040ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004224 <DrawChar+0x168>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	494d      	ldr	r1, [pc, #308]	@ (8004228 <DrawChar+0x16c>)
 80040f2:	4613      	mov	r3, r2
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	3308      	adds	r3, #8
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	889b      	ldrh	r3, [r3, #4]
 8004102:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004104:	8a3b      	ldrh	r3, [r7, #16]
 8004106:	3307      	adds	r3, #7
 8004108:	2b00      	cmp	r3, #0
 800410a:	da00      	bge.n	800410e <DrawChar+0x52>
 800410c:	3307      	adds	r3, #7
 800410e:	10db      	asrs	r3, r3, #3
 8004110:	b2db      	uxtb	r3, r3
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	b2da      	uxtb	r2, r3
 8004116:	8a3b      	ldrh	r3, [r7, #16]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	e076      	b.n	8004212 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004124:	8a3b      	ldrh	r3, [r7, #16]
 8004126:	3307      	adds	r3, #7
 8004128:	2b00      	cmp	r3, #0
 800412a:	da00      	bge.n	800412e <DrawChar+0x72>
 800412c:	3307      	adds	r3, #7
 800412e:	10db      	asrs	r3, r3, #3
 8004130:	461a      	mov	r2, r3
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	fb02 f303 	mul.w	r3, r2, r3
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	4413      	add	r3, r2
 800413c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800413e:	8a3b      	ldrh	r3, [r7, #16]
 8004140:	3307      	adds	r3, #7
 8004142:	2b00      	cmp	r3, #0
 8004144:	da00      	bge.n	8004148 <DrawChar+0x8c>
 8004146:	3307      	adds	r3, #7
 8004148:	10db      	asrs	r3, r3, #3
 800414a:	2b01      	cmp	r3, #1
 800414c:	d002      	beq.n	8004154 <DrawChar+0x98>
 800414e:	2b02      	cmp	r3, #2
 8004150:	d004      	beq.n	800415c <DrawChar+0xa0>
 8004152:	e00c      	b.n	800416e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	617b      	str	r3, [r7, #20]
      break;
 800415a:	e016      	b.n	800418a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	3201      	adds	r2, #1
 8004166:	7812      	ldrb	r2, [r2, #0]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
      break;
 800416c:	e00d      	b.n	800418a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	041a      	lsls	r2, r3, #16
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	3301      	adds	r3, #1
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	4313      	orrs	r3, r2
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	3202      	adds	r2, #2
 8004182:	7812      	ldrb	r2, [r2, #0]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]
      break;
 8004188:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e036      	b.n	80041fe <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004190:	8a3a      	ldrh	r2, [r7, #16]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	1ad2      	subs	r2, r2, r3
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	4413      	add	r3, r2
 800419a:	3b01      	subs	r3, #1
 800419c:	2201      	movs	r2, #1
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d012      	beq.n	80041d2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	4413      	add	r3, r2
 80041b4:	b298      	uxth	r0, r3
 80041b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004224 <DrawChar+0x168>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	491b      	ldr	r1, [pc, #108]	@ (8004228 <DrawChar+0x16c>)
 80041bc:	4613      	mov	r3, r2
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	88bb      	ldrh	r3, [r7, #4]
 80041ca:	4619      	mov	r1, r3
 80041cc:	f7ff feb4 	bl	8003f38 <BSP_LCD_DrawPixel>
 80041d0:	e012      	b.n	80041f8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	4413      	add	r3, r2
 80041da:	b298      	uxth	r0, r3
 80041dc:	4b11      	ldr	r3, [pc, #68]	@ (8004224 <DrawChar+0x168>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4911      	ldr	r1, [pc, #68]	@ (8004228 <DrawChar+0x16c>)
 80041e2:	4613      	mov	r3, r2
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	3304      	adds	r3, #4
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	88bb      	ldrh	r3, [r7, #4]
 80041f2:	4619      	mov	r1, r3
 80041f4:	f7ff fea0 	bl	8003f38 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	3301      	adds	r3, #1
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	8a3b      	ldrh	r3, [r7, #16]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	429a      	cmp	r2, r3
 8004204:	d3c4      	bcc.n	8004190 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8004206:	88bb      	ldrh	r3, [r7, #4]
 8004208:	3301      	adds	r3, #1
 800420a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	3301      	adds	r3, #1
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	8a7b      	ldrh	r3, [r7, #18]
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	429a      	cmp	r2, r3
 8004218:	d384      	bcc.n	8004124 <DrawChar+0x68>
  }
}
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	3720      	adds	r7, #32
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20000788 	.word	0x20000788
 8004228:	2000078c 	.word	0x2000078c

0800422c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af02      	add	r7, sp, #8
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800423a:	4b1e      	ldr	r3, [pc, #120]	@ (80042b4 <LL_FillBuffer+0x88>)
 800423c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004240:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004242:	4b1d      	ldr	r3, [pc, #116]	@ (80042b8 <LL_FillBuffer+0x8c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1d      	ldr	r2, [pc, #116]	@ (80042bc <LL_FillBuffer+0x90>)
 8004248:	2134      	movs	r1, #52	@ 0x34
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	4413      	add	r3, r2
 8004250:	3348      	adds	r3, #72	@ 0x48
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d103      	bne.n	8004260 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004258:	4b16      	ldr	r3, [pc, #88]	@ (80042b4 <LL_FillBuffer+0x88>)
 800425a:	2202      	movs	r2, #2
 800425c:	609a      	str	r2, [r3, #8]
 800425e:	e002      	b.n	8004266 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004260:	4b14      	ldr	r3, [pc, #80]	@ (80042b4 <LL_FillBuffer+0x88>)
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004266:	4a13      	ldr	r2, [pc, #76]	@ (80042b4 <LL_FillBuffer+0x88>)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800426c:	4b11      	ldr	r3, [pc, #68]	@ (80042b4 <LL_FillBuffer+0x88>)
 800426e:	4a14      	ldr	r2, [pc, #80]	@ (80042c0 <LL_FillBuffer+0x94>)
 8004270:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004272:	4810      	ldr	r0, [pc, #64]	@ (80042b4 <LL_FillBuffer+0x88>)
 8004274:	f000 fd02 	bl	8004c7c <HAL_DMA2D_Init>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d115      	bne.n	80042aa <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800427e:	68f9      	ldr	r1, [r7, #12]
 8004280:	480c      	ldr	r0, [pc, #48]	@ (80042b4 <LL_FillBuffer+0x88>)
 8004282:	f000 fe59 	bl	8004f38 <HAL_DMA2D_ConfigLayer>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10e      	bne.n	80042aa <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69f9      	ldr	r1, [r7, #28]
 8004296:	4807      	ldr	r0, [pc, #28]	@ (80042b4 <LL_FillBuffer+0x88>)
 8004298:	f000 fd3a 	bl	8004d10 <HAL_DMA2D_Start>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80042a2:	210a      	movs	r1, #10
 80042a4:	4803      	ldr	r0, [pc, #12]	@ (80042b4 <LL_FillBuffer+0x88>)
 80042a6:	f000 fd5e 	bl	8004d66 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80042aa:	bf00      	nop
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000748 	.word	0x20000748
 80042b8:	20000788 	.word	0x20000788
 80042bc:	200006a0 	.word	0x200006a0
 80042c0:	4002b000 	.word	0x4002b000

080042c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042c8:	2003      	movs	r0, #3
 80042ca:	f000 f94d 	bl	8004568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042ce:	2000      	movs	r0, #0
 80042d0:	f000 f806 	bl	80042e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042d4:	f7fd f878 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042e8:	4b12      	ldr	r3, [pc, #72]	@ (8004334 <HAL_InitTick+0x54>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b12      	ldr	r3, [pc, #72]	@ (8004338 <HAL_InitTick+0x58>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	4619      	mov	r1, r3
 80042f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80042fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 f967 	bl	80045d2 <HAL_SYSTICK_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e00e      	b.n	800432c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b0f      	cmp	r3, #15
 8004312:	d80a      	bhi.n	800432a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004314:	2200      	movs	r2, #0
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	f000 f92f 	bl	800457e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004320:	4a06      	ldr	r2, [pc, #24]	@ (800433c <HAL_InitTick+0x5c>)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	e000      	b.n	800432c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000004 	.word	0x20000004
 8004338:	20000044 	.word	0x20000044
 800433c:	20000040 	.word	0x20000040

08004340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004344:	4b06      	ldr	r3, [pc, #24]	@ (8004360 <HAL_IncTick+0x20>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <HAL_IncTick+0x24>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4413      	add	r3, r2
 8004350:	4a04      	ldr	r2, [pc, #16]	@ (8004364 <HAL_IncTick+0x24>)
 8004352:	6013      	str	r3, [r2, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000044 	.word	0x20000044
 8004364:	200007a4 	.word	0x200007a4

08004368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return uwTick;
 800436c:	4b03      	ldr	r3, [pc, #12]	@ (800437c <HAL_GetTick+0x14>)
 800436e:	681b      	ldr	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	200007a4 	.word	0x200007a4

08004380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004388:	f7ff ffee 	bl	8004368 <HAL_GetTick>
 800438c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d005      	beq.n	80043a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800439a:	4b0a      	ldr	r3, [pc, #40]	@ (80043c4 <HAL_Delay+0x44>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4413      	add	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043a6:	bf00      	nop
 80043a8:	f7ff ffde 	bl	8004368 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d8f7      	bhi.n	80043a8 <HAL_Delay+0x28>
  {
  }
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000044 	.word	0x20000044

080043c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004408 <__NVIC_SetPriorityGrouping+0x40>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043e4:	4013      	ands	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043f0:	4b06      	ldr	r3, [pc, #24]	@ (800440c <__NVIC_SetPriorityGrouping+0x44>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043f6:	4a04      	ldr	r2, [pc, #16]	@ (8004408 <__NVIC_SetPriorityGrouping+0x40>)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	60d3      	str	r3, [r2, #12]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000ed00 	.word	0xe000ed00
 800440c:	05fa0000 	.word	0x05fa0000

08004410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004414:	4b04      	ldr	r3, [pc, #16]	@ (8004428 <__NVIC_GetPriorityGrouping+0x18>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	0a1b      	lsrs	r3, r3, #8
 800441a:	f003 0307 	and.w	r3, r3, #7
}
 800441e:	4618      	mov	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	e000ed00 	.word	0xe000ed00

0800442c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443a:	2b00      	cmp	r3, #0
 800443c:	db0b      	blt.n	8004456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	f003 021f 	and.w	r2, r3, #31
 8004444:	4907      	ldr	r1, [pc, #28]	@ (8004464 <__NVIC_EnableIRQ+0x38>)
 8004446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2001      	movs	r0, #1
 800444e:	fa00 f202 	lsl.w	r2, r0, r2
 8004452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	e000e100 	.word	0xe000e100

08004468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	6039      	str	r1, [r7, #0]
 8004472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004478:	2b00      	cmp	r3, #0
 800447a:	db0a      	blt.n	8004492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	b2da      	uxtb	r2, r3
 8004480:	490c      	ldr	r1, [pc, #48]	@ (80044b4 <__NVIC_SetPriority+0x4c>)
 8004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004486:	0112      	lsls	r2, r2, #4
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	440b      	add	r3, r1
 800448c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004490:	e00a      	b.n	80044a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	4908      	ldr	r1, [pc, #32]	@ (80044b8 <__NVIC_SetPriority+0x50>)
 8004498:	79fb      	ldrb	r3, [r7, #7]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	3b04      	subs	r3, #4
 80044a0:	0112      	lsls	r2, r2, #4
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	440b      	add	r3, r1
 80044a6:	761a      	strb	r2, [r3, #24]
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	e000e100 	.word	0xe000e100
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044bc:	b480      	push	{r7}
 80044be:	b089      	sub	sp, #36	@ 0x24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f1c3 0307 	rsb	r3, r3, #7
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	bf28      	it	cs
 80044da:	2304      	movcs	r3, #4
 80044dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3304      	adds	r3, #4
 80044e2:	2b06      	cmp	r3, #6
 80044e4:	d902      	bls.n	80044ec <NVIC_EncodePriority+0x30>
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3b03      	subs	r3, #3
 80044ea:	e000      	b.n	80044ee <NVIC_EncodePriority+0x32>
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f0:	f04f 32ff 	mov.w	r2, #4294967295
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43da      	mvns	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	401a      	ands	r2, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004504:	f04f 31ff 	mov.w	r1, #4294967295
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	fa01 f303 	lsl.w	r3, r1, r3
 800450e:	43d9      	mvns	r1, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004514:	4313      	orrs	r3, r2
         );
}
 8004516:	4618      	mov	r0, r3
 8004518:	3724      	adds	r7, #36	@ 0x24
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3b01      	subs	r3, #1
 8004530:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004534:	d301      	bcc.n	800453a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004536:	2301      	movs	r3, #1
 8004538:	e00f      	b.n	800455a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800453a:	4a0a      	ldr	r2, [pc, #40]	@ (8004564 <SysTick_Config+0x40>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3b01      	subs	r3, #1
 8004540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004542:	210f      	movs	r1, #15
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
 8004548:	f7ff ff8e 	bl	8004468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800454c:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <SysTick_Config+0x40>)
 800454e:	2200      	movs	r2, #0
 8004550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004552:	4b04      	ldr	r3, [pc, #16]	@ (8004564 <SysTick_Config+0x40>)
 8004554:	2207      	movs	r2, #7
 8004556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	e000e010 	.word	0xe000e010

08004568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff ff29 	bl	80043c8 <__NVIC_SetPriorityGrouping>
}
 8004576:	bf00      	nop
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	4603      	mov	r3, r0
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004590:	f7ff ff3e 	bl	8004410 <__NVIC_GetPriorityGrouping>
 8004594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	6978      	ldr	r0, [r7, #20]
 800459c:	f7ff ff8e 	bl	80044bc <NVIC_EncodePriority>
 80045a0:	4602      	mov	r2, r0
 80045a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045a6:	4611      	mov	r1, r2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff ff5d 	bl	8004468 <__NVIC_SetPriority>
}
 80045ae:	bf00      	nop
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	4603      	mov	r3, r0
 80045be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff31 	bl	800442c <__NVIC_EnableIRQ>
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff ffa2 	bl	8004524 <SysTick_Config>
 80045e0:	4603      	mov	r3, r0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045f8:	f7ff feb6 	bl	8004368 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e099      	b.n	800473c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004628:	e00f      	b.n	800464a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800462a:	f7ff fe9d 	bl	8004368 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b05      	cmp	r3, #5
 8004636:	d908      	bls.n	800464a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2203      	movs	r2, #3
 8004642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e078      	b.n	800473c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e8      	bne.n	800462a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4b38      	ldr	r3, [pc, #224]	@ (8004744 <HAL_DMA_Init+0x158>)
 8004664:	4013      	ands	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004676:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800468e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d107      	bne.n	80046b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ac:	4313      	orrs	r3, r2
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 0307 	bic.w	r3, r3, #7
 80046ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d117      	bne.n	800470e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00e      	beq.n	800470e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fa47 	bl	8004b84 <DMA_CheckFifoParam>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2240      	movs	r2, #64	@ 0x40
 8004700:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800470a:	2301      	movs	r3, #1
 800470c:	e016      	b.n	800473c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f9fe 	bl	8004b18 <DMA_CalcBaseAndBitshift>
 800471c:	4603      	mov	r3, r0
 800471e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004724:	223f      	movs	r2, #63	@ 0x3f
 8004726:	409a      	lsls	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	f010803f 	.word	0xf010803f

08004748 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e050      	b.n	80047fc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d101      	bne.n	800476a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004766:	2302      	movs	r3, #2
 8004768:	e048      	b.n	80047fc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0201 	bic.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2200      	movs	r2, #0
 8004788:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2200      	movs	r2, #0
 8004798:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2200      	movs	r2, #0
 80047a0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2221      	movs	r2, #33	@ 0x21
 80047a8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f9b4 	bl	8004b18 <DMA_CalcBaseAndBitshift>
 80047b0:	4603      	mov	r3, r0
 80047b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b8:	223f      	movs	r2, #63	@ 0x3f
 80047ba:	409a      	lsls	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004810:	4b8e      	ldr	r3, [pc, #568]	@ (8004a4c <HAL_DMA_IRQHandler+0x248>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a8e      	ldr	r2, [pc, #568]	@ (8004a50 <HAL_DMA_IRQHandler+0x24c>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	0a9b      	lsrs	r3, r3, #10
 800481c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004822:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800482e:	2208      	movs	r2, #8
 8004830:	409a      	lsls	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4013      	ands	r3, r2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01a      	beq.n	8004870 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d013      	beq.n	8004870 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0204 	bic.w	r2, r2, #4
 8004856:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485c:	2208      	movs	r2, #8
 800485e:	409a      	lsls	r2, r3
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004868:	f043 0201 	orr.w	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004874:	2201      	movs	r2, #1
 8004876:	409a      	lsls	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d012      	beq.n	80048a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00b      	beq.n	80048a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004892:	2201      	movs	r2, #1
 8004894:	409a      	lsls	r2, r3
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489e:	f043 0202 	orr.w	r2, r3, #2
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048aa:	2204      	movs	r2, #4
 80048ac:	409a      	lsls	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d012      	beq.n	80048dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c8:	2204      	movs	r2, #4
 80048ca:	409a      	lsls	r2, r3
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d4:	f043 0204 	orr.w	r2, r3, #4
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e0:	2210      	movs	r2, #16
 80048e2:	409a      	lsls	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d043      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d03c      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048fe:	2210      	movs	r2, #16
 8004900:	409a      	lsls	r2, r3
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d018      	beq.n	8004946 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d108      	bne.n	8004934 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d024      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	4798      	blx	r3
 8004932:	e01f      	b.n	8004974 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01b      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	4798      	blx	r3
 8004944:	e016      	b.n	8004974 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004950:	2b00      	cmp	r3, #0
 8004952:	d107      	bne.n	8004964 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0208 	bic.w	r2, r2, #8
 8004962:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004978:	2220      	movs	r2, #32
 800497a:	409a      	lsls	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4013      	ands	r3, r2
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 808f 	beq.w	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8087 	beq.w	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800499a:	2220      	movs	r2, #32
 800499c:	409a      	lsls	r2, r3
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b05      	cmp	r3, #5
 80049ac:	d136      	bne.n	8004a1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0216 	bic.w	r2, r2, #22
 80049bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695a      	ldr	r2, [r3, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <HAL_DMA_IRQHandler+0x1da>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0208 	bic.w	r2, r2, #8
 80049ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f2:	223f      	movs	r2, #63	@ 0x3f
 80049f4:	409a      	lsls	r2, r3
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d07e      	beq.n	8004b10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
        }
        return;
 8004a1a:	e079      	b.n	8004b10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d01d      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10d      	bne.n	8004a54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d031      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
 8004a48:	e02c      	b.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
 8004a4a:	bf00      	nop
 8004a4c:	20000004 	.word	0x20000004
 8004a50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d023      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
 8004a64:	e01e      	b.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10f      	bne.n	8004a94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0210 	bic.w	r2, r2, #16
 8004a82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d032      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d022      	beq.n	8004afe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2205      	movs	r2, #5
 8004abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d307      	bcc.n	8004aec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f2      	bne.n	8004ad0 <HAL_DMA_IRQHandler+0x2cc>
 8004aea:	e000      	b.n	8004aee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004aec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	4798      	blx	r3
 8004b0e:	e000      	b.n	8004b12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b10:	bf00      	nop
    }
  }
}
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	3b10      	subs	r3, #16
 8004b28:	4a13      	ldr	r2, [pc, #76]	@ (8004b78 <DMA_CalcBaseAndBitshift+0x60>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b32:	4a12      	ldr	r2, [pc, #72]	@ (8004b7c <DMA_CalcBaseAndBitshift+0x64>)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d908      	bls.n	8004b58 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <DMA_CalcBaseAndBitshift+0x68>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	1d1a      	adds	r2, r3, #4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b56:	e006      	b.n	8004b66 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4b08      	ldr	r3, [pc, #32]	@ (8004b80 <DMA_CalcBaseAndBitshift+0x68>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	aaaaaaab 	.word	0xaaaaaaab
 8004b7c:	0800922c 	.word	0x0800922c
 8004b80:	fffffc00 	.word	0xfffffc00

08004b84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d11f      	bne.n	8004bde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d856      	bhi.n	8004c52 <DMA_CheckFifoParam+0xce>
 8004ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bac <DMA_CheckFifoParam+0x28>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bcf 	.word	0x08004bcf
 8004bb4:	08004bbd 	.word	0x08004bbd
 8004bb8:	08004c53 	.word	0x08004c53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d046      	beq.n	8004c56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bcc:	e043      	b.n	8004c56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004bd6:	d140      	bne.n	8004c5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bdc:	e03d      	b.n	8004c5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be6:	d121      	bne.n	8004c2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d837      	bhi.n	8004c5e <DMA_CheckFifoParam+0xda>
 8004bee:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf4 <DMA_CheckFifoParam+0x70>)
 8004bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf4:	08004c05 	.word	0x08004c05
 8004bf8:	08004c0b 	.word	0x08004c0b
 8004bfc:	08004c05 	.word	0x08004c05
 8004c00:	08004c1d 	.word	0x08004c1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
      break;
 8004c08:	e030      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d025      	beq.n	8004c62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c1a:	e022      	b.n	8004c62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c24:	d11f      	bne.n	8004c66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c2a:	e01c      	b.n	8004c66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d903      	bls.n	8004c3a <DMA_CheckFifoParam+0xb6>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d003      	beq.n	8004c40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c38:	e018      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3e:	e015      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00e      	beq.n	8004c6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c50:	e00b      	b.n	8004c6a <DMA_CheckFifoParam+0xe6>
      break;
 8004c52:	bf00      	nop
 8004c54:	e00a      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c56:	bf00      	nop
 8004c58:	e008      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e006      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c5e:	bf00      	nop
 8004c60:	e004      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c62:	bf00      	nop
 8004c64:	e002      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;   
 8004c66:	bf00      	nop
 8004c68:	e000      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c6a:	bf00      	nop
    }
  } 
  
  return status; 
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop

08004c7c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e039      	b.n	8004d02 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fc fbb4 	bl	8001410 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ccc:	f023 0107 	bic.w	r1, r3, #7
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d0c <HAL_DMA2D_Init+0x90>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68d1      	ldr	r1, [r2, #12]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	ffffc000 	.word	0xffffc000

08004d10 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_DMA2D_Start+0x1c>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e018      	b.n	8004d5e <HAL_DMA2D_Start+0x4e>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f988 	bl	800505c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b086      	sub	sp, #24
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d056      	beq.n	8004e30 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d82:	f7ff faf1 	bl	8004368 <HAL_GetTick>
 8004d86:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004d88:	e04b      	b.n	8004e22 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d023      	beq.n	8004de4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004daa:	f043 0202 	orr.w	r2, r3, #2
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc0:	f043 0201 	orr.w	r2, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2221      	movs	r2, #33	@ 0x21
 8004dce:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0a5      	b.n	8004f30 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d01a      	beq.n	8004e22 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004dec:	f7ff fabc 	bl	8004368 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d302      	bcc.n	8004e02 <HAL_DMA2D_PollForTransfer+0x9c>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10f      	bne.n	8004e22 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e06:	f043 0220 	orr.w	r2, r3, #32
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2203      	movs	r2, #3
 8004e12:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e086      	b.n	8004f30 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0ac      	beq.n	8004d8a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d061      	beq.n	8004f16 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e52:	f7ff fa89 	bl	8004368 <HAL_GetTick>
 8004e56:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004e58:	e056      	b.n	8004f08 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d02e      	beq.n	8004eca <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d005      	beq.n	8004e82 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7a:	f043 0204 	orr.w	r2, r3, #4
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e90:	f043 0202 	orr.w	r2, r3, #2
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea6:	f043 0201 	orr.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2229      	movs	r2, #41	@ 0x29
 8004eb4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2204      	movs	r2, #4
 8004eba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e032      	b.n	8004f30 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d01a      	beq.n	8004f08 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ed2:	f7ff fa49 	bl	8004368 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d302      	bcc.n	8004ee8 <HAL_DMA2D_PollForTransfer+0x182>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10f      	bne.n	8004f08 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eec:	f043 0220 	orr.w	r2, r3, #32
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e013      	b.n	8004f30 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0a1      	beq.n	8004e5a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2212      	movs	r2, #18
 8004f1c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_DMA2D_ConfigLayer+0x20>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e079      	b.n	800504c <HAL_DMA2D_ConfigLayer+0x114>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	3318      	adds	r3, #24
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	4413      	add	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	041b      	lsls	r3, r3, #16
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004f82:	4b35      	ldr	r3, [pc, #212]	@ (8005058 <HAL_DMA2D_ConfigLayer+0x120>)
 8004f84:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b0a      	cmp	r3, #10
 8004f8c:	d003      	beq.n	8004f96 <HAL_DMA2D_ConfigLayer+0x5e>
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b09      	cmp	r3, #9
 8004f94:	d107      	bne.n	8004fa6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	e005      	b.n	8004fb2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	061b      	lsls	r3, r3, #24
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d120      	bne.n	8004ffa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	ea02 0103 	and.w	r1, r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b0a      	cmp	r3, #10
 8004fe0:	d003      	beq.n	8004fea <HAL_DMA2D_ConfigLayer+0xb2>
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b09      	cmp	r3, #9
 8004fe8:	d127      	bne.n	800503a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004ff6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ff8:	e01f      	b.n	800503a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	43db      	mvns	r3, r3
 8005004:	ea02 0103 	and.w	r1, r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	430a      	orrs	r2, r1
 8005010:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b0a      	cmp	r3, #10
 8005022:	d003      	beq.n	800502c <HAL_DMA2D_ConfigLayer+0xf4>
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b09      	cmp	r3, #9
 800502a:	d106      	bne.n	800503a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005038:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	371c      	adds	r7, #28
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	ff03000f 	.word	0xff03000f

0800505c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800505c:	b480      	push	{r7}
 800505e:	b08b      	sub	sp, #44	@ 0x2c
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005070:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	041a      	lsls	r2, r3, #16
 8005078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507a:	431a      	orrs	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005094:	d174      	bne.n	8005180 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800509c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80050a4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80050ac:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d108      	bne.n	80050ce <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	431a      	orrs	r2, r3
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80050cc:	e053      	b.n	8005176 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d106      	bne.n	80050e4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4313      	orrs	r3, r2
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e2:	e048      	b.n	8005176 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d111      	bne.n	8005110 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	0cdb      	lsrs	r3, r3, #19
 80050f0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	0a9b      	lsrs	r3, r3, #10
 80050f6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	08db      	lsrs	r3, r3, #3
 80050fc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	02db      	lsls	r3, r3, #11
 8005106:	4313      	orrs	r3, r2
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	627b      	str	r3, [r7, #36]	@ 0x24
 800510e:	e032      	b.n	8005176 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d117      	bne.n	8005148 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	0fdb      	lsrs	r3, r3, #31
 800511c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	0cdb      	lsrs	r3, r3, #19
 8005122:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	0adb      	lsrs	r3, r3, #11
 8005128:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	08db      	lsrs	r3, r3, #3
 800512e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	029b      	lsls	r3, r3, #10
 8005138:	431a      	orrs	r2, r3
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	03db      	lsls	r3, r3, #15
 800513e:	4313      	orrs	r3, r2
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	627b      	str	r3, [r7, #36]	@ 0x24
 8005146:	e016      	b.n	8005176 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	0f1b      	lsrs	r3, r3, #28
 800514c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	0d1b      	lsrs	r3, r3, #20
 8005152:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	0b1b      	lsrs	r3, r3, #12
 8005158:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	011a      	lsls	r2, r3, #4
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	431a      	orrs	r2, r3
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	031b      	lsls	r3, r3, #12
 800516e:	4313      	orrs	r3, r2
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800517c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800517e:	e003      	b.n	8005188 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	60da      	str	r2, [r3, #12]
}
 8005188:	bf00      	nop
 800518a:	372c      	adds	r7, #44	@ 0x2c
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005194:	b480      	push	{r7}
 8005196:	b089      	sub	sp, #36	@ 0x24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800519e:	2300      	movs	r3, #0
 80051a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80051a6:	2300      	movs	r3, #0
 80051a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	e175      	b.n	80054a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80051b4:	2201      	movs	r2, #1
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4013      	ands	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	f040 8164 	bne.w	800549a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d005      	beq.n	80051ea <HAL_GPIO_Init+0x56>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d130      	bne.n	800524c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	2203      	movs	r2, #3
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	43db      	mvns	r3, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4013      	ands	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	fa02 f303 	lsl.w	r3, r2, r3
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	4313      	orrs	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005220:	2201      	movs	r2, #1
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	091b      	lsrs	r3, r3, #4
 8005236:	f003 0201 	and.w	r2, r3, #1
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4313      	orrs	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	2b03      	cmp	r3, #3
 8005256:	d017      	beq.n	8005288 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	2203      	movs	r2, #3
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	43db      	mvns	r3, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4013      	ands	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4313      	orrs	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d123      	bne.n	80052dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	08da      	lsrs	r2, r3, #3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3208      	adds	r2, #8
 800529c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	220f      	movs	r2, #15
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	43db      	mvns	r3, r3
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	4013      	ands	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	fa02 f303 	lsl.w	r3, r2, r3
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	08da      	lsrs	r2, r3, #3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3208      	adds	r2, #8
 80052d6:	69b9      	ldr	r1, [r7, #24]
 80052d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	2203      	movs	r2, #3
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	43db      	mvns	r3, r3
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	4013      	ands	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f003 0203 	and.w	r2, r3, #3
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4313      	orrs	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80be 	beq.w	800549a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800531e:	4b66      	ldr	r3, [pc, #408]	@ (80054b8 <HAL_GPIO_Init+0x324>)
 8005320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005322:	4a65      	ldr	r2, [pc, #404]	@ (80054b8 <HAL_GPIO_Init+0x324>)
 8005324:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005328:	6453      	str	r3, [r2, #68]	@ 0x44
 800532a:	4b63      	ldr	r3, [pc, #396]	@ (80054b8 <HAL_GPIO_Init+0x324>)
 800532c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005336:	4a61      	ldr	r2, [pc, #388]	@ (80054bc <HAL_GPIO_Init+0x328>)
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	089b      	lsrs	r3, r3, #2
 800533c:	3302      	adds	r3, #2
 800533e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005342:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	220f      	movs	r2, #15
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	43db      	mvns	r3, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4013      	ands	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a58      	ldr	r2, [pc, #352]	@ (80054c0 <HAL_GPIO_Init+0x32c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d037      	beq.n	80053d2 <HAL_GPIO_Init+0x23e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a57      	ldr	r2, [pc, #348]	@ (80054c4 <HAL_GPIO_Init+0x330>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d031      	beq.n	80053ce <HAL_GPIO_Init+0x23a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a56      	ldr	r2, [pc, #344]	@ (80054c8 <HAL_GPIO_Init+0x334>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d02b      	beq.n	80053ca <HAL_GPIO_Init+0x236>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a55      	ldr	r2, [pc, #340]	@ (80054cc <HAL_GPIO_Init+0x338>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d025      	beq.n	80053c6 <HAL_GPIO_Init+0x232>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a54      	ldr	r2, [pc, #336]	@ (80054d0 <HAL_GPIO_Init+0x33c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01f      	beq.n	80053c2 <HAL_GPIO_Init+0x22e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a53      	ldr	r2, [pc, #332]	@ (80054d4 <HAL_GPIO_Init+0x340>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d019      	beq.n	80053be <HAL_GPIO_Init+0x22a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a52      	ldr	r2, [pc, #328]	@ (80054d8 <HAL_GPIO_Init+0x344>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <HAL_GPIO_Init+0x226>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a51      	ldr	r2, [pc, #324]	@ (80054dc <HAL_GPIO_Init+0x348>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00d      	beq.n	80053b6 <HAL_GPIO_Init+0x222>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a50      	ldr	r2, [pc, #320]	@ (80054e0 <HAL_GPIO_Init+0x34c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <HAL_GPIO_Init+0x21e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a4f      	ldr	r2, [pc, #316]	@ (80054e4 <HAL_GPIO_Init+0x350>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d101      	bne.n	80053ae <HAL_GPIO_Init+0x21a>
 80053aa:	2309      	movs	r3, #9
 80053ac:	e012      	b.n	80053d4 <HAL_GPIO_Init+0x240>
 80053ae:	230a      	movs	r3, #10
 80053b0:	e010      	b.n	80053d4 <HAL_GPIO_Init+0x240>
 80053b2:	2308      	movs	r3, #8
 80053b4:	e00e      	b.n	80053d4 <HAL_GPIO_Init+0x240>
 80053b6:	2307      	movs	r3, #7
 80053b8:	e00c      	b.n	80053d4 <HAL_GPIO_Init+0x240>
 80053ba:	2306      	movs	r3, #6
 80053bc:	e00a      	b.n	80053d4 <HAL_GPIO_Init+0x240>
 80053be:	2305      	movs	r3, #5
 80053c0:	e008      	b.n	80053d4 <HAL_GPIO_Init+0x240>
 80053c2:	2304      	movs	r3, #4
 80053c4:	e006      	b.n	80053d4 <HAL_GPIO_Init+0x240>
 80053c6:	2303      	movs	r3, #3
 80053c8:	e004      	b.n	80053d4 <HAL_GPIO_Init+0x240>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e002      	b.n	80053d4 <HAL_GPIO_Init+0x240>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <HAL_GPIO_Init+0x240>
 80053d2:	2300      	movs	r3, #0
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	f002 0203 	and.w	r2, r2, #3
 80053da:	0092      	lsls	r2, r2, #2
 80053dc:	4093      	lsls	r3, r2
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80053e4:	4935      	ldr	r1, [pc, #212]	@ (80054bc <HAL_GPIO_Init+0x328>)
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	089b      	lsrs	r3, r3, #2
 80053ea:	3302      	adds	r3, #2
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053f2:	4b3d      	ldr	r3, [pc, #244]	@ (80054e8 <HAL_GPIO_Init+0x354>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	43db      	mvns	r3, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4013      	ands	r3, r2
 8005400:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005416:	4a34      	ldr	r2, [pc, #208]	@ (80054e8 <HAL_GPIO_Init+0x354>)
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800541c:	4b32      	ldr	r3, [pc, #200]	@ (80054e8 <HAL_GPIO_Init+0x354>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	43db      	mvns	r3, r3
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	4013      	ands	r3, r2
 800542a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005440:	4a29      	ldr	r2, [pc, #164]	@ (80054e8 <HAL_GPIO_Init+0x354>)
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005446:	4b28      	ldr	r3, [pc, #160]	@ (80054e8 <HAL_GPIO_Init+0x354>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	43db      	mvns	r3, r3
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4013      	ands	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800546a:	4a1f      	ldr	r2, [pc, #124]	@ (80054e8 <HAL_GPIO_Init+0x354>)
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005470:	4b1d      	ldr	r3, [pc, #116]	@ (80054e8 <HAL_GPIO_Init+0x354>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	43db      	mvns	r3, r3
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4013      	ands	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005494:	4a14      	ldr	r2, [pc, #80]	@ (80054e8 <HAL_GPIO_Init+0x354>)
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3301      	adds	r3, #1
 800549e:	61fb      	str	r3, [r7, #28]
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	2b0f      	cmp	r3, #15
 80054a4:	f67f ae86 	bls.w	80051b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80054a8:	bf00      	nop
 80054aa:	bf00      	nop
 80054ac:	3724      	adds	r7, #36	@ 0x24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40023800 	.word	0x40023800
 80054bc:	40013800 	.word	0x40013800
 80054c0:	40020000 	.word	0x40020000
 80054c4:	40020400 	.word	0x40020400
 80054c8:	40020800 	.word	0x40020800
 80054cc:	40020c00 	.word	0x40020c00
 80054d0:	40021000 	.word	0x40021000
 80054d4:	40021400 	.word	0x40021400
 80054d8:	40021800 	.word	0x40021800
 80054dc:	40021c00 	.word	0x40021c00
 80054e0:	40022000 	.word	0x40022000
 80054e4:	40022400 	.word	0x40022400
 80054e8:	40013c00 	.word	0x40013c00

080054ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80054f6:	2300      	movs	r3, #0
 80054f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80054fe:	2300      	movs	r3, #0
 8005500:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005502:	2300      	movs	r3, #0
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	e0d9      	b.n	80056bc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005508:	2201      	movs	r2, #1
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	4013      	ands	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	429a      	cmp	r2, r3
 8005520:	f040 80c9 	bne.w	80056b6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005524:	4a6b      	ldr	r2, [pc, #428]	@ (80056d4 <HAL_GPIO_DeInit+0x1e8>)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	089b      	lsrs	r3, r3, #2
 800552a:	3302      	adds	r3, #2
 800552c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005530:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	220f      	movs	r2, #15
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	4013      	ands	r3, r2
 8005544:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a63      	ldr	r2, [pc, #396]	@ (80056d8 <HAL_GPIO_DeInit+0x1ec>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d037      	beq.n	80055be <HAL_GPIO_DeInit+0xd2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a62      	ldr	r2, [pc, #392]	@ (80056dc <HAL_GPIO_DeInit+0x1f0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d031      	beq.n	80055ba <HAL_GPIO_DeInit+0xce>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a61      	ldr	r2, [pc, #388]	@ (80056e0 <HAL_GPIO_DeInit+0x1f4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d02b      	beq.n	80055b6 <HAL_GPIO_DeInit+0xca>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a60      	ldr	r2, [pc, #384]	@ (80056e4 <HAL_GPIO_DeInit+0x1f8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d025      	beq.n	80055b2 <HAL_GPIO_DeInit+0xc6>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a5f      	ldr	r2, [pc, #380]	@ (80056e8 <HAL_GPIO_DeInit+0x1fc>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d01f      	beq.n	80055ae <HAL_GPIO_DeInit+0xc2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a5e      	ldr	r2, [pc, #376]	@ (80056ec <HAL_GPIO_DeInit+0x200>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d019      	beq.n	80055aa <HAL_GPIO_DeInit+0xbe>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a5d      	ldr	r2, [pc, #372]	@ (80056f0 <HAL_GPIO_DeInit+0x204>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <HAL_GPIO_DeInit+0xba>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a5c      	ldr	r2, [pc, #368]	@ (80056f4 <HAL_GPIO_DeInit+0x208>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00d      	beq.n	80055a2 <HAL_GPIO_DeInit+0xb6>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a5b      	ldr	r2, [pc, #364]	@ (80056f8 <HAL_GPIO_DeInit+0x20c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d007      	beq.n	800559e <HAL_GPIO_DeInit+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a5a      	ldr	r2, [pc, #360]	@ (80056fc <HAL_GPIO_DeInit+0x210>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d101      	bne.n	800559a <HAL_GPIO_DeInit+0xae>
 8005596:	2309      	movs	r3, #9
 8005598:	e012      	b.n	80055c0 <HAL_GPIO_DeInit+0xd4>
 800559a:	230a      	movs	r3, #10
 800559c:	e010      	b.n	80055c0 <HAL_GPIO_DeInit+0xd4>
 800559e:	2308      	movs	r3, #8
 80055a0:	e00e      	b.n	80055c0 <HAL_GPIO_DeInit+0xd4>
 80055a2:	2307      	movs	r3, #7
 80055a4:	e00c      	b.n	80055c0 <HAL_GPIO_DeInit+0xd4>
 80055a6:	2306      	movs	r3, #6
 80055a8:	e00a      	b.n	80055c0 <HAL_GPIO_DeInit+0xd4>
 80055aa:	2305      	movs	r3, #5
 80055ac:	e008      	b.n	80055c0 <HAL_GPIO_DeInit+0xd4>
 80055ae:	2304      	movs	r3, #4
 80055b0:	e006      	b.n	80055c0 <HAL_GPIO_DeInit+0xd4>
 80055b2:	2303      	movs	r3, #3
 80055b4:	e004      	b.n	80055c0 <HAL_GPIO_DeInit+0xd4>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e002      	b.n	80055c0 <HAL_GPIO_DeInit+0xd4>
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <HAL_GPIO_DeInit+0xd4>
 80055be:	2300      	movs	r3, #0
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	f002 0203 	and.w	r2, r2, #3
 80055c6:	0092      	lsls	r2, r2, #2
 80055c8:	4093      	lsls	r3, r2
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d132      	bne.n	8005636 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80055d0:	4b4b      	ldr	r3, [pc, #300]	@ (8005700 <HAL_GPIO_DeInit+0x214>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	43db      	mvns	r3, r3
 80055d8:	4949      	ldr	r1, [pc, #292]	@ (8005700 <HAL_GPIO_DeInit+0x214>)
 80055da:	4013      	ands	r3, r2
 80055dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80055de:	4b48      	ldr	r3, [pc, #288]	@ (8005700 <HAL_GPIO_DeInit+0x214>)
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	43db      	mvns	r3, r3
 80055e6:	4946      	ldr	r1, [pc, #280]	@ (8005700 <HAL_GPIO_DeInit+0x214>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80055ec:	4b44      	ldr	r3, [pc, #272]	@ (8005700 <HAL_GPIO_DeInit+0x214>)
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	43db      	mvns	r3, r3
 80055f4:	4942      	ldr	r1, [pc, #264]	@ (8005700 <HAL_GPIO_DeInit+0x214>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80055fa:	4b41      	ldr	r3, [pc, #260]	@ (8005700 <HAL_GPIO_DeInit+0x214>)
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	43db      	mvns	r3, r3
 8005602:	493f      	ldr	r1, [pc, #252]	@ (8005700 <HAL_GPIO_DeInit+0x214>)
 8005604:	4013      	ands	r3, r2
 8005606:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	220f      	movs	r2, #15
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005618:	4a2e      	ldr	r2, [pc, #184]	@ (80056d4 <HAL_GPIO_DeInit+0x1e8>)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	089b      	lsrs	r3, r3, #2
 800561e:	3302      	adds	r3, #2
 8005620:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	43da      	mvns	r2, r3
 8005628:	482a      	ldr	r0, [pc, #168]	@ (80056d4 <HAL_GPIO_DeInit+0x1e8>)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	089b      	lsrs	r3, r3, #2
 800562e:	400a      	ands	r2, r1
 8005630:	3302      	adds	r3, #2
 8005632:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	2103      	movs	r1, #3
 8005640:	fa01 f303 	lsl.w	r3, r1, r3
 8005644:	43db      	mvns	r3, r3
 8005646:	401a      	ands	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	08da      	lsrs	r2, r3, #3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3208      	adds	r2, #8
 8005654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	220f      	movs	r2, #15
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	43db      	mvns	r3, r3
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	08d2      	lsrs	r2, r2, #3
 800566c:	4019      	ands	r1, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3208      	adds	r2, #8
 8005672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	2103      	movs	r1, #3
 8005680:	fa01 f303 	lsl.w	r3, r1, r3
 8005684:	43db      	mvns	r3, r3
 8005686:	401a      	ands	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	2101      	movs	r1, #1
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	fa01 f303 	lsl.w	r3, r1, r3
 8005698:	43db      	mvns	r3, r3
 800569a:	401a      	ands	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	2103      	movs	r1, #3
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	43db      	mvns	r3, r3
 80056b0:	401a      	ands	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	3301      	adds	r3, #1
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2b0f      	cmp	r3, #15
 80056c0:	f67f af22 	bls.w	8005508 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop
 80056c8:	371c      	adds	r7, #28
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40013800 	.word	0x40013800
 80056d8:	40020000 	.word	0x40020000
 80056dc:	40020400 	.word	0x40020400
 80056e0:	40020800 	.word	0x40020800
 80056e4:	40020c00 	.word	0x40020c00
 80056e8:	40021000 	.word	0x40021000
 80056ec:	40021400 	.word	0x40021400
 80056f0:	40021800 	.word	0x40021800
 80056f4:	40021c00 	.word	0x40021c00
 80056f8:	40022000 	.word	0x40022000
 80056fc:	40022400 	.word	0x40022400
 8005700:	40013c00 	.word	0x40013c00

08005704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	807b      	strh	r3, [r7, #2]
 8005710:	4613      	mov	r3, r2
 8005712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005714:	787b      	ldrb	r3, [r7, #1]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800571a:	887a      	ldrh	r2, [r7, #2]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005720:	e003      	b.n	800572a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005722:	887b      	ldrh	r3, [r7, #2]
 8005724:	041a      	lsls	r2, r3, #16
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	619a      	str	r2, [r3, #24]
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e08b      	b.n	8005862 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fb fe76 	bl	8001450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2224      	movs	r2, #36	@ 0x24
 8005768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0201 	bic.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005788:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005798:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d107      	bne.n	80057b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057ae:	609a      	str	r2, [r3, #8]
 80057b0:	e006      	b.n	80057c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80057be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d108      	bne.n	80057da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057d6:	605a      	str	r2, [r3, #4]
 80057d8:	e007      	b.n	80057ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6859      	ldr	r1, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4b1d      	ldr	r3, [pc, #116]	@ (800586c <HAL_I2C_Init+0x134>)
 80057f6:	430b      	orrs	r3, r1
 80057f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005808:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69d9      	ldr	r1, [r3, #28]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1a      	ldr	r2, [r3, #32]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	02008000 	.word	0x02008000

08005870 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e021      	b.n	80058c6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2224      	movs	r2, #36	@ 0x24
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fb fea0 	bl	80015e0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	4608      	mov	r0, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	461a      	mov	r2, r3
 80058de:	4603      	mov	r3, r0
 80058e0:	817b      	strh	r3, [r7, #10]
 80058e2:	460b      	mov	r3, r1
 80058e4:	813b      	strh	r3, [r7, #8]
 80058e6:	4613      	mov	r3, r2
 80058e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	f040 80f9 	bne.w	8005aea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_I2C_Mem_Write+0x34>
 80058fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	d105      	bne.n	8005910 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800590a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0ed      	b.n	8005aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005916:	2b01      	cmp	r3, #1
 8005918:	d101      	bne.n	800591e <HAL_I2C_Mem_Write+0x4e>
 800591a:	2302      	movs	r3, #2
 800591c:	e0e6      	b.n	8005aec <HAL_I2C_Mem_Write+0x21c>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005926:	f7fe fd1f 	bl	8004368 <HAL_GetTick>
 800592a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	2319      	movs	r3, #25
 8005932:	2201      	movs	r2, #1
 8005934:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fad1 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e0d1      	b.n	8005aec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2221      	movs	r2, #33	@ 0x21
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2240      	movs	r2, #64	@ 0x40
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a3a      	ldr	r2, [r7, #32]
 8005962:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005968:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005970:	88f8      	ldrh	r0, [r7, #6]
 8005972:	893a      	ldrh	r2, [r7, #8]
 8005974:	8979      	ldrh	r1, [r7, #10]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	9301      	str	r3, [sp, #4]
 800597a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	4603      	mov	r3, r0
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f9e1 	bl	8005d48 <I2C_RequestMemoryWrite>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e0a9      	b.n	8005aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599c:	b29b      	uxth	r3, r3
 800599e:	2bff      	cmp	r3, #255	@ 0xff
 80059a0:	d90e      	bls.n	80059c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	22ff      	movs	r2, #255	@ 0xff
 80059a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	8979      	ldrh	r1, [r7, #10]
 80059b0:	2300      	movs	r3, #0
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fc55 	bl	8006268 <I2C_TransferConfig>
 80059be:	e00f      	b.n	80059e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	8979      	ldrh	r1, [r7, #10]
 80059d2:	2300      	movs	r3, #0
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 fc44 	bl	8006268 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 fad4 	bl	8005f92 <I2C_WaitOnTXISFlagUntilTimeout>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e07b      	b.n	8005aec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	781a      	ldrb	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d034      	beq.n	8005a98 <HAL_I2C_Mem_Write+0x1c8>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d130      	bne.n	8005a98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2180      	movs	r1, #128	@ 0x80
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 fa4d 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e04d      	b.n	8005aec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2bff      	cmp	r3, #255	@ 0xff
 8005a58:	d90e      	bls.n	8005a78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	22ff      	movs	r2, #255	@ 0xff
 8005a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	8979      	ldrh	r1, [r7, #10]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 fbf9 	bl	8006268 <I2C_TransferConfig>
 8005a76:	e00f      	b.n	8005a98 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	8979      	ldrh	r1, [r7, #10]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fbe8 	bl	8006268 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d19e      	bne.n	80059e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 faba 	bl	8006020 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e01a      	b.n	8005aec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2220      	movs	r2, #32
 8005abc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6859      	ldr	r1, [r3, #4]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8005af4 <HAL_I2C_Mem_Write+0x224>)
 8005aca:	400b      	ands	r3, r1
 8005acc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e000      	b.n	8005aec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005aea:	2302      	movs	r3, #2
  }
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	fe00e800 	.word	0xfe00e800

08005af8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af02      	add	r7, sp, #8
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	4608      	mov	r0, r1
 8005b02:	4611      	mov	r1, r2
 8005b04:	461a      	mov	r2, r3
 8005b06:	4603      	mov	r3, r0
 8005b08:	817b      	strh	r3, [r7, #10]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	813b      	strh	r3, [r7, #8]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	f040 80fd 	bne.w	8005d1a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_I2C_Mem_Read+0x34>
 8005b26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d105      	bne.n	8005b38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b32:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e0f1      	b.n	8005d1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_I2C_Mem_Read+0x4e>
 8005b42:	2302      	movs	r3, #2
 8005b44:	e0ea      	b.n	8005d1c <HAL_I2C_Mem_Read+0x224>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b4e:	f7fe fc0b 	bl	8004368 <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	2319      	movs	r3, #25
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f9bd 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0d5      	b.n	8005d1c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2222      	movs	r2, #34	@ 0x22
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2240      	movs	r2, #64	@ 0x40
 8005b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a3a      	ldr	r2, [r7, #32]
 8005b8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b98:	88f8      	ldrh	r0, [r7, #6]
 8005b9a:	893a      	ldrh	r2, [r7, #8]
 8005b9c:	8979      	ldrh	r1, [r7, #10]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	9301      	str	r3, [sp, #4]
 8005ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f921 	bl	8005df0 <I2C_RequestMemoryRead>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0ad      	b.n	8005d1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2bff      	cmp	r3, #255	@ 0xff
 8005bc8:	d90e      	bls.n	8005be8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	8979      	ldrh	r1, [r7, #10]
 8005bd8:	4b52      	ldr	r3, [pc, #328]	@ (8005d24 <HAL_I2C_Mem_Read+0x22c>)
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 fb41 	bl	8006268 <I2C_TransferConfig>
 8005be6:	e00f      	b.n	8005c08 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	8979      	ldrh	r1, [r7, #10]
 8005bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8005d24 <HAL_I2C_Mem_Read+0x22c>)
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fb30 	bl	8006268 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2104      	movs	r1, #4
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f964 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e07c      	b.n	8005d1c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d034      	beq.n	8005cc8 <HAL_I2C_Mem_Read+0x1d0>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d130      	bne.n	8005cc8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2180      	movs	r1, #128	@ 0x80
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f935 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e04d      	b.n	8005d1c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2bff      	cmp	r3, #255	@ 0xff
 8005c88:	d90e      	bls.n	8005ca8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	8979      	ldrh	r1, [r7, #10]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 fae1 	bl	8006268 <I2C_TransferConfig>
 8005ca6:	e00f      	b.n	8005cc8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	8979      	ldrh	r1, [r7, #10]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 fad0 	bl	8006268 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d19a      	bne.n	8005c08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 f9a2 	bl	8006020 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e01a      	b.n	8005d1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2220      	movs	r2, #32
 8005cec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6859      	ldr	r1, [r3, #4]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d28 <HAL_I2C_Mem_Read+0x230>)
 8005cfa:	400b      	ands	r3, r1
 8005cfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	e000      	b.n	8005d1c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005d1a:	2302      	movs	r3, #2
  }
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	80002400 	.word	0x80002400
 8005d28:	fe00e800 	.word	0xfe00e800

08005d2c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d3a:	b2db      	uxtb	r3, r3
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	4608      	mov	r0, r1
 8005d52:	4611      	mov	r1, r2
 8005d54:	461a      	mov	r2, r3
 8005d56:	4603      	mov	r3, r0
 8005d58:	817b      	strh	r3, [r7, #10]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	813b      	strh	r3, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	8979      	ldrh	r1, [r7, #10]
 8005d68:	4b20      	ldr	r3, [pc, #128]	@ (8005dec <I2C_RequestMemoryWrite+0xa4>)
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 fa79 	bl	8006268 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	69b9      	ldr	r1, [r7, #24]
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 f909 	bl	8005f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e02c      	b.n	8005de4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d8a:	88fb      	ldrh	r3, [r7, #6]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d105      	bne.n	8005d9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d90:	893b      	ldrh	r3, [r7, #8]
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d9a:	e015      	b.n	8005dc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d9c:	893b      	ldrh	r3, [r7, #8]
 8005d9e:	0a1b      	lsrs	r3, r3, #8
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	69b9      	ldr	r1, [r7, #24]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f8ef 	bl	8005f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e012      	b.n	8005de4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dbe:	893b      	ldrh	r3, [r7, #8]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2180      	movs	r1, #128	@ 0x80
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 f884 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	80002000 	.word	0x80002000

08005df0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	4608      	mov	r0, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	817b      	strh	r3, [r7, #10]
 8005e02:	460b      	mov	r3, r1
 8005e04:	813b      	strh	r3, [r7, #8]
 8005e06:	4613      	mov	r3, r2
 8005e08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	8979      	ldrh	r1, [r7, #10]
 8005e10:	4b20      	ldr	r3, [pc, #128]	@ (8005e94 <I2C_RequestMemoryRead+0xa4>)
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	2300      	movs	r3, #0
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fa26 	bl	8006268 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	69b9      	ldr	r1, [r7, #24]
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 f8b6 	bl	8005f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e02c      	b.n	8005e8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e30:	88fb      	ldrh	r3, [r7, #6]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d105      	bne.n	8005e42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e36:	893b      	ldrh	r3, [r7, #8]
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e40:	e015      	b.n	8005e6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e42:	893b      	ldrh	r3, [r7, #8]
 8005e44:	0a1b      	lsrs	r3, r3, #8
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	69b9      	ldr	r1, [r7, #24]
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 f89c 	bl	8005f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e012      	b.n	8005e8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e64:	893b      	ldrh	r3, [r7, #8]
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2200      	movs	r2, #0
 8005e76:	2140      	movs	r1, #64	@ 0x40
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 f831 	bl	8005ee0 <I2C_WaitOnFlagUntilTimeout>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e000      	b.n	8005e8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	80002000 	.word	0x80002000

08005e98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d103      	bne.n	8005eb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d007      	beq.n	8005ed4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	619a      	str	r2, [r3, #24]
  }
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ef0:	e03b      	b.n	8005f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f8d6 	bl	80060a8 <I2C_IsErrorOccurred>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e041      	b.n	8005f8a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0c:	d02d      	beq.n	8005f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0e:	f7fe fa2b 	bl	8004368 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d302      	bcc.n	8005f24 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d122      	bne.n	8005f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	bf0c      	ite	eq
 8005f34:	2301      	moveq	r3, #1
 8005f36:	2300      	movne	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	79fb      	ldrb	r3, [r7, #7]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d113      	bne.n	8005f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f46:	f043 0220 	orr.w	r2, r3, #32
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e00f      	b.n	8005f8a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	699a      	ldr	r2, [r3, #24]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4013      	ands	r3, r2
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	bf0c      	ite	eq
 8005f7a:	2301      	moveq	r3, #1
 8005f7c:	2300      	movne	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d0b4      	beq.n	8005ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f9e:	e033      	b.n	8006008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	68b9      	ldr	r1, [r7, #8]
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f87f 	bl	80060a8 <I2C_IsErrorOccurred>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e031      	b.n	8006018 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fba:	d025      	beq.n	8006008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbc:	f7fe f9d4 	bl	8004368 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d302      	bcc.n	8005fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d11a      	bne.n	8006008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d013      	beq.n	8006008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe4:	f043 0220 	orr.w	r2, r3, #32
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e007      	b.n	8006018 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b02      	cmp	r3, #2
 8006014:	d1c4      	bne.n	8005fa0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800602c:	e02f      	b.n	800608e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	68b9      	ldr	r1, [r7, #8]
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 f838 	bl	80060a8 <I2C_IsErrorOccurred>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e02d      	b.n	800609e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006042:	f7fe f991 	bl	8004368 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	d302      	bcc.n	8006058 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d11a      	bne.n	800608e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b20      	cmp	r3, #32
 8006064:	d013      	beq.n	800608e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606a:	f043 0220 	orr.w	r2, r3, #32
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e007      	b.n	800609e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b20      	cmp	r3, #32
 800609a:	d1c8      	bne.n	800602e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	@ 0x28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d068      	beq.n	80061a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2210      	movs	r2, #16
 80060da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060dc:	e049      	b.n	8006172 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e4:	d045      	beq.n	8006172 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060e6:	f7fe f93f 	bl	8004368 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d302      	bcc.n	80060fc <I2C_IsErrorOccurred+0x54>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d13a      	bne.n	8006172 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006106:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800610e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800611a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800611e:	d121      	bne.n	8006164 <I2C_IsErrorOccurred+0xbc>
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006126:	d01d      	beq.n	8006164 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006128:	7cfb      	ldrb	r3, [r7, #19]
 800612a:	2b20      	cmp	r3, #32
 800612c:	d01a      	beq.n	8006164 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800613c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800613e:	f7fe f913 	bl	8004368 <HAL_GetTick>
 8006142:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006144:	e00e      	b.n	8006164 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006146:	f7fe f90f 	bl	8004368 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b19      	cmp	r3, #25
 8006152:	d907      	bls.n	8006164 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	f043 0320 	orr.w	r3, r3, #32
 800615a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006162:	e006      	b.n	8006172 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b20      	cmp	r3, #32
 8006170:	d1e9      	bne.n	8006146 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b20      	cmp	r3, #32
 800617e:	d003      	beq.n	8006188 <I2C_IsErrorOccurred+0xe0>
 8006180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0aa      	beq.n	80060de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800618c:	2b00      	cmp	r3, #0
 800618e:	d103      	bne.n	8006198 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2220      	movs	r2, #32
 8006196:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	f043 0304 	orr.w	r3, r3, #4
 800619e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00b      	beq.n	80061d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	f043 0301 	orr.w	r3, r3, #1
 80061be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00b      	beq.n	80061f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	f043 0308 	orr.w	r3, r3, #8
 80061e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80061ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00b      	beq.n	8006214 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	f043 0302 	orr.w	r3, r3, #2
 8006202:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800620c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01c      	beq.n	8006256 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f7ff fe3b 	bl	8005e98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6859      	ldr	r1, [r3, #4]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	4b0d      	ldr	r3, [pc, #52]	@ (8006264 <I2C_IsErrorOccurred+0x1bc>)
 800622e:	400b      	ands	r3, r1
 8006230:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	431a      	orrs	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006256:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800625a:	4618      	mov	r0, r3
 800625c:	3728      	adds	r7, #40	@ 0x28
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	fe00e800 	.word	0xfe00e800

08006268 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	607b      	str	r3, [r7, #4]
 8006272:	460b      	mov	r3, r1
 8006274:	817b      	strh	r3, [r7, #10]
 8006276:	4613      	mov	r3, r2
 8006278:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800627a:	897b      	ldrh	r3, [r7, #10]
 800627c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006280:	7a7b      	ldrb	r3, [r7, #9]
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006288:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	4313      	orrs	r3, r2
 8006292:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006296:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	0d5b      	lsrs	r3, r3, #21
 80062a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80062a6:	4b08      	ldr	r3, [pc, #32]	@ (80062c8 <I2C_TransferConfig+0x60>)
 80062a8:	430b      	orrs	r3, r1
 80062aa:	43db      	mvns	r3, r3
 80062ac:	ea02 0103 	and.w	r1, r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80062ba:	bf00      	nop
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	03ff63ff 	.word	0x03ff63ff

080062cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b20      	cmp	r3, #32
 80062e0:	d138      	bne.n	8006354 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e032      	b.n	8006356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2224      	movs	r2, #36	@ 0x24
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0201 	bic.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800631e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6819      	ldr	r1, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	e000      	b.n	8006356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006354:	2302      	movs	r3, #2
  }
}
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006362:	b480      	push	{r7}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b20      	cmp	r3, #32
 8006376:	d139      	bne.n	80063ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006382:	2302      	movs	r3, #2
 8006384:	e033      	b.n	80063ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2224      	movs	r2, #36	@ 0x24
 8006392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0201 	bic.w	r2, r2, #1
 80063a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80063b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	e000      	b.n	80063ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80063ec:	2302      	movs	r3, #2
  }
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
	...

080063fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e0d2      	b.n	80065b4 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fb f91a 	bl	800165c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69d9      	ldr	r1, [r3, #28]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	4b60      	ldr	r3, [pc, #384]	@ (80065bc <HAL_I2S_Init+0x1c0>)
 800643c:	400b      	ands	r3, r1
 800643e:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2202      	movs	r2, #2
 8006446:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d067      	beq.n	8006520 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006458:	2310      	movs	r3, #16
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	e001      	b.n	8006462 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800645e:	2320      	movs	r3, #32
 8006460:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	2b20      	cmp	r3, #32
 8006468:	d802      	bhi.n	8006470 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d102      	bne.n	800647e <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8006478:	4b51      	ldr	r3, [pc, #324]	@ (80065c0 <HAL_I2S_Init+0x1c4>)
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	e003      	b.n	8006486 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f8a2 	bl	80065c8 <I2S_GetClockFreq>
 8006484:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800648e:	d125      	bne.n	80064dc <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d010      	beq.n	80064ba <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	fbb2 f2f3 	udiv	r2, r2, r3
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	461a      	mov	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b4:	3305      	adds	r3, #5
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	e01f      	b.n	80064fa <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	461a      	mov	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d6:	3305      	adds	r3, #5
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	e00e      	b.n	80064fa <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	461a      	mov	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f6:	3305      	adds	r3, #5
 80064f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	4a31      	ldr	r2, [pc, #196]	@ (80065c4 <HAL_I2S_Init+0x1c8>)
 80064fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006502:	08db      	lsrs	r3, r3, #3
 8006504:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	085b      	lsrs	r3, r3, #1
 8006516:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	021b      	lsls	r3, r3, #8
 800651c:	61bb      	str	r3, [r7, #24]
 800651e:	e003      	b.n	8006528 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006520:	2302      	movs	r3, #2
 8006522:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d902      	bls.n	8006534 <HAL_I2S_Init+0x138>
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	2bff      	cmp	r3, #255	@ 0xff
 8006532:	d907      	bls.n	8006544 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006538:	f043 0210 	orr.w	r2, r3, #16
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e037      	b.n	80065b4 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	ea42 0103 	orr.w	r1, r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	430a      	orrs	r2, r1
 8006556:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	69da      	ldr	r2, [r3, #28]
 800655e:	4b17      	ldr	r3, [pc, #92]	@ (80065bc <HAL_I2S_Init+0x1c0>)
 8006560:	4013      	ands	r3, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6851      	ldr	r1, [r2, #4]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6892      	ldr	r2, [r2, #8]
 800656a:	4311      	orrs	r1, r2
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	68d2      	ldr	r2, [r2, #12]
 8006570:	4311      	orrs	r1, r2
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6992      	ldr	r2, [r2, #24]
 8006576:	430a      	orrs	r2, r1
 8006578:	431a      	orrs	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006582:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2b30      	cmp	r3, #48	@ 0x30
 800658a:	d003      	beq.n	8006594 <HAL_I2S_Init+0x198>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2bb0      	cmp	r3, #176	@ 0xb0
 8006592:	d107      	bne.n	80065a4 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80065a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3720      	adds	r7, #32
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	fffff040 	.word	0xfffff040
 80065c0:	00bb8000 	.word	0x00bb8000
 80065c4:	cccccccd 	.word	0xcccccccd

080065c8 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d02d      	beq.n	8006634 <I2S_GetClockFreq+0x6c>
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d12e      	bne.n	800663a <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80065dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006650 <I2S_GetClockFreq+0x88>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d108      	bne.n	80065fa <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80065e8:	4b19      	ldr	r3, [pc, #100]	@ (8006650 <I2S_GetClockFreq+0x88>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065f0:	4a18      	ldr	r2, [pc, #96]	@ (8006654 <I2S_GetClockFreq+0x8c>)
 80065f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	e007      	b.n	800660a <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80065fa:	4b15      	ldr	r3, [pc, #84]	@ (8006650 <I2S_GetClockFreq+0x88>)
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006602:	4a15      	ldr	r2, [pc, #84]	@ (8006658 <I2S_GetClockFreq+0x90>)
 8006604:	fbb2 f3f3 	udiv	r3, r2, r3
 8006608:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 800660a:	4b11      	ldr	r3, [pc, #68]	@ (8006650 <I2S_GetClockFreq+0x88>)
 800660c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006610:	0f1b      	lsrs	r3, r3, #28
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8006618:	4b0d      	ldr	r3, [pc, #52]	@ (8006650 <I2S_GetClockFreq+0x88>)
 800661a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800661e:	099b      	lsrs	r3, r3, #6
 8006620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	fb03 f202 	mul.w	r2, r3, r2
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006630:	613b      	str	r3, [r7, #16]

      break;
 8006632:	e005      	b.n	8006640 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8006634:	4b09      	ldr	r3, [pc, #36]	@ (800665c <I2S_GetClockFreq+0x94>)
 8006636:	613b      	str	r3, [r7, #16]
      break;
 8006638:	e002      	b.n	8006640 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	613b      	str	r3, [r7, #16]
      break;
 800663e:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8006640:	693b      	ldr	r3, [r7, #16]
}
 8006642:	4618      	mov	r0, r3
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	40023800 	.word	0x40023800
 8006654:	00f42400 	.word	0x00f42400
 8006658:	017d7840 	.word	0x017d7840
 800665c:	00bb8000 	.word	0x00bb8000

08006660 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800666a:	4b23      	ldr	r3, [pc, #140]	@ (80066f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	4a22      	ldr	r2, [pc, #136]	@ (80066f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006674:	6413      	str	r3, [r2, #64]	@ 0x40
 8006676:	4b20      	ldr	r3, [pc, #128]	@ (80066f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006682:	4b1e      	ldr	r3, [pc, #120]	@ (80066fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1d      	ldr	r2, [pc, #116]	@ (80066fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800668c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800668e:	f7fd fe6b 	bl	8004368 <HAL_GetTick>
 8006692:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006694:	e009      	b.n	80066aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006696:	f7fd fe67 	bl	8004368 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066a4:	d901      	bls.n	80066aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e022      	b.n	80066f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80066aa:	4b14      	ldr	r3, [pc, #80]	@ (80066fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b6:	d1ee      	bne.n	8006696 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80066b8:	4b10      	ldr	r3, [pc, #64]	@ (80066fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a0f      	ldr	r2, [pc, #60]	@ (80066fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80066be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066c4:	f7fd fe50 	bl	8004368 <HAL_GetTick>
 80066c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066ca:	e009      	b.n	80066e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80066cc:	f7fd fe4c 	bl	8004368 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066da:	d901      	bls.n	80066e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e007      	b.n	80066f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066e0:	4b06      	ldr	r3, [pc, #24]	@ (80066fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066ec:	d1ee      	bne.n	80066cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40023800 	.word	0x40023800
 80066fc:	40007000 	.word	0x40007000

08006700 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006708:	2300      	movs	r3, #0
 800670a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e291      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 8087 	beq.w	8006832 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006724:	4b96      	ldr	r3, [pc, #600]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 030c 	and.w	r3, r3, #12
 800672c:	2b04      	cmp	r3, #4
 800672e:	d00c      	beq.n	800674a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006730:	4b93      	ldr	r3, [pc, #588]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f003 030c 	and.w	r3, r3, #12
 8006738:	2b08      	cmp	r3, #8
 800673a:	d112      	bne.n	8006762 <HAL_RCC_OscConfig+0x62>
 800673c:	4b90      	ldr	r3, [pc, #576]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006744:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006748:	d10b      	bne.n	8006762 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800674a:	4b8d      	ldr	r3, [pc, #564]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d06c      	beq.n	8006830 <HAL_RCC_OscConfig+0x130>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d168      	bne.n	8006830 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e26b      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800676a:	d106      	bne.n	800677a <HAL_RCC_OscConfig+0x7a>
 800676c:	4b84      	ldr	r3, [pc, #528]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a83      	ldr	r2, [pc, #524]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 8006772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	e02e      	b.n	80067d8 <HAL_RCC_OscConfig+0xd8>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10c      	bne.n	800679c <HAL_RCC_OscConfig+0x9c>
 8006782:	4b7f      	ldr	r3, [pc, #508]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a7e      	ldr	r2, [pc, #504]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 8006788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	4b7c      	ldr	r3, [pc, #496]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a7b      	ldr	r2, [pc, #492]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 8006794:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e01d      	b.n	80067d8 <HAL_RCC_OscConfig+0xd8>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067a4:	d10c      	bne.n	80067c0 <HAL_RCC_OscConfig+0xc0>
 80067a6:	4b76      	ldr	r3, [pc, #472]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a75      	ldr	r2, [pc, #468]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 80067ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	4b73      	ldr	r3, [pc, #460]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a72      	ldr	r2, [pc, #456]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 80067b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	e00b      	b.n	80067d8 <HAL_RCC_OscConfig+0xd8>
 80067c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 80067c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	4b6c      	ldr	r3, [pc, #432]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a6b      	ldr	r2, [pc, #428]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 80067d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d013      	beq.n	8006808 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e0:	f7fd fdc2 	bl	8004368 <HAL_GetTick>
 80067e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067e8:	f7fd fdbe 	bl	8004368 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b64      	cmp	r3, #100	@ 0x64
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e21f      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067fa:	4b61      	ldr	r3, [pc, #388]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0f0      	beq.n	80067e8 <HAL_RCC_OscConfig+0xe8>
 8006806:	e014      	b.n	8006832 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006808:	f7fd fdae 	bl	8004368 <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006810:	f7fd fdaa 	bl	8004368 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b64      	cmp	r3, #100	@ 0x64
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e20b      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006822:	4b57      	ldr	r3, [pc, #348]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1f0      	bne.n	8006810 <HAL_RCC_OscConfig+0x110>
 800682e:	e000      	b.n	8006832 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d069      	beq.n	8006912 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800683e:	4b50      	ldr	r3, [pc, #320]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 030c 	and.w	r3, r3, #12
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800684a:	4b4d      	ldr	r3, [pc, #308]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 030c 	and.w	r3, r3, #12
 8006852:	2b08      	cmp	r3, #8
 8006854:	d11c      	bne.n	8006890 <HAL_RCC_OscConfig+0x190>
 8006856:	4b4a      	ldr	r3, [pc, #296]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d116      	bne.n	8006890 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006862:	4b47      	ldr	r3, [pc, #284]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <HAL_RCC_OscConfig+0x17a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d001      	beq.n	800687a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e1df      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800687a:	4b41      	ldr	r3, [pc, #260]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	493d      	ldr	r1, [pc, #244]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 800688a:	4313      	orrs	r3, r2
 800688c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800688e:	e040      	b.n	8006912 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d023      	beq.n	80068e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006898:	4b39      	ldr	r3, [pc, #228]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a38      	ldr	r2, [pc, #224]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a4:	f7fd fd60 	bl	8004368 <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068ac:	f7fd fd5c 	bl	8004368 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e1bd      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068be:	4b30      	ldr	r3, [pc, #192]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d0f0      	beq.n	80068ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ca:	4b2d      	ldr	r3, [pc, #180]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	4929      	ldr	r1, [pc, #164]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	600b      	str	r3, [r1, #0]
 80068de:	e018      	b.n	8006912 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068e0:	4b27      	ldr	r3, [pc, #156]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a26      	ldr	r2, [pc, #152]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 80068e6:	f023 0301 	bic.w	r3, r3, #1
 80068ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ec:	f7fd fd3c 	bl	8004368 <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068f4:	f7fd fd38 	bl	8004368 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e199      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006906:	4b1e      	ldr	r3, [pc, #120]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1f0      	bne.n	80068f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	2b00      	cmp	r3, #0
 800691c:	d038      	beq.n	8006990 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d019      	beq.n	800695a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006926:	4b16      	ldr	r3, [pc, #88]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 8006928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800692a:	4a15      	ldr	r2, [pc, #84]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 800692c:	f043 0301 	orr.w	r3, r3, #1
 8006930:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006932:	f7fd fd19 	bl	8004368 <HAL_GetTick>
 8006936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006938:	e008      	b.n	800694c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800693a:	f7fd fd15 	bl	8004368 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d901      	bls.n	800694c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e176      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800694c:	4b0c      	ldr	r3, [pc, #48]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 800694e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0f0      	beq.n	800693a <HAL_RCC_OscConfig+0x23a>
 8006958:	e01a      	b.n	8006990 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800695a:	4b09      	ldr	r3, [pc, #36]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 800695c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800695e:	4a08      	ldr	r2, [pc, #32]	@ (8006980 <HAL_RCC_OscConfig+0x280>)
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006966:	f7fd fcff 	bl	8004368 <HAL_GetTick>
 800696a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800696c:	e00a      	b.n	8006984 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800696e:	f7fd fcfb 	bl	8004368 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d903      	bls.n	8006984 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e15c      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
 8006980:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006984:	4b91      	ldr	r3, [pc, #580]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1ee      	bne.n	800696e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 80a4 	beq.w	8006ae6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800699e:	4b8b      	ldr	r3, [pc, #556]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 80069a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10d      	bne.n	80069c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80069aa:	4b88      	ldr	r3, [pc, #544]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 80069ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ae:	4a87      	ldr	r2, [pc, #540]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 80069b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80069b6:	4b85      	ldr	r3, [pc, #532]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 80069b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069be:	60bb      	str	r3, [r7, #8]
 80069c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069c2:	2301      	movs	r3, #1
 80069c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069c6:	4b82      	ldr	r3, [pc, #520]	@ (8006bd0 <HAL_RCC_OscConfig+0x4d0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d118      	bne.n	8006a04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80069d2:	4b7f      	ldr	r3, [pc, #508]	@ (8006bd0 <HAL_RCC_OscConfig+0x4d0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a7e      	ldr	r2, [pc, #504]	@ (8006bd0 <HAL_RCC_OscConfig+0x4d0>)
 80069d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069de:	f7fd fcc3 	bl	8004368 <HAL_GetTick>
 80069e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069e6:	f7fd fcbf 	bl	8004368 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b64      	cmp	r3, #100	@ 0x64
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e120      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069f8:	4b75      	ldr	r3, [pc, #468]	@ (8006bd0 <HAL_RCC_OscConfig+0x4d0>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0f0      	beq.n	80069e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d106      	bne.n	8006a1a <HAL_RCC_OscConfig+0x31a>
 8006a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a10:	4a6e      	ldr	r2, [pc, #440]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a12:	f043 0301 	orr.w	r3, r3, #1
 8006a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a18:	e02d      	b.n	8006a76 <HAL_RCC_OscConfig+0x376>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10c      	bne.n	8006a3c <HAL_RCC_OscConfig+0x33c>
 8006a22:	4b6a      	ldr	r3, [pc, #424]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a26:	4a69      	ldr	r2, [pc, #420]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a2e:	4b67      	ldr	r3, [pc, #412]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a32:	4a66      	ldr	r2, [pc, #408]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a34:	f023 0304 	bic.w	r3, r3, #4
 8006a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a3a:	e01c      	b.n	8006a76 <HAL_RCC_OscConfig+0x376>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	2b05      	cmp	r3, #5
 8006a42:	d10c      	bne.n	8006a5e <HAL_RCC_OscConfig+0x35e>
 8006a44:	4b61      	ldr	r3, [pc, #388]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a48:	4a60      	ldr	r2, [pc, #384]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a4a:	f043 0304 	orr.w	r3, r3, #4
 8006a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a50:	4b5e      	ldr	r3, [pc, #376]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a54:	4a5d      	ldr	r2, [pc, #372]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a5c:	e00b      	b.n	8006a76 <HAL_RCC_OscConfig+0x376>
 8006a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a62:	4a5a      	ldr	r2, [pc, #360]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a6a:	4b58      	ldr	r3, [pc, #352]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a6e:	4a57      	ldr	r2, [pc, #348]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a70:	f023 0304 	bic.w	r3, r3, #4
 8006a74:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d015      	beq.n	8006aaa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a7e:	f7fd fc73 	bl	8004368 <HAL_GetTick>
 8006a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a84:	e00a      	b.n	8006a9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a86:	f7fd fc6f 	bl	8004368 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e0ce      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0ee      	beq.n	8006a86 <HAL_RCC_OscConfig+0x386>
 8006aa8:	e014      	b.n	8006ad4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aaa:	f7fd fc5d 	bl	8004368 <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ab0:	e00a      	b.n	8006ac8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ab2:	f7fd fc59 	bl	8004368 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e0b8      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ac8:	4b40      	ldr	r3, [pc, #256]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1ee      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d105      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ada:	4b3c      	ldr	r3, [pc, #240]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ade:	4a3b      	ldr	r2, [pc, #236]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ae4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 80a4 	beq.w	8006c38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006af0:	4b36      	ldr	r3, [pc, #216]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 030c 	and.w	r3, r3, #12
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d06b      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d149      	bne.n	8006b98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b04:	4b31      	ldr	r3, [pc, #196]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a30      	ldr	r2, [pc, #192]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006b0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b10:	f7fd fc2a 	bl	8004368 <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b18:	f7fd fc26 	bl	8004368 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e087      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b2a:	4b28      	ldr	r3, [pc, #160]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f0      	bne.n	8006b18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69da      	ldr	r2, [r3, #28]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b44:	019b      	lsls	r3, r3, #6
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	041b      	lsls	r3, r3, #16
 8006b52:	431a      	orrs	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b58:	061b      	lsls	r3, r3, #24
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006b5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b64:	4b19      	ldr	r3, [pc, #100]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a18      	ldr	r2, [pc, #96]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006b6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b70:	f7fd fbfa 	bl	8004368 <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b78:	f7fd fbf6 	bl	8004368 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e057      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b8a:	4b10      	ldr	r3, [pc, #64]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f0      	beq.n	8006b78 <HAL_RCC_OscConfig+0x478>
 8006b96:	e04f      	b.n	8006c38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b98:	4b0c      	ldr	r3, [pc, #48]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006b9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba4:	f7fd fbe0 	bl	8004368 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bac:	f7fd fbdc 	bl	8004368 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e03d      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bbe:	4b03      	ldr	r3, [pc, #12]	@ (8006bcc <HAL_RCC_OscConfig+0x4cc>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f0      	bne.n	8006bac <HAL_RCC_OscConfig+0x4ac>
 8006bca:	e035      	b.n	8006c38 <HAL_RCC_OscConfig+0x538>
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c44 <HAL_RCC_OscConfig+0x544>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d028      	beq.n	8006c34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d121      	bne.n	8006c34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d11a      	bne.n	8006c34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c04:	4013      	ands	r3, r2
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d111      	bne.n	8006c34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1a:	085b      	lsrs	r3, r3, #1
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d107      	bne.n	8006c34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d001      	beq.n	8006c38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e000      	b.n	8006c3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	40023800 	.word	0x40023800

08006c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e0d0      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c60:	4b6a      	ldr	r3, [pc, #424]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d910      	bls.n	8006c90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6e:	4b67      	ldr	r3, [pc, #412]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f023 020f 	bic.w	r2, r3, #15
 8006c76:	4965      	ldr	r1, [pc, #404]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c7e:	4b63      	ldr	r3, [pc, #396]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d001      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e0b8      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d020      	beq.n	8006cde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ca8:	4b59      	ldr	r3, [pc, #356]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	4a58      	ldr	r2, [pc, #352]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006cae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006cb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cc0:	4b53      	ldr	r3, [pc, #332]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	4a52      	ldr	r2, [pc, #328]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006cc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006cca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ccc:	4b50      	ldr	r3, [pc, #320]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	494d      	ldr	r1, [pc, #308]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d040      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d107      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cf2:	4b47      	ldr	r3, [pc, #284]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d115      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e07f      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d107      	bne.n	8006d1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d0a:	4b41      	ldr	r3, [pc, #260]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e073      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e06b      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d2a:	4b39      	ldr	r3, [pc, #228]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f023 0203 	bic.w	r2, r3, #3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	4936      	ldr	r1, [pc, #216]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d3c:	f7fd fb14 	bl	8004368 <HAL_GetTick>
 8006d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d42:	e00a      	b.n	8006d5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d44:	f7fd fb10 	bl	8004368 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e053      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 020c 	and.w	r2, r3, #12
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d1eb      	bne.n	8006d44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d6c:	4b27      	ldr	r3, [pc, #156]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d210      	bcs.n	8006d9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d7a:	4b24      	ldr	r3, [pc, #144]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f023 020f 	bic.w	r2, r3, #15
 8006d82:	4922      	ldr	r1, [pc, #136]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d8a:	4b20      	ldr	r3, [pc, #128]	@ (8006e0c <HAL_RCC_ClockConfig+0x1c4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d001      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e032      	b.n	8006e02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d008      	beq.n	8006dba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006da8:	4b19      	ldr	r3, [pc, #100]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	4916      	ldr	r1, [pc, #88]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006dc6:	4b12      	ldr	r3, [pc, #72]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	490e      	ldr	r1, [pc, #56]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006dda:	f000 f821 	bl	8006e20 <HAL_RCC_GetSysClockFreq>
 8006dde:	4602      	mov	r2, r0
 8006de0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e10 <HAL_RCC_ClockConfig+0x1c8>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	091b      	lsrs	r3, r3, #4
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	490a      	ldr	r1, [pc, #40]	@ (8006e14 <HAL_RCC_ClockConfig+0x1cc>)
 8006dec:	5ccb      	ldrb	r3, [r1, r3]
 8006dee:	fa22 f303 	lsr.w	r3, r2, r3
 8006df2:	4a09      	ldr	r2, [pc, #36]	@ (8006e18 <HAL_RCC_ClockConfig+0x1d0>)
 8006df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006df6:	4b09      	ldr	r3, [pc, #36]	@ (8006e1c <HAL_RCC_ClockConfig+0x1d4>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fd fa70 	bl	80042e0 <HAL_InitTick>

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40023c00 	.word	0x40023c00
 8006e10:	40023800 	.word	0x40023800
 8006e14:	08008da8 	.word	0x08008da8
 8006e18:	20000004 	.word	0x20000004
 8006e1c:	20000040 	.word	0x20000040

08006e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e24:	b090      	sub	sp, #64	@ 0x40
 8006e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e30:	2300      	movs	r3, #0
 8006e32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e38:	4b59      	ldr	r3, [pc, #356]	@ (8006fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 030c 	and.w	r3, r3, #12
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d00d      	beq.n	8006e60 <HAL_RCC_GetSysClockFreq+0x40>
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	f200 80a1 	bhi.w	8006f8c <HAL_RCC_GetSysClockFreq+0x16c>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_RCC_GetSysClockFreq+0x34>
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d003      	beq.n	8006e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8006e52:	e09b      	b.n	8006f8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e54:	4b53      	ldr	r3, [pc, #332]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006e56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e58:	e09b      	b.n	8006f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e5a:	4b53      	ldr	r3, [pc, #332]	@ (8006fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e5e:	e098      	b.n	8006f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e60:	4b4f      	ldr	r3, [pc, #316]	@ (8006fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006e6a:	4b4d      	ldr	r3, [pc, #308]	@ (8006fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d028      	beq.n	8006ec8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e76:	4b4a      	ldr	r3, [pc, #296]	@ (8006fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	099b      	lsrs	r3, r3, #6
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	623b      	str	r3, [r7, #32]
 8006e80:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006e88:	2100      	movs	r1, #0
 8006e8a:	4b47      	ldr	r3, [pc, #284]	@ (8006fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e8c:	fb03 f201 	mul.w	r2, r3, r1
 8006e90:	2300      	movs	r3, #0
 8006e92:	fb00 f303 	mul.w	r3, r0, r3
 8006e96:	4413      	add	r3, r2
 8006e98:	4a43      	ldr	r2, [pc, #268]	@ (8006fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e9a:	fba0 1202 	umull	r1, r2, r0, r2
 8006e9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ea0:	460a      	mov	r2, r1
 8006ea2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006ea4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ea6:	4413      	add	r3, r2
 8006ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eac:	2200      	movs	r2, #0
 8006eae:	61bb      	str	r3, [r7, #24]
 8006eb0:	61fa      	str	r2, [r7, #28]
 8006eb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006eb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006eba:	f7f9 f9f9 	bl	80002b0 <__aeabi_uldivmod>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ec6:	e053      	b.n	8006f70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ec8:	4b35      	ldr	r3, [pc, #212]	@ (8006fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	099b      	lsrs	r3, r3, #6
 8006ece:	2200      	movs	r2, #0
 8006ed0:	613b      	str	r3, [r7, #16]
 8006ed2:	617a      	str	r2, [r7, #20]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006eda:	f04f 0b00 	mov.w	fp, #0
 8006ede:	4652      	mov	r2, sl
 8006ee0:	465b      	mov	r3, fp
 8006ee2:	f04f 0000 	mov.w	r0, #0
 8006ee6:	f04f 0100 	mov.w	r1, #0
 8006eea:	0159      	lsls	r1, r3, #5
 8006eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ef0:	0150      	lsls	r0, r2, #5
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	ebb2 080a 	subs.w	r8, r2, sl
 8006efa:	eb63 090b 	sbc.w	r9, r3, fp
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006f0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006f0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006f12:	ebb2 0408 	subs.w	r4, r2, r8
 8006f16:	eb63 0509 	sbc.w	r5, r3, r9
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	00eb      	lsls	r3, r5, #3
 8006f24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f28:	00e2      	lsls	r2, r4, #3
 8006f2a:	4614      	mov	r4, r2
 8006f2c:	461d      	mov	r5, r3
 8006f2e:	eb14 030a 	adds.w	r3, r4, sl
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	eb45 030b 	adc.w	r3, r5, fp
 8006f38:	607b      	str	r3, [r7, #4]
 8006f3a:	f04f 0200 	mov.w	r2, #0
 8006f3e:	f04f 0300 	mov.w	r3, #0
 8006f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f46:	4629      	mov	r1, r5
 8006f48:	028b      	lsls	r3, r1, #10
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f50:	4621      	mov	r1, r4
 8006f52:	028a      	lsls	r2, r1, #10
 8006f54:	4610      	mov	r0, r2
 8006f56:	4619      	mov	r1, r3
 8006f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	60fa      	str	r2, [r7, #12]
 8006f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f64:	f7f9 f9a4 	bl	80002b0 <__aeabi_uldivmod>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006f70:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	0c1b      	lsrs	r3, r3, #16
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006f80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006f8a:	e002      	b.n	8006f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f8c:	4b05      	ldr	r3, [pc, #20]	@ (8006fa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3740      	adds	r7, #64	@ 0x40
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40023800 	.word	0x40023800
 8006fa4:	00f42400 	.word	0x00f42400
 8006fa8:	017d7840 	.word	0x017d7840

08006fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d012      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006fd4:	4b69      	ldr	r3, [pc, #420]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	4a68      	ldr	r2, [pc, #416]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fda:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006fde:	6093      	str	r3, [r2, #8]
 8006fe0:	4b66      	ldr	r3, [pc, #408]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe8:	4964      	ldr	r1, [pc, #400]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d017      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007006:	4b5d      	ldr	r3, [pc, #372]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800700c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007014:	4959      	ldr	r1, [pc, #356]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007016:	4313      	orrs	r3, r2
 8007018:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007020:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007024:	d101      	bne.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007026:	2301      	movs	r3, #1
 8007028:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007032:	2301      	movs	r3, #1
 8007034:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d017      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007042:	4b4e      	ldr	r3, [pc, #312]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007044:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007048:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007050:	494a      	ldr	r1, [pc, #296]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007052:	4313      	orrs	r3, r2
 8007054:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007060:	d101      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007062:	2301      	movs	r3, #1
 8007064:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800706e:	2301      	movs	r3, #1
 8007070:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800707e:	2301      	movs	r3, #1
 8007080:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 808b 	beq.w	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007090:	4b3a      	ldr	r3, [pc, #232]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007094:	4a39      	ldr	r2, [pc, #228]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800709a:	6413      	str	r3, [r2, #64]	@ 0x40
 800709c:	4b37      	ldr	r3, [pc, #220]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800709e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070a4:	60bb      	str	r3, [r7, #8]
 80070a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80070a8:	4b35      	ldr	r3, [pc, #212]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a34      	ldr	r2, [pc, #208]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070b4:	f7fd f958 	bl	8004368 <HAL_GetTick>
 80070b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80070ba:	e008      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070bc:	f7fd f954 	bl	8004368 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b64      	cmp	r3, #100	@ 0x64
 80070c8:	d901      	bls.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e357      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80070ce:	4b2c      	ldr	r3, [pc, #176]	@ (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0f0      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070da:	4b28      	ldr	r3, [pc, #160]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d035      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d02e      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070f8:	4b20      	ldr	r3, [pc, #128]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007100:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007102:	4b1e      	ldr	r3, [pc, #120]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007106:	4a1d      	ldr	r2, [pc, #116]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800710c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800710e:	4b1b      	ldr	r3, [pc, #108]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007112:	4a1a      	ldr	r2, [pc, #104]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007118:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800711a:	4a18      	ldr	r2, [pc, #96]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007120:	4b16      	ldr	r3, [pc, #88]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b01      	cmp	r3, #1
 800712a:	d114      	bne.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712c:	f7fd f91c 	bl	8004368 <HAL_GetTick>
 8007130:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007132:	e00a      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007134:	f7fd f918 	bl	8004368 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007142:	4293      	cmp	r3, r2
 8007144:	d901      	bls.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e319      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800714a:	4b0c      	ldr	r3, [pc, #48]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800714c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0ee      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800715e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007162:	d111      	bne.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007164:	4b05      	ldr	r3, [pc, #20]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007170:	4b04      	ldr	r3, [pc, #16]	@ (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007172:	400b      	ands	r3, r1
 8007174:	4901      	ldr	r1, [pc, #4]	@ (800717c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007176:	4313      	orrs	r3, r2
 8007178:	608b      	str	r3, [r1, #8]
 800717a:	e00b      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800717c:	40023800 	.word	0x40023800
 8007180:	40007000 	.word	0x40007000
 8007184:	0ffffcff 	.word	0x0ffffcff
 8007188:	4baa      	ldr	r3, [pc, #680]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	4aa9      	ldr	r2, [pc, #676]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800718e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007192:	6093      	str	r3, [r2, #8]
 8007194:	4ba7      	ldr	r3, [pc, #668]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007196:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071a0:	49a4      	ldr	r1, [pc, #656]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0310 	and.w	r3, r3, #16
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d010      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071b2:	4ba0      	ldr	r3, [pc, #640]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071b8:	4a9e      	ldr	r2, [pc, #632]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80071c2:	4b9c      	ldr	r3, [pc, #624]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071cc:	4999      	ldr	r1, [pc, #612]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00a      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071e0:	4b94      	ldr	r3, [pc, #592]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ee:	4991      	ldr	r1, [pc, #580]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00a      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007202:	4b8c      	ldr	r3, [pc, #560]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007208:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007210:	4988      	ldr	r1, [pc, #544]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007212:	4313      	orrs	r3, r2
 8007214:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00a      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007224:	4b83      	ldr	r3, [pc, #524]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800722a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007232:	4980      	ldr	r1, [pc, #512]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007234:	4313      	orrs	r3, r2
 8007236:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007246:	4b7b      	ldr	r3, [pc, #492]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800724c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007254:	4977      	ldr	r1, [pc, #476]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007256:	4313      	orrs	r3, r2
 8007258:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00a      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007268:	4b72      	ldr	r3, [pc, #456]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800726a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800726e:	f023 0203 	bic.w	r2, r3, #3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007276:	496f      	ldr	r1, [pc, #444]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007278:	4313      	orrs	r3, r2
 800727a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800728a:	4b6a      	ldr	r3, [pc, #424]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800728c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007290:	f023 020c 	bic.w	r2, r3, #12
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007298:	4966      	ldr	r1, [pc, #408]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800729a:	4313      	orrs	r3, r2
 800729c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072ac:	4b61      	ldr	r3, [pc, #388]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072ba:	495e      	ldr	r1, [pc, #376]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80072ce:	4b59      	ldr	r3, [pc, #356]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072dc:	4955      	ldr	r1, [pc, #340]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072f0:	4b50      	ldr	r3, [pc, #320]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072fe:	494d      	ldr	r1, [pc, #308]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007300:	4313      	orrs	r3, r2
 8007302:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007312:	4b48      	ldr	r3, [pc, #288]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007318:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007320:	4944      	ldr	r1, [pc, #272]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007322:	4313      	orrs	r3, r2
 8007324:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007334:	4b3f      	ldr	r3, [pc, #252]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800733a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007342:	493c      	ldr	r1, [pc, #240]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007344:	4313      	orrs	r3, r2
 8007346:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007356:	4b37      	ldr	r3, [pc, #220]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800735c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007364:	4933      	ldr	r1, [pc, #204]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007366:	4313      	orrs	r3, r2
 8007368:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007378:	4b2e      	ldr	r3, [pc, #184]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800737a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800737e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007386:	492b      	ldr	r1, [pc, #172]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007388:	4313      	orrs	r3, r2
 800738a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d011      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800739a:	4b26      	ldr	r3, [pc, #152]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800739c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073a8:	4922      	ldr	r1, [pc, #136]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073b8:	d101      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80073ba:	2301      	movs	r3, #1
 80073bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0308 	and.w	r3, r3, #8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80073ca:	2301      	movs	r3, #1
 80073cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073da:	4b16      	ldr	r3, [pc, #88]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073e0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073e8:	4912      	ldr	r1, [pc, #72]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00b      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80073fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007402:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800740c:	4909      	ldr	r1, [pc, #36]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800740e:	4313      	orrs	r3, r2
 8007410:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d006      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 80d9 	beq.w	80075da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007428:	4b02      	ldr	r3, [pc, #8]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a01      	ldr	r2, [pc, #4]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800742e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007432:	e001      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007434:	40023800 	.word	0x40023800
 8007438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800743a:	f7fc ff95 	bl	8004368 <HAL_GetTick>
 800743e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007440:	e008      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007442:	f7fc ff91 	bl	8004368 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	2b64      	cmp	r3, #100	@ 0x64
 800744e:	d901      	bls.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e194      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007454:	4b6c      	ldr	r3, [pc, #432]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1f0      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d021      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007470:	2b00      	cmp	r3, #0
 8007472:	d11d      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007474:	4b64      	ldr	r3, [pc, #400]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800747a:	0c1b      	lsrs	r3, r3, #16
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007482:	4b61      	ldr	r3, [pc, #388]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007488:	0e1b      	lsrs	r3, r3, #24
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	019a      	lsls	r2, r3, #6
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	041b      	lsls	r3, r3, #16
 800749a:	431a      	orrs	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	061b      	lsls	r3, r3, #24
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	071b      	lsls	r3, r3, #28
 80074a8:	4957      	ldr	r1, [pc, #348]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d004      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074c4:	d00a      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d02e      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074da:	d129      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80074dc:	4b4a      	ldr	r3, [pc, #296]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	f003 0303 	and.w	r3, r3, #3
 80074e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074ea:	4b47      	ldr	r3, [pc, #284]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074f0:	0f1b      	lsrs	r3, r3, #28
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	019a      	lsls	r2, r3, #6
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	041b      	lsls	r3, r3, #16
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	061b      	lsls	r3, r3, #24
 800750a:	431a      	orrs	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	071b      	lsls	r3, r3, #28
 8007510:	493d      	ldr	r1, [pc, #244]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007512:	4313      	orrs	r3, r2
 8007514:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007518:	4b3b      	ldr	r3, [pc, #236]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800751a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800751e:	f023 021f 	bic.w	r2, r3, #31
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007526:	3b01      	subs	r3, #1
 8007528:	4937      	ldr	r1, [pc, #220]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800752a:	4313      	orrs	r3, r2
 800752c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d01d      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800753c:	4b32      	ldr	r3, [pc, #200]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800753e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007542:	0e1b      	lsrs	r3, r3, #24
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800754a:	4b2f      	ldr	r3, [pc, #188]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800754c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007550:	0f1b      	lsrs	r3, r3, #28
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	019a      	lsls	r2, r3, #6
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	041b      	lsls	r3, r3, #16
 8007564:	431a      	orrs	r2, r3
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	061b      	lsls	r3, r3, #24
 800756a:	431a      	orrs	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	071b      	lsls	r3, r3, #28
 8007570:	4925      	ldr	r1, [pc, #148]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007572:	4313      	orrs	r3, r2
 8007574:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d011      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	019a      	lsls	r2, r3, #6
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	041b      	lsls	r3, r3, #16
 8007590:	431a      	orrs	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	061b      	lsls	r3, r3, #24
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	071b      	lsls	r3, r3, #28
 80075a0:	4919      	ldr	r1, [pc, #100]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075a8:	4b17      	ldr	r3, [pc, #92]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a16      	ldr	r2, [pc, #88]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075b4:	f7fc fed8 	bl	8004368 <HAL_GetTick>
 80075b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075ba:	e008      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075bc:	f7fc fed4 	bl	8004368 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b64      	cmp	r3, #100	@ 0x64
 80075c8:	d901      	bls.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e0d7      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0f0      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	f040 80cd 	bne.w	800777c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80075e2:	4b09      	ldr	r3, [pc, #36]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a08      	ldr	r2, [pc, #32]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ee:	f7fc febb 	bl	8004368 <HAL_GetTick>
 80075f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075f4:	e00a      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075f6:	f7fc feb7 	bl	8004368 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b64      	cmp	r3, #100	@ 0x64
 8007602:	d903      	bls.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e0ba      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007608:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800760c:	4b5e      	ldr	r3, [pc, #376]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007618:	d0ed      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d009      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007636:	2b00      	cmp	r3, #0
 8007638:	d02e      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763e:	2b00      	cmp	r3, #0
 8007640:	d12a      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007642:	4b51      	ldr	r3, [pc, #324]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007648:	0c1b      	lsrs	r3, r3, #16
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007650:	4b4d      	ldr	r3, [pc, #308]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007656:	0f1b      	lsrs	r3, r3, #28
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	019a      	lsls	r2, r3, #6
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	041b      	lsls	r3, r3, #16
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	061b      	lsls	r3, r3, #24
 8007670:	431a      	orrs	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	071b      	lsls	r3, r3, #28
 8007676:	4944      	ldr	r1, [pc, #272]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007678:	4313      	orrs	r3, r2
 800767a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800767e:	4b42      	ldr	r3, [pc, #264]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007684:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768c:	3b01      	subs	r3, #1
 800768e:	021b      	lsls	r3, r3, #8
 8007690:	493d      	ldr	r1, [pc, #244]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007692:	4313      	orrs	r3, r2
 8007694:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d022      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076ac:	d11d      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076ae:	4b36      	ldr	r3, [pc, #216]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b4:	0e1b      	lsrs	r3, r3, #24
 80076b6:	f003 030f 	and.w	r3, r3, #15
 80076ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80076bc:	4b32      	ldr	r3, [pc, #200]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c2:	0f1b      	lsrs	r3, r3, #28
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	019a      	lsls	r2, r3, #6
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	041b      	lsls	r3, r3, #16
 80076d6:	431a      	orrs	r2, r3
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	061b      	lsls	r3, r3, #24
 80076dc:	431a      	orrs	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	071b      	lsls	r3, r3, #28
 80076e2:	4929      	ldr	r1, [pc, #164]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d028      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076f6:	4b24      	ldr	r3, [pc, #144]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076fc:	0e1b      	lsrs	r3, r3, #24
 80076fe:	f003 030f 	and.w	r3, r3, #15
 8007702:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007704:	4b20      	ldr	r3, [pc, #128]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800770a:	0c1b      	lsrs	r3, r3, #16
 800770c:	f003 0303 	and.w	r3, r3, #3
 8007710:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	019a      	lsls	r2, r3, #6
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	041b      	lsls	r3, r3, #16
 800771c:	431a      	orrs	r2, r3
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	061b      	lsls	r3, r3, #24
 8007722:	431a      	orrs	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	071b      	lsls	r3, r3, #28
 800772a:	4917      	ldr	r1, [pc, #92]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800772c:	4313      	orrs	r3, r2
 800772e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007732:	4b15      	ldr	r3, [pc, #84]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007738:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007740:	4911      	ldr	r1, [pc, #68]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007742:	4313      	orrs	r3, r2
 8007744:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007748:	4b0f      	ldr	r3, [pc, #60]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a0e      	ldr	r2, [pc, #56]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800774e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007754:	f7fc fe08 	bl	8004368 <HAL_GetTick>
 8007758:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800775a:	e008      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800775c:	f7fc fe04 	bl	8004368 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b64      	cmp	r3, #100	@ 0x64
 8007768:	d901      	bls.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e007      	b.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800776e:	4b06      	ldr	r3, [pc, #24]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800777a:	d1ef      	bne.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3720      	adds	r7, #32
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	40023800 	.word	0x40023800

0800778c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a80      	ldr	r2, [pc, #512]	@ (800799c <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800779c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800779e:	4b80      	ldr	r3, [pc, #512]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077a4:	099b      	lsrs	r3, r3, #6
 80077a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80077ae:	4b7c      	ldr	r3, [pc, #496]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077b4:	0c1b      	lsrs	r3, r3, #16
 80077b6:	f003 0203 	and.w	r2, r3, #3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80077be:	4b78      	ldr	r3, [pc, #480]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077c4:	0e1b      	lsrs	r3, r3, #24
 80077c6:	f003 020f 	and.w	r2, r3, #15
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80077ce:	4b74      	ldr	r3, [pc, #464]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077d4:	0f1b      	lsrs	r3, r3, #28
 80077d6:	f003 0207 	and.w	r2, r3, #7
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 80077de:	4b70      	ldr	r3, [pc, #448]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e4:	099b      	lsrs	r3, r3, #6
 80077e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80077ee:	4b6c      	ldr	r3, [pc, #432]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80077f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f4:	0c1b      	lsrs	r3, r3, #16
 80077f6:	f003 0203 	and.w	r2, r3, #3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80077fe:	4b68      	ldr	r3, [pc, #416]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007804:	0e1b      	lsrs	r3, r3, #24
 8007806:	f003 020f 	and.w	r2, r3, #15
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800780e:	4b64      	ldr	r3, [pc, #400]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007814:	0f1b      	lsrs	r3, r3, #28
 8007816:	f003 0207 	and.w	r2, r3, #7
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800781e:	4b60      	ldr	r3, [pc, #384]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007824:	f003 021f 	and.w	r2, r3, #31
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800782c:	4b5c      	ldr	r3, [pc, #368]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800782e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007832:	0a1b      	lsrs	r3, r3, #8
 8007834:	f003 021f 	and.w	r2, r3, #31
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800783c:	4b58      	ldr	r3, [pc, #352]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800783e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007842:	0c1b      	lsrs	r3, r3, #16
 8007844:	f003 0203 	and.w	r2, r3, #3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800784c:	4b54      	ldr	r3, [pc, #336]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800784e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007852:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800785a:	4b51      	ldr	r3, [pc, #324]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800785c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007860:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8007868:	4b4d      	ldr	r3, [pc, #308]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8007874:	4b4a      	ldr	r3, [pc, #296]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800787a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8007882:	4b47      	ldr	r3, [pc, #284]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007888:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8007890:	4b43      	ldr	r3, [pc, #268]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007896:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800789e:	4b40      	ldr	r3, [pc, #256]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078a4:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80078ac:	4b3c      	ldr	r3, [pc, #240]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b2:	f003 0203 	and.w	r2, r3, #3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80078ba:	4b39      	ldr	r3, [pc, #228]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078c0:	f003 020c 	and.w	r2, r3, #12
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80078c8:	4b35      	ldr	r3, [pc, #212]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ce:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80078d6:	4b32      	ldr	r3, [pc, #200]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078dc:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80078e4:	4b2e      	ldr	r3, [pc, #184]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ea:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80078f2:	4b2b      	ldr	r3, [pc, #172]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80078f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078f8:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8007900:	4b27      	ldr	r3, [pc, #156]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007906:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800790e:	4b24      	ldr	r3, [pc, #144]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007914:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800791c:	4b20      	ldr	r3, [pc, #128]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800791e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007922:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800792a:	4b1d      	ldr	r3, [pc, #116]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800792c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007930:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8007938:	4b19      	ldr	r3, [pc, #100]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800793e:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007946:	4b16      	ldr	r3, [pc, #88]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800794c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007956:	4b12      	ldr	r3, [pc, #72]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800795e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007960:	4b0f      	ldr	r3, [pc, #60]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007964:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8007970:	4b0b      	ldr	r3, [pc, #44]	@ (80079a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007972:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007976:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d103      	bne.n	8007986 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8007984:	e003      	b.n	800798e <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800798c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800798e:	bf00      	nop
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	00fffff1 	.word	0x00fffff1
 80079a0:	40023800 	.word	0x40023800

080079a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80079c2:	f040 808d 	bne.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 80079c6:	4b93      	ldr	r3, [pc, #588]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079cc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80079d4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079dc:	d07c      	beq.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079e4:	d87b      	bhi.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079f2:	d039      	beq.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80079f4:	e073      	b.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80079f6:	4b87      	ldr	r3, [pc, #540]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d108      	bne.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a02:	4b84      	ldr	r3, [pc, #528]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a0a:	4a83      	ldr	r2, [pc, #524]	@ (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a10:	613b      	str	r3, [r7, #16]
 8007a12:	e007      	b.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007a14:	4b7f      	ldr	r3, [pc, #508]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a1c:	4a7f      	ldr	r2, [pc, #508]	@ (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a22:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007a24:	4b7b      	ldr	r3, [pc, #492]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a2a:	0e1b      	lsrs	r3, r3, #24
 8007a2c:	f003 030f 	and.w	r3, r3, #15
 8007a30:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007a32:	4b78      	ldr	r3, [pc, #480]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a38:	099b      	lsrs	r3, r3, #6
 8007a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	fb03 f202 	mul.w	r2, r3, r2
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007a4c:	4b71      	ldr	r3, [pc, #452]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a52:	0a1b      	lsrs	r3, r3, #8
 8007a54:	f003 031f 	and.w	r3, r3, #31
 8007a58:	3301      	adds	r3, #1
 8007a5a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a64:	617b      	str	r3, [r7, #20]
        break;
 8007a66:	e03b      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007a68:	4b6a      	ldr	r3, [pc, #424]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d108      	bne.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a74:	4b67      	ldr	r3, [pc, #412]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a7c:	4a66      	ldr	r2, [pc, #408]	@ (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a82:	613b      	str	r3, [r7, #16]
 8007a84:	e007      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007a86:	4b63      	ldr	r3, [pc, #396]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a8e:	4a63      	ldr	r2, [pc, #396]	@ (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a94:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007a96:	4b5f      	ldr	r3, [pc, #380]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a9c:	0e1b      	lsrs	r3, r3, #24
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aaa:	099b      	lsrs	r3, r3, #6
 8007aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	fb03 f202 	mul.w	r2, r3, r2
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007abc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007abe:	4b55      	ldr	r3, [pc, #340]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ac4:	f003 031f 	and.w	r3, r3, #31
 8007ac8:	3301      	adds	r3, #1
 8007aca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad4:	617b      	str	r3, [r7, #20]
        break;
 8007ad6:	e003      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ad8:	4b51      	ldr	r3, [pc, #324]	@ (8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007ada:	617b      	str	r3, [r7, #20]
        break;
 8007adc:	e000      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8007ade:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ae6:	f040 808d 	bne.w	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007aea:	4b4a      	ldr	r3, [pc, #296]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007af0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007af8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b00:	d07c      	beq.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b08:	d87b      	bhi.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d004      	beq.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b16:	d039      	beq.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007b18:	e073      	b.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d108      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b26:	4b3b      	ldr	r3, [pc, #236]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b2e:	4a3a      	ldr	r2, [pc, #232]	@ (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	e007      	b.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007b38:	4b36      	ldr	r3, [pc, #216]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b40:	4a36      	ldr	r2, [pc, #216]	@ (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b46:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007b48:	4b32      	ldr	r3, [pc, #200]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b4e:	0e1b      	lsrs	r3, r3, #24
 8007b50:	f003 030f 	and.w	r3, r3, #15
 8007b54:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007b56:	4b2f      	ldr	r3, [pc, #188]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b5c:	099b      	lsrs	r3, r3, #6
 8007b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	fb03 f202 	mul.w	r2, r3, r2
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007b70:	4b28      	ldr	r3, [pc, #160]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b76:	0a1b      	lsrs	r3, r3, #8
 8007b78:	f003 031f 	and.w	r3, r3, #31
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b88:	617b      	str	r3, [r7, #20]
        break;
 8007b8a:	e03b      	b.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007b8c:	4b21      	ldr	r3, [pc, #132]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d108      	bne.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b98:	4b1e      	ldr	r3, [pc, #120]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba6:	613b      	str	r3, [r7, #16]
 8007ba8:	e007      	b.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007baa:	4b1a      	ldr	r3, [pc, #104]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007bba:	4b16      	ldr	r3, [pc, #88]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bc0:	0e1b      	lsrs	r3, r3, #24
 8007bc2:	f003 030f 	and.w	r3, r3, #15
 8007bc6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007bc8:	4b12      	ldr	r3, [pc, #72]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bce:	099b      	lsrs	r3, r3, #6
 8007bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	fb03 f202 	mul.w	r2, r3, r2
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007be2:	4b0c      	ldr	r3, [pc, #48]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007be8:	f003 031f 	and.w	r3, r3, #31
 8007bec:	3301      	adds	r3, #1
 8007bee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf8:	617b      	str	r3, [r7, #20]
        break;
 8007bfa:	e003      	b.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007bfc:	4b08      	ldr	r3, [pc, #32]	@ (8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007bfe:	617b      	str	r3, [r7, #20]
        break;
 8007c00:	e000      	b.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8007c02:	bf00      	nop
      }
    }
  }

  return frequency;
 8007c04:	697b      	ldr	r3, [r7, #20]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	371c      	adds	r7, #28
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	40023800 	.word	0x40023800
 8007c18:	00f42400 	.word	0x00f42400
 8007c1c:	017d7840 	.word	0x017d7840
 8007c20:	00bb8000 	.word	0x00bb8000

08007c24 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d904      	bls.n	8007c46 <HAL_SAI_InitProtocol+0x22>
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	3b03      	subs	r3, #3
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d812      	bhi.n	8007c6a <HAL_SAI_InitProtocol+0x46>
 8007c44:	e008      	b.n	8007c58 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	68b9      	ldr	r1, [r7, #8]
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 f9df 	bl	8008010 <SAI_InitI2S>
 8007c52:	4603      	mov	r3, r0
 8007c54:	75fb      	strb	r3, [r7, #23]
      break;
 8007c56:	e00b      	b.n	8007c70 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	68b9      	ldr	r1, [r7, #8]
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fa84 	bl	800816c <SAI_InitPCM>
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]
      break;
 8007c68:	e002      	b.n	8007c70 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c6e:	bf00      	nop
  }

  if (status == HAL_OK)
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d104      	bne.n	8007c80 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 f808 	bl	8007c8c <HAL_SAI_Init>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e156      	b.n	8007f58 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d106      	bne.n	8007cc4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7f9 fdde 	bl	8001880 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 facd 	bl	800826c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d00c      	beq.n	8007cf4 <HAL_SAI_Init+0x68>
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d80d      	bhi.n	8007cfa <HAL_SAI_Init+0x6e>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <HAL_SAI_Init+0x5c>
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d003      	beq.n	8007cee <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8007ce6:	e008      	b.n	8007cfa <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	61fb      	str	r3, [r7, #28]
      break;
 8007cec:	e006      	b.n	8007cfc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007cee:	2310      	movs	r3, #16
 8007cf0:	61fb      	str	r3, [r7, #28]
      break;
 8007cf2:	e003      	b.n	8007cfc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007cf4:	2320      	movs	r3, #32
 8007cf6:	61fb      	str	r3, [r7, #28]
      break;
 8007cf8:	e000      	b.n	8007cfc <HAL_SAI_Init+0x70>
      break;
 8007cfa:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d81e      	bhi.n	8007d42 <HAL_SAI_Init+0xb6>
 8007d04:	a201      	add	r2, pc, #4	@ (adr r2, 8007d0c <HAL_SAI_Init+0x80>)
 8007d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0a:	bf00      	nop
 8007d0c:	08007d1d 	.word	0x08007d1d
 8007d10:	08007d23 	.word	0x08007d23
 8007d14:	08007d2b 	.word	0x08007d2b
 8007d18:	08007d33 	.word	0x08007d33
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	617b      	str	r3, [r7, #20]
    }
    break;
 8007d20:	e010      	b.n	8007d44 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007d22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d26:	617b      	str	r3, [r7, #20]
    }
    break;
 8007d28:	e00c      	b.n	8007d44 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007d2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d2e:	617b      	str	r3, [r7, #20]
    }
    break;
 8007d30:	e008      	b.n	8007d44 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007d32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d36:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	f043 0301 	orr.w	r3, r3, #1
 8007d3e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8007d40:	e000      	b.n	8007d44 <HAL_SAI_Init+0xb8>
    default:
      break;
 8007d42:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a85      	ldr	r2, [pc, #532]	@ (8007f60 <HAL_SAI_Init+0x2d4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d004      	beq.n	8007d58 <HAL_SAI_Init+0xcc>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a84      	ldr	r2, [pc, #528]	@ (8007f64 <HAL_SAI_Init+0x2d8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d103      	bne.n	8007d60 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8007d58:	4a83      	ldr	r2, [pc, #524]	@ (8007f68 <HAL_SAI_Init+0x2dc>)
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	e002      	b.n	8007d66 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007d60:	4a82      	ldr	r2, [pc, #520]	@ (8007f6c <HAL_SAI_Init+0x2e0>)
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d04c      	beq.n	8007e08 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a7a      	ldr	r2, [pc, #488]	@ (8007f60 <HAL_SAI_Init+0x2d4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d004      	beq.n	8007d86 <HAL_SAI_Init+0xfa>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a78      	ldr	r2, [pc, #480]	@ (8007f64 <HAL_SAI_Init+0x2d8>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d104      	bne.n	8007d90 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007d86:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007d8a:	f7ff fe0b 	bl	80079a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007d8e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a76      	ldr	r2, [pc, #472]	@ (8007f70 <HAL_SAI_Init+0x2e4>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d004      	beq.n	8007da4 <HAL_SAI_Init+0x118>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a75      	ldr	r2, [pc, #468]	@ (8007f74 <HAL_SAI_Init+0x2e8>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d104      	bne.n	8007dae <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007da4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007da8:	f7ff fdfc 	bl	80079a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007dac:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	461a      	mov	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	025b      	lsls	r3, r3, #9
 8007dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4a6b      	ldr	r2, [pc, #428]	@ (8007f78 <HAL_SAI_Init+0x2ec>)
 8007dca:	fba2 2303 	umull	r2, r3, r2, r3
 8007dce:	08da      	lsrs	r2, r3, #3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8007dd4:	68f9      	ldr	r1, [r7, #12]
 8007dd6:	4b68      	ldr	r3, [pc, #416]	@ (8007f78 <HAL_SAI_Init+0x2ec>)
 8007dd8:	fba3 2301 	umull	r2, r3, r3, r1
 8007ddc:	08da      	lsrs	r2, r3, #3
 8007dde:	4613      	mov	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	1aca      	subs	r2, r1, r3
 8007de8:	2a08      	cmp	r2, #8
 8007dea:	d904      	bls.n	8007df6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d104      	bne.n	8007e08 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	085a      	lsrs	r2, r3, #1
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <HAL_SAI_Init+0x18c>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d109      	bne.n	8007e2c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d101      	bne.n	8007e24 <HAL_SAI_Init+0x198>
 8007e20:	2300      	movs	r3, #0
 8007e22:	e001      	b.n	8007e28 <HAL_SAI_Init+0x19c>
 8007e24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e28:	61bb      	str	r3, [r7, #24]
 8007e2a:	e008      	b.n	8007e3e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d102      	bne.n	8007e3a <HAL_SAI_Init+0x1ae>
 8007e34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e38:	e000      	b.n	8007e3c <HAL_SAI_Init+0x1b0>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6819      	ldr	r1, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	4b4c      	ldr	r3, [pc, #304]	@ (8007f7c <HAL_SAI_Init+0x2f0>)
 8007e4a:	400b      	ands	r3, r1
 8007e4c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6819      	ldr	r1, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e5c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e62:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8007e76:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e82:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	051b      	lsls	r3, r3, #20
 8007e8a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6859      	ldr	r1, [r3, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	4b38      	ldr	r3, [pc, #224]	@ (8007f80 <HAL_SAI_Init+0x2f4>)
 8007ea0:	400b      	ands	r3, r1
 8007ea2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6859      	ldr	r1, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6899      	ldr	r1, [r3, #8]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8007f84 <HAL_SAI_Init+0x2f8>)
 8007ece:	400b      	ands	r3, r1
 8007ed0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6899      	ldr	r1, [r3, #8]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007edc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007ee2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8007ee8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8007eee:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007ef8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68d9      	ldr	r1, [r3, #12]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007f10:	400b      	ands	r3, r1
 8007f12:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68d9      	ldr	r1, [r3, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f22:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f28:	041b      	lsls	r3, r3, #16
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f30:	3b01      	subs	r3, #1
 8007f32:	021b      	lsls	r3, r3, #8
 8007f34:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3720      	adds	r7, #32
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	40015804 	.word	0x40015804
 8007f64:	40015824 	.word	0x40015824
 8007f68:	40015800 	.word	0x40015800
 8007f6c:	40015c00 	.word	0x40015c00
 8007f70:	40015c04 	.word	0x40015c04
 8007f74:	40015c24 	.word	0x40015c24
 8007f78:	cccccccd 	.word	0xcccccccd
 8007f7c:	ff05c010 	.word	0xff05c010
 8007f80:	ffff1ff0 	.word	0xffff1ff0
 8007f84:	fff88000 	.word	0xfff88000

08007f88 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e027      	b.n	8007fea <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb2:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f959 	bl	800826c <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f042 0208 	orr.w	r2, r2, #8
 8007fc8:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7f9 fd72 	bl	8001ab4 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008000:	b2db      	uxtb	r3, r3
}
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
	...

08008010 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <SAI_InitI2S+0x2a>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2b02      	cmp	r3, #2
 8008038:	d103      	bne.n	8008042 <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008040:	e002      	b.n	8008048 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800804e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008056:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e076      	b.n	8008160 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d107      	bne.n	8008088 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008084:	651a      	str	r2, [r3, #80]	@ 0x50
 8008086:	e006      	b.n	8008096 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800808e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b03      	cmp	r3, #3
 800809a:	d84f      	bhi.n	800813c <SAI_InitI2S+0x12c>
 800809c:	a201      	add	r2, pc, #4	@ (adr r2, 80080a4 <SAI_InitI2S+0x94>)
 800809e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a2:	bf00      	nop
 80080a4:	080080b5 	.word	0x080080b5
 80080a8:	080080d7 	.word	0x080080d7
 80080ac:	080080f9 	.word	0x080080f9
 80080b0:	0800811b 	.word	0x0800811b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2280      	movs	r2, #128	@ 0x80
 80080b8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	085b      	lsrs	r3, r3, #1
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	085b      	lsrs	r3, r3, #1
 80080c8:	011a      	lsls	r2, r3, #4
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2240      	movs	r2, #64	@ 0x40
 80080d2:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80080d4:	e034      	b.n	8008140 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2280      	movs	r2, #128	@ 0x80
 80080da:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	085b      	lsrs	r3, r3, #1
 80080e0:	019a      	lsls	r2, r3, #6
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	085b      	lsrs	r3, r3, #1
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2280      	movs	r2, #128	@ 0x80
 80080f4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80080f6:	e023      	b.n	8008140 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	22c0      	movs	r2, #192	@ 0xc0
 80080fc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	085b      	lsrs	r3, r3, #1
 8008102:	019a      	lsls	r2, r3, #6
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	085b      	lsrs	r3, r3, #1
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2280      	movs	r2, #128	@ 0x80
 8008116:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8008118:	e012      	b.n	8008140 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	22e0      	movs	r2, #224	@ 0xe0
 800811e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	085b      	lsrs	r3, r3, #1
 8008124:	019a      	lsls	r2, r3, #6
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	085b      	lsrs	r3, r3, #1
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2280      	movs	r2, #128	@ 0x80
 8008138:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800813a:	e001      	b.n	8008140 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e00f      	b.n	8008160 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b02      	cmp	r3, #2
 8008144:	d10b      	bne.n	800815e <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d102      	bne.n	8008152 <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2210      	movs	r2, #16
 8008150:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b02      	cmp	r3, #2
 8008156:	d102      	bne.n	800815e <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2208      	movs	r2, #8
 800815c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <SAI_InitPCM+0x2a>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d103      	bne.n	800819e <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800819c:	e002      	b.n	80081a4 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80081b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80081b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80081cc:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2b04      	cmp	r3, #4
 80081d2:	d103      	bne.n	80081dc <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80081da:	e002      	b.n	80081e2 <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	220d      	movs	r2, #13
 80081e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d837      	bhi.n	8008258 <SAI_InitPCM+0xec>
 80081e8:	a201      	add	r2, pc, #4	@ (adr r2, 80081f0 <SAI_InitPCM+0x84>)
 80081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ee:	bf00      	nop
 80081f0:	08008201 	.word	0x08008201
 80081f4:	08008217 	.word	0x08008217
 80081f8:	0800822d 	.word	0x0800822d
 80081fc:	08008243 	.word	0x08008243
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2280      	movs	r2, #128	@ 0x80
 8008204:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	011a      	lsls	r2, r3, #4
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2240      	movs	r2, #64	@ 0x40
 8008212:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8008214:	e022      	b.n	800825c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2280      	movs	r2, #128	@ 0x80
 800821a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2280      	movs	r2, #128	@ 0x80
 8008228:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800822a:	e017      	b.n	800825c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	22c0      	movs	r2, #192	@ 0xc0
 8008230:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2280      	movs	r2, #128	@ 0x80
 800823e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8008240:	e00c      	b.n	800825c <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	22e0      	movs	r2, #224	@ 0xe0
 8008246:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2280      	movs	r2, #128	@ 0x80
 8008254:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8008256:	e001      	b.n	800825c <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e000      	b.n	800825e <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop

0800826c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008274:	4b17      	ldr	r3, [pc, #92]	@ (80082d4 <SAI_Disable+0x68>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a17      	ldr	r2, [pc, #92]	@ (80082d8 <SAI_Disable+0x6c>)
 800827a:	fba2 2303 	umull	r2, r3, r2, r3
 800827e:	0b1b      	lsrs	r3, r3, #12
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008296:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	1e5a      	subs	r2, r3, #1
 800829c:	60fa      	str	r2, [r7, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10a      	bne.n	80082b8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	72fb      	strb	r3, [r7, #11]
      break;
 80082b6:	e006      	b.n	80082c6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e8      	bne.n	8008298 <SAI_Disable+0x2c>

  return status;
 80082c6:	7afb      	ldrb	r3, [r7, #11]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	20000004 	.word	0x20000004
 80082d8:	95cbec1b 	.word	0x95cbec1b

080082dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e09d      	b.n	800842a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d108      	bne.n	8008308 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082fe:	d009      	beq.n	8008314 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	61da      	str	r2, [r3, #28]
 8008306:	e005      	b.n	8008314 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d106      	bne.n	8008334 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7f9 fa44 	bl	80017bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2202      	movs	r2, #2
 8008338:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800834a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008354:	d902      	bls.n	800835c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	e002      	b.n	8008362 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800835c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008360:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800836a:	d007      	beq.n	800837c <HAL_SPI_Init+0xa0>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008374:	d002      	beq.n	800837c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800838c:	431a      	orrs	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f003 0302 	and.w	r3, r3, #2
 8008396:	431a      	orrs	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	431a      	orrs	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083aa:	431a      	orrs	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083b4:	431a      	orrs	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083be:	ea42 0103 	orr.w	r1, r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	0c1b      	lsrs	r3, r3, #16
 80083d8:	f003 0204 	and.w	r2, r3, #4
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e0:	f003 0310 	and.w	r3, r3, #16
 80083e4:	431a      	orrs	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ea:	f003 0308 	and.w	r3, r3, #8
 80083ee:	431a      	orrs	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80083f8:	ea42 0103 	orr.w	r1, r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69da      	ldr	r2, [r3, #28]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008418:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <siprintf>:
 8008434:	b40e      	push	{r1, r2, r3}
 8008436:	b500      	push	{lr}
 8008438:	b09c      	sub	sp, #112	@ 0x70
 800843a:	ab1d      	add	r3, sp, #116	@ 0x74
 800843c:	9002      	str	r0, [sp, #8]
 800843e:	9006      	str	r0, [sp, #24]
 8008440:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008444:	4809      	ldr	r0, [pc, #36]	@ (800846c <siprintf+0x38>)
 8008446:	9107      	str	r1, [sp, #28]
 8008448:	9104      	str	r1, [sp, #16]
 800844a:	4909      	ldr	r1, [pc, #36]	@ (8008470 <siprintf+0x3c>)
 800844c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008450:	9105      	str	r1, [sp, #20]
 8008452:	6800      	ldr	r0, [r0, #0]
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	a902      	add	r1, sp, #8
 8008458:	f000 f994 	bl	8008784 <_svfiprintf_r>
 800845c:	9b02      	ldr	r3, [sp, #8]
 800845e:	2200      	movs	r2, #0
 8008460:	701a      	strb	r2, [r3, #0]
 8008462:	b01c      	add	sp, #112	@ 0x70
 8008464:	f85d eb04 	ldr.w	lr, [sp], #4
 8008468:	b003      	add	sp, #12
 800846a:	4770      	bx	lr
 800846c:	20000048 	.word	0x20000048
 8008470:	ffff0208 	.word	0xffff0208

08008474 <memset>:
 8008474:	4402      	add	r2, r0
 8008476:	4603      	mov	r3, r0
 8008478:	4293      	cmp	r3, r2
 800847a:	d100      	bne.n	800847e <memset+0xa>
 800847c:	4770      	bx	lr
 800847e:	f803 1b01 	strb.w	r1, [r3], #1
 8008482:	e7f9      	b.n	8008478 <memset+0x4>

08008484 <__errno>:
 8008484:	4b01      	ldr	r3, [pc, #4]	@ (800848c <__errno+0x8>)
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	20000048 	.word	0x20000048

08008490 <__libc_init_array>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	4d0d      	ldr	r5, [pc, #52]	@ (80084c8 <__libc_init_array+0x38>)
 8008494:	4c0d      	ldr	r4, [pc, #52]	@ (80084cc <__libc_init_array+0x3c>)
 8008496:	1b64      	subs	r4, r4, r5
 8008498:	10a4      	asrs	r4, r4, #2
 800849a:	2600      	movs	r6, #0
 800849c:	42a6      	cmp	r6, r4
 800849e:	d109      	bne.n	80084b4 <__libc_init_array+0x24>
 80084a0:	4d0b      	ldr	r5, [pc, #44]	@ (80084d0 <__libc_init_array+0x40>)
 80084a2:	4c0c      	ldr	r4, [pc, #48]	@ (80084d4 <__libc_init_array+0x44>)
 80084a4:	f000 fc66 	bl	8008d74 <_init>
 80084a8:	1b64      	subs	r4, r4, r5
 80084aa:	10a4      	asrs	r4, r4, #2
 80084ac:	2600      	movs	r6, #0
 80084ae:	42a6      	cmp	r6, r4
 80084b0:	d105      	bne.n	80084be <__libc_init_array+0x2e>
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b8:	4798      	blx	r3
 80084ba:	3601      	adds	r6, #1
 80084bc:	e7ee      	b.n	800849c <__libc_init_array+0xc>
 80084be:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c2:	4798      	blx	r3
 80084c4:	3601      	adds	r6, #1
 80084c6:	e7f2      	b.n	80084ae <__libc_init_array+0x1e>
 80084c8:	08009270 	.word	0x08009270
 80084cc:	08009270 	.word	0x08009270
 80084d0:	08009270 	.word	0x08009270
 80084d4:	08009274 	.word	0x08009274

080084d8 <__retarget_lock_acquire_recursive>:
 80084d8:	4770      	bx	lr

080084da <__retarget_lock_release_recursive>:
 80084da:	4770      	bx	lr

080084dc <_free_r>:
 80084dc:	b538      	push	{r3, r4, r5, lr}
 80084de:	4605      	mov	r5, r0
 80084e0:	2900      	cmp	r1, #0
 80084e2:	d041      	beq.n	8008568 <_free_r+0x8c>
 80084e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084e8:	1f0c      	subs	r4, r1, #4
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	bfb8      	it	lt
 80084ee:	18e4      	addlt	r4, r4, r3
 80084f0:	f000 f8e0 	bl	80086b4 <__malloc_lock>
 80084f4:	4a1d      	ldr	r2, [pc, #116]	@ (800856c <_free_r+0x90>)
 80084f6:	6813      	ldr	r3, [r2, #0]
 80084f8:	b933      	cbnz	r3, 8008508 <_free_r+0x2c>
 80084fa:	6063      	str	r3, [r4, #4]
 80084fc:	6014      	str	r4, [r2, #0]
 80084fe:	4628      	mov	r0, r5
 8008500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008504:	f000 b8dc 	b.w	80086c0 <__malloc_unlock>
 8008508:	42a3      	cmp	r3, r4
 800850a:	d908      	bls.n	800851e <_free_r+0x42>
 800850c:	6820      	ldr	r0, [r4, #0]
 800850e:	1821      	adds	r1, r4, r0
 8008510:	428b      	cmp	r3, r1
 8008512:	bf01      	itttt	eq
 8008514:	6819      	ldreq	r1, [r3, #0]
 8008516:	685b      	ldreq	r3, [r3, #4]
 8008518:	1809      	addeq	r1, r1, r0
 800851a:	6021      	streq	r1, [r4, #0]
 800851c:	e7ed      	b.n	80084fa <_free_r+0x1e>
 800851e:	461a      	mov	r2, r3
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	b10b      	cbz	r3, 8008528 <_free_r+0x4c>
 8008524:	42a3      	cmp	r3, r4
 8008526:	d9fa      	bls.n	800851e <_free_r+0x42>
 8008528:	6811      	ldr	r1, [r2, #0]
 800852a:	1850      	adds	r0, r2, r1
 800852c:	42a0      	cmp	r0, r4
 800852e:	d10b      	bne.n	8008548 <_free_r+0x6c>
 8008530:	6820      	ldr	r0, [r4, #0]
 8008532:	4401      	add	r1, r0
 8008534:	1850      	adds	r0, r2, r1
 8008536:	4283      	cmp	r3, r0
 8008538:	6011      	str	r1, [r2, #0]
 800853a:	d1e0      	bne.n	80084fe <_free_r+0x22>
 800853c:	6818      	ldr	r0, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	6053      	str	r3, [r2, #4]
 8008542:	4408      	add	r0, r1
 8008544:	6010      	str	r0, [r2, #0]
 8008546:	e7da      	b.n	80084fe <_free_r+0x22>
 8008548:	d902      	bls.n	8008550 <_free_r+0x74>
 800854a:	230c      	movs	r3, #12
 800854c:	602b      	str	r3, [r5, #0]
 800854e:	e7d6      	b.n	80084fe <_free_r+0x22>
 8008550:	6820      	ldr	r0, [r4, #0]
 8008552:	1821      	adds	r1, r4, r0
 8008554:	428b      	cmp	r3, r1
 8008556:	bf04      	itt	eq
 8008558:	6819      	ldreq	r1, [r3, #0]
 800855a:	685b      	ldreq	r3, [r3, #4]
 800855c:	6063      	str	r3, [r4, #4]
 800855e:	bf04      	itt	eq
 8008560:	1809      	addeq	r1, r1, r0
 8008562:	6021      	streq	r1, [r4, #0]
 8008564:	6054      	str	r4, [r2, #4]
 8008566:	e7ca      	b.n	80084fe <_free_r+0x22>
 8008568:	bd38      	pop	{r3, r4, r5, pc}
 800856a:	bf00      	nop
 800856c:	200008ec 	.word	0x200008ec

08008570 <sbrk_aligned>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	4e0f      	ldr	r6, [pc, #60]	@ (80085b0 <sbrk_aligned+0x40>)
 8008574:	460c      	mov	r4, r1
 8008576:	6831      	ldr	r1, [r6, #0]
 8008578:	4605      	mov	r5, r0
 800857a:	b911      	cbnz	r1, 8008582 <sbrk_aligned+0x12>
 800857c:	f000 fba6 	bl	8008ccc <_sbrk_r>
 8008580:	6030      	str	r0, [r6, #0]
 8008582:	4621      	mov	r1, r4
 8008584:	4628      	mov	r0, r5
 8008586:	f000 fba1 	bl	8008ccc <_sbrk_r>
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	d103      	bne.n	8008596 <sbrk_aligned+0x26>
 800858e:	f04f 34ff 	mov.w	r4, #4294967295
 8008592:	4620      	mov	r0, r4
 8008594:	bd70      	pop	{r4, r5, r6, pc}
 8008596:	1cc4      	adds	r4, r0, #3
 8008598:	f024 0403 	bic.w	r4, r4, #3
 800859c:	42a0      	cmp	r0, r4
 800859e:	d0f8      	beq.n	8008592 <sbrk_aligned+0x22>
 80085a0:	1a21      	subs	r1, r4, r0
 80085a2:	4628      	mov	r0, r5
 80085a4:	f000 fb92 	bl	8008ccc <_sbrk_r>
 80085a8:	3001      	adds	r0, #1
 80085aa:	d1f2      	bne.n	8008592 <sbrk_aligned+0x22>
 80085ac:	e7ef      	b.n	800858e <sbrk_aligned+0x1e>
 80085ae:	bf00      	nop
 80085b0:	200008e8 	.word	0x200008e8

080085b4 <_malloc_r>:
 80085b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b8:	1ccd      	adds	r5, r1, #3
 80085ba:	f025 0503 	bic.w	r5, r5, #3
 80085be:	3508      	adds	r5, #8
 80085c0:	2d0c      	cmp	r5, #12
 80085c2:	bf38      	it	cc
 80085c4:	250c      	movcc	r5, #12
 80085c6:	2d00      	cmp	r5, #0
 80085c8:	4606      	mov	r6, r0
 80085ca:	db01      	blt.n	80085d0 <_malloc_r+0x1c>
 80085cc:	42a9      	cmp	r1, r5
 80085ce:	d904      	bls.n	80085da <_malloc_r+0x26>
 80085d0:	230c      	movs	r3, #12
 80085d2:	6033      	str	r3, [r6, #0]
 80085d4:	2000      	movs	r0, #0
 80085d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086b0 <_malloc_r+0xfc>
 80085de:	f000 f869 	bl	80086b4 <__malloc_lock>
 80085e2:	f8d8 3000 	ldr.w	r3, [r8]
 80085e6:	461c      	mov	r4, r3
 80085e8:	bb44      	cbnz	r4, 800863c <_malloc_r+0x88>
 80085ea:	4629      	mov	r1, r5
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7ff ffbf 	bl	8008570 <sbrk_aligned>
 80085f2:	1c43      	adds	r3, r0, #1
 80085f4:	4604      	mov	r4, r0
 80085f6:	d158      	bne.n	80086aa <_malloc_r+0xf6>
 80085f8:	f8d8 4000 	ldr.w	r4, [r8]
 80085fc:	4627      	mov	r7, r4
 80085fe:	2f00      	cmp	r7, #0
 8008600:	d143      	bne.n	800868a <_malloc_r+0xd6>
 8008602:	2c00      	cmp	r4, #0
 8008604:	d04b      	beq.n	800869e <_malloc_r+0xea>
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	4639      	mov	r1, r7
 800860a:	4630      	mov	r0, r6
 800860c:	eb04 0903 	add.w	r9, r4, r3
 8008610:	f000 fb5c 	bl	8008ccc <_sbrk_r>
 8008614:	4581      	cmp	r9, r0
 8008616:	d142      	bne.n	800869e <_malloc_r+0xea>
 8008618:	6821      	ldr	r1, [r4, #0]
 800861a:	1a6d      	subs	r5, r5, r1
 800861c:	4629      	mov	r1, r5
 800861e:	4630      	mov	r0, r6
 8008620:	f7ff ffa6 	bl	8008570 <sbrk_aligned>
 8008624:	3001      	adds	r0, #1
 8008626:	d03a      	beq.n	800869e <_malloc_r+0xea>
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	442b      	add	r3, r5
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	f8d8 3000 	ldr.w	r3, [r8]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	bb62      	cbnz	r2, 8008690 <_malloc_r+0xdc>
 8008636:	f8c8 7000 	str.w	r7, [r8]
 800863a:	e00f      	b.n	800865c <_malloc_r+0xa8>
 800863c:	6822      	ldr	r2, [r4, #0]
 800863e:	1b52      	subs	r2, r2, r5
 8008640:	d420      	bmi.n	8008684 <_malloc_r+0xd0>
 8008642:	2a0b      	cmp	r2, #11
 8008644:	d917      	bls.n	8008676 <_malloc_r+0xc2>
 8008646:	1961      	adds	r1, r4, r5
 8008648:	42a3      	cmp	r3, r4
 800864a:	6025      	str	r5, [r4, #0]
 800864c:	bf18      	it	ne
 800864e:	6059      	strne	r1, [r3, #4]
 8008650:	6863      	ldr	r3, [r4, #4]
 8008652:	bf08      	it	eq
 8008654:	f8c8 1000 	streq.w	r1, [r8]
 8008658:	5162      	str	r2, [r4, r5]
 800865a:	604b      	str	r3, [r1, #4]
 800865c:	4630      	mov	r0, r6
 800865e:	f000 f82f 	bl	80086c0 <__malloc_unlock>
 8008662:	f104 000b 	add.w	r0, r4, #11
 8008666:	1d23      	adds	r3, r4, #4
 8008668:	f020 0007 	bic.w	r0, r0, #7
 800866c:	1ac2      	subs	r2, r0, r3
 800866e:	bf1c      	itt	ne
 8008670:	1a1b      	subne	r3, r3, r0
 8008672:	50a3      	strne	r3, [r4, r2]
 8008674:	e7af      	b.n	80085d6 <_malloc_r+0x22>
 8008676:	6862      	ldr	r2, [r4, #4]
 8008678:	42a3      	cmp	r3, r4
 800867a:	bf0c      	ite	eq
 800867c:	f8c8 2000 	streq.w	r2, [r8]
 8008680:	605a      	strne	r2, [r3, #4]
 8008682:	e7eb      	b.n	800865c <_malloc_r+0xa8>
 8008684:	4623      	mov	r3, r4
 8008686:	6864      	ldr	r4, [r4, #4]
 8008688:	e7ae      	b.n	80085e8 <_malloc_r+0x34>
 800868a:	463c      	mov	r4, r7
 800868c:	687f      	ldr	r7, [r7, #4]
 800868e:	e7b6      	b.n	80085fe <_malloc_r+0x4a>
 8008690:	461a      	mov	r2, r3
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	42a3      	cmp	r3, r4
 8008696:	d1fb      	bne.n	8008690 <_malloc_r+0xdc>
 8008698:	2300      	movs	r3, #0
 800869a:	6053      	str	r3, [r2, #4]
 800869c:	e7de      	b.n	800865c <_malloc_r+0xa8>
 800869e:	230c      	movs	r3, #12
 80086a0:	6033      	str	r3, [r6, #0]
 80086a2:	4630      	mov	r0, r6
 80086a4:	f000 f80c 	bl	80086c0 <__malloc_unlock>
 80086a8:	e794      	b.n	80085d4 <_malloc_r+0x20>
 80086aa:	6005      	str	r5, [r0, #0]
 80086ac:	e7d6      	b.n	800865c <_malloc_r+0xa8>
 80086ae:	bf00      	nop
 80086b0:	200008ec 	.word	0x200008ec

080086b4 <__malloc_lock>:
 80086b4:	4801      	ldr	r0, [pc, #4]	@ (80086bc <__malloc_lock+0x8>)
 80086b6:	f7ff bf0f 	b.w	80084d8 <__retarget_lock_acquire_recursive>
 80086ba:	bf00      	nop
 80086bc:	200008e4 	.word	0x200008e4

080086c0 <__malloc_unlock>:
 80086c0:	4801      	ldr	r0, [pc, #4]	@ (80086c8 <__malloc_unlock+0x8>)
 80086c2:	f7ff bf0a 	b.w	80084da <__retarget_lock_release_recursive>
 80086c6:	bf00      	nop
 80086c8:	200008e4 	.word	0x200008e4

080086cc <__ssputs_r>:
 80086cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d0:	688e      	ldr	r6, [r1, #8]
 80086d2:	461f      	mov	r7, r3
 80086d4:	42be      	cmp	r6, r7
 80086d6:	680b      	ldr	r3, [r1, #0]
 80086d8:	4682      	mov	sl, r0
 80086da:	460c      	mov	r4, r1
 80086dc:	4690      	mov	r8, r2
 80086de:	d82d      	bhi.n	800873c <__ssputs_r+0x70>
 80086e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086e8:	d026      	beq.n	8008738 <__ssputs_r+0x6c>
 80086ea:	6965      	ldr	r5, [r4, #20]
 80086ec:	6909      	ldr	r1, [r1, #16]
 80086ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086f2:	eba3 0901 	sub.w	r9, r3, r1
 80086f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086fa:	1c7b      	adds	r3, r7, #1
 80086fc:	444b      	add	r3, r9
 80086fe:	106d      	asrs	r5, r5, #1
 8008700:	429d      	cmp	r5, r3
 8008702:	bf38      	it	cc
 8008704:	461d      	movcc	r5, r3
 8008706:	0553      	lsls	r3, r2, #21
 8008708:	d527      	bpl.n	800875a <__ssputs_r+0x8e>
 800870a:	4629      	mov	r1, r5
 800870c:	f7ff ff52 	bl	80085b4 <_malloc_r>
 8008710:	4606      	mov	r6, r0
 8008712:	b360      	cbz	r0, 800876e <__ssputs_r+0xa2>
 8008714:	6921      	ldr	r1, [r4, #16]
 8008716:	464a      	mov	r2, r9
 8008718:	f000 fae8 	bl	8008cec <memcpy>
 800871c:	89a3      	ldrh	r3, [r4, #12]
 800871e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008726:	81a3      	strh	r3, [r4, #12]
 8008728:	6126      	str	r6, [r4, #16]
 800872a:	6165      	str	r5, [r4, #20]
 800872c:	444e      	add	r6, r9
 800872e:	eba5 0509 	sub.w	r5, r5, r9
 8008732:	6026      	str	r6, [r4, #0]
 8008734:	60a5      	str	r5, [r4, #8]
 8008736:	463e      	mov	r6, r7
 8008738:	42be      	cmp	r6, r7
 800873a:	d900      	bls.n	800873e <__ssputs_r+0x72>
 800873c:	463e      	mov	r6, r7
 800873e:	6820      	ldr	r0, [r4, #0]
 8008740:	4632      	mov	r2, r6
 8008742:	4641      	mov	r1, r8
 8008744:	f000 faa8 	bl	8008c98 <memmove>
 8008748:	68a3      	ldr	r3, [r4, #8]
 800874a:	1b9b      	subs	r3, r3, r6
 800874c:	60a3      	str	r3, [r4, #8]
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	4433      	add	r3, r6
 8008752:	6023      	str	r3, [r4, #0]
 8008754:	2000      	movs	r0, #0
 8008756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800875a:	462a      	mov	r2, r5
 800875c:	f000 fad4 	bl	8008d08 <_realloc_r>
 8008760:	4606      	mov	r6, r0
 8008762:	2800      	cmp	r0, #0
 8008764:	d1e0      	bne.n	8008728 <__ssputs_r+0x5c>
 8008766:	6921      	ldr	r1, [r4, #16]
 8008768:	4650      	mov	r0, sl
 800876a:	f7ff feb7 	bl	80084dc <_free_r>
 800876e:	230c      	movs	r3, #12
 8008770:	f8ca 3000 	str.w	r3, [sl]
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	e7e9      	b.n	8008756 <__ssputs_r+0x8a>
	...

08008784 <_svfiprintf_r>:
 8008784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	4698      	mov	r8, r3
 800878a:	898b      	ldrh	r3, [r1, #12]
 800878c:	061b      	lsls	r3, r3, #24
 800878e:	b09d      	sub	sp, #116	@ 0x74
 8008790:	4607      	mov	r7, r0
 8008792:	460d      	mov	r5, r1
 8008794:	4614      	mov	r4, r2
 8008796:	d510      	bpl.n	80087ba <_svfiprintf_r+0x36>
 8008798:	690b      	ldr	r3, [r1, #16]
 800879a:	b973      	cbnz	r3, 80087ba <_svfiprintf_r+0x36>
 800879c:	2140      	movs	r1, #64	@ 0x40
 800879e:	f7ff ff09 	bl	80085b4 <_malloc_r>
 80087a2:	6028      	str	r0, [r5, #0]
 80087a4:	6128      	str	r0, [r5, #16]
 80087a6:	b930      	cbnz	r0, 80087b6 <_svfiprintf_r+0x32>
 80087a8:	230c      	movs	r3, #12
 80087aa:	603b      	str	r3, [r7, #0]
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295
 80087b0:	b01d      	add	sp, #116	@ 0x74
 80087b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b6:	2340      	movs	r3, #64	@ 0x40
 80087b8:	616b      	str	r3, [r5, #20]
 80087ba:	2300      	movs	r3, #0
 80087bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80087be:	2320      	movs	r3, #32
 80087c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c8:	2330      	movs	r3, #48	@ 0x30
 80087ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008968 <_svfiprintf_r+0x1e4>
 80087ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087d2:	f04f 0901 	mov.w	r9, #1
 80087d6:	4623      	mov	r3, r4
 80087d8:	469a      	mov	sl, r3
 80087da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087de:	b10a      	cbz	r2, 80087e4 <_svfiprintf_r+0x60>
 80087e0:	2a25      	cmp	r2, #37	@ 0x25
 80087e2:	d1f9      	bne.n	80087d8 <_svfiprintf_r+0x54>
 80087e4:	ebba 0b04 	subs.w	fp, sl, r4
 80087e8:	d00b      	beq.n	8008802 <_svfiprintf_r+0x7e>
 80087ea:	465b      	mov	r3, fp
 80087ec:	4622      	mov	r2, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	4638      	mov	r0, r7
 80087f2:	f7ff ff6b 	bl	80086cc <__ssputs_r>
 80087f6:	3001      	adds	r0, #1
 80087f8:	f000 80a7 	beq.w	800894a <_svfiprintf_r+0x1c6>
 80087fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087fe:	445a      	add	r2, fp
 8008800:	9209      	str	r2, [sp, #36]	@ 0x24
 8008802:	f89a 3000 	ldrb.w	r3, [sl]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 809f 	beq.w	800894a <_svfiprintf_r+0x1c6>
 800880c:	2300      	movs	r3, #0
 800880e:	f04f 32ff 	mov.w	r2, #4294967295
 8008812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008816:	f10a 0a01 	add.w	sl, sl, #1
 800881a:	9304      	str	r3, [sp, #16]
 800881c:	9307      	str	r3, [sp, #28]
 800881e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008822:	931a      	str	r3, [sp, #104]	@ 0x68
 8008824:	4654      	mov	r4, sl
 8008826:	2205      	movs	r2, #5
 8008828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882c:	484e      	ldr	r0, [pc, #312]	@ (8008968 <_svfiprintf_r+0x1e4>)
 800882e:	f7f7 fcef 	bl	8000210 <memchr>
 8008832:	9a04      	ldr	r2, [sp, #16]
 8008834:	b9d8      	cbnz	r0, 800886e <_svfiprintf_r+0xea>
 8008836:	06d0      	lsls	r0, r2, #27
 8008838:	bf44      	itt	mi
 800883a:	2320      	movmi	r3, #32
 800883c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008840:	0711      	lsls	r1, r2, #28
 8008842:	bf44      	itt	mi
 8008844:	232b      	movmi	r3, #43	@ 0x2b
 8008846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800884a:	f89a 3000 	ldrb.w	r3, [sl]
 800884e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008850:	d015      	beq.n	800887e <_svfiprintf_r+0xfa>
 8008852:	9a07      	ldr	r2, [sp, #28]
 8008854:	4654      	mov	r4, sl
 8008856:	2000      	movs	r0, #0
 8008858:	f04f 0c0a 	mov.w	ip, #10
 800885c:	4621      	mov	r1, r4
 800885e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008862:	3b30      	subs	r3, #48	@ 0x30
 8008864:	2b09      	cmp	r3, #9
 8008866:	d94b      	bls.n	8008900 <_svfiprintf_r+0x17c>
 8008868:	b1b0      	cbz	r0, 8008898 <_svfiprintf_r+0x114>
 800886a:	9207      	str	r2, [sp, #28]
 800886c:	e014      	b.n	8008898 <_svfiprintf_r+0x114>
 800886e:	eba0 0308 	sub.w	r3, r0, r8
 8008872:	fa09 f303 	lsl.w	r3, r9, r3
 8008876:	4313      	orrs	r3, r2
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	46a2      	mov	sl, r4
 800887c:	e7d2      	b.n	8008824 <_svfiprintf_r+0xa0>
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	1d19      	adds	r1, r3, #4
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	9103      	str	r1, [sp, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	bfbb      	ittet	lt
 800888a:	425b      	neglt	r3, r3
 800888c:	f042 0202 	orrlt.w	r2, r2, #2
 8008890:	9307      	strge	r3, [sp, #28]
 8008892:	9307      	strlt	r3, [sp, #28]
 8008894:	bfb8      	it	lt
 8008896:	9204      	strlt	r2, [sp, #16]
 8008898:	7823      	ldrb	r3, [r4, #0]
 800889a:	2b2e      	cmp	r3, #46	@ 0x2e
 800889c:	d10a      	bne.n	80088b4 <_svfiprintf_r+0x130>
 800889e:	7863      	ldrb	r3, [r4, #1]
 80088a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80088a2:	d132      	bne.n	800890a <_svfiprintf_r+0x186>
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	1d1a      	adds	r2, r3, #4
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	9203      	str	r2, [sp, #12]
 80088ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088b0:	3402      	adds	r4, #2
 80088b2:	9305      	str	r3, [sp, #20]
 80088b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008978 <_svfiprintf_r+0x1f4>
 80088b8:	7821      	ldrb	r1, [r4, #0]
 80088ba:	2203      	movs	r2, #3
 80088bc:	4650      	mov	r0, sl
 80088be:	f7f7 fca7 	bl	8000210 <memchr>
 80088c2:	b138      	cbz	r0, 80088d4 <_svfiprintf_r+0x150>
 80088c4:	9b04      	ldr	r3, [sp, #16]
 80088c6:	eba0 000a 	sub.w	r0, r0, sl
 80088ca:	2240      	movs	r2, #64	@ 0x40
 80088cc:	4082      	lsls	r2, r0
 80088ce:	4313      	orrs	r3, r2
 80088d0:	3401      	adds	r4, #1
 80088d2:	9304      	str	r3, [sp, #16]
 80088d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d8:	4824      	ldr	r0, [pc, #144]	@ (800896c <_svfiprintf_r+0x1e8>)
 80088da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088de:	2206      	movs	r2, #6
 80088e0:	f7f7 fc96 	bl	8000210 <memchr>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d036      	beq.n	8008956 <_svfiprintf_r+0x1d2>
 80088e8:	4b21      	ldr	r3, [pc, #132]	@ (8008970 <_svfiprintf_r+0x1ec>)
 80088ea:	bb1b      	cbnz	r3, 8008934 <_svfiprintf_r+0x1b0>
 80088ec:	9b03      	ldr	r3, [sp, #12]
 80088ee:	3307      	adds	r3, #7
 80088f0:	f023 0307 	bic.w	r3, r3, #7
 80088f4:	3308      	adds	r3, #8
 80088f6:	9303      	str	r3, [sp, #12]
 80088f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088fa:	4433      	add	r3, r6
 80088fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80088fe:	e76a      	b.n	80087d6 <_svfiprintf_r+0x52>
 8008900:	fb0c 3202 	mla	r2, ip, r2, r3
 8008904:	460c      	mov	r4, r1
 8008906:	2001      	movs	r0, #1
 8008908:	e7a8      	b.n	800885c <_svfiprintf_r+0xd8>
 800890a:	2300      	movs	r3, #0
 800890c:	3401      	adds	r4, #1
 800890e:	9305      	str	r3, [sp, #20]
 8008910:	4619      	mov	r1, r3
 8008912:	f04f 0c0a 	mov.w	ip, #10
 8008916:	4620      	mov	r0, r4
 8008918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800891c:	3a30      	subs	r2, #48	@ 0x30
 800891e:	2a09      	cmp	r2, #9
 8008920:	d903      	bls.n	800892a <_svfiprintf_r+0x1a6>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0c6      	beq.n	80088b4 <_svfiprintf_r+0x130>
 8008926:	9105      	str	r1, [sp, #20]
 8008928:	e7c4      	b.n	80088b4 <_svfiprintf_r+0x130>
 800892a:	fb0c 2101 	mla	r1, ip, r1, r2
 800892e:	4604      	mov	r4, r0
 8008930:	2301      	movs	r3, #1
 8008932:	e7f0      	b.n	8008916 <_svfiprintf_r+0x192>
 8008934:	ab03      	add	r3, sp, #12
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	462a      	mov	r2, r5
 800893a:	4b0e      	ldr	r3, [pc, #56]	@ (8008974 <_svfiprintf_r+0x1f0>)
 800893c:	a904      	add	r1, sp, #16
 800893e:	4638      	mov	r0, r7
 8008940:	f3af 8000 	nop.w
 8008944:	1c42      	adds	r2, r0, #1
 8008946:	4606      	mov	r6, r0
 8008948:	d1d6      	bne.n	80088f8 <_svfiprintf_r+0x174>
 800894a:	89ab      	ldrh	r3, [r5, #12]
 800894c:	065b      	lsls	r3, r3, #25
 800894e:	f53f af2d 	bmi.w	80087ac <_svfiprintf_r+0x28>
 8008952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008954:	e72c      	b.n	80087b0 <_svfiprintf_r+0x2c>
 8008956:	ab03      	add	r3, sp, #12
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	462a      	mov	r2, r5
 800895c:	4b05      	ldr	r3, [pc, #20]	@ (8008974 <_svfiprintf_r+0x1f0>)
 800895e:	a904      	add	r1, sp, #16
 8008960:	4638      	mov	r0, r7
 8008962:	f000 f879 	bl	8008a58 <_printf_i>
 8008966:	e7ed      	b.n	8008944 <_svfiprintf_r+0x1c0>
 8008968:	08009234 	.word	0x08009234
 800896c:	0800923e 	.word	0x0800923e
 8008970:	00000000 	.word	0x00000000
 8008974:	080086cd 	.word	0x080086cd
 8008978:	0800923a 	.word	0x0800923a

0800897c <_printf_common>:
 800897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	4616      	mov	r6, r2
 8008982:	4698      	mov	r8, r3
 8008984:	688a      	ldr	r2, [r1, #8]
 8008986:	690b      	ldr	r3, [r1, #16]
 8008988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800898c:	4293      	cmp	r3, r2
 800898e:	bfb8      	it	lt
 8008990:	4613      	movlt	r3, r2
 8008992:	6033      	str	r3, [r6, #0]
 8008994:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008998:	4607      	mov	r7, r0
 800899a:	460c      	mov	r4, r1
 800899c:	b10a      	cbz	r2, 80089a2 <_printf_common+0x26>
 800899e:	3301      	adds	r3, #1
 80089a0:	6033      	str	r3, [r6, #0]
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	0699      	lsls	r1, r3, #26
 80089a6:	bf42      	ittt	mi
 80089a8:	6833      	ldrmi	r3, [r6, #0]
 80089aa:	3302      	addmi	r3, #2
 80089ac:	6033      	strmi	r3, [r6, #0]
 80089ae:	6825      	ldr	r5, [r4, #0]
 80089b0:	f015 0506 	ands.w	r5, r5, #6
 80089b4:	d106      	bne.n	80089c4 <_printf_common+0x48>
 80089b6:	f104 0a19 	add.w	sl, r4, #25
 80089ba:	68e3      	ldr	r3, [r4, #12]
 80089bc:	6832      	ldr	r2, [r6, #0]
 80089be:	1a9b      	subs	r3, r3, r2
 80089c0:	42ab      	cmp	r3, r5
 80089c2:	dc26      	bgt.n	8008a12 <_printf_common+0x96>
 80089c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089c8:	6822      	ldr	r2, [r4, #0]
 80089ca:	3b00      	subs	r3, #0
 80089cc:	bf18      	it	ne
 80089ce:	2301      	movne	r3, #1
 80089d0:	0692      	lsls	r2, r2, #26
 80089d2:	d42b      	bmi.n	8008a2c <_printf_common+0xb0>
 80089d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089d8:	4641      	mov	r1, r8
 80089da:	4638      	mov	r0, r7
 80089dc:	47c8      	blx	r9
 80089de:	3001      	adds	r0, #1
 80089e0:	d01e      	beq.n	8008a20 <_printf_common+0xa4>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	6922      	ldr	r2, [r4, #16]
 80089e6:	f003 0306 	and.w	r3, r3, #6
 80089ea:	2b04      	cmp	r3, #4
 80089ec:	bf02      	ittt	eq
 80089ee:	68e5      	ldreq	r5, [r4, #12]
 80089f0:	6833      	ldreq	r3, [r6, #0]
 80089f2:	1aed      	subeq	r5, r5, r3
 80089f4:	68a3      	ldr	r3, [r4, #8]
 80089f6:	bf0c      	ite	eq
 80089f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089fc:	2500      	movne	r5, #0
 80089fe:	4293      	cmp	r3, r2
 8008a00:	bfc4      	itt	gt
 8008a02:	1a9b      	subgt	r3, r3, r2
 8008a04:	18ed      	addgt	r5, r5, r3
 8008a06:	2600      	movs	r6, #0
 8008a08:	341a      	adds	r4, #26
 8008a0a:	42b5      	cmp	r5, r6
 8008a0c:	d11a      	bne.n	8008a44 <_printf_common+0xc8>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e008      	b.n	8008a24 <_printf_common+0xa8>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4652      	mov	r2, sl
 8008a16:	4641      	mov	r1, r8
 8008a18:	4638      	mov	r0, r7
 8008a1a:	47c8      	blx	r9
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d103      	bne.n	8008a28 <_printf_common+0xac>
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295
 8008a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a28:	3501      	adds	r5, #1
 8008a2a:	e7c6      	b.n	80089ba <_printf_common+0x3e>
 8008a2c:	18e1      	adds	r1, r4, r3
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	2030      	movs	r0, #48	@ 0x30
 8008a32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a36:	4422      	add	r2, r4
 8008a38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a40:	3302      	adds	r3, #2
 8008a42:	e7c7      	b.n	80089d4 <_printf_common+0x58>
 8008a44:	2301      	movs	r3, #1
 8008a46:	4622      	mov	r2, r4
 8008a48:	4641      	mov	r1, r8
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	47c8      	blx	r9
 8008a4e:	3001      	adds	r0, #1
 8008a50:	d0e6      	beq.n	8008a20 <_printf_common+0xa4>
 8008a52:	3601      	adds	r6, #1
 8008a54:	e7d9      	b.n	8008a0a <_printf_common+0x8e>
	...

08008a58 <_printf_i>:
 8008a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a5c:	7e0f      	ldrb	r7, [r1, #24]
 8008a5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a60:	2f78      	cmp	r7, #120	@ 0x78
 8008a62:	4691      	mov	r9, r2
 8008a64:	4680      	mov	r8, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	469a      	mov	sl, r3
 8008a6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a6e:	d807      	bhi.n	8008a80 <_printf_i+0x28>
 8008a70:	2f62      	cmp	r7, #98	@ 0x62
 8008a72:	d80a      	bhi.n	8008a8a <_printf_i+0x32>
 8008a74:	2f00      	cmp	r7, #0
 8008a76:	f000 80d2 	beq.w	8008c1e <_printf_i+0x1c6>
 8008a7a:	2f58      	cmp	r7, #88	@ 0x58
 8008a7c:	f000 80b9 	beq.w	8008bf2 <_printf_i+0x19a>
 8008a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a88:	e03a      	b.n	8008b00 <_printf_i+0xa8>
 8008a8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a8e:	2b15      	cmp	r3, #21
 8008a90:	d8f6      	bhi.n	8008a80 <_printf_i+0x28>
 8008a92:	a101      	add	r1, pc, #4	@ (adr r1, 8008a98 <_printf_i+0x40>)
 8008a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a98:	08008af1 	.word	0x08008af1
 8008a9c:	08008b05 	.word	0x08008b05
 8008aa0:	08008a81 	.word	0x08008a81
 8008aa4:	08008a81 	.word	0x08008a81
 8008aa8:	08008a81 	.word	0x08008a81
 8008aac:	08008a81 	.word	0x08008a81
 8008ab0:	08008b05 	.word	0x08008b05
 8008ab4:	08008a81 	.word	0x08008a81
 8008ab8:	08008a81 	.word	0x08008a81
 8008abc:	08008a81 	.word	0x08008a81
 8008ac0:	08008a81 	.word	0x08008a81
 8008ac4:	08008c05 	.word	0x08008c05
 8008ac8:	08008b2f 	.word	0x08008b2f
 8008acc:	08008bbf 	.word	0x08008bbf
 8008ad0:	08008a81 	.word	0x08008a81
 8008ad4:	08008a81 	.word	0x08008a81
 8008ad8:	08008c27 	.word	0x08008c27
 8008adc:	08008a81 	.word	0x08008a81
 8008ae0:	08008b2f 	.word	0x08008b2f
 8008ae4:	08008a81 	.word	0x08008a81
 8008ae8:	08008a81 	.word	0x08008a81
 8008aec:	08008bc7 	.word	0x08008bc7
 8008af0:	6833      	ldr	r3, [r6, #0]
 8008af2:	1d1a      	adds	r2, r3, #4
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6032      	str	r2, [r6, #0]
 8008af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008afc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b00:	2301      	movs	r3, #1
 8008b02:	e09d      	b.n	8008c40 <_printf_i+0x1e8>
 8008b04:	6833      	ldr	r3, [r6, #0]
 8008b06:	6820      	ldr	r0, [r4, #0]
 8008b08:	1d19      	adds	r1, r3, #4
 8008b0a:	6031      	str	r1, [r6, #0]
 8008b0c:	0606      	lsls	r6, r0, #24
 8008b0e:	d501      	bpl.n	8008b14 <_printf_i+0xbc>
 8008b10:	681d      	ldr	r5, [r3, #0]
 8008b12:	e003      	b.n	8008b1c <_printf_i+0xc4>
 8008b14:	0645      	lsls	r5, r0, #25
 8008b16:	d5fb      	bpl.n	8008b10 <_printf_i+0xb8>
 8008b18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b1c:	2d00      	cmp	r5, #0
 8008b1e:	da03      	bge.n	8008b28 <_printf_i+0xd0>
 8008b20:	232d      	movs	r3, #45	@ 0x2d
 8008b22:	426d      	negs	r5, r5
 8008b24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b28:	4859      	ldr	r0, [pc, #356]	@ (8008c90 <_printf_i+0x238>)
 8008b2a:	230a      	movs	r3, #10
 8008b2c:	e011      	b.n	8008b52 <_printf_i+0xfa>
 8008b2e:	6821      	ldr	r1, [r4, #0]
 8008b30:	6833      	ldr	r3, [r6, #0]
 8008b32:	0608      	lsls	r0, r1, #24
 8008b34:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b38:	d402      	bmi.n	8008b40 <_printf_i+0xe8>
 8008b3a:	0649      	lsls	r1, r1, #25
 8008b3c:	bf48      	it	mi
 8008b3e:	b2ad      	uxthmi	r5, r5
 8008b40:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b42:	4853      	ldr	r0, [pc, #332]	@ (8008c90 <_printf_i+0x238>)
 8008b44:	6033      	str	r3, [r6, #0]
 8008b46:	bf14      	ite	ne
 8008b48:	230a      	movne	r3, #10
 8008b4a:	2308      	moveq	r3, #8
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b52:	6866      	ldr	r6, [r4, #4]
 8008b54:	60a6      	str	r6, [r4, #8]
 8008b56:	2e00      	cmp	r6, #0
 8008b58:	bfa2      	ittt	ge
 8008b5a:	6821      	ldrge	r1, [r4, #0]
 8008b5c:	f021 0104 	bicge.w	r1, r1, #4
 8008b60:	6021      	strge	r1, [r4, #0]
 8008b62:	b90d      	cbnz	r5, 8008b68 <_printf_i+0x110>
 8008b64:	2e00      	cmp	r6, #0
 8008b66:	d04b      	beq.n	8008c00 <_printf_i+0x1a8>
 8008b68:	4616      	mov	r6, r2
 8008b6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b6e:	fb03 5711 	mls	r7, r3, r1, r5
 8008b72:	5dc7      	ldrb	r7, [r0, r7]
 8008b74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b78:	462f      	mov	r7, r5
 8008b7a:	42bb      	cmp	r3, r7
 8008b7c:	460d      	mov	r5, r1
 8008b7e:	d9f4      	bls.n	8008b6a <_printf_i+0x112>
 8008b80:	2b08      	cmp	r3, #8
 8008b82:	d10b      	bne.n	8008b9c <_printf_i+0x144>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	07df      	lsls	r7, r3, #31
 8008b88:	d508      	bpl.n	8008b9c <_printf_i+0x144>
 8008b8a:	6923      	ldr	r3, [r4, #16]
 8008b8c:	6861      	ldr	r1, [r4, #4]
 8008b8e:	4299      	cmp	r1, r3
 8008b90:	bfde      	ittt	le
 8008b92:	2330      	movle	r3, #48	@ 0x30
 8008b94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b9c:	1b92      	subs	r2, r2, r6
 8008b9e:	6122      	str	r2, [r4, #16]
 8008ba0:	f8cd a000 	str.w	sl, [sp]
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	aa03      	add	r2, sp, #12
 8008ba8:	4621      	mov	r1, r4
 8008baa:	4640      	mov	r0, r8
 8008bac:	f7ff fee6 	bl	800897c <_printf_common>
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d14a      	bne.n	8008c4a <_printf_i+0x1f2>
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb8:	b004      	add	sp, #16
 8008bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	f043 0320 	orr.w	r3, r3, #32
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	4833      	ldr	r0, [pc, #204]	@ (8008c94 <_printf_i+0x23c>)
 8008bc8:	2778      	movs	r7, #120	@ 0x78
 8008bca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	6831      	ldr	r1, [r6, #0]
 8008bd2:	061f      	lsls	r7, r3, #24
 8008bd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bd8:	d402      	bmi.n	8008be0 <_printf_i+0x188>
 8008bda:	065f      	lsls	r7, r3, #25
 8008bdc:	bf48      	it	mi
 8008bde:	b2ad      	uxthmi	r5, r5
 8008be0:	6031      	str	r1, [r6, #0]
 8008be2:	07d9      	lsls	r1, r3, #31
 8008be4:	bf44      	itt	mi
 8008be6:	f043 0320 	orrmi.w	r3, r3, #32
 8008bea:	6023      	strmi	r3, [r4, #0]
 8008bec:	b11d      	cbz	r5, 8008bf6 <_printf_i+0x19e>
 8008bee:	2310      	movs	r3, #16
 8008bf0:	e7ac      	b.n	8008b4c <_printf_i+0xf4>
 8008bf2:	4827      	ldr	r0, [pc, #156]	@ (8008c90 <_printf_i+0x238>)
 8008bf4:	e7e9      	b.n	8008bca <_printf_i+0x172>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	f023 0320 	bic.w	r3, r3, #32
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	e7f6      	b.n	8008bee <_printf_i+0x196>
 8008c00:	4616      	mov	r6, r2
 8008c02:	e7bd      	b.n	8008b80 <_printf_i+0x128>
 8008c04:	6833      	ldr	r3, [r6, #0]
 8008c06:	6825      	ldr	r5, [r4, #0]
 8008c08:	6961      	ldr	r1, [r4, #20]
 8008c0a:	1d18      	adds	r0, r3, #4
 8008c0c:	6030      	str	r0, [r6, #0]
 8008c0e:	062e      	lsls	r6, r5, #24
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	d501      	bpl.n	8008c18 <_printf_i+0x1c0>
 8008c14:	6019      	str	r1, [r3, #0]
 8008c16:	e002      	b.n	8008c1e <_printf_i+0x1c6>
 8008c18:	0668      	lsls	r0, r5, #25
 8008c1a:	d5fb      	bpl.n	8008c14 <_printf_i+0x1bc>
 8008c1c:	8019      	strh	r1, [r3, #0]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	6123      	str	r3, [r4, #16]
 8008c22:	4616      	mov	r6, r2
 8008c24:	e7bc      	b.n	8008ba0 <_printf_i+0x148>
 8008c26:	6833      	ldr	r3, [r6, #0]
 8008c28:	1d1a      	adds	r2, r3, #4
 8008c2a:	6032      	str	r2, [r6, #0]
 8008c2c:	681e      	ldr	r6, [r3, #0]
 8008c2e:	6862      	ldr	r2, [r4, #4]
 8008c30:	2100      	movs	r1, #0
 8008c32:	4630      	mov	r0, r6
 8008c34:	f7f7 faec 	bl	8000210 <memchr>
 8008c38:	b108      	cbz	r0, 8008c3e <_printf_i+0x1e6>
 8008c3a:	1b80      	subs	r0, r0, r6
 8008c3c:	6060      	str	r0, [r4, #4]
 8008c3e:	6863      	ldr	r3, [r4, #4]
 8008c40:	6123      	str	r3, [r4, #16]
 8008c42:	2300      	movs	r3, #0
 8008c44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c48:	e7aa      	b.n	8008ba0 <_printf_i+0x148>
 8008c4a:	6923      	ldr	r3, [r4, #16]
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	4649      	mov	r1, r9
 8008c50:	4640      	mov	r0, r8
 8008c52:	47d0      	blx	sl
 8008c54:	3001      	adds	r0, #1
 8008c56:	d0ad      	beq.n	8008bb4 <_printf_i+0x15c>
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	079b      	lsls	r3, r3, #30
 8008c5c:	d413      	bmi.n	8008c86 <_printf_i+0x22e>
 8008c5e:	68e0      	ldr	r0, [r4, #12]
 8008c60:	9b03      	ldr	r3, [sp, #12]
 8008c62:	4298      	cmp	r0, r3
 8008c64:	bfb8      	it	lt
 8008c66:	4618      	movlt	r0, r3
 8008c68:	e7a6      	b.n	8008bb8 <_printf_i+0x160>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	4632      	mov	r2, r6
 8008c6e:	4649      	mov	r1, r9
 8008c70:	4640      	mov	r0, r8
 8008c72:	47d0      	blx	sl
 8008c74:	3001      	adds	r0, #1
 8008c76:	d09d      	beq.n	8008bb4 <_printf_i+0x15c>
 8008c78:	3501      	adds	r5, #1
 8008c7a:	68e3      	ldr	r3, [r4, #12]
 8008c7c:	9903      	ldr	r1, [sp, #12]
 8008c7e:	1a5b      	subs	r3, r3, r1
 8008c80:	42ab      	cmp	r3, r5
 8008c82:	dcf2      	bgt.n	8008c6a <_printf_i+0x212>
 8008c84:	e7eb      	b.n	8008c5e <_printf_i+0x206>
 8008c86:	2500      	movs	r5, #0
 8008c88:	f104 0619 	add.w	r6, r4, #25
 8008c8c:	e7f5      	b.n	8008c7a <_printf_i+0x222>
 8008c8e:	bf00      	nop
 8008c90:	08009245 	.word	0x08009245
 8008c94:	08009256 	.word	0x08009256

08008c98 <memmove>:
 8008c98:	4288      	cmp	r0, r1
 8008c9a:	b510      	push	{r4, lr}
 8008c9c:	eb01 0402 	add.w	r4, r1, r2
 8008ca0:	d902      	bls.n	8008ca8 <memmove+0x10>
 8008ca2:	4284      	cmp	r4, r0
 8008ca4:	4623      	mov	r3, r4
 8008ca6:	d807      	bhi.n	8008cb8 <memmove+0x20>
 8008ca8:	1e43      	subs	r3, r0, #1
 8008caa:	42a1      	cmp	r1, r4
 8008cac:	d008      	beq.n	8008cc0 <memmove+0x28>
 8008cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cb6:	e7f8      	b.n	8008caa <memmove+0x12>
 8008cb8:	4402      	add	r2, r0
 8008cba:	4601      	mov	r1, r0
 8008cbc:	428a      	cmp	r2, r1
 8008cbe:	d100      	bne.n	8008cc2 <memmove+0x2a>
 8008cc0:	bd10      	pop	{r4, pc}
 8008cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cca:	e7f7      	b.n	8008cbc <memmove+0x24>

08008ccc <_sbrk_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4d06      	ldr	r5, [pc, #24]	@ (8008ce8 <_sbrk_r+0x1c>)
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	602b      	str	r3, [r5, #0]
 8008cd8:	f7f8 ff9c 	bl	8001c14 <_sbrk>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	d102      	bne.n	8008ce6 <_sbrk_r+0x1a>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	b103      	cbz	r3, 8008ce6 <_sbrk_r+0x1a>
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	bd38      	pop	{r3, r4, r5, pc}
 8008ce8:	200008e0 	.word	0x200008e0

08008cec <memcpy>:
 8008cec:	440a      	add	r2, r1
 8008cee:	4291      	cmp	r1, r2
 8008cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf4:	d100      	bne.n	8008cf8 <memcpy+0xc>
 8008cf6:	4770      	bx	lr
 8008cf8:	b510      	push	{r4, lr}
 8008cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d02:	4291      	cmp	r1, r2
 8008d04:	d1f9      	bne.n	8008cfa <memcpy+0xe>
 8008d06:	bd10      	pop	{r4, pc}

08008d08 <_realloc_r>:
 8008d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0c:	4680      	mov	r8, r0
 8008d0e:	4615      	mov	r5, r2
 8008d10:	460c      	mov	r4, r1
 8008d12:	b921      	cbnz	r1, 8008d1e <_realloc_r+0x16>
 8008d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d18:	4611      	mov	r1, r2
 8008d1a:	f7ff bc4b 	b.w	80085b4 <_malloc_r>
 8008d1e:	b92a      	cbnz	r2, 8008d2c <_realloc_r+0x24>
 8008d20:	f7ff fbdc 	bl	80084dc <_free_r>
 8008d24:	2400      	movs	r4, #0
 8008d26:	4620      	mov	r0, r4
 8008d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d2c:	f000 f81a 	bl	8008d64 <_malloc_usable_size_r>
 8008d30:	4285      	cmp	r5, r0
 8008d32:	4606      	mov	r6, r0
 8008d34:	d802      	bhi.n	8008d3c <_realloc_r+0x34>
 8008d36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d3a:	d8f4      	bhi.n	8008d26 <_realloc_r+0x1e>
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	4640      	mov	r0, r8
 8008d40:	f7ff fc38 	bl	80085b4 <_malloc_r>
 8008d44:	4607      	mov	r7, r0
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d0ec      	beq.n	8008d24 <_realloc_r+0x1c>
 8008d4a:	42b5      	cmp	r5, r6
 8008d4c:	462a      	mov	r2, r5
 8008d4e:	4621      	mov	r1, r4
 8008d50:	bf28      	it	cs
 8008d52:	4632      	movcs	r2, r6
 8008d54:	f7ff ffca 	bl	8008cec <memcpy>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4640      	mov	r0, r8
 8008d5c:	f7ff fbbe 	bl	80084dc <_free_r>
 8008d60:	463c      	mov	r4, r7
 8008d62:	e7e0      	b.n	8008d26 <_realloc_r+0x1e>

08008d64 <_malloc_usable_size_r>:
 8008d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d68:	1f18      	subs	r0, r3, #4
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	bfbc      	itt	lt
 8008d6e:	580b      	ldrlt	r3, [r1, r0]
 8008d70:	18c0      	addlt	r0, r0, r3
 8008d72:	4770      	bx	lr

08008d74 <_init>:
 8008d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d76:	bf00      	nop
 8008d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d7a:	bc08      	pop	{r3}
 8008d7c:	469e      	mov	lr, r3
 8008d7e:	4770      	bx	lr

08008d80 <_fini>:
 8008d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d82:	bf00      	nop
 8008d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d86:	bc08      	pop	{r3}
 8008d88:	469e      	mov	lr, r3
 8008d8a:	4770      	bx	lr
