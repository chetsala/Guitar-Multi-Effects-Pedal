
Guitar-Multi-Effects-Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f54  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800511c  0800511c  0000611c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800513c  0800513c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  0800513c  0800513c  0000613c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005144  08005144  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005144  08005144  00006144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005148  08005148  00006148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800514c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  2000000c  08005158  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08005158  000073ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015de4  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca4  00000000  00000000  0001ce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  0001fac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f94  00000000  00000000  00020eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003313  00000000  00000000  00021e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b40  00000000  00000000  00025157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103111  00000000  00000000  0003ec97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141da8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005500  00000000  00000000  00141dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001472ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005104 	.word	0x08005104

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08005104 	.word	0x08005104

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f001 f811 	bl	8001522 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f814 	bl	800052c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000504:	f000 f880 	bl	8000608 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fb2a 	bl	8000b60 <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 fab4 	bl	8000a78 <MX_DMA_Init>
  MX_SAI2_Init();
 8000510:	f000 f986 	bl	8000820 <MX_SAI2_Init>
  MX_USART1_UART_Init();
 8000514:	f000 fa80 	bl	8000a18 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000518:	f000 fa2a 	bl	8000970 <MX_TIM1_Init>
  MX_DMA2D_Init();
 800051c:	f000 f89c 	bl	8000658 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8000520:	f000 f8cc 	bl	80006bc <MX_LTDC_Init>
  MX_FMC_Init();
 8000524:	f000 face 	bl	8000ac4 <MX_FMC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <main+0x30>

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	@ 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	@ 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f004 fdb6 	bl	80050ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000550:	f002 f970 	bl	8002834 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <SystemClock_Config+0xd4>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	4a29      	ldr	r2, [pc, #164]	@ (8000600 <SystemClock_Config+0xd4>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000560:	4b27      	ldr	r3, [pc, #156]	@ (8000600 <SystemClock_Config+0xd4>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	4b25      	ldr	r3, [pc, #148]	@ (8000604 <SystemClock_Config+0xd8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a24      	ldr	r2, [pc, #144]	@ (8000604 <SystemClock_Config+0xd8>)
 8000572:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <SystemClock_Config+0xd8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000598:	2308      	movs	r3, #8
 800059a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 800059c:	23d2      	movs	r3, #210	@ 0xd2
 800059e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 f9a1 	bl	80028f4 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005b8:	f000 fb62 	bl	8000c80 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005bc:	f002 f94a 	bl	8002854 <HAL_PWREx_EnableOverDrive>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005c6:	f000 fb5b 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2106      	movs	r1, #6
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fc27 	bl	8002e3c <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80005f4:	f000 fb44 	bl	8000c80 <Error_Handler>
  }
}
 80005f8:	bf00      	nop
 80005fa:	3750      	adds	r7, #80	@ 0x50
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b0a2      	sub	sp, #136	@ 0x88
 800060c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2284      	movs	r2, #132	@ 0x84
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f004 fd49 	bl	80050ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2;
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <PeriphCommonClock_Config+0x4c>)
 800061c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800061e:	2332      	movs	r3, #50	@ 0x32
 8000620:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000632:	2300      	movs	r3, #0
 8000634:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000636:	2300      	movs	r3, #0
 8000638:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fde3 	bl	8003208 <HAL_RCCEx_PeriphCLKConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <PeriphCommonClock_Config+0x44>
  {
    Error_Handler();
 8000648:	f000 fb1a 	bl	8000c80 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3788      	adds	r7, #136	@ 0x88
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	00100008 	.word	0x00100008

08000658 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <MX_DMA2D_Init+0x5c>)
 800065e:	4a16      	ldr	r2, [pc, #88]	@ (80006b8 <MX_DMA2D_Init+0x60>)
 8000660:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <MX_DMA2D_Init+0x5c>)
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <MX_DMA2D_Init+0x5c>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <MX_DMA2D_Init+0x5c>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <MX_DMA2D_Init+0x5c>)
 8000676:	2200      	movs	r2, #0
 8000678:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <MX_DMA2D_Init+0x5c>)
 800067c:	2200      	movs	r2, #0
 800067e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <MX_DMA2D_Init+0x5c>)
 8000682:	2200      	movs	r2, #0
 8000684:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <MX_DMA2D_Init+0x5c>)
 8000688:	2200      	movs	r2, #0
 800068a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800068c:	4809      	ldr	r0, [pc, #36]	@ (80006b4 <MX_DMA2D_Init+0x5c>)
 800068e:	f001 fba1 	bl	8001dd4 <HAL_DMA2D_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000698:	f000 faf2 	bl	8000c80 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800069c:	2101      	movs	r1, #1
 800069e:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_DMA2D_Init+0x5c>)
 80006a0:	f001 fbe2 	bl	8001e68 <HAL_DMA2D_ConfigLayer>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006aa:	f000 fae9 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000028 	.word	0x20000028
 80006b8:	4002b000 	.word	0x4002b000

080006bc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b09a      	sub	sp, #104	@ 0x68
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80006c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80006c6:	2234      	movs	r2, #52	@ 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 fcee 	bl	80050ac <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	2234      	movs	r2, #52	@ 0x34
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fce8 	bl	80050ac <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80006dc:	4b4e      	ldr	r3, [pc, #312]	@ (8000818 <MX_LTDC_Init+0x15c>)
 80006de:	4a4f      	ldr	r2, [pc, #316]	@ (800081c <MX_LTDC_Init+0x160>)
 80006e0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80006e2:	4b4d      	ldr	r3, [pc, #308]	@ (8000818 <MX_LTDC_Init+0x15c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80006e8:	4b4b      	ldr	r3, [pc, #300]	@ (8000818 <MX_LTDC_Init+0x15c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80006ee:	4b4a      	ldr	r3, [pc, #296]	@ (8000818 <MX_LTDC_Init+0x15c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80006f4:	4b48      	ldr	r3, [pc, #288]	@ (8000818 <MX_LTDC_Init+0x15c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80006fa:	4b47      	ldr	r3, [pc, #284]	@ (8000818 <MX_LTDC_Init+0x15c>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000700:	4b45      	ldr	r3, [pc, #276]	@ (8000818 <MX_LTDC_Init+0x15c>)
 8000702:	2203      	movs	r2, #3
 8000704:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000706:	4b44      	ldr	r3, [pc, #272]	@ (8000818 <MX_LTDC_Init+0x15c>)
 8000708:	220e      	movs	r2, #14
 800070a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800070c:	4b42      	ldr	r3, [pc, #264]	@ (8000818 <MX_LTDC_Init+0x15c>)
 800070e:	2205      	movs	r2, #5
 8000710:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000712:	4b41      	ldr	r3, [pc, #260]	@ (8000818 <MX_LTDC_Init+0x15c>)
 8000714:	f240 228e 	movw	r2, #654	@ 0x28e
 8000718:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800071a:	4b3f      	ldr	r3, [pc, #252]	@ (8000818 <MX_LTDC_Init+0x15c>)
 800071c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8000720:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8000722:	4b3d      	ldr	r3, [pc, #244]	@ (8000818 <MX_LTDC_Init+0x15c>)
 8000724:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000728:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800072a:	4b3b      	ldr	r3, [pc, #236]	@ (8000818 <MX_LTDC_Init+0x15c>)
 800072c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8000730:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000732:	4b39      	ldr	r3, [pc, #228]	@ (8000818 <MX_LTDC_Init+0x15c>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800073a:	4b37      	ldr	r3, [pc, #220]	@ (8000818 <MX_LTDC_Init+0x15c>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000742:	4b35      	ldr	r3, [pc, #212]	@ (8000818 <MX_LTDC_Init+0x15c>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800074a:	4833      	ldr	r0, [pc, #204]	@ (8000818 <MX_LTDC_Init+0x15c>)
 800074c:	f001 fdca 	bl	80022e4 <HAL_LTDC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000756:	f000 fa93 	bl	8000c80 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800076a:	2300      	movs	r3, #0
 800076c:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800077a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800077c:	2305      	movs	r3, #5
 800077e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800079e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80007a2:	2200      	movs	r2, #0
 80007a4:	4619      	mov	r1, r3
 80007a6:	481c      	ldr	r0, [pc, #112]	@ (8000818 <MX_LTDC_Init+0x15c>)
 80007a8:	f001 fe6c 	bl	8002484 <HAL_LTDC_ConfigLayer>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80007b2:	f000 fa65 	bl	8000c80 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007d6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007d8:	2305      	movs	r3, #5
 80007da:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_LTDC_Init+0x15c>)
 8000802:	f001 fe3f 	bl	8002484 <HAL_LTDC_ConfigLayer>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800080c:	f000 fa38 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	3768      	adds	r7, #104	@ 0x68
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000068 	.word	0x20000068
 800081c:	40016800 	.word	0x40016800

08000820 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000824:	4b4d      	ldr	r3, [pc, #308]	@ (800095c <MX_SAI2_Init+0x13c>)
 8000826:	4a4e      	ldr	r2, [pc, #312]	@ (8000960 <MX_SAI2_Init+0x140>)
 8000828:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800082a:	4b4c      	ldr	r3, [pc, #304]	@ (800095c <MX_SAI2_Init+0x13c>)
 800082c:	2200      	movs	r2, #0
 800082e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000830:	4b4a      	ldr	r3, [pc, #296]	@ (800095c <MX_SAI2_Init+0x13c>)
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000836:	4b49      	ldr	r3, [pc, #292]	@ (800095c <MX_SAI2_Init+0x13c>)
 8000838:	2240      	movs	r2, #64	@ 0x40
 800083a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800083c:	4b47      	ldr	r3, [pc, #284]	@ (800095c <MX_SAI2_Init+0x13c>)
 800083e:	2200      	movs	r2, #0
 8000840:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000842:	4b46      	ldr	r3, [pc, #280]	@ (800095c <MX_SAI2_Init+0x13c>)
 8000844:	2200      	movs	r2, #0
 8000846:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000848:	4b44      	ldr	r3, [pc, #272]	@ (800095c <MX_SAI2_Init+0x13c>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800084e:	4b43      	ldr	r3, [pc, #268]	@ (800095c <MX_SAI2_Init+0x13c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000854:	4b41      	ldr	r3, [pc, #260]	@ (800095c <MX_SAI2_Init+0x13c>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800085a:	4b40      	ldr	r3, [pc, #256]	@ (800095c <MX_SAI2_Init+0x13c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000860:	4b3e      	ldr	r3, [pc, #248]	@ (800095c <MX_SAI2_Init+0x13c>)
 8000862:	4a40      	ldr	r2, [pc, #256]	@ (8000964 <MX_SAI2_Init+0x144>)
 8000864:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000866:	4b3d      	ldr	r3, [pc, #244]	@ (800095c <MX_SAI2_Init+0x13c>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800086c:	4b3b      	ldr	r3, [pc, #236]	@ (800095c <MX_SAI2_Init+0x13c>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000872:	4b3a      	ldr	r3, [pc, #232]	@ (800095c <MX_SAI2_Init+0x13c>)
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000878:	4b38      	ldr	r3, [pc, #224]	@ (800095c <MX_SAI2_Init+0x13c>)
 800087a:	2200      	movs	r2, #0
 800087c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800087e:	4b37      	ldr	r3, [pc, #220]	@ (800095c <MX_SAI2_Init+0x13c>)
 8000880:	2208      	movs	r2, #8
 8000882:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000884:	4b35      	ldr	r3, [pc, #212]	@ (800095c <MX_SAI2_Init+0x13c>)
 8000886:	2201      	movs	r2, #1
 8000888:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800088a:	4b34      	ldr	r3, [pc, #208]	@ (800095c <MX_SAI2_Init+0x13c>)
 800088c:	2200      	movs	r2, #0
 800088e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000890:	4b32      	ldr	r3, [pc, #200]	@ (800095c <MX_SAI2_Init+0x13c>)
 8000892:	2200      	movs	r2, #0
 8000894:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000896:	4b31      	ldr	r3, [pc, #196]	@ (800095c <MX_SAI2_Init+0x13c>)
 8000898:	2200      	movs	r2, #0
 800089a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800089c:	4b2f      	ldr	r3, [pc, #188]	@ (800095c <MX_SAI2_Init+0x13c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80008a2:	4b2e      	ldr	r3, [pc, #184]	@ (800095c <MX_SAI2_Init+0x13c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80008a8:	4b2c      	ldr	r3, [pc, #176]	@ (800095c <MX_SAI2_Init+0x13c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80008ae:	4b2b      	ldr	r3, [pc, #172]	@ (800095c <MX_SAI2_Init+0x13c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80008b4:	4829      	ldr	r0, [pc, #164]	@ (800095c <MX_SAI2_Init+0x13c>)
 80008b6:	f003 f9d7 	bl	8003c68 <HAL_SAI_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80008c0:	f000 f9de 	bl	8000c80 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80008c4:	4b28      	ldr	r3, [pc, #160]	@ (8000968 <MX_SAI2_Init+0x148>)
 80008c6:	4a29      	ldr	r2, [pc, #164]	@ (800096c <MX_SAI2_Init+0x14c>)
 80008c8:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80008ca:	4b27      	ldr	r3, [pc, #156]	@ (8000968 <MX_SAI2_Init+0x148>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80008d0:	4b25      	ldr	r3, [pc, #148]	@ (8000968 <MX_SAI2_Init+0x148>)
 80008d2:	2203      	movs	r2, #3
 80008d4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80008d6:	4b24      	ldr	r3, [pc, #144]	@ (8000968 <MX_SAI2_Init+0x148>)
 80008d8:	2240      	movs	r2, #64	@ 0x40
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80008dc:	4b22      	ldr	r3, [pc, #136]	@ (8000968 <MX_SAI2_Init+0x148>)
 80008de:	2200      	movs	r2, #0
 80008e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80008e2:	4b21      	ldr	r3, [pc, #132]	@ (8000968 <MX_SAI2_Init+0x148>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <MX_SAI2_Init+0x148>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <MX_SAI2_Init+0x148>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000968 <MX_SAI2_Init+0x148>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80008fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_SAI2_Init+0x148>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000900:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <MX_SAI2_Init+0x148>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000906:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <MX_SAI2_Init+0x148>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800090c:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <MX_SAI2_Init+0x148>)
 800090e:	2200      	movs	r2, #0
 8000910:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_SAI2_Init+0x148>)
 8000914:	2208      	movs	r2, #8
 8000916:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000918:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <MX_SAI2_Init+0x148>)
 800091a:	2201      	movs	r2, #1
 800091c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800091e:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_SAI2_Init+0x148>)
 8000920:	2200      	movs	r2, #0
 8000922:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000924:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <MX_SAI2_Init+0x148>)
 8000926:	2200      	movs	r2, #0
 8000928:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_SAI2_Init+0x148>)
 800092c:	2200      	movs	r2, #0
 800092e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000930:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <MX_SAI2_Init+0x148>)
 8000932:	2200      	movs	r2, #0
 8000934:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_SAI2_Init+0x148>)
 8000938:	2200      	movs	r2, #0
 800093a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800093c:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <MX_SAI2_Init+0x148>)
 800093e:	2201      	movs	r2, #1
 8000940:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_SAI2_Init+0x148>)
 8000944:	2200      	movs	r2, #0
 8000946:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000948:	4807      	ldr	r0, [pc, #28]	@ (8000968 <MX_SAI2_Init+0x148>)
 800094a:	f003 f98d 	bl	8003c68 <HAL_SAI_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000954:	f000 f994 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000110 	.word	0x20000110
 8000960:	40015c04 	.word	0x40015c04
 8000964:	0002ee00 	.word	0x0002ee00
 8000968:	20000194 	.word	0x20000194
 800096c:	40015c24 	.word	0x40015c24

08000970 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <MX_TIM1_Init+0xa0>)
 8000990:	4a20      	ldr	r2, [pc, #128]	@ (8000a14 <MX_TIM1_Init+0xa4>)
 8000992:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000994:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_TIM1_Init+0xa0>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_TIM1_Init+0xa0>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_TIM1_Init+0xa0>)
 80009a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <MX_TIM1_Init+0xa0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_TIM1_Init+0xa0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_TIM1_Init+0xa0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ba:	4815      	ldr	r0, [pc, #84]	@ (8000a10 <MX_TIM1_Init+0xa0>)
 80009bc:	f003 fb3e 	bl	800403c <HAL_TIM_Base_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80009c6:	f000 f95b 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	480e      	ldr	r0, [pc, #56]	@ (8000a10 <MX_TIM1_Init+0xa0>)
 80009d8:	f003 fb88 	bl	80040ec <HAL_TIM_ConfigClockSource>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80009e2:	f000 f94d 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	4619      	mov	r1, r3
 80009f6:	4806      	ldr	r0, [pc, #24]	@ (8000a10 <MX_TIM1_Init+0xa0>)
 80009f8:	f003 fd88 	bl	800450c <HAL_TIMEx_MasterConfigSynchronization>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a02:	f000 f93d 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200002d8 	.word	0x200002d8
 8000a14:	40010000 	.word	0x40010000

08000a18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a1e:	4a15      	ldr	r2, [pc, #84]	@ (8000a74 <MX_USART1_UART_Init+0x5c>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a22:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_USART1_UART_Init+0x58>)
 8000a5c:	f003 fde4 	bl	8004628 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a66:	f000 f90b 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000324 	.word	0x20000324
 8000a74:	40011000 	.word	0x40011000

08000a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <MX_DMA_Init+0x48>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac0 <MX_DMA_Init+0x48>)
 8000a84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <MX_DMA_Init+0x48>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	203c      	movs	r0, #60	@ 0x3c
 8000a9c:	f000 fe79 	bl	8001792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000aa0:	203c      	movs	r0, #60	@ 0x3c
 8000aa2:	f000 fe92 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2045      	movs	r0, #69	@ 0x45
 8000aac:	f000 fe71 	bl	8001792 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000ab0:	2045      	movs	r0, #69	@ 0x45
 8000ab2:	f000 fe8a 	bl	80017ca <HAL_NVIC_EnableIRQ>

}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
 8000ad8:	615a      	str	r2, [r3, #20]
 8000ada:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000adc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b58 <MX_FMC_Init+0x94>)
 8000ade:	4a1f      	ldr	r2, [pc, #124]	@ (8000b5c <MX_FMC_Init+0x98>)
 8000ae0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <MX_FMC_Init+0x94>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_FMC_Init+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_FMC_Init+0x94>)
 8000af0:	2208      	movs	r2, #8
 8000af2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000af4:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <MX_FMC_Init+0x94>)
 8000af6:	2210      	movs	r2, #16
 8000af8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_FMC_Init+0x94>)
 8000afc:	2240      	movs	r2, #64	@ 0x40
 8000afe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000b00:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_FMC_Init+0x94>)
 8000b02:	2280      	movs	r2, #128	@ 0x80
 8000b04:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_FMC_Init+0x94>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_FMC_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_FMC_Init+0x94>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_FMC_Init+0x94>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000b1e:	2310      	movs	r3, #16
 8000b20:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000b22:	2310      	movs	r3, #16
 8000b24:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000b26:	2310      	movs	r3, #16
 8000b28:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000b2a:	2310      	movs	r3, #16
 8000b2c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000b2e:	2310      	movs	r3, #16
 8000b30:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000b32:	2310      	movs	r3, #16
 8000b34:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000b36:	2310      	movs	r3, #16
 8000b38:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4806      	ldr	r0, [pc, #24]	@ (8000b58 <MX_FMC_Init+0x94>)
 8000b40:	f003 fa48 	bl	8003fd4 <HAL_SDRAM_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000b4a:	f000 f899 	bl	8000c80 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200003ac 	.word	0x200003ac
 8000b5c:	a0000140 	.word	0xa0000140

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b08d      	sub	sp, #52	@ 0x34
 8000b64:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b66:	4b45      	ldr	r3, [pc, #276]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a44      	ldr	r2, [pc, #272]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000b6c:	f043 0310 	orr.w	r3, r3, #16
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b42      	ldr	r3, [pc, #264]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0310 	and.w	r3, r3, #16
 8000b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a3e      	ldr	r2, [pc, #248]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	4b39      	ldr	r3, [pc, #228]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a38      	ldr	r2, [pc, #224]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b36      	ldr	r3, [pc, #216]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bae:	4b33      	ldr	r3, [pc, #204]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a32      	ldr	r2, [pc, #200]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b30      	ldr	r3, [pc, #192]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bc2:	623b      	str	r3, [r7, #32]
 8000bc4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a2c      	ldr	r2, [pc, #176]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000bcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bda:	61fb      	str	r3, [r7, #28]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	4b27      	ldr	r3, [pc, #156]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a26      	ldr	r2, [pc, #152]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a20      	ldr	r2, [pc, #128]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a1a      	ldr	r2, [pc, #104]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a14      	ldr	r2, [pc, #80]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000c2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000c44:	f043 0320 	orr.w	r3, r3, #32
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0320 	and.w	r3, r3, #32
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a08      	ldr	r2, [pc, #32]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_GPIO_Init+0x11c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6e:	bf00      	nop
 8000c70:	3734      	adds	r7, #52	@ 0x34
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <Error_Handler+0x8>

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	4a08      	ldr	r2, [pc, #32]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <HAL_DMA2D_MspInit+0x38>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d10b      	bne.n	8000cfe <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <HAL_DMA2D_MspInit+0x3c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <HAL_DMA2D_MspInit+0x3c>)
 8000cec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <HAL_DMA2D_MspInit+0x3c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	4002b000 	.word	0x4002b000
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b092      	sub	sp, #72	@ 0x48
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a99      	ldr	r2, [pc, #612]	@ (8000f98 <HAL_LTDC_MspInit+0x284>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	f040 812b 	bne.w	8000f8e <HAL_LTDC_MspInit+0x27a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d38:	4b98      	ldr	r3, [pc, #608]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3c:	4a97      	ldr	r2, [pc, #604]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000d3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d42:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d44:	4b95      	ldr	r3, [pc, #596]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d50:	4b92      	ldr	r3, [pc, #584]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d54:	4a91      	ldr	r2, [pc, #580]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000d56:	f043 0310 	orr.w	r3, r3, #16
 8000d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5c:	4b8f      	ldr	r3, [pc, #572]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d60:	f003 0310 	and.w	r3, r3, #16
 8000d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b8c      	ldr	r3, [pc, #560]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6c:	4a8b      	ldr	r2, [pc, #556]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d74:	4b89      	ldr	r3, [pc, #548]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d80:	4b86      	ldr	r3, [pc, #536]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d84:	4a85      	ldr	r2, [pc, #532]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8c:	4b83      	ldr	r3, [pc, #524]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d98:	4b80      	ldr	r3, [pc, #512]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9c:	4a7f      	ldr	r2, [pc, #508]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da4:	4b7d      	ldr	r3, [pc, #500]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dac:	623b      	str	r3, [r7, #32]
 8000dae:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db0:	4b7a      	ldr	r3, [pc, #488]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db4:	4a79      	ldr	r2, [pc, #484]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000db6:	f043 0308 	orr.w	r3, r3, #8
 8000dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbc:	4b77      	ldr	r3, [pc, #476]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc8:	4b74      	ldr	r3, [pc, #464]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dcc:	4a73      	ldr	r2, [pc, #460]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd4:	4b71      	ldr	r3, [pc, #452]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b6e      	ldr	r3, [pc, #440]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de4:	4a6d      	ldr	r2, [pc, #436]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dec:	4b6b      	ldr	r3, [pc, #428]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000df8:	4b68      	ldr	r3, [pc, #416]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	4a67      	ldr	r2, [pc, #412]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e04:	4b65      	ldr	r3, [pc, #404]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e10:	4b62      	ldr	r3, [pc, #392]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e14:	4a61      	ldr	r2, [pc, #388]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000e16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1c:	4b5f      	ldr	r3, [pc, #380]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e28:	4b5c      	ldr	r3, [pc, #368]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	4a5b      	ldr	r2, [pc, #364]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e34:	4b59      	ldr	r3, [pc, #356]	@ (8000f9c <HAL_LTDC_MspInit+0x288>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
    PI14     ------> LTDC_CLK
    PH3     ------> LTDC_R1
    PG6     ------> LTDC_R7
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e40:	2370      	movs	r3, #112	@ 0x70
 8000e42:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e50:	230e      	movs	r3, #14
 8000e52:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e54:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4851      	ldr	r0, [pc, #324]	@ (8000fa0 <HAL_LTDC_MspInit+0x28c>)
 8000e5c:	f001 f896 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e64:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e72:	230e      	movs	r3, #14
 8000e74:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4849      	ldr	r0, [pc, #292]	@ (8000fa4 <HAL_LTDC_MspInit+0x290>)
 8000e7e:	f001 f885 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_6;
 8000e82:	f44f 5321 	mov.w	r3, #10304	@ 0x2840
 8000e86:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e94:	230e      	movs	r3, #14
 8000e96:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e98:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4842      	ldr	r0, [pc, #264]	@ (8000fa8 <HAL_LTDC_MspInit+0x294>)
 8000ea0:	f001 f874 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ea8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eb6:	230e      	movs	r3, #14
 8000eb8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000eba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	483a      	ldr	r0, [pc, #232]	@ (8000fac <HAL_LTDC_MspInit+0x298>)
 8000ec2:	f001 f863 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8000ec6:	2348      	movs	r3, #72	@ 0x48
 8000ec8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed6:	230e      	movs	r3, #14
 8000ed8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eda:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4833      	ldr	r0, [pc, #204]	@ (8000fb0 <HAL_LTDC_MspInit+0x29c>)
 8000ee2:	f001 f853 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ef8:	230e      	movs	r3, #14
 8000efa:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f00:	4619      	mov	r1, r3
 8000f02:	482c      	ldr	r0, [pc, #176]	@ (8000fb4 <HAL_LTDC_MspInit+0x2a0>)
 8000f04:	f001 f842 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8;
 8000f08:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f0c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f1a:	230e      	movs	r3, #14
 8000f1c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f22:	4619      	mov	r1, r3
 8000f24:	4824      	ldr	r0, [pc, #144]	@ (8000fb8 <HAL_LTDC_MspInit+0x2a4>)
 8000f26:	f001 f831 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_9
 8000f2a:	f244 6313 	movw	r3, #17939	@ 0x4613
 8000f2e:	637b      	str	r3, [r7, #52]	@ 0x34
                          |GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f3c:	230e      	movs	r3, #14
 8000f3e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f40:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f44:	4619      	mov	r1, r3
 8000f46:	481d      	ldr	r0, [pc, #116]	@ (8000fbc <HAL_LTDC_MspInit+0x2a8>)
 8000f48:	f001 f820 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_4;
 8000f4c:	2390      	movs	r3, #144	@ 0x90
 8000f4e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f5c:	230e      	movs	r3, #14
 8000f5e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f60:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f64:	4619      	mov	r1, r3
 8000f66:	4816      	ldr	r0, [pc, #88]	@ (8000fc0 <HAL_LTDC_MspInit+0x2ac>)
 8000f68:	f001 f810 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 8000f6c:	f24e 2308 	movw	r3, #57864	@ 0xe208
 8000f70:	637b      	str	r3, [r7, #52]	@ 0x34
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f7e:	230e      	movs	r3, #14
 8000f80:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f86:	4619      	mov	r1, r3
 8000f88:	480e      	ldr	r0, [pc, #56]	@ (8000fc4 <HAL_LTDC_MspInit+0x2b0>)
 8000f8a:	f000 ffff 	bl	8001f8c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8000f8e:	bf00      	nop
 8000f90:	3748      	adds	r7, #72	@ 0x48
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40016800 	.word	0x40016800
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40021800 	.word	0x40021800
 8000fac:	40022400 	.word	0x40022400
 8000fb0:	40020c00 	.word	0x40020c00
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40022000 	.word	0x40022000
 8000fc0:	40022800 	.word	0x40022800
 8000fc4:	40021c00 	.word	0x40021c00

08000fc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <HAL_TIM_Base_MspInit+0x38>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d10b      	bne.n	8000ff2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fda:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <HAL_TIM_Base_MspInit+0x3c>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	4a09      	ldr	r2, [pc, #36]	@ (8001004 <HAL_TIM_Base_MspInit+0x3c>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <HAL_TIM_Base_MspInit+0x3c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40010000 	.word	0x40010000
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b0ac      	sub	sp, #176	@ 0xb0
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001020:	f107 0318 	add.w	r3, r7, #24
 8001024:	2284      	movs	r2, #132	@ 0x84
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f004 f83f 	bl	80050ac <memset>
  if(huart->Instance==USART1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a32      	ldr	r2, [pc, #200]	@ (80010fc <HAL_UART_MspInit+0xf4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d15c      	bne.n	80010f2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001038:	2340      	movs	r3, #64	@ 0x40
 800103a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800103c:	2300      	movs	r3, #0
 800103e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	4618      	mov	r0, r3
 8001046:	f002 f8df 	bl	8003208 <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001050:	f7ff fe16 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001054:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <HAL_UART_MspInit+0xf8>)
 8001056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001058:	4a29      	ldr	r2, [pc, #164]	@ (8001100 <HAL_UART_MspInit+0xf8>)
 800105a:	f043 0310 	orr.w	r3, r3, #16
 800105e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <HAL_UART_MspInit+0xf8>)
 8001062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001064:	f003 0310 	and.w	r3, r3, #16
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <HAL_UART_MspInit+0xf8>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001070:	4a23      	ldr	r2, [pc, #140]	@ (8001100 <HAL_UART_MspInit+0xf8>)
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	6313      	str	r3, [r2, #48]	@ 0x30
 8001078:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <HAL_UART_MspInit+0xf8>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <HAL_UART_MspInit+0xf8>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	4a1d      	ldr	r2, [pc, #116]	@ (8001100 <HAL_UART_MspInit+0xf8>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <HAL_UART_MspInit+0xf8>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800109c:	2380      	movs	r3, #128	@ 0x80
 800109e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b4:	2307      	movs	r3, #7
 80010b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010be:	4619      	mov	r1, r3
 80010c0:	4810      	ldr	r0, [pc, #64]	@ (8001104 <HAL_UART_MspInit+0xfc>)
 80010c2:	f000 ff63 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010e0:	2307      	movs	r3, #7
 80010e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010ea:	4619      	mov	r1, r3
 80010ec:	4806      	ldr	r0, [pc, #24]	@ (8001108 <HAL_UART_MspInit+0x100>)
 80010ee:	f000 ff4d 	bl	8001f8c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80010f2:	bf00      	nop
 80010f4:	37b0      	adds	r7, #176	@ 0xb0
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40011000 	.word	0x40011000
 8001100:	40023800 	.word	0x40023800
 8001104:	40020400 	.word	0x40020400
 8001108:	40020000 	.word	0x40020000

0800110c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001120:	4b3a      	ldr	r3, [pc, #232]	@ (800120c <HAL_FMC_MspInit+0x100>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d16d      	bne.n	8001204 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001128:	4b38      	ldr	r3, [pc, #224]	@ (800120c <HAL_FMC_MspInit+0x100>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800112e:	4b38      	ldr	r3, [pc, #224]	@ (8001210 <HAL_FMC_MspInit+0x104>)
 8001130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001132:	4a37      	ldr	r2, [pc, #220]	@ (8001210 <HAL_FMC_MspInit+0x104>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6393      	str	r3, [r2, #56]	@ 0x38
 800113a:	4b35      	ldr	r3, [pc, #212]	@ (8001210 <HAL_FMC_MspInit+0x104>)
 800113c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2
 8001146:	f248 1337 	movw	r3, #33079	@ 0x8137
 800114a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001158:	230c      	movs	r3, #12
 800115a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4619      	mov	r1, r3
 8001160:	482c      	ldr	r0, [pc, #176]	@ (8001214 <HAL_FMC_MspInit+0x108>)
 8001162:	f000 ff13 	bl	8001f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001166:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800116a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001178:	230c      	movs	r3, #12
 800117a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4619      	mov	r1, r3
 8001180:	4825      	ldr	r0, [pc, #148]	@ (8001218 <HAL_FMC_MspInit+0x10c>)
 8001182:	f000 ff03 	bl	8001f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001186:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800118a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001198:	230c      	movs	r3, #12
 800119a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	481e      	ldr	r0, [pc, #120]	@ (800121c <HAL_FMC_MspInit+0x110>)
 80011a2:	f000 fef3 	bl	8001f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_2;
 80011a6:	2324      	movs	r3, #36	@ 0x24
 80011a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011b6:	230c      	movs	r3, #12
 80011b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4818      	ldr	r0, [pc, #96]	@ (8001220 <HAL_FMC_MspInit+0x114>)
 80011c0:	f000 fee4 	bl	8001f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011c4:	2304      	movs	r3, #4
 80011c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011d4:	230c      	movs	r3, #12
 80011d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	4811      	ldr	r0, [pc, #68]	@ (8001224 <HAL_FMC_MspInit+0x118>)
 80011de:	f000 fed5 	bl	8001f8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 80011e2:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80011e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011f4:	230c      	movs	r3, #12
 80011f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	480a      	ldr	r0, [pc, #40]	@ (8001228 <HAL_FMC_MspInit+0x11c>)
 80011fe:	f000 fec5 	bl	8001f8c <HAL_GPIO_Init>
 8001202:	e000      	b.n	8001206 <HAL_FMC_MspInit+0xfa>
    return;
 8001204:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200003e0 	.word	0x200003e0
 8001210:	40023800 	.word	0x40023800
 8001214:	40021800 	.word	0x40021800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40021400 	.word	0x40021400
 8001220:	40021c00 	.word	0x40021c00
 8001224:	40020800 	.word	0x40020800
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001234:	f7ff ff6a 	bl	800110c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a6a      	ldr	r2, [pc, #424]	@ (80013f8 <HAL_SAI_MspInit+0x1b8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d16a      	bne.n	8001328 <HAL_SAI_MspInit+0xe8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8001252:	4b6a      	ldr	r3, [pc, #424]	@ (80013fc <HAL_SAI_MspInit+0x1bc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10b      	bne.n	8001272 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800125a:	4b69      	ldr	r3, [pc, #420]	@ (8001400 <HAL_SAI_MspInit+0x1c0>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	4a68      	ldr	r2, [pc, #416]	@ (8001400 <HAL_SAI_MspInit+0x1c0>)
 8001260:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001264:	6453      	str	r3, [r2, #68]	@ 0x44
 8001266:	4b66      	ldr	r3, [pc, #408]	@ (8001400 <HAL_SAI_MspInit+0x1c0>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001272:	4b62      	ldr	r3, [pc, #392]	@ (80013fc <HAL_SAI_MspInit+0x1bc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	4a60      	ldr	r2, [pc, #384]	@ (80013fc <HAL_SAI_MspInit+0x1bc>)
 800127a:	6013      	str	r3, [r2, #0]
    PE0     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800127c:	2301      	movs	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800128c:	230a      	movs	r3, #10
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	485b      	ldr	r0, [pc, #364]	@ (8001404 <HAL_SAI_MspInit+0x1c4>)
 8001298:	f000 fe78 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 800129c:	23e0      	movs	r3, #224	@ 0xe0
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80012ac:	230a      	movs	r3, #10
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	4854      	ldr	r0, [pc, #336]	@ (8001408 <HAL_SAI_MspInit+0x1c8>)
 80012b8:	f000 fe68 	bl	8001f8c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 80012bc:	4b53      	ldr	r3, [pc, #332]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 80012be:	4a54      	ldr	r2, [pc, #336]	@ (8001410 <HAL_SAI_MspInit+0x1d0>)
 80012c0:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 80012c2:	4b52      	ldr	r3, [pc, #328]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 80012c4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80012c8:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ca:	4b50      	ldr	r3, [pc, #320]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 80012cc:	2240      	movs	r2, #64	@ 0x40
 80012ce:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d0:	4b4e      	ldr	r3, [pc, #312]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80012d6:	4b4d      	ldr	r3, [pc, #308]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 80012d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012dc:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012de:	4b4b      	ldr	r3, [pc, #300]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012e4:	4b49      	ldr	r3, [pc, #292]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80012ea:	4b48      	ldr	r3, [pc, #288]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 80012ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012f0:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 80012f2:	4b46      	ldr	r3, [pc, #280]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 80012f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012f8:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012fa:	4b44      	ldr	r3, [pc, #272]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8001300:	4842      	ldr	r0, [pc, #264]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 8001302:	f000 fa7d 	bl	8001800 <HAL_DMA_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_SAI_MspInit+0xd0>
    {
      Error_Handler();
 800130c:	f7ff fcb8 	bl	8000c80 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a3e      	ldr	r2, [pc, #248]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 8001314:	671a      	str	r2, [r3, #112]	@ 0x70
 8001316:	4a3d      	ldr	r2, [pc, #244]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a3b      	ldr	r2, [pc, #236]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 8001320:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001322:	4a3a      	ldr	r2, [pc, #232]	@ (800140c <HAL_SAI_MspInit+0x1cc>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a39      	ldr	r2, [pc, #228]	@ (8001414 <HAL_SAI_MspInit+0x1d4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d15d      	bne.n	80013ee <HAL_SAI_MspInit+0x1ae>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8001332:	4b32      	ldr	r3, [pc, #200]	@ (80013fc <HAL_SAI_MspInit+0x1bc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10b      	bne.n	8001352 <HAL_SAI_MspInit+0x112>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800133a:	4b31      	ldr	r3, [pc, #196]	@ (8001400 <HAL_SAI_MspInit+0x1c0>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133e:	4a30      	ldr	r2, [pc, #192]	@ (8001400 <HAL_SAI_MspInit+0x1c0>)
 8001340:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001344:	6453      	str	r3, [r2, #68]	@ 0x44
 8001346:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <HAL_SAI_MspInit+0x1c0>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <HAL_SAI_MspInit+0x1bc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a28      	ldr	r2, [pc, #160]	@ (80013fc <HAL_SAI_MspInit+0x1bc>)
 800135a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800135c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800136e:	230a      	movs	r3, #10
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4827      	ldr	r0, [pc, #156]	@ (8001418 <HAL_SAI_MspInit+0x1d8>)
 800137a:	f000 fe07 	bl	8001f8c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream6;
 800137e:	4b27      	ldr	r3, [pc, #156]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 8001380:	4a27      	ldr	r2, [pc, #156]	@ (8001420 <HAL_SAI_MspInit+0x1e0>)
 8001382:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 8001384:	4b25      	ldr	r3, [pc, #148]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 8001386:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800138a:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800138c:	4b23      	ldr	r3, [pc, #140]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001392:	4b22      	ldr	r3, [pc, #136]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001398:	4b20      	ldr	r3, [pc, #128]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 800139a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800139e:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 80013a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013a6:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 80013aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013ae:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 80013b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013b6:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 80013b8:	4b18      	ldr	r3, [pc, #96]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 80013ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013be:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80013c6:	4815      	ldr	r0, [pc, #84]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 80013c8:	f000 fa1a 	bl	8001800 <HAL_DMA_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_SAI_MspInit+0x196>
    {
      Error_Handler();
 80013d2:	f7ff fc55 	bl	8000c80 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a10      	ldr	r2, [pc, #64]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 80013da:	671a      	str	r2, [r3, #112]	@ 0x70
 80013dc:	4a0f      	ldr	r2, [pc, #60]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a0d      	ldr	r2, [pc, #52]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 80013e6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80013e8:	4a0c      	ldr	r2, [pc, #48]	@ (800141c <HAL_SAI_MspInit+0x1dc>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 80013ee:	bf00      	nop
 80013f0:	3728      	adds	r7, #40	@ 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40015c04 	.word	0x40015c04
 80013fc:	200003e4 	.word	0x200003e4
 8001400:	40023800 	.word	0x40023800
 8001404:	40021000 	.word	0x40021000
 8001408:	40022000 	.word	0x40022000
 800140c:	20000218 	.word	0x20000218
 8001410:	40026470 	.word	0x40026470
 8001414:	40015c24 	.word	0x40015c24
 8001418:	40021800 	.word	0x40021800
 800141c:	20000278 	.word	0x20000278
 8001420:	400264a0 	.word	0x400264a0

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <NMI_Handler+0x4>

0800142c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <MemManage_Handler+0x4>

0800143c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <BusFault_Handler+0x4>

08001444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <UsageFault_Handler+0x4>

0800144c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147a:	f000 f88f 	bl	800159c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001488:	4802      	ldr	r0, [pc, #8]	@ (8001494 <DMA2_Stream4_IRQHandler+0x10>)
 800148a:	f000 fa67 	bl	800195c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000218 	.word	0x20000218

08001498 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800149c:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <DMA2_Stream6_IRQHandler+0x10>)
 800149e:	f000 fa5d 	bl	800195c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000278 	.word	0x20000278

080014ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <SystemInit+0x20>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b6:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <SystemInit+0x20>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001508 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014d4:	f7ff ffea 	bl	80014ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d8:	480c      	ldr	r0, [pc, #48]	@ (800150c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014da:	490d      	ldr	r1, [pc, #52]	@ (8001510 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f0:	4c0a      	ldr	r4, [pc, #40]	@ (800151c <LoopFillZerobss+0x22>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f003 fddd 	bl	80050bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001502:	f7fe fff9 	bl	80004f8 <main>
  bx  lr    
 8001506:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001508:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001514:	0800514c 	.word	0x0800514c
  ldr r2, =_sbss
 8001518:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800151c:	200003ec 	.word	0x200003ec

08001520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC_IRQHandler>

08001522 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001526:	2003      	movs	r0, #3
 8001528:	f000 f928 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152c:	2000      	movs	r0, #0
 800152e:	f000 f805 	bl	800153c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001532:	f7ff fbab 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001544:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <HAL_InitTick+0x54>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <HAL_InitTick+0x58>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001552:	fbb3 f3f1 	udiv	r3, r3, r1
 8001556:	fbb2 f3f3 	udiv	r3, r2, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f943 	bl	80017e6 <HAL_SYSTICK_Config>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e00e      	b.n	8001588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d80a      	bhi.n	8001586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001570:	2200      	movs	r2, #0
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f000 f90b 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800157c:	4a06      	ldr	r2, [pc, #24]	@ (8001598 <HAL_InitTick+0x5c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e000      	b.n	8001588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000000 	.word	0x20000000
 8001594:	20000008 	.word	0x20000008
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_IncTick+0x20>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_IncTick+0x24>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <HAL_IncTick+0x24>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008
 80015c0:	200003e8 	.word	0x200003e8

080015c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;
 80015c8:	4b03      	ldr	r3, [pc, #12]	@ (80015d8 <HAL_GetTick+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	200003e8 	.word	0x200003e8

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <__NVIC_SetPriorityGrouping+0x40>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	4313      	orrs	r3, r2
 8001608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160a:	4a04      	ldr	r2, [pc, #16]	@ (800161c <__NVIC_SetPriorityGrouping+0x40>)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	60d3      	str	r3, [r2, #12]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00
 8001620:	05fa0000 	.word	0x05fa0000

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	@ (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4907      	ldr	r1, [pc, #28]	@ (8001678 <__NVIC_EnableIRQ+0x38>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	@ (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	@ (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	@ 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	@ 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	@ (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f7ff ff8e 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff29 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff3e 	bl	8001624 <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff8e 	bl	80016d0 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5d 	bl	800167c <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff31 	bl	8001640 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa2 	bl	8001738 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff feda 	bl	80015c4 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e099      	b.n	8001950 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0201 	bic.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800183c:	e00f      	b.n	800185e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800183e:	f7ff fec1 	bl	80015c4 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b05      	cmp	r3, #5
 800184a:	d908      	bls.n	800185e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2220      	movs	r2, #32
 8001850:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2203      	movs	r2, #3
 8001856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e078      	b.n	8001950 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1e8      	bne.n	800183e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	4b38      	ldr	r3, [pc, #224]	@ (8001958 <HAL_DMA_Init+0x158>)
 8001878:	4013      	ands	r3, r2
 800187a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800188a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d107      	bne.n	80018c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c0:	4313      	orrs	r3, r2
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f023 0307 	bic.w	r3, r3, #7
 80018de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d117      	bne.n	8001922 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00e      	beq.n	8001922 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f9e9 	bl	8001cdc <DMA_CheckFifoParam>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2240      	movs	r2, #64	@ 0x40
 8001914:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800191e:	2301      	movs	r3, #1
 8001920:	e016      	b.n	8001950 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f9a0 	bl	8001c70 <DMA_CalcBaseAndBitshift>
 8001930:	4603      	mov	r3, r0
 8001932:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001938:	223f      	movs	r2, #63	@ 0x3f
 800193a:	409a      	lsls	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	f010803f 	.word	0xf010803f

0800195c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001968:	4b8e      	ldr	r3, [pc, #568]	@ (8001ba4 <HAL_DMA_IRQHandler+0x248>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a8e      	ldr	r2, [pc, #568]	@ (8001ba8 <HAL_DMA_IRQHandler+0x24c>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0a9b      	lsrs	r3, r3, #10
 8001974:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001986:	2208      	movs	r2, #8
 8001988:	409a      	lsls	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d01a      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0204 	bic.w	r2, r2, #4
 80019ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b4:	2208      	movs	r2, #8
 80019b6:	409a      	lsls	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019cc:	2201      	movs	r2, #1
 80019ce:	409a      	lsls	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d012      	beq.n	80019fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ea:	2201      	movs	r2, #1
 80019ec:	409a      	lsls	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f6:	f043 0202 	orr.w	r2, r3, #2
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a02:	2204      	movs	r2, #4
 8001a04:	409a      	lsls	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d012      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00b      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a20:	2204      	movs	r2, #4
 8001a22:	409a      	lsls	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a2c:	f043 0204 	orr.w	r2, r3, #4
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a38:	2210      	movs	r2, #16
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d043      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d03c      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a56:	2210      	movs	r2, #16
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d018      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d108      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d024      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
 8001a8a:	e01f      	b.n	8001acc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01b      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4798      	blx	r3
 8001a9c:	e016      	b.n	8001acc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d107      	bne.n	8001abc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0208 	bic.w	r2, r2, #8
 8001aba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 808f 	beq.w	8001bfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 8087 	beq.w	8001bfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af2:	2220      	movs	r2, #32
 8001af4:	409a      	lsls	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d136      	bne.n	8001b74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0216 	bic.w	r2, r2, #22
 8001b14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d103      	bne.n	8001b36 <HAL_DMA_IRQHandler+0x1da>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0208 	bic.w	r2, r2, #8
 8001b44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4a:	223f      	movs	r2, #63	@ 0x3f
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d07e      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	4798      	blx	r3
        }
        return;
 8001b72:	e079      	b.n	8001c68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d01d      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10d      	bne.n	8001bac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d031      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
 8001ba0:	e02c      	b.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d023      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
 8001bbc:	e01e      	b.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10f      	bne.n	8001bec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0210 	bic.w	r2, r2, #16
 8001bda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d032      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d022      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2205      	movs	r2, #5
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d307      	bcc.n	8001c44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f2      	bne.n	8001c28 <HAL_DMA_IRQHandler+0x2cc>
 8001c42:	e000      	b.n	8001c46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	4798      	blx	r3
 8001c66:	e000      	b.n	8001c6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c68:	bf00      	nop
    }
  }
}
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	3b10      	subs	r3, #16
 8001c80:	4a13      	ldr	r2, [pc, #76]	@ (8001cd0 <DMA_CalcBaseAndBitshift+0x60>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c8a:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <DMA_CalcBaseAndBitshift+0x64>)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d908      	bls.n	8001cb0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <DMA_CalcBaseAndBitshift+0x68>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	1d1a      	adds	r2, r3, #4
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cae:	e006      	b.n	8001cbe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <DMA_CalcBaseAndBitshift+0x68>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	aaaaaaab 	.word	0xaaaaaaab
 8001cd4:	08005134 	.word	0x08005134
 8001cd8:	fffffc00 	.word	0xfffffc00

08001cdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d11f      	bne.n	8001d36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d856      	bhi.n	8001daa <DMA_CheckFifoParam+0xce>
 8001cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8001d04 <DMA_CheckFifoParam+0x28>)
 8001cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d02:	bf00      	nop
 8001d04:	08001d15 	.word	0x08001d15
 8001d08:	08001d27 	.word	0x08001d27
 8001d0c:	08001d15 	.word	0x08001d15
 8001d10:	08001dab 	.word	0x08001dab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d046      	beq.n	8001dae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d24:	e043      	b.n	8001dae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d2e:	d140      	bne.n	8001db2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d34:	e03d      	b.n	8001db2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d3e:	d121      	bne.n	8001d84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d837      	bhi.n	8001db6 <DMA_CheckFifoParam+0xda>
 8001d46:	a201      	add	r2, pc, #4	@ (adr r2, 8001d4c <DMA_CheckFifoParam+0x70>)
 8001d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4c:	08001d5d 	.word	0x08001d5d
 8001d50:	08001d63 	.word	0x08001d63
 8001d54:	08001d5d 	.word	0x08001d5d
 8001d58:	08001d75 	.word	0x08001d75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d60:	e030      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d025      	beq.n	8001dba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d72:	e022      	b.n	8001dba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d7c:	d11f      	bne.n	8001dbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d82:	e01c      	b.n	8001dbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d903      	bls.n	8001d92 <DMA_CheckFifoParam+0xb6>
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d003      	beq.n	8001d98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d90:	e018      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
      break;
 8001d96:	e015      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00e      	beq.n	8001dc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
      break;
 8001da8:	e00b      	b.n	8001dc2 <DMA_CheckFifoParam+0xe6>
      break;
 8001daa:	bf00      	nop
 8001dac:	e00a      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dae:	bf00      	nop
 8001db0:	e008      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001db2:	bf00      	nop
 8001db4:	e006      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001db6:	bf00      	nop
 8001db8:	e004      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dba:	bf00      	nop
 8001dbc:	e002      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dbe:	bf00      	nop
 8001dc0:	e000      	b.n	8001dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dc2:	bf00      	nop
    }
  } 
  
  return status; 
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop

08001dd4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e039      	b.n	8001e5a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d106      	bne.n	8001e00 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7fe ff6a 	bl	8000cd4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e24:	f023 0107 	bic.w	r1, r3, #7
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_DMA2D_Init+0x90>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68d1      	ldr	r1, [r2, #12]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	430b      	orrs	r3, r1
 8001e48:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	ffffc000 	.word	0xffffc000

08001e68 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_DMA2D_ConfigLayer+0x20>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e079      	b.n	8001f7c <HAL_DMA2D_ConfigLayer+0x114>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	3318      	adds	r3, #24
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	041b      	lsls	r3, r3, #16
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001eb2:	4b35      	ldr	r3, [pc, #212]	@ (8001f88 <HAL_DMA2D_ConfigLayer+0x120>)
 8001eb4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b0a      	cmp	r3, #10
 8001ebc:	d003      	beq.n	8001ec6 <HAL_DMA2D_ConfigLayer+0x5e>
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b09      	cmp	r3, #9
 8001ec4:	d107      	bne.n	8001ed6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e005      	b.n	8001ee2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	061b      	lsls	r3, r3, #24
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d120      	bne.n	8001f2a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	ea02 0103 	and.w	r1, r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b0a      	cmp	r3, #10
 8001f10:	d003      	beq.n	8001f1a <HAL_DMA2D_ConfigLayer+0xb2>
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b09      	cmp	r3, #9
 8001f18:	d127      	bne.n	8001f6a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001f26:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f28:	e01f      	b.n	8001f6a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	ea02 0103 	and.w	r1, r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b0a      	cmp	r3, #10
 8001f52:	d003      	beq.n	8001f5c <HAL_DMA2D_ConfigLayer+0xf4>
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b09      	cmp	r3, #9
 8001f5a:	d106      	bne.n	8001f6a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001f68:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	ff03000f 	.word	0xff03000f

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e175      	b.n	8002298 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 8164 	bne.w	8002292 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_GPIO_Init+0x56>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d130      	bne.n	8002044 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80be 	beq.w	8002292 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	4b66      	ldr	r3, [pc, #408]	@ (80022b0 <HAL_GPIO_Init+0x324>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	4a65      	ldr	r2, [pc, #404]	@ (80022b0 <HAL_GPIO_Init+0x324>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002120:	6453      	str	r3, [r2, #68]	@ 0x44
 8002122:	4b63      	ldr	r3, [pc, #396]	@ (80022b0 <HAL_GPIO_Init+0x324>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800212e:	4a61      	ldr	r2, [pc, #388]	@ (80022b4 <HAL_GPIO_Init+0x328>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a58      	ldr	r2, [pc, #352]	@ (80022b8 <HAL_GPIO_Init+0x32c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d037      	beq.n	80021ca <HAL_GPIO_Init+0x23e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a57      	ldr	r2, [pc, #348]	@ (80022bc <HAL_GPIO_Init+0x330>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d031      	beq.n	80021c6 <HAL_GPIO_Init+0x23a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a56      	ldr	r2, [pc, #344]	@ (80022c0 <HAL_GPIO_Init+0x334>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <HAL_GPIO_Init+0x236>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a55      	ldr	r2, [pc, #340]	@ (80022c4 <HAL_GPIO_Init+0x338>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x232>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a54      	ldr	r2, [pc, #336]	@ (80022c8 <HAL_GPIO_Init+0x33c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x22e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a53      	ldr	r2, [pc, #332]	@ (80022cc <HAL_GPIO_Init+0x340>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x22a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a52      	ldr	r2, [pc, #328]	@ (80022d0 <HAL_GPIO_Init+0x344>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x226>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a51      	ldr	r2, [pc, #324]	@ (80022d4 <HAL_GPIO_Init+0x348>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x222>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a50      	ldr	r2, [pc, #320]	@ (80022d8 <HAL_GPIO_Init+0x34c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x21e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4f      	ldr	r2, [pc, #316]	@ (80022dc <HAL_GPIO_Init+0x350>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x21a>
 80021a2:	2309      	movs	r3, #9
 80021a4:	e012      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021a6:	230a      	movs	r3, #10
 80021a8:	e010      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00e      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ae:	2307      	movs	r3, #7
 80021b0:	e00c      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021b2:	2306      	movs	r3, #6
 80021b4:	e00a      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021b6:	2305      	movs	r3, #5
 80021b8:	e008      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ba:	2304      	movs	r3, #4
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021be:	2303      	movs	r3, #3
 80021c0:	e004      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ca:	2300      	movs	r3, #0
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	f002 0203 	and.w	r2, r2, #3
 80021d2:	0092      	lsls	r2, r2, #2
 80021d4:	4093      	lsls	r3, r2
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021dc:	4935      	ldr	r1, [pc, #212]	@ (80022b4 <HAL_GPIO_Init+0x328>)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ea:	4b3d      	ldr	r3, [pc, #244]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220e:	4a34      	ldr	r2, [pc, #208]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002214:	4b32      	ldr	r3, [pc, #200]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002238:	4a29      	ldr	r2, [pc, #164]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800223e:	4b28      	ldr	r3, [pc, #160]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002262:	4a1f      	ldr	r2, [pc, #124]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002268:	4b1d      	ldr	r3, [pc, #116]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800228c:	4a14      	ldr	r2, [pc, #80]	@ (80022e0 <HAL_GPIO_Init+0x354>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3301      	adds	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b0f      	cmp	r3, #15
 800229c:	f67f ae86 	bls.w	8001fac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3724      	adds	r7, #36	@ 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40013800 	.word	0x40013800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40020800 	.word	0x40020800
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40021400 	.word	0x40021400
 80022d0:	40021800 	.word	0x40021800
 80022d4:	40021c00 	.word	0x40021c00
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40022400 	.word	0x40022400
 80022e0:	40013c00 	.word	0x40013c00

080022e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0bf      	b.n	8002476 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fd02 	bl	8000d14 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002326:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6999      	ldr	r1, [r3, #24]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800233c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6899      	ldr	r1, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4b4a      	ldr	r3, [pc, #296]	@ (8002480 <HAL_LTDC_Init+0x19c>)
 8002358:	400b      	ands	r3, r1
 800235a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6899      	ldr	r1, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68d9      	ldr	r1, [r3, #12]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b3e      	ldr	r3, [pc, #248]	@ (8002480 <HAL_LTDC_Init+0x19c>)
 8002386:	400b      	ands	r3, r1
 8002388:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	041b      	lsls	r3, r3, #16
 8002390:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68d9      	ldr	r1, [r3, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6919      	ldr	r1, [r3, #16]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4b33      	ldr	r3, [pc, #204]	@ (8002480 <HAL_LTDC_Init+0x19c>)
 80023b4:	400b      	ands	r3, r1
 80023b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	041b      	lsls	r3, r3, #16
 80023be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6919      	ldr	r1, [r3, #16]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6959      	ldr	r1, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b27      	ldr	r3, [pc, #156]	@ (8002480 <HAL_LTDC_Init+0x19c>)
 80023e2:	400b      	ands	r3, r1
 80023e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ea:	041b      	lsls	r3, r3, #16
 80023ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6959      	ldr	r1, [r3, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002426:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0206 	orr.w	r2, r2, #6
 8002452:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	f000f800 	.word	0xf000f800

08002484 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002484:	b5b0      	push	{r4, r5, r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_LTDC_ConfigLayer+0x1a>
 800249a:	2302      	movs	r3, #2
 800249c:	e02c      	b.n	80024f8 <HAL_LTDC_ConfigLayer+0x74>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2134      	movs	r1, #52	@ 0x34
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4614      	mov	r4, r2
 80024c2:	461d      	mov	r5, r3
 80024c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d0:	682b      	ldr	r3, [r5, #0]
 80024d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f811 	bl	8002500 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2201      	movs	r2, #1
 80024e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bdb0      	pop	{r4, r5, r7, pc}

08002500 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	@ 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	0c1b      	lsrs	r3, r3, #16
 8002518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251c:	4413      	add	r3, r2
 800251e:	041b      	lsls	r3, r3, #16
 8002520:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	01db      	lsls	r3, r3, #7
 800252c:	4413      	add	r3, r2
 800252e:	3384      	adds	r3, #132	@ 0x84
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	4611      	mov	r1, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	01d2      	lsls	r2, r2, #7
 800253c:	440a      	add	r2, r1
 800253e:	3284      	adds	r2, #132	@ 0x84
 8002540:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002544:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002556:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002558:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4619      	mov	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	01db      	lsls	r3, r3, #7
 8002564:	440b      	add	r3, r1
 8002566:	3384      	adds	r3, #132	@ 0x84
 8002568:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800256e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800257e:	4413      	add	r3, r2
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	01db      	lsls	r3, r3, #7
 800258e:	4413      	add	r3, r2
 8002590:	3384      	adds	r3, #132	@ 0x84
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	4611      	mov	r1, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	01d2      	lsls	r2, r2, #7
 800259e:	440a      	add	r2, r1
 80025a0:	3284      	adds	r2, #132	@ 0x84
 80025a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80025a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b6:	4413      	add	r3, r2
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4619      	mov	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	01db      	lsls	r3, r3, #7
 80025c4:	440b      	add	r3, r1
 80025c6:	3384      	adds	r3, #132	@ 0x84
 80025c8:	4619      	mov	r1, r3
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	01db      	lsls	r3, r3, #7
 80025da:	4413      	add	r3, r2
 80025dc:	3384      	adds	r3, #132	@ 0x84
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	4611      	mov	r1, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	01d2      	lsls	r2, r2, #7
 80025ea:	440a      	add	r2, r1
 80025ec:	3284      	adds	r2, #132	@ 0x84
 80025ee:	f023 0307 	bic.w	r3, r3, #7
 80025f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	01db      	lsls	r3, r3, #7
 80025fe:	4413      	add	r3, r2
 8002600:	3384      	adds	r3, #132	@ 0x84
 8002602:	461a      	mov	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800261a:	041b      	lsls	r3, r3, #16
 800261c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	061b      	lsls	r3, r3, #24
 8002624:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	01db      	lsls	r3, r3, #7
 8002630:	4413      	add	r3, r2
 8002632:	3384      	adds	r3, #132	@ 0x84
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	01db      	lsls	r3, r3, #7
 8002640:	4413      	add	r3, r2
 8002642:	3384      	adds	r3, #132	@ 0x84
 8002644:	461a      	mov	r2, r3
 8002646:	2300      	movs	r3, #0
 8002648:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002650:	461a      	mov	r2, r3
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	431a      	orrs	r2, r3
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	431a      	orrs	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4619      	mov	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	01db      	lsls	r3, r3, #7
 8002664:	440b      	add	r3, r1
 8002666:	3384      	adds	r3, #132	@ 0x84
 8002668:	4619      	mov	r1, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	01db      	lsls	r3, r3, #7
 800267a:	4413      	add	r3, r2
 800267c:	3384      	adds	r3, #132	@ 0x84
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	4611      	mov	r1, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	01d2      	lsls	r2, r2, #7
 800268a:	440a      	add	r2, r1
 800268c:	3284      	adds	r2, #132	@ 0x84
 800268e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002692:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	01db      	lsls	r3, r3, #7
 800269e:	4413      	add	r3, r2
 80026a0:	3384      	adds	r3, #132	@ 0x84
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	01db      	lsls	r3, r3, #7
 80026b4:	4413      	add	r3, r2
 80026b6:	3384      	adds	r3, #132	@ 0x84
 80026b8:	69da      	ldr	r2, [r3, #28]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4619      	mov	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	01db      	lsls	r3, r3, #7
 80026c4:	440b      	add	r3, r1
 80026c6:	3384      	adds	r3, #132	@ 0x84
 80026c8:	4619      	mov	r1, r3
 80026ca:	4b58      	ldr	r3, [pc, #352]	@ (800282c <LTDC_SetConfig+0x32c>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	68f9      	ldr	r1, [r7, #12]
 80026da:	6809      	ldr	r1, [r1, #0]
 80026dc:	4608      	mov	r0, r1
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	01c9      	lsls	r1, r1, #7
 80026e2:	4401      	add	r1, r0
 80026e4:	3184      	adds	r1, #132	@ 0x84
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	01db      	lsls	r3, r3, #7
 80026f4:	4413      	add	r3, r2
 80026f6:	3384      	adds	r3, #132	@ 0x84
 80026f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	01db      	lsls	r3, r3, #7
 8002704:	4413      	add	r3, r2
 8002706:	3384      	adds	r3, #132	@ 0x84
 8002708:	461a      	mov	r2, r3
 800270a:	2300      	movs	r3, #0
 800270c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	01db      	lsls	r3, r3, #7
 8002718:	4413      	add	r3, r2
 800271a:	3384      	adds	r3, #132	@ 0x84
 800271c:	461a      	mov	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800272c:	2304      	movs	r3, #4
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	e01b      	b.n	800276a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d102      	bne.n	8002740 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800273a:	2303      	movs	r3, #3
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	e014      	b.n	800276a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b04      	cmp	r3, #4
 8002746:	d00b      	beq.n	8002760 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800274c:	2b02      	cmp	r3, #2
 800274e:	d007      	beq.n	8002760 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002754:	2b03      	cmp	r3, #3
 8002756:	d003      	beq.n	8002760 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800275c:	2b07      	cmp	r3, #7
 800275e:	d102      	bne.n	8002766 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002760:	2302      	movs	r3, #2
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	e001      	b.n	800276a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002766:	2301      	movs	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	01db      	lsls	r3, r3, #7
 8002774:	4413      	add	r3, r2
 8002776:	3384      	adds	r3, #132	@ 0x84
 8002778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	4611      	mov	r1, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	01d2      	lsls	r2, r2, #7
 8002784:	440a      	add	r2, r1
 8002786:	3284      	adds	r2, #132	@ 0x84
 8002788:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800278c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	6859      	ldr	r1, [r3, #4]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	1acb      	subs	r3, r1, r3
 80027a4:	69f9      	ldr	r1, [r7, #28]
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	6809      	ldr	r1, [r1, #0]
 80027b0:	4608      	mov	r0, r1
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	01c9      	lsls	r1, r1, #7
 80027b6:	4401      	add	r1, r0
 80027b8:	3184      	adds	r1, #132	@ 0x84
 80027ba:	4313      	orrs	r3, r2
 80027bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	01db      	lsls	r3, r3, #7
 80027c8:	4413      	add	r3, r2
 80027ca:	3384      	adds	r3, #132	@ 0x84
 80027cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	01db      	lsls	r3, r3, #7
 80027d8:	440b      	add	r3, r1
 80027da:	3384      	adds	r3, #132	@ 0x84
 80027dc:	4619      	mov	r1, r3
 80027de:	4b14      	ldr	r3, [pc, #80]	@ (8002830 <LTDC_SetConfig+0x330>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	01db      	lsls	r3, r3, #7
 80027ee:	4413      	add	r3, r2
 80027f0:	3384      	adds	r3, #132	@ 0x84
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	01db      	lsls	r3, r3, #7
 8002804:	4413      	add	r3, r2
 8002806:	3384      	adds	r3, #132	@ 0x84
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	4611      	mov	r1, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	01d2      	lsls	r2, r2, #7
 8002814:	440a      	add	r2, r1
 8002816:	3284      	adds	r2, #132	@ 0x84
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6013      	str	r3, [r2, #0]
}
 800281e:	bf00      	nop
 8002820:	3724      	adds	r7, #36	@ 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	fffff8f8 	.word	0xfffff8f8
 8002830:	fffff800 	.word	0xfffff800

08002834 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002838:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a04      	ldr	r2, [pc, #16]	@ (8002850 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800283e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40007000 	.word	0x40007000

08002854 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	4b23      	ldr	r3, [pc, #140]	@ (80028ec <HAL_PWREx_EnableOverDrive+0x98>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	4a22      	ldr	r2, [pc, #136]	@ (80028ec <HAL_PWREx_EnableOverDrive+0x98>)
 8002864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002868:	6413      	str	r3, [r2, #64]	@ 0x40
 800286a:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <HAL_PWREx_EnableOverDrive+0x98>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002876:	4b1e      	ldr	r3, [pc, #120]	@ (80028f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1d      	ldr	r2, [pc, #116]	@ (80028f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002880:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002882:	f7fe fe9f 	bl	80015c4 <HAL_GetTick>
 8002886:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002888:	e009      	b.n	800289e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800288a:	f7fe fe9b 	bl	80015c4 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002898:	d901      	bls.n	800289e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e022      	b.n	80028e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800289e:	4b14      	ldr	r3, [pc, #80]	@ (80028f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028aa:	d1ee      	bne.n	800288a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028ac:	4b10      	ldr	r3, [pc, #64]	@ (80028f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0f      	ldr	r2, [pc, #60]	@ (80028f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028b8:	f7fe fe84 	bl	80015c4 <HAL_GetTick>
 80028bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028be:	e009      	b.n	80028d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028c0:	f7fe fe80 	bl	80015c4 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028ce:	d901      	bls.n	80028d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e007      	b.n	80028e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028d4:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028e0:	d1ee      	bne.n	80028c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40007000 	.word	0x40007000

080028f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028fc:	2300      	movs	r3, #0
 80028fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e291      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 8087 	beq.w	8002a26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002918:	4b96      	ldr	r3, [pc, #600]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b04      	cmp	r3, #4
 8002922:	d00c      	beq.n	800293e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002924:	4b93      	ldr	r3, [pc, #588]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b08      	cmp	r3, #8
 800292e:	d112      	bne.n	8002956 <HAL_RCC_OscConfig+0x62>
 8002930:	4b90      	ldr	r3, [pc, #576]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002938:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800293c:	d10b      	bne.n	8002956 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293e:	4b8d      	ldr	r3, [pc, #564]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d06c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x130>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d168      	bne.n	8002a24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e26b      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x7a>
 8002960:	4b84      	ldr	r3, [pc, #528]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a83      	ldr	r2, [pc, #524]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	e02e      	b.n	80029cc <HAL_RCC_OscConfig+0xd8>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x9c>
 8002976:	4b7f      	ldr	r3, [pc, #508]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 800297c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4b7c      	ldr	r3, [pc, #496]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a7b      	ldr	r2, [pc, #492]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002988:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e01d      	b.n	80029cc <HAL_RCC_OscConfig+0xd8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0xc0>
 800299a:	4b76      	ldr	r3, [pc, #472]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a75      	ldr	r2, [pc, #468]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b73      	ldr	r3, [pc, #460]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a72      	ldr	r2, [pc, #456]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0xd8>
 80029b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fdf6 	bl	80015c4 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029dc:	f7fe fdf2 	bl	80015c4 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	@ 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e21f      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b61      	ldr	r3, [pc, #388]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0xe8>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fde2 	bl	80015c4 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a04:	f7fe fdde 	bl	80015c4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	@ 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e20b      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	4b57      	ldr	r3, [pc, #348]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x110>
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d069      	beq.n	8002b06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a32:	4b50      	ldr	r3, [pc, #320]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a3e:	4b4d      	ldr	r3, [pc, #308]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d11c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x190>
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	4b47      	ldr	r3, [pc, #284]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_RCC_OscConfig+0x17a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e1df      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6e:	4b41      	ldr	r3, [pc, #260]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	493d      	ldr	r1, [pc, #244]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	e040      	b.n	8002b06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d023      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8c:	4b39      	ldr	r3, [pc, #228]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a38      	ldr	r2, [pc, #224]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fd94 	bl	80015c4 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fd90 	bl	80015c4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1bd      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	4b30      	ldr	r3, [pc, #192]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b2d      	ldr	r3, [pc, #180]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4929      	ldr	r1, [pc, #164]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
 8002ad2:	e018      	b.n	8002b06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad4:	4b27      	ldr	r3, [pc, #156]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a26      	ldr	r2, [pc, #152]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fd70 	bl	80015c4 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae8:	f7fe fd6c 	bl	80015c4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e199      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d038      	beq.n	8002b84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d019      	beq.n	8002b4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1a:	4b16      	ldr	r3, [pc, #88]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b1e:	4a15      	ldr	r2, [pc, #84]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7fe fd4d 	bl	80015c4 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2e:	f7fe fd49 	bl	80015c4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e176      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x23a>
 8002b4c:	e01a      	b.n	8002b84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4e:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b52:	4a08      	ldr	r2, [pc, #32]	@ (8002b74 <HAL_RCC_OscConfig+0x280>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fe fd33 	bl	80015c4 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe fd2f 	bl	80015c4 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d903      	bls.n	8002b78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e15c      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
 8002b74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b78:	4b91      	ldr	r3, [pc, #580]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1ee      	bne.n	8002b62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80a4 	beq.w	8002cda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b92:	4b8b      	ldr	r3, [pc, #556]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10d      	bne.n	8002bba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	4b88      	ldr	r3, [pc, #544]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	4a87      	ldr	r2, [pc, #540]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002baa:	4b85      	ldr	r3, [pc, #532]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bba:	4b82      	ldr	r3, [pc, #520]	@ (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d118      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bc6:	4b7f      	ldr	r3, [pc, #508]	@ (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a7e      	ldr	r2, [pc, #504]	@ (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe fcf7 	bl	80015c4 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bda:	f7fe fcf3 	bl	80015c4 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b64      	cmp	r3, #100	@ 0x64
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e120      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bec:	4b75      	ldr	r3, [pc, #468]	@ (8002dc4 <HAL_RCC_OscConfig+0x4d0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x31a>
 8002c00:	4b6f      	ldr	r3, [pc, #444]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c04:	4a6e      	ldr	r2, [pc, #440]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c0c:	e02d      	b.n	8002c6a <HAL_RCC_OscConfig+0x376>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x33c>
 8002c16:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1a:	4a69      	ldr	r2, [pc, #420]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c1c:	f023 0301 	bic.w	r3, r3, #1
 8002c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c22:	4b67      	ldr	r3, [pc, #412]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c26:	4a66      	ldr	r2, [pc, #408]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c28:	f023 0304 	bic.w	r3, r3, #4
 8002c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c2e:	e01c      	b.n	8002c6a <HAL_RCC_OscConfig+0x376>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b05      	cmp	r3, #5
 8002c36:	d10c      	bne.n	8002c52 <HAL_RCC_OscConfig+0x35e>
 8002c38:	4b61      	ldr	r3, [pc, #388]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3c:	4a60      	ldr	r2, [pc, #384]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c44:	4b5e      	ldr	r3, [pc, #376]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c48:	4a5d      	ldr	r2, [pc, #372]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c50:	e00b      	b.n	8002c6a <HAL_RCC_OscConfig+0x376>
 8002c52:	4b5b      	ldr	r3, [pc, #364]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	4a5a      	ldr	r2, [pc, #360]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c5e:	4b58      	ldr	r3, [pc, #352]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	4a57      	ldr	r2, [pc, #348]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d015      	beq.n	8002c9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7fe fca7 	bl	80015c4 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f7fe fca3 	bl	80015c4 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0ce      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c90:	4b4b      	ldr	r3, [pc, #300]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ee      	beq.n	8002c7a <HAL_RCC_OscConfig+0x386>
 8002c9c:	e014      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fc91 	bl	80015c4 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7fe fc8d 	bl	80015c4 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0b8      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbc:	4b40      	ldr	r3, [pc, #256]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1ee      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d105      	bne.n	8002cda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cce:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	4a3b      	ldr	r2, [pc, #236]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002cd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cd8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80a4 	beq.w	8002e2c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ce4:	4b36      	ldr	r3, [pc, #216]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d06b      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d149      	bne.n	8002d8c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf8:	4b31      	ldr	r3, [pc, #196]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a30      	ldr	r2, [pc, #192]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002cfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe fc5e 	bl	80015c4 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7fe fc5a 	bl	80015c4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e087      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	4b28      	ldr	r3, [pc, #160]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	019b      	lsls	r3, r3, #6
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	3b01      	subs	r3, #1
 8002d44:	041b      	lsls	r3, r3, #16
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002d52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d56:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d58:	4b19      	ldr	r3, [pc, #100]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a18      	ldr	r2, [pc, #96]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe fc2e 	bl	80015c4 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fe fc2a 	bl	80015c4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e057      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7e:	4b10      	ldr	r3, [pc, #64]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x478>
 8002d8a:	e04f      	b.n	8002e2c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fc14 	bl	80015c4 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da0:	f7fe fc10 	bl	80015c4 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e03d      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db2:	4b03      	ldr	r3, [pc, #12]	@ (8002dc0 <HAL_RCC_OscConfig+0x4cc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x4ac>
 8002dbe:	e035      	b.n	8002e2c <HAL_RCC_OscConfig+0x538>
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e38 <HAL_RCC_OscConfig+0x544>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d028      	beq.n	8002e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d121      	bne.n	8002e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d11a      	bne.n	8002e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002df8:	4013      	ands	r3, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dfe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d111      	bne.n	8002e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0e:	085b      	lsrs	r3, r3, #1
 8002e10:	3b01      	subs	r3, #1
 8002e12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800

08002e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0d0      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e54:	4b6a      	ldr	r3, [pc, #424]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d910      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b67      	ldr	r3, [pc, #412]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	4965      	ldr	r1, [pc, #404]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b63      	ldr	r3, [pc, #396]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0b8      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d020      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e9c:	4b59      	ldr	r3, [pc, #356]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a58      	ldr	r2, [pc, #352]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb4:	4b53      	ldr	r3, [pc, #332]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4a52      	ldr	r2, [pc, #328]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002eba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ebe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec0:	4b50      	ldr	r3, [pc, #320]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	494d      	ldr	r1, [pc, #308]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d040      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b47      	ldr	r3, [pc, #284]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d115      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e07f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efe:	4b41      	ldr	r3, [pc, #260]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e073      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e06b      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1e:	4b39      	ldr	r3, [pc, #228]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f023 0203 	bic.w	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4936      	ldr	r1, [pc, #216]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f30:	f7fe fb48 	bl	80015c4 <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f38:	f7fe fb44 	bl	80015c4 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e053      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 020c 	and.w	r2, r3, #12
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d1eb      	bne.n	8002f38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f60:	4b27      	ldr	r3, [pc, #156]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d210      	bcs.n	8002f90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b24      	ldr	r3, [pc, #144]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 020f 	bic.w	r2, r3, #15
 8002f76:	4922      	ldr	r1, [pc, #136]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b20      	ldr	r3, [pc, #128]	@ (8003000 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e032      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f9c:	4b19      	ldr	r3, [pc, #100]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4916      	ldr	r1, [pc, #88]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fba:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	490e      	ldr	r1, [pc, #56]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fce:	f000 f821 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	490a      	ldr	r1, [pc, #40]	@ (8003008 <HAL_RCC_ClockConfig+0x1cc>)
 8002fe0:	5ccb      	ldrb	r3, [r1, r3]
 8002fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe6:	4a09      	ldr	r2, [pc, #36]	@ (800300c <HAL_RCC_ClockConfig+0x1d0>)
 8002fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fea:	4b09      	ldr	r3, [pc, #36]	@ (8003010 <HAL_RCC_ClockConfig+0x1d4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe faa4 	bl	800153c <HAL_InitTick>

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023c00 	.word	0x40023c00
 8003004:	40023800 	.word	0x40023800
 8003008:	0800511c 	.word	0x0800511c
 800300c:	20000000 	.word	0x20000000
 8003010:	20000004 	.word	0x20000004

08003014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003018:	b090      	sub	sp, #64	@ 0x40
 800301a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003020:	2300      	movs	r3, #0
 8003022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003024:	2300      	movs	r3, #0
 8003026:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800302c:	4b59      	ldr	r3, [pc, #356]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x180>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d00d      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0x40>
 8003038:	2b08      	cmp	r3, #8
 800303a:	f200 80a1 	bhi.w	8003180 <HAL_RCC_GetSysClockFreq+0x16c>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x34>
 8003042:	2b04      	cmp	r3, #4
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x3a>
 8003046:	e09b      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003048:	4b53      	ldr	r3, [pc, #332]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x184>)
 800304a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800304c:	e09b      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800304e:	4b53      	ldr	r3, [pc, #332]	@ (800319c <HAL_RCC_GetSysClockFreq+0x188>)
 8003050:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003052:	e098      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003054:	4b4f      	ldr	r3, [pc, #316]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x180>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800305c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800305e:	4b4d      	ldr	r3, [pc, #308]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x180>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d028      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306a:	4b4a      	ldr	r3, [pc, #296]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x180>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	099b      	lsrs	r3, r3, #6
 8003070:	2200      	movs	r2, #0
 8003072:	623b      	str	r3, [r7, #32]
 8003074:	627a      	str	r2, [r7, #36]	@ 0x24
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800307c:	2100      	movs	r1, #0
 800307e:	4b47      	ldr	r3, [pc, #284]	@ (800319c <HAL_RCC_GetSysClockFreq+0x188>)
 8003080:	fb03 f201 	mul.w	r2, r3, r1
 8003084:	2300      	movs	r3, #0
 8003086:	fb00 f303 	mul.w	r3, r0, r3
 800308a:	4413      	add	r3, r2
 800308c:	4a43      	ldr	r2, [pc, #268]	@ (800319c <HAL_RCC_GetSysClockFreq+0x188>)
 800308e:	fba0 1202 	umull	r1, r2, r0, r2
 8003092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003094:	460a      	mov	r2, r1
 8003096:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800309a:	4413      	add	r3, r2
 800309c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800309e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a0:	2200      	movs	r2, #0
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	61fa      	str	r2, [r7, #28]
 80030a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80030ae:	f7fd f8ab 	bl	8000208 <__aeabi_uldivmod>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4613      	mov	r3, r2
 80030b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030ba:	e053      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030bc:	4b35      	ldr	r3, [pc, #212]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x180>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	099b      	lsrs	r3, r3, #6
 80030c2:	2200      	movs	r2, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	617a      	str	r2, [r7, #20]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030ce:	f04f 0b00 	mov.w	fp, #0
 80030d2:	4652      	mov	r2, sl
 80030d4:	465b      	mov	r3, fp
 80030d6:	f04f 0000 	mov.w	r0, #0
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	0159      	lsls	r1, r3, #5
 80030e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e4:	0150      	lsls	r0, r2, #5
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	ebb2 080a 	subs.w	r8, r2, sl
 80030ee:	eb63 090b 	sbc.w	r9, r3, fp
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003102:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003106:	ebb2 0408 	subs.w	r4, r2, r8
 800310a:	eb63 0509 	sbc.w	r5, r3, r9
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	00eb      	lsls	r3, r5, #3
 8003118:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800311c:	00e2      	lsls	r2, r4, #3
 800311e:	4614      	mov	r4, r2
 8003120:	461d      	mov	r5, r3
 8003122:	eb14 030a 	adds.w	r3, r4, sl
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	eb45 030b 	adc.w	r3, r5, fp
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	e9d7 4500 	ldrd	r4, r5, [r7]
 800313a:	4629      	mov	r1, r5
 800313c:	028b      	lsls	r3, r1, #10
 800313e:	4621      	mov	r1, r4
 8003140:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003144:	4621      	mov	r1, r4
 8003146:	028a      	lsls	r2, r1, #10
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314e:	2200      	movs	r2, #0
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	60fa      	str	r2, [r7, #12]
 8003154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003158:	f7fd f856 	bl	8000208 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4613      	mov	r3, r2
 8003162:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003164:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x180>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	3301      	adds	r3, #1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003174:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800317e:	e002      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003180:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x184>)
 8003182:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003188:	4618      	mov	r0, r3
 800318a:	3740      	adds	r7, #64	@ 0x40
 800318c:	46bd      	mov	sp, r7
 800318e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800
 8003198:	00f42400 	.word	0x00f42400
 800319c:	017d7840 	.word	0x017d7840

080031a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a4:	4b03      	ldr	r3, [pc, #12]	@ (80031b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000000 	.word	0x20000000

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031bc:	f7ff fff0 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b05      	ldr	r3, [pc, #20]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0a9b      	lsrs	r3, r3, #10
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4903      	ldr	r1, [pc, #12]	@ (80031dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40023800 	.word	0x40023800
 80031dc:	0800512c 	.word	0x0800512c

080031e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031e4:	f7ff ffdc 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b05      	ldr	r3, [pc, #20]	@ (8003200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	0b5b      	lsrs	r3, r3, #13
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4903      	ldr	r1, [pc, #12]	@ (8003204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40023800 	.word	0x40023800
 8003204:	0800512c 	.word	0x0800512c

08003208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d012      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003230:	4b69      	ldr	r3, [pc, #420]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a68      	ldr	r2, [pc, #416]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003236:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800323a:	6093      	str	r3, [r2, #8]
 800323c:	4b66      	ldr	r3, [pc, #408]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003244:	4964      	ldr	r1, [pc, #400]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003252:	2301      	movs	r3, #1
 8003254:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d017      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003262:	4b5d      	ldr	r3, [pc, #372]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003268:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003270:	4959      	ldr	r1, [pc, #356]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003280:	d101      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003282:	2301      	movs	r3, #1
 8003284:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800328e:	2301      	movs	r3, #1
 8003290:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d017      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800329e:	4b4e      	ldr	r3, [pc, #312]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	494a      	ldr	r1, [pc, #296]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032bc:	d101      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032be:	2301      	movs	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032da:	2301      	movs	r3, #1
 80032dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 808b 	beq.w	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032ec:	4b3a      	ldr	r3, [pc, #232]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	4a39      	ldr	r2, [pc, #228]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80032f8:	4b37      	ldr	r3, [pc, #220]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003304:	4b35      	ldr	r3, [pc, #212]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a34      	ldr	r2, [pc, #208]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800330a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800330e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003310:	f7fe f958 	bl	80015c4 <HAL_GetTick>
 8003314:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003318:	f7fe f954 	bl	80015c4 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	@ 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e357      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800332a:	4b2c      	ldr	r3, [pc, #176]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003336:	4b28      	ldr	r3, [pc, #160]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800333e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d035      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	429a      	cmp	r2, r3
 8003352:	d02e      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003354:	4b20      	ldr	r3, [pc, #128]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800335c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800335e:	4b1e      	ldr	r3, [pc, #120]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003362:	4a1d      	ldr	r2, [pc, #116]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003368:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800336a:	4b1b      	ldr	r3, [pc, #108]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336e:	4a1a      	ldr	r2, [pc, #104]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003374:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003376:	4a18      	ldr	r2, [pc, #96]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800337c:	4b16      	ldr	r3, [pc, #88]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b01      	cmp	r3, #1
 8003386:	d114      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003388:	f7fe f91c 	bl	80015c4 <HAL_GetTick>
 800338c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338e:	e00a      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fe f918 	bl	80015c4 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e319      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a6:	4b0c      	ldr	r3, [pc, #48]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0ee      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033be:	d111      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033c0:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033cc:	4b04      	ldr	r3, [pc, #16]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033ce:	400b      	ands	r3, r1
 80033d0:	4901      	ldr	r1, [pc, #4]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
 80033d6:	e00b      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40007000 	.word	0x40007000
 80033e0:	0ffffcff 	.word	0x0ffffcff
 80033e4:	4baa      	ldr	r3, [pc, #680]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4aa9      	ldr	r2, [pc, #676]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80033ee:	6093      	str	r3, [r2, #8]
 80033f0:	4ba7      	ldr	r3, [pc, #668]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fc:	49a4      	ldr	r1, [pc, #656]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b00      	cmp	r3, #0
 800340c:	d010      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800340e:	4ba0      	ldr	r3, [pc, #640]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003414:	4a9e      	ldr	r2, [pc, #632]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800341a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800341e:	4b9c      	ldr	r3, [pc, #624]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003420:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003428:	4999      	ldr	r1, [pc, #612]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800343c:	4b94      	ldr	r3, [pc, #592]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003442:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800344a:	4991      	ldr	r1, [pc, #580]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800345e:	4b8c      	ldr	r3, [pc, #560]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003464:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800346c:	4988      	ldr	r1, [pc, #544]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003480:	4b83      	ldr	r3, [pc, #524]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003486:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800348e:	4980      	ldr	r1, [pc, #512]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b0:	4977      	ldr	r1, [pc, #476]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034c4:	4b72      	ldr	r3, [pc, #456]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ca:	f023 0203 	bic.w	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	496f      	ldr	r1, [pc, #444]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ec:	f023 020c 	bic.w	r2, r3, #12
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f4:	4966      	ldr	r1, [pc, #408]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003508:	4b61      	ldr	r3, [pc, #388]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003516:	495e      	ldr	r1, [pc, #376]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800352a:	4b59      	ldr	r3, [pc, #356]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800352c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003530:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003538:	4955      	ldr	r1, [pc, #340]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800354c:	4b50      	ldr	r3, [pc, #320]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003552:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355a:	494d      	ldr	r1, [pc, #308]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800356e:	4b48      	ldr	r3, [pc, #288]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003574:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357c:	4944      	ldr	r1, [pc, #272]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003590:	4b3f      	ldr	r3, [pc, #252]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003596:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359e:	493c      	ldr	r1, [pc, #240]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035b2:	4b37      	ldr	r3, [pc, #220]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c0:	4933      	ldr	r1, [pc, #204]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035e2:	492b      	ldr	r1, [pc, #172]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d011      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035f6:	4b26      	ldr	r3, [pc, #152]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003604:	4922      	ldr	r1, [pc, #136]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003610:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003614:	d101      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003616:	2301      	movs	r3, #1
 8003618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003626:	2301      	movs	r3, #1
 8003628:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003636:	4b16      	ldr	r3, [pc, #88]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003644:	4912      	ldr	r1, [pc, #72]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00b      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003658:	4b0d      	ldr	r3, [pc, #52]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003668:	4909      	ldr	r1, [pc, #36]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d006      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80d9 	beq.w	8003836 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003684:	4b02      	ldr	r3, [pc, #8]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a01      	ldr	r2, [pc, #4]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800368a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800368e:	e001      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003690:	40023800 	.word	0x40023800
 8003694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003696:	f7fd ff95 	bl	80015c4 <HAL_GetTick>
 800369a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800369e:	f7fd ff91 	bl	80015c4 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b64      	cmp	r3, #100	@ 0x64
 80036aa:	d901      	bls.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e194      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f0      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d021      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d11d      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036d0:	4b64      	ldr	r3, [pc, #400]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036d6:	0c1b      	lsrs	r3, r3, #16
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036de:	4b61      	ldr	r3, [pc, #388]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e4:	0e1b      	lsrs	r3, r3, #24
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	019a      	lsls	r2, r3, #6
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	061b      	lsls	r3, r3, #24
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	071b      	lsls	r3, r3, #28
 8003704:	4957      	ldr	r1, [pc, #348]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800372a:	2b00      	cmp	r3, #0
 800372c:	d02e      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003736:	d129      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003738:	4b4a      	ldr	r3, [pc, #296]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800373e:	0c1b      	lsrs	r3, r3, #16
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003746:	4b47      	ldr	r3, [pc, #284]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800374c:	0f1b      	lsrs	r3, r3, #28
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	019a      	lsls	r2, r3, #6
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	431a      	orrs	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	071b      	lsls	r3, r3, #28
 800376c:	493d      	ldr	r1, [pc, #244]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003774:	4b3b      	ldr	r3, [pc, #236]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800377a:	f023 021f 	bic.w	r2, r3, #31
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	3b01      	subs	r3, #1
 8003784:	4937      	ldr	r1, [pc, #220]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01d      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003798:	4b32      	ldr	r3, [pc, #200]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800379a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800379e:	0e1b      	lsrs	r3, r3, #24
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ac:	0f1b      	lsrs	r3, r3, #28
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	019a      	lsls	r2, r3, #6
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	041b      	lsls	r3, r3, #16
 80037c0:	431a      	orrs	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	431a      	orrs	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	071b      	lsls	r3, r3, #28
 80037cc:	4925      	ldr	r1, [pc, #148]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d011      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	019a      	lsls	r2, r3, #6
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	041b      	lsls	r3, r3, #16
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	061b      	lsls	r3, r3, #24
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	071b      	lsls	r3, r3, #28
 80037fc:	4919      	ldr	r1, [pc, #100]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003804:	4b17      	ldr	r3, [pc, #92]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a16      	ldr	r2, [pc, #88]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800380e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003810:	f7fd fed8 	bl	80015c4 <HAL_GetTick>
 8003814:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003816:	e008      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003818:	f7fd fed4 	bl	80015c4 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b64      	cmp	r3, #100	@ 0x64
 8003824:	d901      	bls.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0d7      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800382a:	4b0e      	ldr	r3, [pc, #56]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b01      	cmp	r3, #1
 800383a:	f040 80cd 	bne.w	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800383e:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a08      	ldr	r2, [pc, #32]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384a:	f7fd febb 	bl	80015c4 <HAL_GetTick>
 800384e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003850:	e00a      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003852:	f7fd feb7 	bl	80015c4 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b64      	cmp	r3, #100	@ 0x64
 800385e:	d903      	bls.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e0ba      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003864:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003868:	4b5e      	ldr	r3, [pc, #376]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003874:	d0ed      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003892:	2b00      	cmp	r3, #0
 8003894:	d02e      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d12a      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800389e:	4b51      	ldr	r3, [pc, #324]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038ac:	4b4d      	ldr	r3, [pc, #308]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b2:	0f1b      	lsrs	r3, r3, #28
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	019a      	lsls	r2, r3, #6
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	061b      	lsls	r3, r3, #24
 80038cc:	431a      	orrs	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	071b      	lsls	r3, r3, #28
 80038d2:	4944      	ldr	r1, [pc, #272]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038da:	4b42      	ldr	r3, [pc, #264]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e8:	3b01      	subs	r3, #1
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	493d      	ldr	r1, [pc, #244]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d022      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003904:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003908:	d11d      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800390a:	4b36      	ldr	r3, [pc, #216]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003910:	0e1b      	lsrs	r3, r3, #24
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003918:	4b32      	ldr	r3, [pc, #200]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391e:	0f1b      	lsrs	r3, r3, #28
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	019a      	lsls	r2, r3, #6
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	041b      	lsls	r3, r3, #16
 8003932:	431a      	orrs	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	061b      	lsls	r3, r3, #24
 8003938:	431a      	orrs	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	071b      	lsls	r3, r3, #28
 800393e:	4929      	ldr	r1, [pc, #164]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d028      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003952:	4b24      	ldr	r3, [pc, #144]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003958:	0e1b      	lsrs	r3, r3, #24
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003960:	4b20      	ldr	r3, [pc, #128]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003966:	0c1b      	lsrs	r3, r3, #16
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	019a      	lsls	r2, r3, #6
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	041b      	lsls	r3, r3, #16
 8003978:	431a      	orrs	r2, r3
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	071b      	lsls	r3, r3, #28
 8003986:	4917      	ldr	r1, [pc, #92]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800398e:	4b15      	ldr	r3, [pc, #84]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003994:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399c:	4911      	ldr	r1, [pc, #68]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039a4:	4b0f      	ldr	r3, [pc, #60]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0e      	ldr	r2, [pc, #56]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b0:	f7fd fe08 	bl	80015c4 <HAL_GetTick>
 80039b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039b8:	f7fd fe04 	bl	80015c4 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	@ 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e007      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039ca:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039d6:	d1ef      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800

080039e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a06:	f040 808d 	bne.w	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003a0a:	4b93      	ldr	r3, [pc, #588]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a10:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003a18:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a20:	d07c      	beq.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a28:	d87b      	bhi.n	8003b22 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a36:	d039      	beq.n	8003aac <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003a38:	e073      	b.n	8003b22 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003a3a:	4b87      	ldr	r3, [pc, #540]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d108      	bne.n	8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a46:	4b84      	ldr	r3, [pc, #528]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a4e:	4a83      	ldr	r2, [pc, #524]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	e007      	b.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003a58:	4b7f      	ldr	r3, [pc, #508]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a60:	4a7f      	ldr	r2, [pc, #508]	@ (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003a68:	4b7b      	ldr	r3, [pc, #492]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6e:	0e1b      	lsrs	r3, r3, #24
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003a76:	4b78      	ldr	r3, [pc, #480]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	fb03 f202 	mul.w	r2, r3, r2
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003a90:	4b71      	ldr	r3, [pc, #452]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	617b      	str	r3, [r7, #20]
        break;
 8003aaa:	e03b      	b.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003aac:	4b6a      	ldr	r3, [pc, #424]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d108      	bne.n	8003aca <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ab8:	4b67      	ldr	r3, [pc, #412]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ac0:	4a66      	ldr	r2, [pc, #408]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	e007      	b.n	8003ada <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003aca:	4b63      	ldr	r3, [pc, #396]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ad2:	4a63      	ldr	r2, [pc, #396]	@ (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003ada:	4b5f      	ldr	r3, [pc, #380]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ae0:	0e1b      	lsrs	r3, r3, #24
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003ae8:	4b5b      	ldr	r3, [pc, #364]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	fb03 f202 	mul.w	r2, r3, r2
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003b02:	4b55      	ldr	r3, [pc, #340]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b18:	617b      	str	r3, [r7, #20]
        break;
 8003b1a:	e003      	b.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003b1c:	4b51      	ldr	r3, [pc, #324]	@ (8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003b1e:	617b      	str	r3, [r7, #20]
        break;
 8003b20:	e000      	b.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8003b22:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b2a:	f040 808d 	bne.w	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b34:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003b3c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b44:	d07c      	beq.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b4c:	d87b      	bhi.n	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d004      	beq.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b5a:	d039      	beq.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003b5c:	e073      	b.n	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d108      	bne.n	8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b72:	4a3a      	ldr	r2, [pc, #232]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	e007      	b.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003b7c:	4b36      	ldr	r3, [pc, #216]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b84:	4a36      	ldr	r2, [pc, #216]	@ (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003b8c:	4b32      	ldr	r3, [pc, #200]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b92:	0e1b      	lsrs	r3, r3, #24
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	fb03 f202 	mul.w	r2, r3, r2
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003bb4:	4b28      	ldr	r3, [pc, #160]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	617b      	str	r3, [r7, #20]
        break;
 8003bce:	e03b      	b.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003bd0:	4b21      	ldr	r3, [pc, #132]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d108      	bne.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003be4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	e007      	b.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003bee:	4b1a      	ldr	r3, [pc, #104]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8003bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003bfe:	4b16      	ldr	r3, [pc, #88]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c04:	0e1b      	lsrs	r3, r3, #24
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003c0c:	4b12      	ldr	r3, [pc, #72]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c12:	099b      	lsrs	r3, r3, #6
 8003c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	fb03 f202 	mul.w	r2, r3, r2
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003c26:	4b0c      	ldr	r3, [pc, #48]	@ (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	3301      	adds	r3, #1
 8003c32:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	617b      	str	r3, [r7, #20]
        break;
 8003c3e:	e003      	b.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003c40:	4b08      	ldr	r3, [pc, #32]	@ (8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003c42:	617b      	str	r3, [r7, #20]
        break;
 8003c44:	e000      	b.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8003c46:	bf00      	nop
      }
    }
  }

  return frequency;
 8003c48:	697b      	ldr	r3, [r7, #20]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	00f42400 	.word	0x00f42400
 8003c60:	017d7840 	.word	0x017d7840
 8003c64:	00bb8000 	.word	0x00bb8000

08003c68 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e156      	b.n	8003f34 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fd fad0 	bl	8001240 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f95b 	bl	8003f64 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d00c      	beq.n	8003cd0 <HAL_SAI_Init+0x68>
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d80d      	bhi.n	8003cd6 <HAL_SAI_Init+0x6e>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_SAI_Init+0x5c>
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d003      	beq.n	8003cca <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8003cc2:	e008      	b.n	8003cd6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61fb      	str	r3, [r7, #28]
      break;
 8003cc8:	e006      	b.n	8003cd8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8003cca:	2310      	movs	r3, #16
 8003ccc:	61fb      	str	r3, [r7, #28]
      break;
 8003cce:	e003      	b.n	8003cd8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003cd0:	2320      	movs	r3, #32
 8003cd2:	61fb      	str	r3, [r7, #28]
      break;
 8003cd4:	e000      	b.n	8003cd8 <HAL_SAI_Init+0x70>
      break;
 8003cd6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d81e      	bhi.n	8003d1e <HAL_SAI_Init+0xb6>
 8003ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce8 <HAL_SAI_Init+0x80>)
 8003ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce6:	bf00      	nop
 8003ce8:	08003cf9 	.word	0x08003cf9
 8003cec:	08003cff 	.word	0x08003cff
 8003cf0:	08003d07 	.word	0x08003d07
 8003cf4:	08003d0f 	.word	0x08003d0f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	617b      	str	r3, [r7, #20]
    }
    break;
 8003cfc:	e010      	b.n	8003d20 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8003cfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d02:	617b      	str	r3, [r7, #20]
    }
    break;
 8003d04:	e00c      	b.n	8003d20 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003d06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d0a:	617b      	str	r3, [r7, #20]
    }
    break;
 8003d0c:	e008      	b.n	8003d20 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003d0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d12:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	61fb      	str	r3, [r7, #28]
    }
    break;
 8003d1c:	e000      	b.n	8003d20 <HAL_SAI_Init+0xb8>
    default:
      break;
 8003d1e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a85      	ldr	r2, [pc, #532]	@ (8003f3c <HAL_SAI_Init+0x2d4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_SAI_Init+0xcc>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a84      	ldr	r2, [pc, #528]	@ (8003f40 <HAL_SAI_Init+0x2d8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d103      	bne.n	8003d3c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8003d34:	4a83      	ldr	r2, [pc, #524]	@ (8003f44 <HAL_SAI_Init+0x2dc>)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e002      	b.n	8003d42 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8003d3c:	4a82      	ldr	r2, [pc, #520]	@ (8003f48 <HAL_SAI_Init+0x2e0>)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d04c      	beq.n	8003de4 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a7a      	ldr	r2, [pc, #488]	@ (8003f3c <HAL_SAI_Init+0x2d4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <HAL_SAI_Init+0xfa>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a78      	ldr	r2, [pc, #480]	@ (8003f40 <HAL_SAI_Init+0x2d8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d104      	bne.n	8003d6c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003d62:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003d66:	f7ff fe3f 	bl	80039e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d6a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a76      	ldr	r2, [pc, #472]	@ (8003f4c <HAL_SAI_Init+0x2e4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <HAL_SAI_Init+0x118>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a75      	ldr	r2, [pc, #468]	@ (8003f50 <HAL_SAI_Init+0x2e8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d104      	bne.n	8003d8a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003d80:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003d84:	f7ff fe30 	bl	80039e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d88:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	461a      	mov	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	025b      	lsls	r3, r3, #9
 8003d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a6b      	ldr	r2, [pc, #428]	@ (8003f54 <HAL_SAI_Init+0x2ec>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	08da      	lsrs	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8003db0:	68f9      	ldr	r1, [r7, #12]
 8003db2:	4b68      	ldr	r3, [pc, #416]	@ (8003f54 <HAL_SAI_Init+0x2ec>)
 8003db4:	fba3 2301 	umull	r2, r3, r3, r1
 8003db8:	08da      	lsrs	r2, r3, #3
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	1aca      	subs	r2, r1, r3
 8003dc4:	2a08      	cmp	r2, #8
 8003dc6:	d904      	bls.n	8003dd2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d104      	bne.n	8003de4 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	085a      	lsrs	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_SAI_Init+0x18c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d109      	bne.n	8003e08 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_SAI_Init+0x198>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e001      	b.n	8003e04 <HAL_SAI_Init+0x19c>
 8003e00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	e008      	b.n	8003e1a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <HAL_SAI_Init+0x1ae>
 8003e10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e14:	e000      	b.n	8003e18 <HAL_SAI_Init+0x1b0>
 8003e16:	2300      	movs	r3, #0
 8003e18:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b4c      	ldr	r3, [pc, #304]	@ (8003f58 <HAL_SAI_Init+0x2f0>)
 8003e26:	400b      	ands	r3, r1
 8003e28:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6819      	ldr	r1, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003e3e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e44:	431a      	orrs	r2, r3
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8003e52:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003e5e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	051b      	lsls	r3, r3, #20
 8003e66:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4b38      	ldr	r3, [pc, #224]	@ (8003f5c <HAL_SAI_Init+0x2f4>)
 8003e7c:	400b      	ands	r3, r1
 8003e7e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6859      	ldr	r1, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6899      	ldr	r1, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f60 <HAL_SAI_Init+0x2f8>)
 8003eaa:	400b      	ands	r3, r1
 8003eac:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6899      	ldr	r1, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003ebe:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8003ec4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8003eca:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8003ed4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68d9      	ldr	r1, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8003eec:	400b      	ands	r3, r1
 8003eee:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68d9      	ldr	r1, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efe:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f04:	041b      	lsls	r3, r3, #16
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40015804 	.word	0x40015804
 8003f40:	40015824 	.word	0x40015824
 8003f44:	40015800 	.word	0x40015800
 8003f48:	40015c00 	.word	0x40015c00
 8003f4c:	40015c04 	.word	0x40015c04
 8003f50:	40015c24 	.word	0x40015c24
 8003f54:	cccccccd 	.word	0xcccccccd
 8003f58:	ff05c010 	.word	0xff05c010
 8003f5c:	ffff1ff0 	.word	0xffff1ff0
 8003f60:	fff88000 	.word	0xfff88000

08003f64 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003f6c:	4b17      	ldr	r3, [pc, #92]	@ (8003fcc <SAI_Disable+0x68>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a17      	ldr	r2, [pc, #92]	@ (8003fd0 <SAI_Disable+0x6c>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	0b1b      	lsrs	r3, r3, #12
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003f8e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1e5a      	subs	r2, r3, #1
 8003f94:	60fa      	str	r2, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fa0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	72fb      	strb	r3, [r7, #11]
      break;
 8003fae:	e006      	b.n	8003fbe <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e8      	bne.n	8003f90 <SAI_Disable+0x2c>

  return status;
 8003fbe:	7afb      	ldrb	r3, [r7, #11]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	20000000 	.word	0x20000000
 8003fd0:	95cbec1b 	.word	0x95cbec1b

08003fd4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e025      	b.n	8004034 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d106      	bne.n	8004002 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7fd f915 	bl	800122c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2202      	movs	r2, #2
 8004006:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3304      	adds	r3, #4
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f000 ff83 	bl	8004f20 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	461a      	mov	r2, r3
 8004024:	6839      	ldr	r1, [r7, #0]
 8004026:	f000 ffd7 	bl	8004fd8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e049      	b.n	80040e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fc ffb0 	bl	8000fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	4619      	mov	r1, r3
 800407a:	4610      	mov	r0, r2
 800407c:	f000 f900 	bl	8004280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_TIM_ConfigClockSource+0x1c>
 8004104:	2302      	movs	r3, #2
 8004106:	e0b4      	b.n	8004272 <HAL_TIM_ConfigClockSource+0x186>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	4b56      	ldr	r3, [pc, #344]	@ (800427c <HAL_TIM_ConfigClockSource+0x190>)
 8004124:	4013      	ands	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800412e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004140:	d03e      	beq.n	80041c0 <HAL_TIM_ConfigClockSource+0xd4>
 8004142:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004146:	f200 8087 	bhi.w	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 800414a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800414e:	f000 8086 	beq.w	800425e <HAL_TIM_ConfigClockSource+0x172>
 8004152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004156:	d87f      	bhi.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 8004158:	2b70      	cmp	r3, #112	@ 0x70
 800415a:	d01a      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0xa6>
 800415c:	2b70      	cmp	r3, #112	@ 0x70
 800415e:	d87b      	bhi.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 8004160:	2b60      	cmp	r3, #96	@ 0x60
 8004162:	d050      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0x11a>
 8004164:	2b60      	cmp	r3, #96	@ 0x60
 8004166:	d877      	bhi.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 8004168:	2b50      	cmp	r3, #80	@ 0x50
 800416a:	d03c      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0xfa>
 800416c:	2b50      	cmp	r3, #80	@ 0x50
 800416e:	d873      	bhi.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 8004170:	2b40      	cmp	r3, #64	@ 0x40
 8004172:	d058      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x13a>
 8004174:	2b40      	cmp	r3, #64	@ 0x40
 8004176:	d86f      	bhi.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 8004178:	2b30      	cmp	r3, #48	@ 0x30
 800417a:	d064      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x15a>
 800417c:	2b30      	cmp	r3, #48	@ 0x30
 800417e:	d86b      	bhi.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b20      	cmp	r3, #32
 8004182:	d060      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x15a>
 8004184:	2b20      	cmp	r3, #32
 8004186:	d867      	bhi.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d05c      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x15a>
 800418c:	2b10      	cmp	r3, #16
 800418e:	d05a      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x15a>
 8004190:	e062      	b.n	8004258 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041a2:	f000 f993 	bl	80044cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	609a      	str	r2, [r3, #8]
      break;
 80041be:	e04f      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041d0:	f000 f97c 	bl	80044cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041e2:	609a      	str	r2, [r3, #8]
      break;
 80041e4:	e03c      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f2:	461a      	mov	r2, r3
 80041f4:	f000 f8f0 	bl	80043d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2150      	movs	r1, #80	@ 0x50
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f949 	bl	8004496 <TIM_ITRx_SetConfig>
      break;
 8004204:	e02c      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004212:	461a      	mov	r2, r3
 8004214:	f000 f90f 	bl	8004436 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2160      	movs	r1, #96	@ 0x60
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f939 	bl	8004496 <TIM_ITRx_SetConfig>
      break;
 8004224:	e01c      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004232:	461a      	mov	r2, r3
 8004234:	f000 f8d0 	bl	80043d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2140      	movs	r1, #64	@ 0x40
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f929 	bl	8004496 <TIM_ITRx_SetConfig>
      break;
 8004244:	e00c      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4619      	mov	r1, r3
 8004250:	4610      	mov	r0, r2
 8004252:	f000 f920 	bl	8004496 <TIM_ITRx_SetConfig>
      break;
 8004256:	e003      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
      break;
 800425c:	e000      	b.n	8004260 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800425e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004270:	7bfb      	ldrb	r3, [r7, #15]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	fffeff88 	.word	0xfffeff88

08004280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a46      	ldr	r2, [pc, #280]	@ (80043ac <TIM_Base_SetConfig+0x12c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d013      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800429e:	d00f      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a43      	ldr	r2, [pc, #268]	@ (80043b0 <TIM_Base_SetConfig+0x130>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00b      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a42      	ldr	r2, [pc, #264]	@ (80043b4 <TIM_Base_SetConfig+0x134>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d007      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a41      	ldr	r2, [pc, #260]	@ (80043b8 <TIM_Base_SetConfig+0x138>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a40      	ldr	r2, [pc, #256]	@ (80043bc <TIM_Base_SetConfig+0x13c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d108      	bne.n	80042d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a35      	ldr	r2, [pc, #212]	@ (80043ac <TIM_Base_SetConfig+0x12c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d02b      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e0:	d027      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a32      	ldr	r2, [pc, #200]	@ (80043b0 <TIM_Base_SetConfig+0x130>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d023      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a31      	ldr	r2, [pc, #196]	@ (80043b4 <TIM_Base_SetConfig+0x134>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01f      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a30      	ldr	r2, [pc, #192]	@ (80043b8 <TIM_Base_SetConfig+0x138>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01b      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a2f      	ldr	r2, [pc, #188]	@ (80043bc <TIM_Base_SetConfig+0x13c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d017      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a2e      	ldr	r2, [pc, #184]	@ (80043c0 <TIM_Base_SetConfig+0x140>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d013      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a2d      	ldr	r2, [pc, #180]	@ (80043c4 <TIM_Base_SetConfig+0x144>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d00f      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a2c      	ldr	r2, [pc, #176]	@ (80043c8 <TIM_Base_SetConfig+0x148>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00b      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a2b      	ldr	r2, [pc, #172]	@ (80043cc <TIM_Base_SetConfig+0x14c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d007      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2a      	ldr	r2, [pc, #168]	@ (80043d0 <TIM_Base_SetConfig+0x150>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d003      	beq.n	8004332 <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a29      	ldr	r2, [pc, #164]	@ (80043d4 <TIM_Base_SetConfig+0x154>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d108      	bne.n	8004344 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a10      	ldr	r2, [pc, #64]	@ (80043ac <TIM_Base_SetConfig+0x12c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_Base_SetConfig+0xf8>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a12      	ldr	r2, [pc, #72]	@ (80043bc <TIM_Base_SetConfig+0x13c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d103      	bne.n	8004380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b01      	cmp	r3, #1
 8004390:	d105      	bne.n	800439e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f023 0201 	bic.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	611a      	str	r2, [r3, #16]
  }
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800
 80043b8:	40000c00 	.word	0x40000c00
 80043bc:	40010400 	.word	0x40010400
 80043c0:	40014000 	.word	0x40014000
 80043c4:	40014400 	.word	0x40014400
 80043c8:	40014800 	.word	0x40014800
 80043cc:	40001800 	.word	0x40001800
 80043d0:	40001c00 	.word	0x40001c00
 80043d4:	40002000 	.word	0x40002000

080043d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f023 0201 	bic.w	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f023 030a 	bic.w	r3, r3, #10
 8004414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004436:	b480      	push	{r7}
 8004438:	b087      	sub	sp, #28
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f023 0210 	bic.w	r2, r3, #16
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004460:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	031b      	lsls	r3, r3, #12
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004472:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f043 0307 	orr.w	r3, r3, #7
 80044b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	609a      	str	r2, [r3, #8]
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	021a      	lsls	r2, r3, #8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	609a      	str	r2, [r3, #8]
}
 8004500:	bf00      	nop
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004520:	2302      	movs	r3, #2
 8004522:	e06d      	b.n	8004600 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a30      	ldr	r2, [pc, #192]	@ (800460c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a2f      	ldr	r2, [pc, #188]	@ (8004610 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d108      	bne.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800455e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004570:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a20      	ldr	r2, [pc, #128]	@ (800460c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d022      	beq.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004596:	d01d      	beq.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d018      	beq.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004618 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1a      	ldr	r2, [pc, #104]	@ (800461c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00e      	beq.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a15      	ldr	r2, [pc, #84]	@ (8004610 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d009      	beq.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a16      	ldr	r2, [pc, #88]	@ (8004620 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a15      	ldr	r2, [pc, #84]	@ (8004624 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10c      	bne.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	40010000 	.word	0x40010000
 8004610:	40010400 	.word	0x40010400
 8004614:	40000400 	.word	0x40000400
 8004618:	40000800 	.word	0x40000800
 800461c:	40000c00 	.word	0x40000c00
 8004620:	40014000 	.word	0x40014000
 8004624:	40001800 	.word	0x40001800

08004628 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e040      	b.n	80046bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fc fcdc 	bl	8001008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2224      	movs	r2, #36	@ 0x24
 8004654:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0201 	bic.w	r2, r2, #1
 8004664:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fa8c 	bl	8004b8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f825 	bl	80046c4 <UART_SetConfig>
 800467a:	4603      	mov	r3, r0
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e01b      	b.n	80046bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fb0b 	bl	8004cd0 <UART_CheckIdleState>
 80046ba:	4603      	mov	r3, r0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4ba6      	ldr	r3, [pc, #664]	@ (8004988 <UART_SetConfig+0x2c4>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	6979      	ldr	r1, [r7, #20]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	430a      	orrs	r2, r1
 8004734:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a94      	ldr	r2, [pc, #592]	@ (800498c <UART_SetConfig+0x2c8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d120      	bne.n	8004782 <UART_SetConfig+0xbe>
 8004740:	4b93      	ldr	r3, [pc, #588]	@ (8004990 <UART_SetConfig+0x2cc>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b03      	cmp	r3, #3
 800474c:	d816      	bhi.n	800477c <UART_SetConfig+0xb8>
 800474e:	a201      	add	r2, pc, #4	@ (adr r2, 8004754 <UART_SetConfig+0x90>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	08004765 	.word	0x08004765
 8004758:	08004771 	.word	0x08004771
 800475c:	0800476b 	.word	0x0800476b
 8004760:	08004777 	.word	0x08004777
 8004764:	2301      	movs	r3, #1
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e150      	b.n	8004a0c <UART_SetConfig+0x348>
 800476a:	2302      	movs	r3, #2
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e14d      	b.n	8004a0c <UART_SetConfig+0x348>
 8004770:	2304      	movs	r3, #4
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e14a      	b.n	8004a0c <UART_SetConfig+0x348>
 8004776:	2308      	movs	r3, #8
 8004778:	77fb      	strb	r3, [r7, #31]
 800477a:	e147      	b.n	8004a0c <UART_SetConfig+0x348>
 800477c:	2310      	movs	r3, #16
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e144      	b.n	8004a0c <UART_SetConfig+0x348>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a83      	ldr	r2, [pc, #524]	@ (8004994 <UART_SetConfig+0x2d0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d132      	bne.n	80047f2 <UART_SetConfig+0x12e>
 800478c:	4b80      	ldr	r3, [pc, #512]	@ (8004990 <UART_SetConfig+0x2cc>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b0c      	cmp	r3, #12
 8004798:	d828      	bhi.n	80047ec <UART_SetConfig+0x128>
 800479a:	a201      	add	r2, pc, #4	@ (adr r2, 80047a0 <UART_SetConfig+0xdc>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	080047ed 	.word	0x080047ed
 80047a8:	080047ed 	.word	0x080047ed
 80047ac:	080047ed 	.word	0x080047ed
 80047b0:	080047e1 	.word	0x080047e1
 80047b4:	080047ed 	.word	0x080047ed
 80047b8:	080047ed 	.word	0x080047ed
 80047bc:	080047ed 	.word	0x080047ed
 80047c0:	080047db 	.word	0x080047db
 80047c4:	080047ed 	.word	0x080047ed
 80047c8:	080047ed 	.word	0x080047ed
 80047cc:	080047ed 	.word	0x080047ed
 80047d0:	080047e7 	.word	0x080047e7
 80047d4:	2300      	movs	r3, #0
 80047d6:	77fb      	strb	r3, [r7, #31]
 80047d8:	e118      	b.n	8004a0c <UART_SetConfig+0x348>
 80047da:	2302      	movs	r3, #2
 80047dc:	77fb      	strb	r3, [r7, #31]
 80047de:	e115      	b.n	8004a0c <UART_SetConfig+0x348>
 80047e0:	2304      	movs	r3, #4
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	e112      	b.n	8004a0c <UART_SetConfig+0x348>
 80047e6:	2308      	movs	r3, #8
 80047e8:	77fb      	strb	r3, [r7, #31]
 80047ea:	e10f      	b.n	8004a0c <UART_SetConfig+0x348>
 80047ec:	2310      	movs	r3, #16
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e10c      	b.n	8004a0c <UART_SetConfig+0x348>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a68      	ldr	r2, [pc, #416]	@ (8004998 <UART_SetConfig+0x2d4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d120      	bne.n	800483e <UART_SetConfig+0x17a>
 80047fc:	4b64      	ldr	r3, [pc, #400]	@ (8004990 <UART_SetConfig+0x2cc>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004802:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004806:	2b30      	cmp	r3, #48	@ 0x30
 8004808:	d013      	beq.n	8004832 <UART_SetConfig+0x16e>
 800480a:	2b30      	cmp	r3, #48	@ 0x30
 800480c:	d814      	bhi.n	8004838 <UART_SetConfig+0x174>
 800480e:	2b20      	cmp	r3, #32
 8004810:	d009      	beq.n	8004826 <UART_SetConfig+0x162>
 8004812:	2b20      	cmp	r3, #32
 8004814:	d810      	bhi.n	8004838 <UART_SetConfig+0x174>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <UART_SetConfig+0x15c>
 800481a:	2b10      	cmp	r3, #16
 800481c:	d006      	beq.n	800482c <UART_SetConfig+0x168>
 800481e:	e00b      	b.n	8004838 <UART_SetConfig+0x174>
 8004820:	2300      	movs	r3, #0
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e0f2      	b.n	8004a0c <UART_SetConfig+0x348>
 8004826:	2302      	movs	r3, #2
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e0ef      	b.n	8004a0c <UART_SetConfig+0x348>
 800482c:	2304      	movs	r3, #4
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e0ec      	b.n	8004a0c <UART_SetConfig+0x348>
 8004832:	2308      	movs	r3, #8
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e0e9      	b.n	8004a0c <UART_SetConfig+0x348>
 8004838:	2310      	movs	r3, #16
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e0e6      	b.n	8004a0c <UART_SetConfig+0x348>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a56      	ldr	r2, [pc, #344]	@ (800499c <UART_SetConfig+0x2d8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d120      	bne.n	800488a <UART_SetConfig+0x1c6>
 8004848:	4b51      	ldr	r3, [pc, #324]	@ (8004990 <UART_SetConfig+0x2cc>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004852:	2bc0      	cmp	r3, #192	@ 0xc0
 8004854:	d013      	beq.n	800487e <UART_SetConfig+0x1ba>
 8004856:	2bc0      	cmp	r3, #192	@ 0xc0
 8004858:	d814      	bhi.n	8004884 <UART_SetConfig+0x1c0>
 800485a:	2b80      	cmp	r3, #128	@ 0x80
 800485c:	d009      	beq.n	8004872 <UART_SetConfig+0x1ae>
 800485e:	2b80      	cmp	r3, #128	@ 0x80
 8004860:	d810      	bhi.n	8004884 <UART_SetConfig+0x1c0>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <UART_SetConfig+0x1a8>
 8004866:	2b40      	cmp	r3, #64	@ 0x40
 8004868:	d006      	beq.n	8004878 <UART_SetConfig+0x1b4>
 800486a:	e00b      	b.n	8004884 <UART_SetConfig+0x1c0>
 800486c:	2300      	movs	r3, #0
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e0cc      	b.n	8004a0c <UART_SetConfig+0x348>
 8004872:	2302      	movs	r3, #2
 8004874:	77fb      	strb	r3, [r7, #31]
 8004876:	e0c9      	b.n	8004a0c <UART_SetConfig+0x348>
 8004878:	2304      	movs	r3, #4
 800487a:	77fb      	strb	r3, [r7, #31]
 800487c:	e0c6      	b.n	8004a0c <UART_SetConfig+0x348>
 800487e:	2308      	movs	r3, #8
 8004880:	77fb      	strb	r3, [r7, #31]
 8004882:	e0c3      	b.n	8004a0c <UART_SetConfig+0x348>
 8004884:	2310      	movs	r3, #16
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e0c0      	b.n	8004a0c <UART_SetConfig+0x348>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a44      	ldr	r2, [pc, #272]	@ (80049a0 <UART_SetConfig+0x2dc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d125      	bne.n	80048e0 <UART_SetConfig+0x21c>
 8004894:	4b3e      	ldr	r3, [pc, #248]	@ (8004990 <UART_SetConfig+0x2cc>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800489e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a2:	d017      	beq.n	80048d4 <UART_SetConfig+0x210>
 80048a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a8:	d817      	bhi.n	80048da <UART_SetConfig+0x216>
 80048aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ae:	d00b      	beq.n	80048c8 <UART_SetConfig+0x204>
 80048b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b4:	d811      	bhi.n	80048da <UART_SetConfig+0x216>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <UART_SetConfig+0x1fe>
 80048ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048be:	d006      	beq.n	80048ce <UART_SetConfig+0x20a>
 80048c0:	e00b      	b.n	80048da <UART_SetConfig+0x216>
 80048c2:	2300      	movs	r3, #0
 80048c4:	77fb      	strb	r3, [r7, #31]
 80048c6:	e0a1      	b.n	8004a0c <UART_SetConfig+0x348>
 80048c8:	2302      	movs	r3, #2
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e09e      	b.n	8004a0c <UART_SetConfig+0x348>
 80048ce:	2304      	movs	r3, #4
 80048d0:	77fb      	strb	r3, [r7, #31]
 80048d2:	e09b      	b.n	8004a0c <UART_SetConfig+0x348>
 80048d4:	2308      	movs	r3, #8
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e098      	b.n	8004a0c <UART_SetConfig+0x348>
 80048da:	2310      	movs	r3, #16
 80048dc:	77fb      	strb	r3, [r7, #31]
 80048de:	e095      	b.n	8004a0c <UART_SetConfig+0x348>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a2f      	ldr	r2, [pc, #188]	@ (80049a4 <UART_SetConfig+0x2e0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d125      	bne.n	8004936 <UART_SetConfig+0x272>
 80048ea:	4b29      	ldr	r3, [pc, #164]	@ (8004990 <UART_SetConfig+0x2cc>)
 80048ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048f8:	d017      	beq.n	800492a <UART_SetConfig+0x266>
 80048fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048fe:	d817      	bhi.n	8004930 <UART_SetConfig+0x26c>
 8004900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004904:	d00b      	beq.n	800491e <UART_SetConfig+0x25a>
 8004906:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800490a:	d811      	bhi.n	8004930 <UART_SetConfig+0x26c>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <UART_SetConfig+0x254>
 8004910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004914:	d006      	beq.n	8004924 <UART_SetConfig+0x260>
 8004916:	e00b      	b.n	8004930 <UART_SetConfig+0x26c>
 8004918:	2301      	movs	r3, #1
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e076      	b.n	8004a0c <UART_SetConfig+0x348>
 800491e:	2302      	movs	r3, #2
 8004920:	77fb      	strb	r3, [r7, #31]
 8004922:	e073      	b.n	8004a0c <UART_SetConfig+0x348>
 8004924:	2304      	movs	r3, #4
 8004926:	77fb      	strb	r3, [r7, #31]
 8004928:	e070      	b.n	8004a0c <UART_SetConfig+0x348>
 800492a:	2308      	movs	r3, #8
 800492c:	77fb      	strb	r3, [r7, #31]
 800492e:	e06d      	b.n	8004a0c <UART_SetConfig+0x348>
 8004930:	2310      	movs	r3, #16
 8004932:	77fb      	strb	r3, [r7, #31]
 8004934:	e06a      	b.n	8004a0c <UART_SetConfig+0x348>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1b      	ldr	r2, [pc, #108]	@ (80049a8 <UART_SetConfig+0x2e4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d138      	bne.n	80049b2 <UART_SetConfig+0x2ee>
 8004940:	4b13      	ldr	r3, [pc, #76]	@ (8004990 <UART_SetConfig+0x2cc>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004946:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800494a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800494e:	d017      	beq.n	8004980 <UART_SetConfig+0x2bc>
 8004950:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004954:	d82a      	bhi.n	80049ac <UART_SetConfig+0x2e8>
 8004956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800495a:	d00b      	beq.n	8004974 <UART_SetConfig+0x2b0>
 800495c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004960:	d824      	bhi.n	80049ac <UART_SetConfig+0x2e8>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <UART_SetConfig+0x2aa>
 8004966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800496a:	d006      	beq.n	800497a <UART_SetConfig+0x2b6>
 800496c:	e01e      	b.n	80049ac <UART_SetConfig+0x2e8>
 800496e:	2300      	movs	r3, #0
 8004970:	77fb      	strb	r3, [r7, #31]
 8004972:	e04b      	b.n	8004a0c <UART_SetConfig+0x348>
 8004974:	2302      	movs	r3, #2
 8004976:	77fb      	strb	r3, [r7, #31]
 8004978:	e048      	b.n	8004a0c <UART_SetConfig+0x348>
 800497a:	2304      	movs	r3, #4
 800497c:	77fb      	strb	r3, [r7, #31]
 800497e:	e045      	b.n	8004a0c <UART_SetConfig+0x348>
 8004980:	2308      	movs	r3, #8
 8004982:	77fb      	strb	r3, [r7, #31]
 8004984:	e042      	b.n	8004a0c <UART_SetConfig+0x348>
 8004986:	bf00      	nop
 8004988:	efff69f3 	.word	0xefff69f3
 800498c:	40011000 	.word	0x40011000
 8004990:	40023800 	.word	0x40023800
 8004994:	40004400 	.word	0x40004400
 8004998:	40004800 	.word	0x40004800
 800499c:	40004c00 	.word	0x40004c00
 80049a0:	40005000 	.word	0x40005000
 80049a4:	40011400 	.word	0x40011400
 80049a8:	40007800 	.word	0x40007800
 80049ac:	2310      	movs	r3, #16
 80049ae:	77fb      	strb	r3, [r7, #31]
 80049b0:	e02c      	b.n	8004a0c <UART_SetConfig+0x348>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a72      	ldr	r2, [pc, #456]	@ (8004b80 <UART_SetConfig+0x4bc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d125      	bne.n	8004a08 <UART_SetConfig+0x344>
 80049bc:	4b71      	ldr	r3, [pc, #452]	@ (8004b84 <UART_SetConfig+0x4c0>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80049c6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80049ca:	d017      	beq.n	80049fc <UART_SetConfig+0x338>
 80049cc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80049d0:	d817      	bhi.n	8004a02 <UART_SetConfig+0x33e>
 80049d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049d6:	d00b      	beq.n	80049f0 <UART_SetConfig+0x32c>
 80049d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049dc:	d811      	bhi.n	8004a02 <UART_SetConfig+0x33e>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <UART_SetConfig+0x326>
 80049e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049e6:	d006      	beq.n	80049f6 <UART_SetConfig+0x332>
 80049e8:	e00b      	b.n	8004a02 <UART_SetConfig+0x33e>
 80049ea:	2300      	movs	r3, #0
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e00d      	b.n	8004a0c <UART_SetConfig+0x348>
 80049f0:	2302      	movs	r3, #2
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e00a      	b.n	8004a0c <UART_SetConfig+0x348>
 80049f6:	2304      	movs	r3, #4
 80049f8:	77fb      	strb	r3, [r7, #31]
 80049fa:	e007      	b.n	8004a0c <UART_SetConfig+0x348>
 80049fc:	2308      	movs	r3, #8
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e004      	b.n	8004a0c <UART_SetConfig+0x348>
 8004a02:	2310      	movs	r3, #16
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e001      	b.n	8004a0c <UART_SetConfig+0x348>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a14:	d15b      	bne.n	8004ace <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004a16:	7ffb      	ldrb	r3, [r7, #31]
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d828      	bhi.n	8004a6e <UART_SetConfig+0x3aa>
 8004a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a24 <UART_SetConfig+0x360>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004a49 	.word	0x08004a49
 8004a28:	08004a51 	.word	0x08004a51
 8004a2c:	08004a59 	.word	0x08004a59
 8004a30:	08004a6f 	.word	0x08004a6f
 8004a34:	08004a5f 	.word	0x08004a5f
 8004a38:	08004a6f 	.word	0x08004a6f
 8004a3c:	08004a6f 	.word	0x08004a6f
 8004a40:	08004a6f 	.word	0x08004a6f
 8004a44:	08004a67 	.word	0x08004a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a48:	f7fe fbb6 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8004a4c:	61b8      	str	r0, [r7, #24]
        break;
 8004a4e:	e013      	b.n	8004a78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a50:	f7fe fbc6 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 8004a54:	61b8      	str	r0, [r7, #24]
        break;
 8004a56:	e00f      	b.n	8004a78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a58:	4b4b      	ldr	r3, [pc, #300]	@ (8004b88 <UART_SetConfig+0x4c4>)
 8004a5a:	61bb      	str	r3, [r7, #24]
        break;
 8004a5c:	e00c      	b.n	8004a78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a5e:	f7fe fad9 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8004a62:	61b8      	str	r0, [r7, #24]
        break;
 8004a64:	e008      	b.n	8004a78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a6a:	61bb      	str	r3, [r7, #24]
        break;
 8004a6c:	e004      	b.n	8004a78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	77bb      	strb	r3, [r7, #30]
        break;
 8004a76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d074      	beq.n	8004b68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	005a      	lsls	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	441a      	add	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b0f      	cmp	r3, #15
 8004a98:	d916      	bls.n	8004ac8 <UART_SetConfig+0x404>
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa0:	d212      	bcs.n	8004ac8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f023 030f 	bic.w	r3, r3, #15
 8004aaa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	085b      	lsrs	r3, r3, #1
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	89fb      	ldrh	r3, [r7, #14]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	89fa      	ldrh	r2, [r7, #14]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	e04f      	b.n	8004b68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	77bb      	strb	r3, [r7, #30]
 8004acc:	e04c      	b.n	8004b68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ace:	7ffb      	ldrb	r3, [r7, #31]
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d828      	bhi.n	8004b26 <UART_SetConfig+0x462>
 8004ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8004adc <UART_SetConfig+0x418>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b01 	.word	0x08004b01
 8004ae0:	08004b09 	.word	0x08004b09
 8004ae4:	08004b11 	.word	0x08004b11
 8004ae8:	08004b27 	.word	0x08004b27
 8004aec:	08004b17 	.word	0x08004b17
 8004af0:	08004b27 	.word	0x08004b27
 8004af4:	08004b27 	.word	0x08004b27
 8004af8:	08004b27 	.word	0x08004b27
 8004afc:	08004b1f 	.word	0x08004b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b00:	f7fe fb5a 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8004b04:	61b8      	str	r0, [r7, #24]
        break;
 8004b06:	e013      	b.n	8004b30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b08:	f7fe fb6a 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 8004b0c:	61b8      	str	r0, [r7, #24]
        break;
 8004b0e:	e00f      	b.n	8004b30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b10:	4b1d      	ldr	r3, [pc, #116]	@ (8004b88 <UART_SetConfig+0x4c4>)
 8004b12:	61bb      	str	r3, [r7, #24]
        break;
 8004b14:	e00c      	b.n	8004b30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b16:	f7fe fa7d 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8004b1a:	61b8      	str	r0, [r7, #24]
        break;
 8004b1c:	e008      	b.n	8004b30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b22:	61bb      	str	r3, [r7, #24]
        break;
 8004b24:	e004      	b.n	8004b30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b2e:	bf00      	nop
    }

    if (pclk != 0U)
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d018      	beq.n	8004b68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	085a      	lsrs	r2, r3, #1
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	441a      	add	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b0f      	cmp	r3, #15
 8004b4e:	d909      	bls.n	8004b64 <UART_SetConfig+0x4a0>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b56:	d205      	bcs.n	8004b64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	60da      	str	r2, [r3, #12]
 8004b62:	e001      	b.n	8004b68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b74:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3720      	adds	r7, #32
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40007c00 	.word	0x40007c00
 8004b84:	40023800 	.word	0x40023800
 8004b88:	00f42400 	.word	0x00f42400

08004b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c8a:	d10a      	bne.n	8004ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08c      	sub	sp, #48	@ 0x30
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ce0:	f7fc fc70 	bl	80015c4 <HAL_GetTick>
 8004ce4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d12e      	bne.n	8004d52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f83b 	bl	8004d7e <UART_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d021      	beq.n	8004d52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d22:	623b      	str	r3, [r7, #32]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	69b9      	ldr	r1, [r7, #24]
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	617b      	str	r3, [r7, #20]
   return(result);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e6      	bne.n	8004d0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e011      	b.n	8004d76 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3728      	adds	r7, #40	@ 0x28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d8e:	e04f      	b.n	8004e30 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d96:	d04b      	beq.n	8004e30 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d98:	f7fc fc14 	bl	80015c4 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d302      	bcc.n	8004dae <UART_WaitOnFlagUntilTimeout+0x30>
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e04e      	b.n	8004e50 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d037      	beq.n	8004e30 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b80      	cmp	r3, #128	@ 0x80
 8004dc4:	d034      	beq.n	8004e30 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b40      	cmp	r3, #64	@ 0x40
 8004dca:	d031      	beq.n	8004e30 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d110      	bne.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2208      	movs	r2, #8
 8004de0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f838 	bl	8004e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2208      	movs	r2, #8
 8004dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e029      	b.n	8004e50 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e0a:	d111      	bne.n	8004e30 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f81e 	bl	8004e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e00f      	b.n	8004e50 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	bf0c      	ite	eq
 8004e40:	2301      	moveq	r3, #1
 8004e42:	2300      	movne	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d0a0      	beq.n	8004d90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b095      	sub	sp, #84	@ 0x54
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e6      	bne.n	8004e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3308      	adds	r3, #8
 8004e98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3308      	adds	r3, #8
 8004eb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e5      	bne.n	8004e92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d118      	bne.n	8004f00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	60bb      	str	r3, [r7, #8]
   return(result);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f023 0310 	bic.w	r3, r3, #16
 8004ee2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eec:	61bb      	str	r3, [r7, #24]
 8004eee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	6979      	ldr	r1, [r7, #20]
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	e841 2300 	strex	r3, r2, [r1]
 8004ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1e6      	bne.n	8004ece <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f14:	bf00      	nop
 8004f16:	3754      	adds	r7, #84	@ 0x54
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d121      	bne.n	8004f76 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4b27      	ldr	r3, [pc, #156]	@ (8004fd4 <FMC_SDRAM_Init+0xb4>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	6851      	ldr	r1, [r2, #4]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	6892      	ldr	r2, [r2, #8]
 8004f42:	4311      	orrs	r1, r2
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	68d2      	ldr	r2, [r2, #12]
 8004f48:	4311      	orrs	r1, r2
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	6912      	ldr	r2, [r2, #16]
 8004f4e:	4311      	orrs	r1, r2
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	6952      	ldr	r2, [r2, #20]
 8004f54:	4311      	orrs	r1, r2
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	6992      	ldr	r2, [r2, #24]
 8004f5a:	4311      	orrs	r1, r2
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	69d2      	ldr	r2, [r2, #28]
 8004f60:	4311      	orrs	r1, r2
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	6a12      	ldr	r2, [r2, #32]
 8004f66:	4311      	orrs	r1, r2
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	e026      	b.n	8004fc4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	69d9      	ldr	r1, [r3, #28]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	4319      	orrs	r1, r3
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd4 <FMC_SDRAM_Init+0xb4>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	6851      	ldr	r1, [r2, #4]
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	6892      	ldr	r2, [r2, #8]
 8004fa4:	4311      	orrs	r1, r2
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	68d2      	ldr	r2, [r2, #12]
 8004faa:	4311      	orrs	r1, r2
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	6912      	ldr	r2, [r2, #16]
 8004fb0:	4311      	orrs	r1, r2
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	6952      	ldr	r2, [r2, #20]
 8004fb6:	4311      	orrs	r1, r2
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	6992      	ldr	r2, [r2, #24]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	ffff8000 	.word	0xffff8000

08004fd8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d128      	bne.n	800503c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	1e59      	subs	r1, r3, #1
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	4319      	orrs	r1, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	3b01      	subs	r3, #1
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	4319      	orrs	r1, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	3b01      	subs	r3, #1
 8005012:	031b      	lsls	r3, r3, #12
 8005014:	4319      	orrs	r1, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	3b01      	subs	r3, #1
 800501c:	041b      	lsls	r3, r3, #16
 800501e:	4319      	orrs	r1, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	3b01      	subs	r3, #1
 8005026:	051b      	lsls	r3, r3, #20
 8005028:	4319      	orrs	r1, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	3b01      	subs	r3, #1
 8005030:	061b      	lsls	r3, r3, #24
 8005032:	430b      	orrs	r3, r1
 8005034:	431a      	orrs	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	609a      	str	r2, [r3, #8]
 800503a:	e02d      	b.n	8005098 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	4b19      	ldr	r3, [pc, #100]	@ (80050a8 <FMC_SDRAM_Timing_Init+0xd0>)
 8005042:	4013      	ands	r3, r2
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	68d2      	ldr	r2, [r2, #12]
 8005048:	3a01      	subs	r2, #1
 800504a:	0311      	lsls	r1, r2, #12
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	6952      	ldr	r2, [r2, #20]
 8005050:	3a01      	subs	r2, #1
 8005052:	0512      	lsls	r2, r2, #20
 8005054:	430a      	orrs	r2, r1
 8005056:	431a      	orrs	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	1e59      	subs	r1, r3, #1
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	3b01      	subs	r3, #1
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	4319      	orrs	r1, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	3b01      	subs	r3, #1
 800507a:	021b      	lsls	r3, r3, #8
 800507c:	4319      	orrs	r1, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	3b01      	subs	r3, #1
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	4319      	orrs	r1, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	3b01      	subs	r3, #1
 800508e:	061b      	lsls	r3, r3, #24
 8005090:	430b      	orrs	r3, r1
 8005092:	431a      	orrs	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	ff0f0fff 	.word	0xff0f0fff

080050ac <memset>:
 80050ac:	4402      	add	r2, r0
 80050ae:	4603      	mov	r3, r0
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d100      	bne.n	80050b6 <memset+0xa>
 80050b4:	4770      	bx	lr
 80050b6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ba:	e7f9      	b.n	80050b0 <memset+0x4>

080050bc <__libc_init_array>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	4d0d      	ldr	r5, [pc, #52]	@ (80050f4 <__libc_init_array+0x38>)
 80050c0:	4c0d      	ldr	r4, [pc, #52]	@ (80050f8 <__libc_init_array+0x3c>)
 80050c2:	1b64      	subs	r4, r4, r5
 80050c4:	10a4      	asrs	r4, r4, #2
 80050c6:	2600      	movs	r6, #0
 80050c8:	42a6      	cmp	r6, r4
 80050ca:	d109      	bne.n	80050e0 <__libc_init_array+0x24>
 80050cc:	4d0b      	ldr	r5, [pc, #44]	@ (80050fc <__libc_init_array+0x40>)
 80050ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005100 <__libc_init_array+0x44>)
 80050d0:	f000 f818 	bl	8005104 <_init>
 80050d4:	1b64      	subs	r4, r4, r5
 80050d6:	10a4      	asrs	r4, r4, #2
 80050d8:	2600      	movs	r6, #0
 80050da:	42a6      	cmp	r6, r4
 80050dc:	d105      	bne.n	80050ea <__libc_init_array+0x2e>
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e4:	4798      	blx	r3
 80050e6:	3601      	adds	r6, #1
 80050e8:	e7ee      	b.n	80050c8 <__libc_init_array+0xc>
 80050ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ee:	4798      	blx	r3
 80050f0:	3601      	adds	r6, #1
 80050f2:	e7f2      	b.n	80050da <__libc_init_array+0x1e>
 80050f4:	08005144 	.word	0x08005144
 80050f8:	08005144 	.word	0x08005144
 80050fc:	08005144 	.word	0x08005144
 8005100:	08005148 	.word	0x08005148

08005104 <_init>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	bf00      	nop
 8005108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510a:	bc08      	pop	{r3}
 800510c:	469e      	mov	lr, r3
 800510e:	4770      	bx	lr

08005110 <_fini>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	bf00      	nop
 8005114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005116:	bc08      	pop	{r3}
 8005118:	469e      	mov	lr, r3
 800511a:	4770      	bx	lr
