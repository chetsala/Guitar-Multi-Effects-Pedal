
Guitar-Multi-Effects-Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a04  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007bcc  08007bcc  00008bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bec  08007bec  0000903c  2**0
                  CONTENTS
  4 .ARM          00000008  08007bec  08007bec  00008bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf4  08007bf4  0000903c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf4  08007bf4  00008bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bf8  08007bf8  00008bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08007bfc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002c494  2000003c  08007c38  0000903c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2002c4d0  08007c38  000094d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186dc  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003273  00000000  00000000  00021748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  000249c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a3  00000000  00000000  00026040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac2a  00000000  00000000  000271e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d415  00000000  00000000  00051e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108edd  00000000  00000000  0006f222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001780ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f64  00000000  00000000  00178144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0017e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000003c 	.word	0x2000003c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007bb4 	.word	0x08007bb4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000040 	.word	0x20000040
 8000204:	08007bb4 	.word	0x08007bb4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f002 fe78 	bl	80031f0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f812 	bl	8000528 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000504:	f000 f878 	bl	80005f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fa1e 	bl	8000948 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800050c:	f000 f8be 	bl	800068c <MX_DMA2D_Init>
  MX_CRC_Init();
 8000510:	f000 f89a 	bl	8000648 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000514:	f000 f9e8 	bl	80008e8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000518:	f000 f992 	bl	8000840 <MX_TIM1_Init>
  MX_SAI2_Init();
 800051c:	f000 f8e8 	bl	80006f0 <MX_SAI2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	     setup_audio();
 8000520:	f000 fa72 	bl	8000a08 <setup_audio>
 8000524:	e7fc      	b.n	8000520 <main+0x28>
	...

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	@ 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	@ 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f007 fb02 	bl	8007b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800054c:	f004 fc94 	bl	8004e78 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	4b27      	ldr	r3, [pc, #156]	@ (80005f0 <SystemClock_Config+0xc8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	4a26      	ldr	r2, [pc, #152]	@ (80005f0 <SystemClock_Config+0xc8>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	@ 0x40
 800055c:	4b24      	ldr	r3, [pc, #144]	@ (80005f0 <SystemClock_Config+0xc8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	4b22      	ldr	r3, [pc, #136]	@ (80005f4 <SystemClock_Config+0xcc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a21      	ldr	r2, [pc, #132]	@ (80005f4 <SystemClock_Config+0xcc>)
 800056e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1f      	ldr	r3, [pc, #124]	@ (80005f4 <SystemClock_Config+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000588:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000594:	2319      	movs	r3, #25
 8000596:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000598:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800059c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800059e:	2308      	movs	r3, #8
 80005a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 fc74 	bl	8004e98 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005b6:	f000 fab2 	bl	8000b1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2302      	movs	r3, #2
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2101      	movs	r1, #1
 80005d8:	4618      	mov	r0, r3
 80005da:	f004 ff01 	bl	80053e0 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005e4:	f000 fa9b 	bl	8000b1e <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	@ 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b0a2      	sub	sp, #136	@ 0x88
 80005fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2284      	movs	r2, #132	@ 0x84
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f007 fa9b 	bl	8007b40 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800060a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800060e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000610:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000614:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000616:	2305      	movs	r3, #5
 8000618:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800061e:	2300      	movs	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000626:	2300      	movs	r3, #0
 8000628:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800062a:	2300      	movs	r3, #0
 800062c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4618      	mov	r0, r3
 8000632:	f005 f8bb 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 800063c:	f000 fa6f 	bl	8000b1e <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3788      	adds	r7, #136	@ 0x88
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800064c:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <MX_CRC_Init+0x3c>)
 800064e:	4a0e      	ldr	r2, [pc, #56]	@ (8000688 <MX_CRC_Init+0x40>)
 8000650:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <MX_CRC_Init+0x3c>)
 8000654:	2200      	movs	r2, #0
 8000656:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <MX_CRC_Init+0x3c>)
 800065a:	2200      	movs	r2, #0
 800065c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800065e:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_CRC_Init+0x3c>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <MX_CRC_Init+0x3c>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800066a:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <MX_CRC_Init+0x3c>)
 800066c:	2201      	movs	r2, #1
 800066e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	@ (8000684 <MX_CRC_Init+0x3c>)
 8000672:	f002 ff51 	bl	8003518 <HAL_CRC_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800067c:	f000 fa4f 	bl	8000b1e <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000005c 	.word	0x2000005c
 8000688:	40023000 	.word	0x40023000

0800068c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <MX_DMA2D_Init+0x5c>)
 8000692:	4a16      	ldr	r2, [pc, #88]	@ (80006ec <MX_DMA2D_Init+0x60>)
 8000694:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_DMA2D_Init+0x5c>)
 8000698:	2200      	movs	r2, #0
 800069a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_DMA2D_Init+0x5c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_DMA2D_Init+0x5c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_DMA2D_Init+0x5c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_DMA2D_Init+0x5c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_DMA2D_Init+0x5c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <MX_DMA2D_Init+0x5c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006c0:	4809      	ldr	r0, [pc, #36]	@ (80006e8 <MX_DMA2D_Init+0x5c>)
 80006c2:	f003 fa67 	bl	8003b94 <HAL_DMA2D_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006cc:	f000 fa27 	bl	8000b1e <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006d0:	2101      	movs	r1, #1
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_DMA2D_Init+0x5c>)
 80006d4:	f003 faa8 	bl	8003c28 <HAL_DMA2D_ConfigLayer>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006de:	f000 fa1e 	bl	8000b1e <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000080 	.word	0x20000080
 80006ec:	4002b000 	.word	0x4002b000

080006f0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80006f4:	4b4d      	ldr	r3, [pc, #308]	@ (800082c <MX_SAI2_Init+0x13c>)
 80006f6:	4a4e      	ldr	r2, [pc, #312]	@ (8000830 <MX_SAI2_Init+0x140>)
 80006f8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80006fa:	4b4c      	ldr	r3, [pc, #304]	@ (800082c <MX_SAI2_Init+0x13c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000700:	4b4a      	ldr	r3, [pc, #296]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8000706:	4b49      	ldr	r3, [pc, #292]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000708:	2280      	movs	r2, #128	@ 0x80
 800070a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800070c:	4b47      	ldr	r3, [pc, #284]	@ (800082c <MX_SAI2_Init+0x13c>)
 800070e:	2200      	movs	r2, #0
 8000710:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000712:	4b46      	ldr	r3, [pc, #280]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000714:	2200      	movs	r2, #0
 8000716:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000718:	4b44      	ldr	r3, [pc, #272]	@ (800082c <MX_SAI2_Init+0x13c>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800071e:	4b43      	ldr	r3, [pc, #268]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000724:	4b41      	ldr	r3, [pc, #260]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800072a:	4b40      	ldr	r3, [pc, #256]	@ (800082c <MX_SAI2_Init+0x13c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000730:	4b3e      	ldr	r3, [pc, #248]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000732:	4a40      	ldr	r2, [pc, #256]	@ (8000834 <MX_SAI2_Init+0x144>)
 8000734:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000736:	4b3d      	ldr	r3, [pc, #244]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800073c:	4b3b      	ldr	r3, [pc, #236]	@ (800082c <MX_SAI2_Init+0x13c>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000742:	4b3a      	ldr	r3, [pc, #232]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000748:	4b38      	ldr	r3, [pc, #224]	@ (800082c <MX_SAI2_Init+0x13c>)
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 16;
 800074e:	4b37      	ldr	r3, [pc, #220]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000750:	2210      	movs	r2, #16
 8000752:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000754:	4b35      	ldr	r3, [pc, #212]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000756:	2201      	movs	r2, #1
 8000758:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800075a:	4b34      	ldr	r3, [pc, #208]	@ (800082c <MX_SAI2_Init+0x13c>)
 800075c:	2200      	movs	r2, #0
 800075e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000760:	4b32      	ldr	r3, [pc, #200]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000762:	2200      	movs	r2, #0
 8000764:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000766:	4b31      	ldr	r3, [pc, #196]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000768:	2200      	movs	r2, #0
 800076a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800076c:	4b2f      	ldr	r3, [pc, #188]	@ (800082c <MX_SAI2_Init+0x13c>)
 800076e:	2200      	movs	r2, #0
 8000770:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000772:	4b2e      	ldr	r3, [pc, #184]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000774:	2200      	movs	r2, #0
 8000776:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000778:	4b2c      	ldr	r3, [pc, #176]	@ (800082c <MX_SAI2_Init+0x13c>)
 800077a:	2201      	movs	r2, #1
 800077c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800077e:	4b2b      	ldr	r3, [pc, #172]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000780:	2200      	movs	r2, #0
 8000782:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000784:	4829      	ldr	r0, [pc, #164]	@ (800082c <MX_SAI2_Init+0x13c>)
 8000786:	f005 fe4d 	bl	8006424 <HAL_SAI_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000790:	f000 f9c5 	bl	8000b1e <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000794:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <MX_SAI2_Init+0x148>)
 8000796:	4a29      	ldr	r2, [pc, #164]	@ (800083c <MX_SAI2_Init+0x14c>)
 8000798:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800079a:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <MX_SAI2_Init+0x148>)
 800079c:	2200      	movs	r2, #0
 800079e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80007a0:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007a2:	2203      	movs	r2, #3
 80007a4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80007a6:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007a8:	2240      	movs	r2, #64	@ 0x40
 80007aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80007ac:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80007b2:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80007be:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80007ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80007d0:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007d8:	2200      	movs	r2, #0
 80007da:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007de:	2200      	movs	r2, #0
 80007e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 16;
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007e4:	2210      	movs	r2, #16
 80007e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80007e8:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80007f4:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_SAI2_Init+0x148>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000800:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <MX_SAI2_Init+0x148>)
 8000802:	2200      	movs	r2, #0
 8000804:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000806:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_SAI2_Init+0x148>)
 8000808:	2200      	movs	r2, #0
 800080a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <MX_SAI2_Init+0x148>)
 800080e:	2201      	movs	r2, #1
 8000810:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_SAI2_Init+0x148>)
 8000814:	2200      	movs	r2, #0
 8000816:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000818:	4807      	ldr	r0, [pc, #28]	@ (8000838 <MX_SAI2_Init+0x148>)
 800081a:	f005 fe03 	bl	8006424 <HAL_SAI_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000824:	f000 f97b 	bl	8000b1e <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000c0 	.word	0x200000c0
 8000830:	40015c04 	.word	0x40015c04
 8000834:	0002ee00 	.word	0x0002ee00
 8000838:	20000144 	.word	0x20000144
 800083c:	40015c24 	.word	0x40015c24

08000840 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800085e:	4b20      	ldr	r3, [pc, #128]	@ (80008e0 <MX_TIM1_Init+0xa0>)
 8000860:	4a20      	ldr	r2, [pc, #128]	@ (80008e4 <MX_TIM1_Init+0xa4>)
 8000862:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000864:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <MX_TIM1_Init+0xa0>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b1d      	ldr	r3, [pc, #116]	@ (80008e0 <MX_TIM1_Init+0xa0>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_TIM1_Init+0xa0>)
 8000872:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000876:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000878:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <MX_TIM1_Init+0xa0>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_TIM1_Init+0xa0>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <MX_TIM1_Init+0xa0>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800088a:	4815      	ldr	r0, [pc, #84]	@ (80008e0 <MX_TIM1_Init+0xa0>)
 800088c:	f006 f9e7 	bl	8006c5e <HAL_TIM_Base_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000896:	f000 f942 	bl	8000b1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4619      	mov	r1, r3
 80008a6:	480e      	ldr	r0, [pc, #56]	@ (80008e0 <MX_TIM1_Init+0xa0>)
 80008a8:	f006 fa30 	bl	8006d0c <HAL_TIM_ConfigClockSource>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80008b2:	f000 f934 	bl	8000b1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <MX_TIM1_Init+0xa0>)
 80008c8:	f006 fc30 	bl	800712c <HAL_TIMEx_MasterConfigSynchronization>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008d2:	f000 f924 	bl	8000b1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	3720      	adds	r7, #32
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200001c8 	.word	0x200001c8
 80008e4:	40010000 	.word	0x40010000

080008e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ec:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_USART1_UART_Init+0x58>)
 80008ee:	4a15      	ldr	r2, [pc, #84]	@ (8000944 <MX_USART1_UART_Init+0x5c>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008f2:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <MX_USART1_UART_Init+0x58>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_USART1_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_USART1_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_USART1_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_USART1_UART_Init+0x58>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <MX_USART1_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_USART1_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <MX_USART1_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_USART1_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_USART1_UART_Init+0x58>)
 800092c:	f006 fc8c 	bl	8007248 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 f8f2 	bl	8000b1e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000214 	.word	0x20000214
 8000944:	40011000 	.word	0x40011000

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b089      	sub	sp, #36	@ 0x24
 800094c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a2c      	ldr	r2, [pc, #176]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 8000954:	f043 0310 	orr.w	r3, r3, #16
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0310 	and.w	r3, r3, #16
 8000962:	61fb      	str	r3, [r7, #28]
 8000964:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a26      	ldr	r2, [pc, #152]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b24      	ldr	r3, [pc, #144]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a20      	ldr	r2, [pc, #128]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000996:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a1a      	ldr	r2, [pc, #104]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009ae:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a14      	ldr	r2, [pc, #80]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 80009b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a08      	ldr	r2, [pc, #32]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <MX_GPIO_Init+0xbc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f6:	bf00      	nop
 80009f8:	3724      	adds	r7, #36	@ 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <setup_audio>:

/* USER CODE BEGIN 4 */

void setup_audio()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0

	// Initialize audio output (headphones) with 50% volume and 48kHz sampling rate
    if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 75, AUDIO_FREQUENCY_48K) != AUDIO_OK) \
 8000a0c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000a10:	214b      	movs	r1, #75	@ 0x4b
 8000a12:	2002      	movs	r0, #2
 8000a14:	f001 ff4e 	bl	80028b4 <BSP_AUDIO_OUT_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <setup_audio+0x1a>
    		{
    			Error_Handler();
 8000a1e:	f000 f87e 	bl	8000b1e <Error_Handler>
    		}

	// Initialize audio input (microphone/line-in) with 48kHz sampling rate
	if (BSP_AUDIO_IN_Init(INPUT_DEVICE_INPUT_LINE_2, 80, AUDIO_FREQUENCY_48K) != AUDIO_OK)
 8000a22:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000a26:	2150      	movs	r1, #80	@ 0x50
 8000a28:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000a2c:	f002 f9b4 	bl	8002d98 <BSP_AUDIO_IN_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <setup_audio+0x32>
			{
	        	Error_Handler();
 8000a36:	f000 f872 	bl	8000b1e <Error_Handler>
			}
	/* Buffer Initialization */
	memset((uint16_t*)AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE*2);
 8000a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4824      	ldr	r0, [pc, #144]	@ (8000ad4 <setup_audio+0xcc>)
 8000a42:	f007 f87d 	bl	8007b40 <memset>
	memset((uint16_t*)AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE*4);
 8000a46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4822      	ldr	r0, [pc, #136]	@ (8000ad8 <setup_audio+0xd0>)
 8000a4e:	f007 f877 	bl	8007b40 <memset>

	/* Start Recording and Playback */
	BSP_AUDIO_IN_Record(AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 8000a52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a56:	481f      	ldr	r0, [pc, #124]	@ (8000ad4 <setup_audio+0xcc>)
 8000a58:	f002 fa0a 	bl	8002e70 <BSP_AUDIO_IN_Record>
	BSP_AUDIO_OUT_Play(AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE * 4);
 8000a5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a60:	481d      	ldr	r0, [pc, #116]	@ (8000ad8 <setup_audio+0xd0>)
 8000a62:	f001 ff79 	bl	8002958 <BSP_AUDIO_OUT_Play>

	 /* Volume setup */
	BSP_AUDIO_OUT_SetVolume(75);
 8000a66:	204b      	movs	r0, #75	@ 0x4b
 8000a68:	f001 ffa0 	bl	80029ac <BSP_AUDIO_OUT_SetVolume>

	 /* Main Processing Loop */
	while (1) {
		/* Wait for half of the buffer to be filled */
	    if (audio_rec_buffer_state == BUFFER_OFFSET_HALF) {
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <setup_audio+0xd4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d113      	bne.n	8000a9c <setup_audio+0x94>
	    	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000a74:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <setup_audio+0xd4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
	        memcpy(data_in, AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE / 2);
 8000a7a:	2280      	movs	r2, #128	@ 0x80
 8000a7c:	4915      	ldr	r1, [pc, #84]	@ (8000ad4 <setup_audio+0xcc>)
 8000a7e:	4818      	ldr	r0, [pc, #96]	@ (8000ae0 <setup_audio+0xd8>)
 8000a80:	f007 f88a 	bl	8007b98 <memcpy>
	        Signal_Processing(data_in, data_out, count);
 8000a84:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <setup_audio+0xdc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4917      	ldr	r1, [pc, #92]	@ (8000ae8 <setup_audio+0xe0>)
 8000a8c:	4814      	ldr	r0, [pc, #80]	@ (8000ae0 <setup_audio+0xd8>)
 8000a8e:	f000 f835 	bl	8000afc <Signal_Processing>
	        memcpy(AUDIO_BUFFER_OUT, data_out, AUDIO_BLOCK_SIZE / 2);
 8000a92:	2280      	movs	r2, #128	@ 0x80
 8000a94:	4914      	ldr	r1, [pc, #80]	@ (8000ae8 <setup_audio+0xe0>)
 8000a96:	4810      	ldr	r0, [pc, #64]	@ (8000ad8 <setup_audio+0xd0>)
 8000a98:	f007 f87e 	bl	8007b98 <memcpy>
	        }

	        /* Wait for full buffer to be filled */
	        if (audio_rec_buffer_state == BUFFER_OFFSET_FULL) {
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <setup_audio+0xd4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d1e3      	bne.n	8000a6c <setup_audio+0x64>
	        audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <setup_audio+0xd4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
	        memcpy(data_in + (AUDIO_BLOCK_SIZE / 2), AUDIO_BUFFER_IN + (AUDIO_BLOCK_SIZE / 2), AUDIO_BLOCK_SIZE / 2);
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <setup_audio+0xe4>)
 8000aac:	2280      	movs	r2, #128	@ 0x80
 8000aae:	4910      	ldr	r1, [pc, #64]	@ (8000af0 <setup_audio+0xe8>)
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f007 f871 	bl	8007b98 <memcpy>
	        Signal_Processing(data_in, data_out, count);
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <setup_audio+0xdc>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	490a      	ldr	r1, [pc, #40]	@ (8000ae8 <setup_audio+0xe0>)
 8000abe:	4808      	ldr	r0, [pc, #32]	@ (8000ae0 <setup_audio+0xd8>)
 8000ac0:	f000 f81c 	bl	8000afc <Signal_Processing>
	        memcpy(AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE / 2), data_out + (AUDIO_BLOCK_SIZE / 2), AUDIO_BLOCK_SIZE / 2);
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <setup_audio+0xec>)
 8000ac6:	2280      	movs	r2, #128	@ 0x80
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <setup_audio+0xf0>)
 8000acc:	f007 f864 	bl	8007b98 <memcpy>
	    if (audio_rec_buffer_state == BUFFER_OFFSET_HALF) {
 8000ad0:	e7cc      	b.n	8000a6c <setup_audio+0x64>
 8000ad2:	bf00      	nop
 8000ad4:	c0115800 	.word	0xc0115800
 8000ad8:	c0115a00 	.word	0xc0115a00
 8000adc:	20000058 	.word	0x20000058
 8000ae0:	2000029c 	.word	0x2000029c
 8000ae4:	2002c29c 	.word	0x2002c29c
 8000ae8:	2001629c 	.word	0x2001629c
 8000aec:	2000039c 	.word	0x2000039c
 8000af0:	c0115880 	.word	0xc0115880
 8000af4:	2001639c 	.word	0x2001639c
 8000af8:	c0115a80 	.word	0xc0115a80

08000afc <Signal_Processing>:
	}
}


void Signal_Processing(uint16_t *data_in, uint16_t *data_out, uint32_t count)
       {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
			// Simple audio pass-through: copy data_in to data_out
			memcpy(data_out, data_in, count * sizeof(uint16_t));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	68f9      	ldr	r1, [r7, #12]
 8000b10:	68b8      	ldr	r0, [r7, #8]
 8000b12:	f007 f841 	bl	8007b98 <memcpy>
	   }
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b22:	b672      	cpsid	i
}
 8000b24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b26:	bf00      	nop
 8000b28:	e7fd      	b.n	8000b26 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	4a0e      	ldr	r2, [pc, #56]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <HAL_CRC_MspInit+0x38>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d10b      	bne.n	8000b9e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <HAL_CRC_MspInit+0x3c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a09      	ldr	r2, [pc, #36]	@ (8000bb0 <HAL_CRC_MspInit+0x3c>)
 8000b8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <HAL_CRC_MspInit+0x3c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023000 	.word	0x40023000
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <HAL_DMA2D_MspInit+0x38>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d10b      	bne.n	8000bde <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <HAL_DMA2D_MspInit+0x3c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a09      	ldr	r2, [pc, #36]	@ (8000bf0 <HAL_DMA2D_MspInit+0x3c>)
 8000bcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <HAL_DMA2D_MspInit+0x3c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	4002b000 	.word	0x4002b000
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <HAL_TIM_Base_MspInit+0x38>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d10b      	bne.n	8000c1e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c06:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <HAL_TIM_Base_MspInit+0x3c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	4a09      	ldr	r2, [pc, #36]	@ (8000c30 <HAL_TIM_Base_MspInit+0x3c>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <HAL_TIM_Base_MspInit+0x3c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40010000 	.word	0x40010000
 8000c30:	40023800 	.word	0x40023800

08000c34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0ac      	sub	sp, #176	@ 0xb0
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4c:	f107 0318 	add.w	r3, r7, #24
 8000c50:	2284      	movs	r2, #132	@ 0x84
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f006 ff73 	bl	8007b40 <memset>
  if(huart->Instance==USART1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a32      	ldr	r2, [pc, #200]	@ (8000d28 <HAL_UART_MspInit+0xf4>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d15c      	bne.n	8000d1e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c64:	2340      	movs	r3, #64	@ 0x40
 8000c66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	4618      	mov	r0, r3
 8000c72:	f004 fd9b 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c7c:	f7ff ff4f 	bl	8000b1e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c80:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <HAL_UART_MspInit+0xf8>)
 8000c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c84:	4a29      	ldr	r2, [pc, #164]	@ (8000d2c <HAL_UART_MspInit+0xf8>)
 8000c86:	f043 0310 	orr.w	r3, r3, #16
 8000c8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8c:	4b27      	ldr	r3, [pc, #156]	@ (8000d2c <HAL_UART_MspInit+0xf8>)
 8000c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <HAL_UART_MspInit+0xf8>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9c:	4a23      	ldr	r2, [pc, #140]	@ (8000d2c <HAL_UART_MspInit+0xf8>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca4:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <HAL_UART_MspInit+0xf8>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <HAL_UART_MspInit+0xf8>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d2c <HAL_UART_MspInit+0xf8>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <HAL_UART_MspInit+0xf8>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cea:	4619      	mov	r1, r3
 8000cec:	4810      	ldr	r0, [pc, #64]	@ (8000d30 <HAL_UART_MspInit+0xfc>)
 8000cee:	f003 f82d 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cf6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d16:	4619      	mov	r1, r3
 8000d18:	4806      	ldr	r0, [pc, #24]	@ (8000d34 <HAL_UART_MspInit+0x100>)
 8000d1a:	f003 f817 	bl	8003d4c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d1e:	bf00      	nop
 8000d20:	37b0      	adds	r7, #176	@ 0xb0
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40011000 	.word	0x40011000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40020000 	.word	0x40020000

08000d38 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a33      	ldr	r2, [pc, #204]	@ (8000e14 <HAL_SAI_MspInit+0xdc>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d134      	bne.n	8000db4 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8000d4a:	4b33      	ldr	r3, [pc, #204]	@ (8000e18 <HAL_SAI_MspInit+0xe0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10b      	bne.n	8000d6a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000d52:	4b32      	ldr	r3, [pc, #200]	@ (8000e1c <HAL_SAI_MspInit+0xe4>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	4a31      	ldr	r2, [pc, #196]	@ (8000e1c <HAL_SAI_MspInit+0xe4>)
 8000d58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e1c <HAL_SAI_MspInit+0xe4>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8000d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e18 <HAL_SAI_MspInit+0xe0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4a29      	ldr	r2, [pc, #164]	@ (8000e18 <HAL_SAI_MspInit+0xe0>)
 8000d72:	6013      	str	r3, [r2, #0]
    PE0     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d74:	2301      	movs	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000d84:	230a      	movs	r3, #10
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4824      	ldr	r0, [pc, #144]	@ (8000e20 <HAL_SAI_MspInit+0xe8>)
 8000d90:	f002 ffdc 	bl	8003d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 8000d94:	23e0      	movs	r3, #224	@ 0xe0
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000da4:	230a      	movs	r3, #10
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	481d      	ldr	r0, [pc, #116]	@ (8000e24 <HAL_SAI_MspInit+0xec>)
 8000db0:	f002 ffcc 	bl	8003d4c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e28 <HAL_SAI_MspInit+0xf0>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d125      	bne.n	8000e0a <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8000dbe:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <HAL_SAI_MspInit+0xe0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10b      	bne.n	8000dde <HAL_SAI_MspInit+0xa6>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <HAL_SAI_MspInit+0xe4>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <HAL_SAI_MspInit+0xe4>)
 8000dcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_SAI_MspInit+0xe4>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <HAL_SAI_MspInit+0xe0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e18 <HAL_SAI_MspInit+0xe0>)
 8000de6:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000de8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4809      	ldr	r0, [pc, #36]	@ (8000e2c <HAL_SAI_MspInit+0xf4>)
 8000e06:	f002 ffa1 	bl	8003d4c <HAL_GPIO_Init>

    }
}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	@ 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40015c04 	.word	0x40015c04
 8000e18:	2002c2a0 	.word	0x2002c2a0
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40022000 	.word	0x40022000
 8000e28:	40015c24 	.word	0x40015c24
 8000e2c:	40021800 	.word	0x40021800

08000e30 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000eac <HAL_SAI_MspDeInit+0x7c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d116      	bne.n	8000e70 <HAL_SAI_MspDeInit+0x40>
    {
    SAI2_client --;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <HAL_SAI_MspDeInit+0x80>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	4a19      	ldr	r2, [pc, #100]	@ (8000eb0 <HAL_SAI_MspDeInit+0x80>)
 8000e4a:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8000e4c:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <HAL_SAI_MspDeInit+0x80>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d105      	bne.n	8000e60 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8000e54:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <HAL_SAI_MspDeInit+0x84>)
 8000e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e58:	4a16      	ldr	r2, [pc, #88]	@ (8000eb4 <HAL_SAI_MspDeInit+0x84>)
 8000e5a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000e5e:	6453      	str	r3, [r2, #68]	@ 0x44
    PE0     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0);
 8000e60:	2101      	movs	r1, #1
 8000e62:	4815      	ldr	r0, [pc, #84]	@ (8000eb8 <HAL_SAI_MspDeInit+0x88>)
 8000e64:	f003 f91e 	bl	80040a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6);
 8000e68:	21e0      	movs	r1, #224	@ 0xe0
 8000e6a:	4814      	ldr	r0, [pc, #80]	@ (8000ebc <HAL_SAI_MspDeInit+0x8c>)
 8000e6c:	f003 f91a 	bl	80040a4 <HAL_GPIO_DeInit>

    }
    if(hsai->Instance==SAI2_Block_B)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a12      	ldr	r2, [pc, #72]	@ (8000ec0 <HAL_SAI_MspDeInit+0x90>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d113      	bne.n	8000ea2 <HAL_SAI_MspDeInit+0x72>
    {
    SAI2_client --;
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb0 <HAL_SAI_MspDeInit+0x80>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb0 <HAL_SAI_MspDeInit+0x80>)
 8000e82:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8000e84:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <HAL_SAI_MspDeInit+0x80>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d105      	bne.n	8000e98 <HAL_SAI_MspDeInit+0x68>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8000e8c:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <HAL_SAI_MspDeInit+0x84>)
 8000e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e90:	4a08      	ldr	r2, [pc, #32]	@ (8000eb4 <HAL_SAI_MspDeInit+0x84>)
 8000e92:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000e96:	6453      	str	r3, [r2, #68]	@ 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_10);
 8000e98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e9c:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <HAL_SAI_MspDeInit+0x94>)
 8000e9e:	f003 f901 	bl	80040a4 <HAL_GPIO_DeInit>

    }
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40015c04 	.word	0x40015c04
 8000eb0:	2002c2a0 	.word	0x2002c2a0
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40022000 	.word	0x40022000
 8000ec0:	40015c24 	.word	0x40015c24
 8000ec4:	40021800 	.word	0x40021800

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <NMI_Handler+0x4>

08000ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <MemManage_Handler+0x4>

08000ee0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <UsageFault_Handler+0x4>

08000ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1e:	f002 f9a5 	bl	800326c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f50:	f7ff ffea 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f006 fde9 	bl	8007b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fabb 	bl	80004f8 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000f90:	08007bfc 	.word	0x08007bfc
  ldr r2, =_sbss
 8000f94:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000f98:	2002c4d0 	.word	0x2002c4d0

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	4603      	mov	r3, r0
 8000faa:	81fb      	strh	r3, [r7, #14]
 8000fac:	460b      	mov	r3, r1
 8000fae:	81bb      	strh	r3, [r7, #12]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000fb8:	89bb      	ldrh	r3, [r7, #12]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000fbe:	89bb      	ldrh	r3, [r7, #12]
 8000fc0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000fc4:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8000fca:	f001 fbff 	bl	80027cc <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 fa89 	bl	80024f0 <CODEC_IO_Write>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8000fe8:	89fb      	ldrh	r3, [r7, #14]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2200      	movs	r2, #0
 8000fee:	f640 0117 	movw	r1, #2071	@ 0x817
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 fa7c 	bl	80024f0 <CODEC_IO_Write>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	4413      	add	r3, r2
 8001000:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8001002:	89fb      	ldrh	r3, [r7, #14]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800100c:	4618      	mov	r0, r3
 800100e:	f001 fa6f 	bl	80024f0 <CODEC_IO_Write>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	4413      	add	r3, r2
 800101a:	61fb      	str	r3, [r7, #28]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 800101c:	89fb      	ldrh	r3, [r7, #14]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	226c      	movs	r2, #108	@ 0x6c
 8001022:	2139      	movs	r1, #57	@ 0x39
 8001024:	4618      	mov	r0, r3
 8001026:	f001 fa63 	bl	80024f0 <CODEC_IO_Write>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	4413      	add	r3, r2
 8001032:	61fb      	str	r3, [r7, #28]
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8001034:	8afb      	ldrh	r3, [r7, #22]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00c      	beq.n	8001054 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2213      	movs	r2, #19
 8001040:	2101      	movs	r1, #1
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fa54 	bl	80024f0 <CODEC_IO_Write>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	4413      	add	r3, r2
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	e00b      	b.n	800106c <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8001054:	89fb      	ldrh	r3, [r7, #14]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2203      	movs	r2, #3
 800105a:	2101      	movs	r1, #1
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fa47 	bl	80024f0 <CODEC_IO_Write>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	4413      	add	r3, r2
 800106a:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 800106c:	2032      	movs	r0, #50	@ 0x32
 800106e:	f001 fc15 	bl	800289c <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8001072:	8b3b      	ldrh	r3, [r7, #24]
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 815f 	beq.w	8001338 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 800107a:	4bae      	ldr	r3, [pc, #696]	@ (8001334 <wm8994_Init+0x394>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8001080:	8b3b      	ldrh	r3, [r7, #24]
 8001082:	2b03      	cmp	r3, #3
 8001084:	f000 808c 	beq.w	80011a0 <wm8994_Init+0x200>
 8001088:	2b03      	cmp	r3, #3
 800108a:	f300 8111 	bgt.w	80012b0 <wm8994_Init+0x310>
 800108e:	2b01      	cmp	r3, #1
 8001090:	d002      	beq.n	8001098 <wm8994_Init+0xf8>
 8001092:	2b02      	cmp	r3, #2
 8001094:	d042      	beq.n	800111c <wm8994_Init+0x17c>
 8001096:	e10b      	b.n	80012b0 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8001098:	89fb      	ldrh	r3, [r7, #14]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80010a0:	2105      	movs	r1, #5
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 fa24 	bl	80024f0 <CODEC_IO_Write>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	4413      	add	r3, r2
 80010b0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80010b2:	89fb      	ldrh	r3, [r7, #14]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2200      	movs	r2, #0
 80010b8:	f240 6101 	movw	r1, #1537	@ 0x601
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 fa17 	bl	80024f0 <CODEC_IO_Write>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	4413      	add	r3, r2
 80010ca:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80010cc:	89fb      	ldrh	r3, [r7, #14]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2200      	movs	r2, #0
 80010d2:	f240 6102 	movw	r1, #1538	@ 0x602
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 fa0a 	bl	80024f0 <CODEC_IO_Write>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	4413      	add	r3, r2
 80010e4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80010e6:	89fb      	ldrh	r3, [r7, #14]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2202      	movs	r2, #2
 80010ec:	f240 6104 	movw	r1, #1540	@ 0x604
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 f9fd 	bl	80024f0 <CODEC_IO_Write>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	4413      	add	r3, r2
 80010fe:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2202      	movs	r2, #2
 8001106:	f240 6105 	movw	r1, #1541	@ 0x605
 800110a:	4618      	mov	r0, r3
 800110c:	f001 f9f0 	bl	80024f0 <CODEC_IO_Write>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	4413      	add	r3, r2
 8001118:	61fb      	str	r3, [r7, #28]
      break;
 800111a:	e110      	b.n	800133e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800111c:	89fb      	ldrh	r3, [r7, #14]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f240 3203 	movw	r2, #771	@ 0x303
 8001124:	2105      	movs	r1, #5
 8001126:	4618      	mov	r0, r3
 8001128:	f001 f9e2 	bl	80024f0 <CODEC_IO_Write>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	4413      	add	r3, r2
 8001134:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001136:	89fb      	ldrh	r3, [r7, #14]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2201      	movs	r2, #1
 800113c:	f240 6101 	movw	r1, #1537	@ 0x601
 8001140:	4618      	mov	r0, r3
 8001142:	f001 f9d5 	bl	80024f0 <CODEC_IO_Write>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	4413      	add	r3, r2
 800114e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2201      	movs	r2, #1
 8001156:	f240 6102 	movw	r1, #1538	@ 0x602
 800115a:	4618      	mov	r0, r3
 800115c:	f001 f9c8 	bl	80024f0 <CODEC_IO_Write>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	4413      	add	r3, r2
 8001168:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800116a:	89fb      	ldrh	r3, [r7, #14]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2200      	movs	r2, #0
 8001170:	f240 6104 	movw	r1, #1540	@ 0x604
 8001174:	4618      	mov	r0, r3
 8001176:	f001 f9bb 	bl	80024f0 <CODEC_IO_Write>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	4413      	add	r3, r2
 8001182:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2200      	movs	r2, #0
 800118a:	f240 6105 	movw	r1, #1541	@ 0x605
 800118e:	4618      	mov	r0, r3
 8001190:	f001 f9ae 	bl	80024f0 <CODEC_IO_Write>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	4413      	add	r3, r2
 800119c:	61fb      	str	r3, [r7, #28]
      break;
 800119e:	e0ce      	b.n	800133e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80011a0:	8afb      	ldrh	r3, [r7, #22]
 80011a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011a6:	d141      	bne.n	800122c <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80011b0:	2105      	movs	r1, #5
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 f99c 	bl	80024f0 <CODEC_IO_Write>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	4413      	add	r3, r2
 80011c0:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80011c2:	89fb      	ldrh	r3, [r7, #14]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2203      	movs	r2, #3
 80011c8:	f240 6101 	movw	r1, #1537	@ 0x601
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 f98f 	bl	80024f0 <CODEC_IO_Write>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	4413      	add	r3, r2
 80011da:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80011dc:	89fb      	ldrh	r3, [r7, #14]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2203      	movs	r2, #3
 80011e2:	f240 6102 	movw	r1, #1538	@ 0x602
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 f982 	bl	80024f0 <CODEC_IO_Write>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	4413      	add	r3, r2
 80011f4:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2203      	movs	r2, #3
 80011fc:	f240 6104 	movw	r1, #1540	@ 0x604
 8001200:	4618      	mov	r0, r3
 8001202:	f001 f975 	bl	80024f0 <CODEC_IO_Write>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	4413      	add	r3, r2
 800120e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8001210:	89fb      	ldrh	r3, [r7, #14]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2203      	movs	r2, #3
 8001216:	f240 6105 	movw	r1, #1541	@ 0x605
 800121a:	4618      	mov	r0, r3
 800121c:	f001 f968 	bl	80024f0 <CODEC_IO_Write>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	4413      	add	r3, r2
 8001228:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 800122a:	e088      	b.n	800133e <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800122c:	89fb      	ldrh	r3, [r7, #14]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8001234:	2105      	movs	r1, #5
 8001236:	4618      	mov	r0, r3
 8001238:	f001 f95a 	bl	80024f0 <CODEC_IO_Write>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	4413      	add	r3, r2
 8001244:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2201      	movs	r2, #1
 800124c:	f240 6101 	movw	r1, #1537	@ 0x601
 8001250:	4618      	mov	r0, r3
 8001252:	f001 f94d 	bl	80024f0 <CODEC_IO_Write>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	4413      	add	r3, r2
 800125e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001260:	89fb      	ldrh	r3, [r7, #14]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2201      	movs	r2, #1
 8001266:	f240 6102 	movw	r1, #1538	@ 0x602
 800126a:	4618      	mov	r0, r3
 800126c:	f001 f940 	bl	80024f0 <CODEC_IO_Write>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	4413      	add	r3, r2
 8001278:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2202      	movs	r2, #2
 8001280:	f240 6104 	movw	r1, #1540	@ 0x604
 8001284:	4618      	mov	r0, r3
 8001286:	f001 f933 	bl	80024f0 <CODEC_IO_Write>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	4413      	add	r3, r2
 8001292:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2202      	movs	r2, #2
 800129a:	f240 6105 	movw	r1, #1541	@ 0x605
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 f926 	bl	80024f0 <CODEC_IO_Write>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	4413      	add	r3, r2
 80012ac:	61fb      	str	r3, [r7, #28]
      break;
 80012ae:	e046      	b.n	800133e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80012b0:	89fb      	ldrh	r3, [r7, #14]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f240 3203 	movw	r2, #771	@ 0x303
 80012b8:	2105      	movs	r1, #5
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 f918 	bl	80024f0 <CODEC_IO_Write>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	4413      	add	r3, r2
 80012c8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80012ca:	89fb      	ldrh	r3, [r7, #14]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2201      	movs	r2, #1
 80012d0:	f240 6101 	movw	r1, #1537	@ 0x601
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 f90b 	bl	80024f0 <CODEC_IO_Write>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	4413      	add	r3, r2
 80012e2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80012e4:	89fb      	ldrh	r3, [r7, #14]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2201      	movs	r2, #1
 80012ea:	f240 6102 	movw	r1, #1538	@ 0x602
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 f8fe 	bl	80024f0 <CODEC_IO_Write>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	4413      	add	r3, r2
 80012fc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80012fe:	89fb      	ldrh	r3, [r7, #14]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2200      	movs	r2, #0
 8001304:	f240 6104 	movw	r1, #1540	@ 0x604
 8001308:	4618      	mov	r0, r3
 800130a:	f001 f8f1 	bl	80024f0 <CODEC_IO_Write>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	4413      	add	r3, r2
 8001316:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001318:	89fb      	ldrh	r3, [r7, #14]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2200      	movs	r2, #0
 800131e:	f240 6105 	movw	r1, #1541	@ 0x605
 8001322:	4618      	mov	r0, r3
 8001324:	f001 f8e4 	bl	80024f0 <CODEC_IO_Write>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	4413      	add	r3, r2
 8001330:	61fb      	str	r3, [r7, #28]
      break;
 8001332:	e004      	b.n	800133e <wm8994_Init+0x39e>
 8001334:	2002c2a4 	.word	0x2002c2a4
    }
  }
  else
  {
    outputEnabled = 0;
 8001338:	4b99      	ldr	r3, [pc, #612]	@ (80015a0 <wm8994_Init+0x600>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 81ab 	beq.w	800169c <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8001346:	4b97      	ldr	r3, [pc, #604]	@ (80015a4 <wm8994_Init+0x604>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
    switch (input_device)
 800134c:	8afb      	ldrh	r3, [r7, #22]
 800134e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001352:	f000 8129 	beq.w	80015a8 <wm8994_Init+0x608>
 8001356:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800135a:	f300 819b 	bgt.w	8001694 <wm8994_Init+0x6f4>
 800135e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001362:	d05a      	beq.n	800141a <wm8994_Init+0x47a>
 8001364:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001368:	f300 8194 	bgt.w	8001694 <wm8994_Init+0x6f4>
 800136c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001370:	f000 80c6 	beq.w	8001500 <wm8994_Init+0x560>
 8001374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001378:	f040 818c 	bne.w	8001694 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 800137c:	89fb      	ldrh	r3, [r7, #14]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8001384:	2104      	movs	r1, #4
 8001386:	4618      	mov	r0, r3
 8001388:	f001 f8b2 	bl	80024f0 <CODEC_IO_Write>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	4413      	add	r3, r2
 8001394:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	22db      	movs	r2, #219	@ 0xdb
 800139c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 f8a5 	bl	80024f0 <CODEC_IO_Write>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	4413      	add	r3, r2
 80013ae:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 80013b8:	2102      	movs	r1, #2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 f898 	bl	80024f0 <CODEC_IO_Write>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	4413      	add	r3, r2
 80013c8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2202      	movs	r2, #2
 80013d0:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80013d4:	4618      	mov	r0, r3
 80013d6:	f001 f88b 	bl	80024f0 <CODEC_IO_Write>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	4413      	add	r3, r2
 80013e2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80013e4:	89fb      	ldrh	r3, [r7, #14]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2202      	movs	r2, #2
 80013ea:	f240 6109 	movw	r1, #1545	@ 0x609
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 f87e 	bl	80024f0 <CODEC_IO_Write>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	4413      	add	r3, r2
 80013fc:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	220e      	movs	r2, #14
 8001404:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001408:	4618      	mov	r0, r3
 800140a:	f001 f871 	bl	80024f0 <CODEC_IO_Write>
 800140e:	4603      	mov	r3, r0
 8001410:	461a      	mov	r2, r3
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	4413      	add	r3, r2
 8001416:	61fb      	str	r3, [r7, #28]
      break;
 8001418:	e143      	b.n	80016a2 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800141a:	89fb      	ldrh	r3, [r7, #14]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2211      	movs	r2, #17
 8001420:	2128      	movs	r1, #40	@ 0x28
 8001422:	4618      	mov	r0, r3
 8001424:	f001 f864 	bl	80024f0 <CODEC_IO_Write>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	4413      	add	r3, r2
 8001430:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8001432:	89fb      	ldrh	r3, [r7, #14]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2235      	movs	r2, #53	@ 0x35
 8001438:	2129      	movs	r1, #41	@ 0x29
 800143a:	4618      	mov	r0, r3
 800143c:	f001 f858 	bl	80024f0 <CODEC_IO_Write>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	4413      	add	r3, r2
 8001448:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2235      	movs	r2, #53	@ 0x35
 8001450:	212a      	movs	r1, #42	@ 0x2a
 8001452:	4618      	mov	r0, r3
 8001454:	f001 f84c 	bl	80024f0 <CODEC_IO_Write>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	4413      	add	r3, r2
 8001460:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f240 3203 	movw	r2, #771	@ 0x303
 800146a:	2104      	movs	r1, #4
 800146c:	4618      	mov	r0, r3
 800146e:	f001 f83f 	bl	80024f0 <CODEC_IO_Write>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	4413      	add	r3, r2
 800147a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	22db      	movs	r2, #219	@ 0xdb
 8001482:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8001486:	4618      	mov	r0, r3
 8001488:	f001 f832 	bl	80024f0 <CODEC_IO_Write>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8001496:	89fb      	ldrh	r3, [r7, #14]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f246 3250 	movw	r2, #25424	@ 0x6350
 800149e:	2102      	movs	r1, #2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 f825 	bl	80024f0 <CODEC_IO_Write>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4413      	add	r3, r2
 80014ae:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80014b0:	89fb      	ldrh	r3, [r7, #14]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2202      	movs	r2, #2
 80014b6:	f240 6106 	movw	r1, #1542	@ 0x606
 80014ba:	4618      	mov	r0, r3
 80014bc:	f001 f818 	bl	80024f0 <CODEC_IO_Write>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	4413      	add	r3, r2
 80014c8:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2202      	movs	r2, #2
 80014d0:	f240 6107 	movw	r1, #1543	@ 0x607
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 f80b 	bl	80024f0 <CODEC_IO_Write>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	4413      	add	r3, r2
 80014e2:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	220d      	movs	r2, #13
 80014ea:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 fffe 	bl	80024f0 <CODEC_IO_Write>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	4413      	add	r3, r2
 80014fc:	61fb      	str	r3, [r7, #28]
      break;
 80014fe:	e0d0      	b.n	80016a2 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8001500:	89fb      	ldrh	r3, [r7, #14]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8001508:	2104      	movs	r1, #4
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fff0 	bl	80024f0 <CODEC_IO_Write>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800151a:	89fb      	ldrh	r3, [r7, #14]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	22db      	movs	r2, #219	@ 0xdb
 8001520:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8001524:	4618      	mov	r0, r3
 8001526:	f000 ffe3 	bl	80024f0 <CODEC_IO_Write>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	4413      	add	r3, r2
 8001532:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f246 3250 	movw	r2, #25424	@ 0x6350
 800153c:	2102      	movs	r1, #2
 800153e:	4618      	mov	r0, r3
 8001540:	f000 ffd6 	bl	80024f0 <CODEC_IO_Write>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	4413      	add	r3, r2
 800154c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800154e:	89fb      	ldrh	r3, [r7, #14]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2202      	movs	r2, #2
 8001554:	f240 6106 	movw	r1, #1542	@ 0x606
 8001558:	4618      	mov	r0, r3
 800155a:	f000 ffc9 	bl	80024f0 <CODEC_IO_Write>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	4413      	add	r3, r2
 8001566:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001568:	89fb      	ldrh	r3, [r7, #14]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2202      	movs	r2, #2
 800156e:	f240 6107 	movw	r1, #1543	@ 0x607
 8001572:	4618      	mov	r0, r3
 8001574:	f000 ffbc 	bl	80024f0 <CODEC_IO_Write>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	4413      	add	r3, r2
 8001580:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001582:	89fb      	ldrh	r3, [r7, #14]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	220d      	movs	r2, #13
 8001588:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800158c:	4618      	mov	r0, r3
 800158e:	f000 ffaf 	bl	80024f0 <CODEC_IO_Write>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	4413      	add	r3, r2
 800159a:	61fb      	str	r3, [r7, #28]
      break; 
 800159c:	e081      	b.n	80016a2 <wm8994_Init+0x702>
 800159e:	bf00      	nop
 80015a0:	2002c2a4 	.word	0x2002c2a4
 80015a4:	2002c2a8 	.word	0x2002c2a8
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80015a8:	89fb      	ldrh	r3, [r7, #14]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80015b0:	2104      	movs	r1, #4
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 ff9c 	bl	80024f0 <CODEC_IO_Write>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	4413      	add	r3, r2
 80015c0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80015c2:	89fb      	ldrh	r3, [r7, #14]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	22db      	movs	r2, #219	@ 0xdb
 80015c8:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 ff8f 	bl	80024f0 <CODEC_IO_Write>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	4413      	add	r3, r2
 80015da:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80015dc:	89fb      	ldrh	r3, [r7, #14]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	22db      	movs	r2, #219	@ 0xdb
 80015e2:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 ff82 	bl	80024f0 <CODEC_IO_Write>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	4413      	add	r3, r2
 80015f4:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80015fe:	2102      	movs	r1, #2
 8001600:	4618      	mov	r0, r3
 8001602:	f000 ff75 	bl	80024f0 <CODEC_IO_Write>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	4413      	add	r3, r2
 800160e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8001610:	89fb      	ldrh	r3, [r7, #14]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2202      	movs	r2, #2
 8001616:	f240 6106 	movw	r1, #1542	@ 0x606
 800161a:	4618      	mov	r0, r3
 800161c:	f000 ff68 	bl	80024f0 <CODEC_IO_Write>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	4413      	add	r3, r2
 8001628:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800162a:	89fb      	ldrh	r3, [r7, #14]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2202      	movs	r2, #2
 8001630:	f240 6107 	movw	r1, #1543	@ 0x607
 8001634:	4618      	mov	r0, r3
 8001636:	f000 ff5b 	bl	80024f0 <CODEC_IO_Write>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8001644:	89fb      	ldrh	r3, [r7, #14]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2202      	movs	r2, #2
 800164a:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 800164e:	4618      	mov	r0, r3
 8001650:	f000 ff4e 	bl	80024f0 <CODEC_IO_Write>
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	4413      	add	r3, r2
 800165c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2202      	movs	r2, #2
 8001664:	f240 6109 	movw	r1, #1545	@ 0x609
 8001668:	4618      	mov	r0, r3
 800166a:	f000 ff41 	bl	80024f0 <CODEC_IO_Write>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	4413      	add	r3, r2
 8001676:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001678:	89fb      	ldrh	r3, [r7, #14]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	220d      	movs	r2, #13
 800167e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001682:	4618      	mov	r0, r3
 8001684:	f000 ff34 	bl	80024f0 <CODEC_IO_Write>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	4413      	add	r3, r2
 8001690:	61fb      	str	r3, [r7, #28]
      break;    
 8001692:	e006      	b.n	80016a2 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	3301      	adds	r3, #1
 8001698:	61fb      	str	r3, [r7, #28]
      break;
 800169a:	e002      	b.n	80016a2 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 800169c:	4bb1      	ldr	r3, [pc, #708]	@ (8001964 <wm8994_Init+0x9c4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4ab0      	ldr	r2, [pc, #704]	@ (8001968 <wm8994_Init+0x9c8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d079      	beq.n	800179e <wm8994_Init+0x7fe>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4aae      	ldr	r2, [pc, #696]	@ (8001968 <wm8994_Init+0x9c8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	f200 80ad 	bhi.w	800180e <wm8994_Init+0x86e>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d061      	beq.n	8001782 <wm8994_Init+0x7e2>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80016c4:	4293      	cmp	r3, r2
 80016c6:	f200 80a2 	bhi.w	800180e <wm8994_Init+0x86e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80016d0:	4293      	cmp	r3, r2
 80016d2:	f000 808e 	beq.w	80017f2 <wm8994_Init+0x852>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80016dc:	4293      	cmp	r3, r2
 80016de:	f200 8096 	bhi.w	800180e <wm8994_Init+0x86e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80016e8:	d03d      	beq.n	8001766 <wm8994_Init+0x7c6>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80016f0:	f200 808d 	bhi.w	800180e <wm8994_Init+0x86e>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f245 6222 	movw	r2, #22050	@ 0x5622
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d06b      	beq.n	80017d6 <wm8994_Init+0x836>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001704:	4293      	cmp	r3, r2
 8001706:	f200 8082 	bhi.w	800180e <wm8994_Init+0x86e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001710:	d01b      	beq.n	800174a <wm8994_Init+0x7aa>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001718:	d879      	bhi.n	800180e <wm8994_Init+0x86e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001720:	d005      	beq.n	800172e <wm8994_Init+0x78e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8001728:	4293      	cmp	r3, r2
 800172a:	d046      	beq.n	80017ba <wm8994_Init+0x81a>
 800172c:	e06f      	b.n	800180e <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2203      	movs	r2, #3
 8001734:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fed9 	bl	80024f0 <CODEC_IO_Write>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	4413      	add	r3, r2
 8001746:	61fb      	str	r3, [r7, #28]
    break;
 8001748:	e06f      	b.n	800182a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800174a:	89fb      	ldrh	r3, [r7, #14]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2233      	movs	r2, #51	@ 0x33
 8001750:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fecb 	bl	80024f0 <CODEC_IO_Write>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	4413      	add	r3, r2
 8001762:	61fb      	str	r3, [r7, #28]
    break;
 8001764:	e061      	b.n	800182a <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8001766:	89fb      	ldrh	r3, [r7, #14]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2263      	movs	r2, #99	@ 0x63
 800176c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001770:	4618      	mov	r0, r3
 8001772:	f000 febd 	bl	80024f0 <CODEC_IO_Write>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4413      	add	r3, r2
 800177e:	61fb      	str	r3, [r7, #28]
    break;
 8001780:	e053      	b.n	800182a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001782:	89fb      	ldrh	r3, [r7, #14]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2283      	movs	r2, #131	@ 0x83
 8001788:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800178c:	4618      	mov	r0, r3
 800178e:	f000 feaf 	bl	80024f0 <CODEC_IO_Write>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	4413      	add	r3, r2
 800179a:	61fb      	str	r3, [r7, #28]
    break;
 800179c:	e045      	b.n	800182a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800179e:	89fb      	ldrh	r3, [r7, #14]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	22a3      	movs	r2, #163	@ 0xa3
 80017a4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fea1 	bl	80024f0 <CODEC_IO_Write>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	4413      	add	r3, r2
 80017b6:	61fb      	str	r3, [r7, #28]
    break;
 80017b8:	e037      	b.n	800182a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80017ba:	89fb      	ldrh	r3, [r7, #14]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2213      	movs	r2, #19
 80017c0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fe93 	bl	80024f0 <CODEC_IO_Write>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	4413      	add	r3, r2
 80017d2:	61fb      	str	r3, [r7, #28]
    break;
 80017d4:	e029      	b.n	800182a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80017d6:	89fb      	ldrh	r3, [r7, #14]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2243      	movs	r2, #67	@ 0x43
 80017dc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fe85 	bl	80024f0 <CODEC_IO_Write>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	4413      	add	r3, r2
 80017ee:	61fb      	str	r3, [r7, #28]
    break;
 80017f0:	e01b      	b.n	800182a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80017f2:	89fb      	ldrh	r3, [r7, #14]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2273      	movs	r2, #115	@ 0x73
 80017f8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fe77 	bl	80024f0 <CODEC_IO_Write>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	4413      	add	r3, r2
 800180a:	61fb      	str	r3, [r7, #28]
    break; 
 800180c:	e00d      	b.n	800182a <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800180e:	89fb      	ldrh	r3, [r7, #14]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2283      	movs	r2, #131	@ 0x83
 8001814:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fe69 	bl	80024f0 <CODEC_IO_Write>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4413      	add	r3, r2
 8001826:	61fb      	str	r3, [r7, #28]
    break; 
 8001828:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800182a:	8afb      	ldrh	r3, [r7, #22]
 800182c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001830:	d10e      	bne.n	8001850 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8001832:	89fb      	ldrh	r3, [r7, #14]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f244 0218 	movw	r2, #16408	@ 0x4018
 800183a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fe56 	bl	80024f0 <CODEC_IO_Write>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	4413      	add	r3, r2
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	e00d      	b.n	800186c <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8001850:	89fb      	ldrh	r3, [r7, #14]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f244 0210 	movw	r2, #16400	@ 0x4010
 8001858:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fe47 	bl	80024f0 <CODEC_IO_Write>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	4413      	add	r3, r2
 800186a:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 800186c:	89fb      	ldrh	r3, [r7, #14]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2200      	movs	r2, #0
 8001872:	f240 3102 	movw	r1, #770	@ 0x302
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fe3a 	bl	80024f0 <CODEC_IO_Write>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	4413      	add	r3, r2
 8001884:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	220a      	movs	r2, #10
 800188c:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8001890:	4618      	mov	r0, r3
 8001892:	f000 fe2d 	bl	80024f0 <CODEC_IO_Write>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	4413      	add	r3, r2
 800189e:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80018a0:	89fb      	ldrh	r3, [r7, #14]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fe20 	bl	80024f0 <CODEC_IO_Write>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	4413      	add	r3, r2
 80018b8:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80018ba:	8b3b      	ldrh	r3, [r7, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 8123 	beq.w	8001b08 <wm8994_Init+0xb68>
  {
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80018c2:	89fb      	ldrh	r3, [r7, #14]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80018ca:	2103      	movs	r1, #3
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 fe0f 	bl	80024f0 <CODEC_IO_Write>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80018dc:	89fb      	ldrh	r3, [r7, #14]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2200      	movs	r2, #0
 80018e2:	2122      	movs	r1, #34	@ 0x22
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 fe03 	bl	80024f0 <CODEC_IO_Write>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4413      	add	r3, r2
 80018f2:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80018f4:	89fb      	ldrh	r3, [r7, #14]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2200      	movs	r2, #0
 80018fa:	2123      	movs	r1, #35	@ 0x23
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fdf7 	bl	80024f0 <CODEC_IO_Write>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	4413      	add	r3, r2
 800190a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800190c:	89fb      	ldrh	r3, [r7, #14]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001914:	2136      	movs	r1, #54	@ 0x36
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fdea 	bl	80024f0 <CODEC_IO_Write>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	4413      	add	r3, r2
 8001924:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8001926:	89fb      	ldrh	r3, [r7, #14]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f243 0203 	movw	r2, #12291	@ 0x3003
 800192e:	2101      	movs	r1, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f000 fddd 	bl	80024f0 <CODEC_IO_Write>
 8001936:	4603      	mov	r3, r0
 8001938:	461a      	mov	r2, r3
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	4413      	add	r3, r2
 800193e:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001940:	8afb      	ldrh	r3, [r7, #22]
 8001942:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001946:	d111      	bne.n	800196c <wm8994_Init+0x9cc>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8001948:	89fb      	ldrh	r3, [r7, #14]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f240 2205 	movw	r2, #517	@ 0x205
 8001950:	2151      	movs	r1, #81	@ 0x51
 8001952:	4618      	mov	r0, r3
 8001954:	f000 fdcc 	bl	80024f0 <CODEC_IO_Write>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	4413      	add	r3, r2
 8001960:	61fb      	str	r3, [r7, #28]
 8001962:	e00f      	b.n	8001984 <wm8994_Init+0x9e4>
 8001964:	2002c2a8 	.word	0x2002c2a8
 8001968:	00017700 	.word	0x00017700
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 800196c:	89fb      	ldrh	r3, [r7, #14]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2205      	movs	r2, #5
 8001972:	2151      	movs	r1, #81	@ 0x51
 8001974:	4618      	mov	r0, r3
 8001976:	f000 fdbb 	bl	80024f0 <CODEC_IO_Write>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	4413      	add	r3, r2
 8001982:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8001984:	8b7b      	ldrh	r3, [r7, #26]
 8001986:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 800198a:	f043 0303 	orr.w	r3, r3, #3
 800198e:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001990:	89fb      	ldrh	r3, [r7, #14]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	8b7a      	ldrh	r2, [r7, #26]
 8001996:	2101      	movs	r1, #1
 8001998:	4618      	mov	r0, r3
 800199a:	f000 fda9 	bl	80024f0 <CODEC_IO_Write>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	4413      	add	r3, r2
 80019a6:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80019a8:	89fb      	ldrh	r3, [r7, #14]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2222      	movs	r2, #34	@ 0x22
 80019ae:	2160      	movs	r1, #96	@ 0x60
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 fd9d 	bl	80024f0 <CODEC_IO_Write>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	4413      	add	r3, r2
 80019be:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80019c0:	89fb      	ldrh	r3, [r7, #14]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f649 7225 	movw	r2, #40741	@ 0x9f25
 80019c8:	214c      	movs	r1, #76	@ 0x4c
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fd90 	bl	80024f0 <CODEC_IO_Write>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	4413      	add	r3, r2
 80019d8:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80019da:	200f      	movs	r0, #15
 80019dc:	f000 ff5e 	bl	800289c <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80019e0:	89fb      	ldrh	r3, [r7, #14]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2201      	movs	r2, #1
 80019e6:	212d      	movs	r1, #45	@ 0x2d
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fd81 	bl	80024f0 <CODEC_IO_Write>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	4413      	add	r3, r2
 80019f6:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2201      	movs	r2, #1
 80019fe:	212e      	movs	r1, #46	@ 0x2e
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fd75 	bl	80024f0 <CODEC_IO_Write>
 8001a06:	4603      	mov	r3, r0
 8001a08:	461a      	mov	r2, r3
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8001a10:	89fb      	ldrh	r3, [r7, #14]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8001a18:	2103      	movs	r1, #3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fd68 	bl	80024f0 <CODEC_IO_Write>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	4413      	add	r3, r2
 8001a28:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2233      	movs	r2, #51	@ 0x33
 8001a30:	2154      	movs	r1, #84	@ 0x54
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fd5c 	bl	80024f0 <CODEC_IO_Write>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	4413      	add	r3, r2
 8001a40:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(250);
 8001a42:	20fa      	movs	r0, #250	@ 0xfa
 8001a44:	f000 ff2a 	bl	800289c <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8001a48:	89fb      	ldrh	r3, [r7, #14]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	22ee      	movs	r2, #238	@ 0xee
 8001a4e:	2160      	movs	r1, #96	@ 0x60
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fd4d 	bl	80024f0 <CODEC_IO_Write>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	22c0      	movs	r2, #192	@ 0xc0
 8001a66:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 fd40 	bl	80024f0 <CODEC_IO_Write>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461a      	mov	r2, r3
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	4413      	add	r3, r2
 8001a78:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8001a7a:	89fb      	ldrh	r3, [r7, #14]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	22c0      	movs	r2, #192	@ 0xc0
 8001a80:	f240 6111 	movw	r1, #1553	@ 0x611
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 fd33 	bl	80024f0 <CODEC_IO_Write>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	4413      	add	r3, r2
 8001a92:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8001a94:	89fb      	ldrh	r3, [r7, #14]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fd26 	bl	80024f0 <CODEC_IO_Write>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	4413      	add	r3, r2
 8001aac:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	22c0      	movs	r2, #192	@ 0xc0
 8001ab4:	f240 6112 	movw	r1, #1554	@ 0x612
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 fd19 	bl	80024f0 <CODEC_IO_Write>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8001ac8:	89fb      	ldrh	r3, [r7, #14]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	22c0      	movs	r2, #192	@ 0xc0
 8001ace:	f240 6113 	movw	r1, #1555	@ 0x613
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fd0c 	bl	80024f0 <CODEC_IO_Write>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	4413      	add	r3, r2
 8001ae0:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8001ae2:	89fb      	ldrh	r3, [r7, #14]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f240 4122 	movw	r1, #1058	@ 0x422
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 fcff 	bl	80024f0 <CODEC_IO_Write>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	4413      	add	r3, r2
 8001afa:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001afc:	7afa      	ldrb	r2, [r7, #11]
 8001afe:	89fb      	ldrh	r3, [r7, #14]
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f984 	bl	8001e10 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8001b08:	8afb      	ldrh	r3, [r7, #22]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80a6 	beq.w	8001c5c <wm8994_Init+0xcbc>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8001b10:	8afb      	ldrh	r3, [r7, #22]
 8001b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b16:	d003      	beq.n	8001b20 <wm8994_Init+0xb80>
 8001b18:	8afb      	ldrh	r3, [r7, #22]
 8001b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b1e:	d12b      	bne.n	8001b78 <wm8994_Init+0xbd8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001b20:	8b7b      	ldrh	r3, [r7, #26]
 8001b22:	f043 0313 	orr.w	r3, r3, #19
 8001b26:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001b28:	89fb      	ldrh	r3, [r7, #14]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	8b7a      	ldrh	r2, [r7, #26]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fcdd 	bl	80024f0 <CODEC_IO_Write>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001b40:	89fb      	ldrh	r3, [r7, #14]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2202      	movs	r2, #2
 8001b46:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fcd0 	bl	80024f0 <CODEC_IO_Write>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4413      	add	r3, r2
 8001b58:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8001b5a:	89fb      	ldrh	r3, [r7, #14]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8001b62:	f240 4111 	movw	r1, #1041	@ 0x411
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fcc2 	bl	80024f0 <CODEC_IO_Write>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	4413      	add	r3, r2
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	e06b      	b.n	8001c50 <wm8994_Init+0xcb0>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001b78:	8afb      	ldrh	r3, [r7, #22]
 8001b7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b7e:	d139      	bne.n	8001bf4 <wm8994_Init+0xc54>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001b80:	8b7b      	ldrh	r3, [r7, #26]
 8001b82:	f043 0313 	orr.w	r3, r3, #19
 8001b86:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001b88:	89fb      	ldrh	r3, [r7, #14]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	8b7a      	ldrh	r2, [r7, #26]
 8001b8e:	2101      	movs	r1, #1
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fcad 	bl	80024f0 <CODEC_IO_Write>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001ba0:	89fb      	ldrh	r3, [r7, #14]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fca0 	bl	80024f0 <CODEC_IO_Write>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001bba:	89fb      	ldrh	r3, [r7, #14]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001bc2:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fc92 	bl	80024f0 <CODEC_IO_Write>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001bde:	f240 4111 	movw	r1, #1041	@ 0x411
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fc84 	bl	80024f0 <CODEC_IO_Write>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461a      	mov	r2, r3
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	4413      	add	r3, r2
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	e02d      	b.n	8001c50 <wm8994_Init+0xcb0>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8001bf4:	8afb      	ldrh	r3, [r7, #22]
 8001bf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001bfa:	d003      	beq.n	8001c04 <wm8994_Init+0xc64>
 8001bfc:	8afb      	ldrh	r3, [r7, #22]
 8001bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c02:	d125      	bne.n	8001c50 <wm8994_Init+0xcb0>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8001c04:	89fb      	ldrh	r3, [r7, #14]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	220b      	movs	r2, #11
 8001c0a:	2118      	movs	r1, #24
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 fc6f 	bl	80024f0 <CODEC_IO_Write>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	4413      	add	r3, r2
 8001c1a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8001c1c:	89fb      	ldrh	r3, [r7, #14]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	220b      	movs	r2, #11
 8001c22:	211a      	movs	r1, #26
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fc63 	bl	80024f0 <CODEC_IO_Write>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	4413      	add	r3, r2
 8001c32:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001c34:	89fb      	ldrh	r3, [r7, #14]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001c3c:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 fc55 	bl	80024f0 <CODEC_IO_Write>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001c50:	7afa      	ldrb	r2, [r7, #11]
 8001c52:	89fb      	ldrh	r3, [r7, #14]
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f8da 	bl	8001e10 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8001c5c:	69fb      	ldr	r3, [r7, #28]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3720      	adds	r7, #32
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop

08001c68 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8001c6c:	f000 fdb8 	bl	80027e0 <AUDIO_IO_DeInit>
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001c7e:	f000 fda5 	bl	80027cc <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 fddb 	bl	8002844 <AUDIO_IO_Read>
 8001c8e:	4603      	mov	r3, r0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	80fb      	strh	r3, [r7, #6]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f9d1 	bl	8002058 <wm8994_SetMute>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f9bc 	bl	8002058 <wm8994_SetMute>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2201      	movs	r2, #1
 8001cee:	2102      	movs	r1, #2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 fbfd 	bl	80024f0 <CODEC_IO_Write>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001d00:	68fb      	ldr	r3, [r7, #12]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 f99b 	bl	8002058 <wm8994_SetMute>
 8001d22:	4602      	mov	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8001d44:	4b31      	ldr	r3, [pc, #196]	@ (8001e0c <wm8994_Stop+0xd8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d05a      	beq.n	8001e02 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	2101      	movs	r1, #1
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f981 	bl	8002058 <wm8994_SetMute>
 8001d56:	4602      	mov	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d04e      	beq.n	8001e02 <wm8994_Stop+0xce>
       /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d6c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fbbd 	bl	80024f0 <CODEC_IO_Write>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d88:	f240 4122 	movw	r1, #1058	@ 0x422
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fbaf 	bl	80024f0 <CODEC_IO_Write>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4413      	add	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2200      	movs	r2, #0
 8001da2:	212d      	movs	r1, #45	@ 0x2d
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 fba3 	bl	80024f0 <CODEC_IO_Write>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4413      	add	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2200      	movs	r2, #0
 8001dba:	212e      	movs	r1, #46	@ 0x2e
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 fb97 	bl	80024f0 <CODEC_IO_Write>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4413      	add	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2105      	movs	r1, #5
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fb8b 	bl	80024f0 <CODEC_IO_Write>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2200      	movs	r2, #0
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fb7f 	bl	80024f0 <CODEC_IO_Write>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461a      	mov	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4413      	add	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	@ (8001e0c <wm8994_Stop+0xd8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8001e02:	68fb      	ldr	r3, [r7, #12]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	2002c2a4 	.word	0x2002c2a4

08001e10 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	460a      	mov	r2, r1
 8001e1a:	80fb      	strh	r3, [r7, #6]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001e24:	797b      	ldrb	r3, [r7, #5]
 8001e26:	2b64      	cmp	r3, #100	@ 0x64
 8001e28:	d80b      	bhi.n	8001e42 <wm8994_SetVolume+0x32>
 8001e2a:	797a      	ldrb	r2, [r7, #5]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	019b      	lsls	r3, r3, #6
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	4a86      	ldr	r2, [pc, #536]	@ (800204c <wm8994_SetVolume+0x23c>)
 8001e34:	fb82 1203 	smull	r1, r2, r2, r3
 8001e38:	1152      	asrs	r2, r2, #5
 8001e3a:	17db      	asrs	r3, r3, #31
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	e000      	b.n	8001e44 <wm8994_SetVolume+0x34>
 8001e42:	2364      	movs	r3, #100	@ 0x64
 8001e44:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8001e46:	4b82      	ldr	r3, [pc, #520]	@ (8002050 <wm8994_SetVolume+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 809b 	beq.w	8001f86 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8001e50:	7afb      	ldrb	r3, [r7, #11]
 8001e52:	2b3e      	cmp	r3, #62	@ 0x3e
 8001e54:	d93d      	bls.n	8001ed2 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f8fc 	bl	8002058 <wm8994_SetMute>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f240 127f 	movw	r2, #383	@ 0x17f
 8001e70:	211c      	movs	r1, #28
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fb3c 	bl	80024f0 <CODEC_IO_Write>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	f240 127f 	movw	r2, #383	@ 0x17f
 8001e8a:	211d      	movs	r1, #29
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fb2f 	bl	80024f0 <CODEC_IO_Write>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f240 127f 	movw	r2, #383	@ 0x17f
 8001ea4:	2126      	movs	r1, #38	@ 0x26
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fb22 	bl	80024f0 <CODEC_IO_Write>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f240 127f 	movw	r2, #383	@ 0x17f
 8001ebe:	2127      	movs	r1, #39	@ 0x27
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fb15 	bl	80024f0 <CODEC_IO_Write>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4413      	add	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e059      	b.n	8001f86 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8001ed2:	797b      	ldrb	r3, [r7, #5]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	2101      	movs	r1, #1
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 f8bb 	bl	8002058 <wm8994_SetMute>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	e04c      	b.n	8001f86 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 f8b1 	bl	8002058 <wm8994_SetMute>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	b2d8      	uxtb	r0, r3
 8001f02:	7afb      	ldrb	r3, [r7, #11]
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	211c      	movs	r1, #28
 8001f12:	f000 faed 	bl	80024f0 <CODEC_IO_Write>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	b2d8      	uxtb	r0, r3
 8001f24:	7afb      	ldrb	r3, [r7, #11]
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	211d      	movs	r1, #29
 8001f34:	f000 fadc 	bl	80024f0 <CODEC_IO_Write>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	b2d8      	uxtb	r0, r3
 8001f46:	7afb      	ldrb	r3, [r7, #11]
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	2126      	movs	r1, #38	@ 0x26
 8001f56:	f000 facb 	bl	80024f0 <CODEC_IO_Write>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	b2d8      	uxtb	r0, r3
 8001f68:	7afb      	ldrb	r3, [r7, #11]
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	2127      	movs	r1, #39	@ 0x27
 8001f78:	f000 faba 	bl	80024f0 <CODEC_IO_Write>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8001f86:	4b33      	ldr	r3, [pc, #204]	@ (8002054 <wm8994_SetVolume+0x244>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d059      	beq.n	8002042 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8001f8e:	797b      	ldrb	r3, [r7, #5]
 8001f90:	2b63      	cmp	r3, #99	@ 0x63
 8001f92:	d80c      	bhi.n	8001fae <wm8994_SetVolume+0x19e>
 8001f94:	797a      	ldrb	r2, [r7, #5]
 8001f96:	4613      	mov	r3, r2
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	4a2b      	ldr	r2, [pc, #172]	@ (800204c <wm8994_SetVolume+0x23c>)
 8001fa0:	fb82 1203 	smull	r1, r2, r2, r3
 8001fa4:	1152      	asrs	r2, r2, #5
 8001fa6:	17db      	asrs	r3, r3, #31
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	e000      	b.n	8001fb0 <wm8994_SetVolume+0x1a0>
 8001fae:	23ef      	movs	r3, #239	@ 0xef
 8001fb0:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	b2d8      	uxtb	r0, r3
 8001fb6:	7afb      	ldrb	r3, [r7, #11]
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fc8:	f000 fa92 	bl	80024f0 <CODEC_IO_Write>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	b2d8      	uxtb	r0, r3
 8001fda:	7afb      	ldrb	r3, [r7, #11]
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f240 4101 	movw	r1, #1025	@ 0x401
 8001fec:	f000 fa80 	bl	80024f0 <CODEC_IO_Write>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	b2d8      	uxtb	r0, r3
 8001ffe:	7afb      	ldrb	r3, [r7, #11]
 8002000:	b21b      	sxth	r3, r3
 8002002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002006:	b21b      	sxth	r3, r3
 8002008:	b29b      	uxth	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	f240 4104 	movw	r1, #1028	@ 0x404
 8002010:	f000 fa6e 	bl	80024f0 <CODEC_IO_Write>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	b2d8      	uxtb	r0, r3
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	b21b      	sxth	r3, r3
 8002026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202a:	b21b      	sxth	r3, r3
 800202c:	b29b      	uxth	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	f240 4105 	movw	r1, #1029	@ 0x405
 8002034:	f000 fa5c 	bl	80024f0 <CODEC_IO_Write>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8002042:	68fb      	ldr	r3, [r7, #12]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	51eb851f 	.word	0x51eb851f
 8002050:	2002c2a4 	.word	0x2002c2a4
 8002054:	2002c2a8 	.word	0x2002c2a8

08002058 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8002068:	4b21      	ldr	r3, [pc, #132]	@ (80020f0 <wm8994_SetMute+0x98>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d039      	beq.n	80020e4 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d11c      	bne.n	80020b0 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800207e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fa34 	bl	80024f0 <CODEC_IO_Write>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800209a:	f240 4122 	movw	r1, #1058	@ 0x422
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fa26 	bl	80024f0 <CODEC_IO_Write>
 80020a4:	4603      	mov	r3, r0
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e019      	b.n	80020e4 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2200      	movs	r2, #0
 80020b6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fa18 	bl	80024f0 <CODEC_IO_Write>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2200      	movs	r2, #0
 80020d0:	f240 4122 	movw	r1, #1058	@ 0x422
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fa0b 	bl	80024f0 <CODEC_IO_Write>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4413      	add	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80020e4:	68fb      	ldr	r3, [r7, #12]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2002c2a4 	.word	0x2002c2a4

080020f4 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	460a      	mov	r2, r1
 80020fe:	80fb      	strh	r3, [r7, #6]
 8002100:	4613      	mov	r3, r2
 8002102:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8002108:	797b      	ldrb	r3, [r7, #5]
 800210a:	2b03      	cmp	r3, #3
 800210c:	f000 808c 	beq.w	8002228 <wm8994_SetOutputMode+0x134>
 8002110:	2b03      	cmp	r3, #3
 8002112:	f300 80cb 	bgt.w	80022ac <wm8994_SetOutputMode+0x1b8>
 8002116:	2b01      	cmp	r3, #1
 8002118:	d002      	beq.n	8002120 <wm8994_SetOutputMode+0x2c>
 800211a:	2b02      	cmp	r3, #2
 800211c:	d042      	beq.n	80021a4 <wm8994_SetOutputMode+0xb0>
 800211e:	e0c5      	b.n	80022ac <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8002128:	2105      	movs	r1, #5
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f9e0 	bl	80024f0 <CODEC_IO_Write>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2200      	movs	r2, #0
 8002140:	f240 6101 	movw	r1, #1537	@ 0x601
 8002144:	4618      	mov	r0, r3
 8002146:	f000 f9d3 	bl	80024f0 <CODEC_IO_Write>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4413      	add	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2200      	movs	r2, #0
 800215a:	f240 6102 	movw	r1, #1538	@ 0x602
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f9c6 	bl	80024f0 <CODEC_IO_Write>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2202      	movs	r2, #2
 8002174:	f240 6104 	movw	r1, #1540	@ 0x604
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f9b9 	bl	80024f0 <CODEC_IO_Write>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4413      	add	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2202      	movs	r2, #2
 800218e:	f240 6105 	movw	r1, #1541	@ 0x605
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f9ac 	bl	80024f0 <CODEC_IO_Write>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
    break;
 80021a2:	e0c5      	b.n	8002330 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f240 3203 	movw	r2, #771	@ 0x303
 80021ac:	2105      	movs	r1, #5
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f99e 	bl	80024f0 <CODEC_IO_Write>
 80021b4:	4603      	mov	r3, r0
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2201      	movs	r2, #1
 80021c4:	f240 6101 	movw	r1, #1537	@ 0x601
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f991 	bl	80024f0 <CODEC_IO_Write>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461a      	mov	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4413      	add	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2201      	movs	r2, #1
 80021de:	f240 6102 	movw	r1, #1538	@ 0x602
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f984 	bl	80024f0 <CODEC_IO_Write>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2200      	movs	r2, #0
 80021f8:	f240 6104 	movw	r1, #1540	@ 0x604
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 f977 	bl	80024f0 <CODEC_IO_Write>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4413      	add	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2200      	movs	r2, #0
 8002212:	f240 6105 	movw	r1, #1541	@ 0x605
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f96a 	bl	80024f0 <CODEC_IO_Write>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
    break;
 8002226:	e083      	b.n	8002330 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002230:	2105      	movs	r1, #5
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f95c 	bl	80024f0 <CODEC_IO_Write>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2201      	movs	r2, #1
 8002248:	f240 6101 	movw	r1, #1537	@ 0x601
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f94f 	bl	80024f0 <CODEC_IO_Write>
 8002252:	4603      	mov	r3, r0
 8002254:	461a      	mov	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4413      	add	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2201      	movs	r2, #1
 8002262:	f240 6102 	movw	r1, #1538	@ 0x602
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f942 	bl	80024f0 <CODEC_IO_Write>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2202      	movs	r2, #2
 800227c:	f240 6104 	movw	r1, #1540	@ 0x604
 8002280:	4618      	mov	r0, r3
 8002282:	f000 f935 	bl	80024f0 <CODEC_IO_Write>
 8002286:	4603      	mov	r3, r0
 8002288:	461a      	mov	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4413      	add	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2202      	movs	r2, #2
 8002296:	f240 6105 	movw	r1, #1541	@ 0x605
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f928 	bl	80024f0 <CODEC_IO_Write>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
    break;
 80022aa:	e041      	b.n	8002330 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f240 3203 	movw	r2, #771	@ 0x303
 80022b4:	2105      	movs	r1, #5
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f91a 	bl	80024f0 <CODEC_IO_Write>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2201      	movs	r2, #1
 80022cc:	f240 6101 	movw	r1, #1537	@ 0x601
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 f90d 	bl	80024f0 <CODEC_IO_Write>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461a      	mov	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4413      	add	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2201      	movs	r2, #1
 80022e6:	f240 6102 	movw	r1, #1538	@ 0x602
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f900 	bl	80024f0 <CODEC_IO_Write>
 80022f0:	4603      	mov	r3, r0
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2200      	movs	r2, #0
 8002300:	f240 6104 	movw	r1, #1540	@ 0x604
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f8f3 	bl	80024f0 <CODEC_IO_Write>
 800230a:	4603      	mov	r3, r0
 800230c:	461a      	mov	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4413      	add	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2200      	movs	r2, #0
 800231a:	f240 6105 	movw	r1, #1541	@ 0x605
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f8e6 	bl	80024f0 <CODEC_IO_Write>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
    break;    
 800232e:	bf00      	nop
  }  
  return counter;
 8002330:	68fb      	ldr	r3, [r7, #12]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4a57      	ldr	r2, [pc, #348]	@ (80024ac <wm8994_SetFrequency+0x170>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d05f      	beq.n	8002414 <wm8994_SetFrequency+0xd8>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4a55      	ldr	r2, [pc, #340]	@ (80024ac <wm8994_SetFrequency+0x170>)
 8002358:	4293      	cmp	r3, r2
 800235a:	f200 8093 	bhi.w	8002484 <wm8994_SetFrequency+0x148>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002364:	4293      	cmp	r3, r2
 8002366:	d047      	beq.n	80023f8 <wm8994_SetFrequency+0xbc>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800236e:	4293      	cmp	r3, r2
 8002370:	f200 8088 	bhi.w	8002484 <wm8994_SetFrequency+0x148>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800237a:	4293      	cmp	r3, r2
 800237c:	d074      	beq.n	8002468 <wm8994_SetFrequency+0x12c>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002384:	4293      	cmp	r3, r2
 8002386:	d87d      	bhi.n	8002484 <wm8994_SetFrequency+0x148>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	f245 6222 	movw	r2, #22050	@ 0x5622
 800238e:	4293      	cmp	r3, r2
 8002390:	d05c      	beq.n	800244c <wm8994_SetFrequency+0x110>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002398:	4293      	cmp	r3, r2
 800239a:	d873      	bhi.n	8002484 <wm8994_SetFrequency+0x148>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80023a2:	d01b      	beq.n	80023dc <wm8994_SetFrequency+0xa0>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80023aa:	d86b      	bhi.n	8002484 <wm8994_SetFrequency+0x148>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80023b2:	d005      	beq.n	80023c0 <wm8994_SetFrequency+0x84>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d038      	beq.n	8002430 <wm8994_SetFrequency+0xf4>
 80023be:	e061      	b.n	8002484 <wm8994_SetFrequency+0x148>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2203      	movs	r2, #3
 80023c6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f890 	bl	80024f0 <CODEC_IO_Write>
 80023d0:	4603      	mov	r3, r0
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
    break;
 80023da:	e061      	b.n	80024a0 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2233      	movs	r2, #51	@ 0x33
 80023e2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f882 	bl	80024f0 <CODEC_IO_Write>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
    break;
 80023f6:	e053      	b.n	80024a0 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2283      	movs	r2, #131	@ 0x83
 80023fe:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f874 	bl	80024f0 <CODEC_IO_Write>
 8002408:	4603      	mov	r3, r0
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
    break;
 8002412:	e045      	b.n	80024a0 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	22a3      	movs	r2, #163	@ 0xa3
 800241a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f866 	bl	80024f0 <CODEC_IO_Write>
 8002424:	4603      	mov	r3, r0
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
    break;
 800242e:	e037      	b.n	80024a0 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2213      	movs	r2, #19
 8002436:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f858 	bl	80024f0 <CODEC_IO_Write>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
    break;
 800244a:	e029      	b.n	80024a0 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2243      	movs	r2, #67	@ 0x43
 8002452:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f84a 	bl	80024f0 <CODEC_IO_Write>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
    break;
 8002466:	e01b      	b.n	80024a0 <wm8994_SetFrequency+0x164>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2273      	movs	r2, #115	@ 0x73
 800246e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f83c 	bl	80024f0 <CODEC_IO_Write>
 8002478:	4603      	mov	r3, r0
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
    break; 
 8002482:	e00d      	b.n	80024a0 <wm8994_SetFrequency+0x164>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2283      	movs	r2, #131	@ 0x83
 800248a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f82e 	bl	80024f0 <CODEC_IO_Write>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4413      	add	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
    break; 
 800249e:	bf00      	nop
  }
  return counter;
 80024a0:	68fb      	ldr	r3, [r7, #12]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	00017700 	.word	0x00017700

080024b0 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2200      	movs	r2, #0
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f812 	bl	80024f0 <CODEC_IO_Write>
 80024cc:	4603      	mov	r3, r0
 80024ce:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <wm8994_Reset+0x38>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80024d6:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <wm8994_Reset+0x3c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

  return counter;
 80024dc:	68fb      	ldr	r3, [r7, #12]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	2002c2a4 	.word	0x2002c2a4
 80024ec:	2002c2a8 	.word	0x2002c2a8

080024f0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
 80024fa:	460b      	mov	r3, r1
 80024fc:	80bb      	strh	r3, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	88b9      	ldrh	r1, [r7, #4]
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f96f 	bl	80027f0 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	b2db      	uxtb	r3, r3
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	@ 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a51      	ldr	r2, [pc, #324]	@ (8002670 <I2Cx_MspInit+0x150>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d14d      	bne.n	80025cc <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002530:	4b50      	ldr	r3, [pc, #320]	@ (8002674 <I2Cx_MspInit+0x154>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002534:	4a4f      	ldr	r2, [pc, #316]	@ (8002674 <I2Cx_MspInit+0x154>)
 8002536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800253a:	6313      	str	r3, [r2, #48]	@ 0x30
 800253c:	4b4d      	ldr	r3, [pc, #308]	@ (8002674 <I2Cx_MspInit+0x154>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002548:	2380      	movs	r3, #128	@ 0x80
 800254a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800254c:	2312      	movs	r3, #18
 800254e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002554:	2302      	movs	r3, #2
 8002556:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002558:	2304      	movs	r3, #4
 800255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800255c:	f107 031c 	add.w	r3, r7, #28
 8002560:	4619      	mov	r1, r3
 8002562:	4845      	ldr	r0, [pc, #276]	@ (8002678 <I2Cx_MspInit+0x158>)
 8002564:	f001 fbf2 	bl	8003d4c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800256c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4619      	mov	r1, r3
 8002574:	4840      	ldr	r0, [pc, #256]	@ (8002678 <I2Cx_MspInit+0x158>)
 8002576:	f001 fbe9 	bl	8003d4c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800257a:	4b3e      	ldr	r3, [pc, #248]	@ (8002674 <I2Cx_MspInit+0x154>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	4a3d      	ldr	r2, [pc, #244]	@ (8002674 <I2Cx_MspInit+0x154>)
 8002580:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002584:	6413      	str	r3, [r2, #64]	@ 0x40
 8002586:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <I2Cx_MspInit+0x154>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002592:	4b38      	ldr	r3, [pc, #224]	@ (8002674 <I2Cx_MspInit+0x154>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a37      	ldr	r2, [pc, #220]	@ (8002674 <I2Cx_MspInit+0x154>)
 8002598:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800259c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800259e:	4b35      	ldr	r3, [pc, #212]	@ (8002674 <I2Cx_MspInit+0x154>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a34      	ldr	r2, [pc, #208]	@ (8002674 <I2Cx_MspInit+0x154>)
 80025a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80025a8:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	210f      	movs	r1, #15
 80025ae:	2048      	movs	r0, #72	@ 0x48
 80025b0:	f000 ff7b 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80025b4:	2048      	movs	r0, #72	@ 0x48
 80025b6:	f000 ff94 	bl	80034e2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	210f      	movs	r1, #15
 80025be:	2049      	movs	r0, #73	@ 0x49
 80025c0:	f000 ff73 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80025c4:	2049      	movs	r0, #73	@ 0x49
 80025c6:	f000 ff8c 	bl	80034e2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80025ca:	e04d      	b.n	8002668 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80025cc:	4b29      	ldr	r3, [pc, #164]	@ (8002674 <I2Cx_MspInit+0x154>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	4a28      	ldr	r2, [pc, #160]	@ (8002674 <I2Cx_MspInit+0x154>)
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d8:	4b26      	ldr	r3, [pc, #152]	@ (8002674 <I2Cx_MspInit+0x154>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80025e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025e8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80025ea:	2312      	movs	r3, #18
 80025ec:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025f2:	2302      	movs	r3, #2
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80025f6:	2304      	movs	r3, #4
 80025f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025fa:	f107 031c 	add.w	r3, r7, #28
 80025fe:	4619      	mov	r1, r3
 8002600:	481e      	ldr	r0, [pc, #120]	@ (800267c <I2Cx_MspInit+0x15c>)
 8002602:	f001 fba3 	bl	8003d4c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002606:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800260a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800260c:	f107 031c 	add.w	r3, r7, #28
 8002610:	4619      	mov	r1, r3
 8002612:	481a      	ldr	r0, [pc, #104]	@ (800267c <I2Cx_MspInit+0x15c>)
 8002614:	f001 fb9a 	bl	8003d4c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002618:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <I2Cx_MspInit+0x154>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	4a15      	ldr	r2, [pc, #84]	@ (8002674 <I2Cx_MspInit+0x154>)
 800261e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002622:	6413      	str	r3, [r2, #64]	@ 0x40
 8002624:	4b13      	ldr	r3, [pc, #76]	@ (8002674 <I2Cx_MspInit+0x154>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002630:	4b10      	ldr	r3, [pc, #64]	@ (8002674 <I2Cx_MspInit+0x154>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4a0f      	ldr	r2, [pc, #60]	@ (8002674 <I2Cx_MspInit+0x154>)
 8002636:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800263a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800263c:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <I2Cx_MspInit+0x154>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4a0c      	ldr	r2, [pc, #48]	@ (8002674 <I2Cx_MspInit+0x154>)
 8002642:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002646:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002648:	2200      	movs	r2, #0
 800264a:	210f      	movs	r1, #15
 800264c:	201f      	movs	r0, #31
 800264e:	f000 ff2c 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002652:	201f      	movs	r0, #31
 8002654:	f000 ff45 	bl	80034e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002658:	2200      	movs	r2, #0
 800265a:	210f      	movs	r1, #15
 800265c:	2020      	movs	r0, #32
 800265e:	f000 ff24 	bl	80034aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002662:	2020      	movs	r0, #32
 8002664:	f000 ff3d 	bl	80034e2 <HAL_NVIC_EnableIRQ>
}
 8002668:	bf00      	nop
 800266a:	3730      	adds	r7, #48	@ 0x30
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	2002c2ac 	.word	0x2002c2ac
 8002674:	40023800 	.word	0x40023800
 8002678:	40021c00 	.word	0x40021c00
 800267c:	40020400 	.word	0x40020400

08002680 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f002 f925 	bl	80048d8 <HAL_I2C_GetState>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d125      	bne.n	80026e0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a14      	ldr	r2, [pc, #80]	@ (80026e8 <I2Cx_Init+0x68>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d103      	bne.n	80026a4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a13      	ldr	r2, [pc, #76]	@ (80026ec <I2Cx_Init+0x6c>)
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e002      	b.n	80026aa <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a12      	ldr	r2, [pc, #72]	@ (80026f0 <I2Cx_Init+0x70>)
 80026a8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a11      	ldr	r2, [pc, #68]	@ (80026f4 <I2Cx_Init+0x74>)
 80026ae:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff23 	bl	8002520 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f001 fdee 	bl	80042bc <HAL_I2C_Init>
  }
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	2002c2ac 	.word	0x2002c2ac
 80026ec:	40005c00 	.word	0x40005c00
 80026f0:	40005400 	.word	0x40005400
 80026f4:	40912732 	.word	0x40912732

080026f8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	@ 0x28
 80026fc:	af04      	add	r7, sp, #16
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	4608      	mov	r0, r1
 8002702:	4611      	mov	r1, r2
 8002704:	461a      	mov	r2, r3
 8002706:	4603      	mov	r3, r0
 8002708:	72fb      	strb	r3, [r7, #11]
 800270a:	460b      	mov	r3, r1
 800270c:	813b      	strh	r3, [r7, #8]
 800270e:	4613      	mov	r3, r2
 8002710:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002716:	7afb      	ldrb	r3, [r7, #11]
 8002718:	b299      	uxth	r1, r3
 800271a:	88f8      	ldrh	r0, [r7, #6]
 800271c:	893a      	ldrh	r2, [r7, #8]
 800271e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	4603      	mov	r3, r0
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f001 ffb8 	bl	80046a4 <HAL_I2C_Mem_Read>
 8002734:	4603      	mov	r3, r0
 8002736:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002738:	7dfb      	ldrb	r3, [r7, #23]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	4619      	mov	r1, r3
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f832 	bl	80027ac <I2Cx_Error>
  }
  return status;    
 8002748:	7dfb      	ldrb	r3, [r7, #23]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b08a      	sub	sp, #40	@ 0x28
 8002756:	af04      	add	r7, sp, #16
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	4608      	mov	r0, r1
 800275c:	4611      	mov	r1, r2
 800275e:	461a      	mov	r2, r3
 8002760:	4603      	mov	r3, r0
 8002762:	72fb      	strb	r3, [r7, #11]
 8002764:	460b      	mov	r3, r1
 8002766:	813b      	strh	r3, [r7, #8]
 8002768:	4613      	mov	r3, r2
 800276a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002770:	7afb      	ldrb	r3, [r7, #11]
 8002772:	b299      	uxth	r1, r3
 8002774:	88f8      	ldrh	r0, [r7, #6]
 8002776:	893a      	ldrh	r2, [r7, #8]
 8002778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800277c:	9302      	str	r3, [sp, #8]
 800277e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	4603      	mov	r3, r0
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f001 fe77 	bl	800447c <HAL_I2C_Mem_Write>
 800278e:	4603      	mov	r3, r0
 8002790:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002798:	7afb      	ldrb	r3, [r7, #11]
 800279a:	4619      	mov	r1, r3
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f805 	bl	80027ac <I2Cx_Error>
  }
  return status;
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f001 fe1b 	bl	80043f4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ff5e 	bl	8002680 <I2Cx_Init>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80027d0:	4802      	ldr	r0, [pc, #8]	@ (80027dc <AUDIO_IO_Init+0x10>)
 80027d2:	f7ff ff55 	bl	8002680 <I2Cx_Init>
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2002c2ac 	.word	0x2002c2ac

080027e0 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
 80027fa:	460b      	mov	r3, r1
 80027fc:	80bb      	strh	r3, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8002806:	89fb      	ldrh	r3, [r7, #14]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	b29b      	uxth	r3, r3
 800280c:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800280e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	b21a      	sxth	r2, r3
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	b21b      	sxth	r3, r3
 800281a:	4313      	orrs	r3, r2
 800281c:	b21b      	sxth	r3, r3
 800281e:	b29b      	uxth	r3, r3
 8002820:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8002822:	88ba      	ldrh	r2, [r7, #4]
 8002824:	79f9      	ldrb	r1, [r7, #7]
 8002826:	2302      	movs	r3, #2
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	1cbb      	adds	r3, r7, #2
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2302      	movs	r3, #2
 8002830:	4803      	ldr	r0, [pc, #12]	@ (8002840 <AUDIO_IO_Write+0x50>)
 8002832:	f7ff ff8e 	bl	8002752 <I2Cx_WriteMultiple>
}
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	2002c2ac 	.word	0x2002c2ac

08002844 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af02      	add	r7, sp, #8
 800284a:	4603      	mov	r3, r0
 800284c:	460a      	mov	r2, r1
 800284e:	71fb      	strb	r3, [r7, #7]
 8002850:	4613      	mov	r3, r2
 8002852:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	81bb      	strh	r3, [r7, #12]
 8002858:	2300      	movs	r3, #0
 800285a:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800285c:	88ba      	ldrh	r2, [r7, #4]
 800285e:	79f9      	ldrb	r1, [r7, #7]
 8002860:	2302      	movs	r3, #2
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	f107 030c 	add.w	r3, r7, #12
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	2302      	movs	r3, #2
 800286c:	480a      	ldr	r0, [pc, #40]	@ (8002898 <AUDIO_IO_Read+0x54>)
 800286e:	f7ff ff43 	bl	80026f8 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8002872:	89bb      	ldrh	r3, [r7, #12]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8002878:	89bb      	ldrh	r3, [r7, #12]
 800287a:	b21b      	sxth	r3, r3
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	b21a      	sxth	r2, r3
 8002880:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002884:	4313      	orrs	r3, r2
 8002886:	b21b      	sxth	r3, r3
 8002888:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800288a:	89fb      	ldrh	r3, [r7, #14]
 800288c:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 800288e:	89bb      	ldrh	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	2002c2ac 	.word	0x2002c2ac

0800289c <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fd01 	bl	80032ac <HAL_Delay>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <BSP_AUDIO_OUT_Init>:
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @note   The I2S PLL input clock must be done in the user application.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	603a      	str	r2, [r7, #0]
 80028be:	80fb      	strh	r3, [r7, #6]
 80028c0:	460b      	mov	r3, r1
 80028c2:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
  uint32_t deviceid = 0x00;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]

  /* Disable SAI */
  SAIx_Out_DeInit();
 80028cc:	f000 fa4e 	bl	8002d6c <SAIx_Out_DeInit>

  /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 80028d0:	2200      	movs	r2, #0
 80028d2:	6839      	ldr	r1, [r7, #0]
 80028d4:	481c      	ldr	r0, [pc, #112]	@ (8002948 <BSP_AUDIO_OUT_Init+0x94>)
 80028d6:	f000 f9a7 	bl	8002c28 <BSP_AUDIO_OUT_ClockConfig>
 
  /* SAI data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80028da:	4b1b      	ldr	r3, [pc, #108]	@ (8002948 <BSP_AUDIO_OUT_Init+0x94>)
 80028dc:	4a1b      	ldr	r2, [pc, #108]	@ (800294c <BSP_AUDIO_OUT_Init+0x98>)
 80028de:	601a      	str	r2, [r3, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 80028e0:	4819      	ldr	r0, [pc, #100]	@ (8002948 <BSP_AUDIO_OUT_Init+0x94>)
 80028e2:	f004 f891 	bl	8006a08 <HAL_SAI_GetState>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d103      	bne.n	80028f4 <BSP_AUDIO_OUT_Init+0x40>
  {
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 80028ec:	2100      	movs	r1, #0
 80028ee:	4816      	ldr	r0, [pc, #88]	@ (8002948 <BSP_AUDIO_OUT_Init+0x94>)
 80028f0:	f000 f8c4 	bl	8002a7c <BSP_AUDIO_OUT_MspInit>
  }
  SAIx_Out_Init(AudioFreq);
 80028f4:	6838      	ldr	r0, [r7, #0]
 80028f6:	f000 f9db 	bl	8002cb0 <SAIx_Out_Init>

  /* wm8994 codec initialization */
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80028fa:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <BSP_AUDIO_OUT_Init+0x9c>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2034      	movs	r0, #52	@ 0x34
 8002900:	4798      	blx	r3
 8002902:	60b8      	str	r0, [r7, #8]
  
  if((deviceid) == WM8994_ID)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f648 1294 	movw	r2, #35220	@ 0x8994
 800290a:	4293      	cmp	r3, r2
 800290c:	d109      	bne.n	8002922 <BSP_AUDIO_OUT_Init+0x6e>
  {  
    /* Reset the Codec Registers */
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800290e:	4b10      	ldr	r3, [pc, #64]	@ (8002950 <BSP_AUDIO_OUT_Init+0x9c>)
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	2034      	movs	r0, #52	@ 0x34
 8002914:	4798      	blx	r3
    /* Initialize the audio driver structure */
    audio_drv = &wm8994_drv; 
 8002916:	4b0f      	ldr	r3, [pc, #60]	@ (8002954 <BSP_AUDIO_OUT_Init+0xa0>)
 8002918:	4a0d      	ldr	r2, [pc, #52]	@ (8002950 <BSP_AUDIO_OUT_Init+0x9c>)
 800291a:	601a      	str	r2, [r3, #0]
    ret = AUDIO_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	e001      	b.n	8002926 <BSP_AUDIO_OUT_Init+0x72>
  }
  else
  {
    ret = AUDIO_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d107      	bne.n	800293c <BSP_AUDIO_OUT_Init+0x88>
  {
    /* Initialize the codec internal registers */
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800292c:	4b09      	ldr	r3, [pc, #36]	@ (8002954 <BSP_AUDIO_OUT_Init+0xa0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681c      	ldr	r4, [r3, #0]
 8002932:	797a      	ldrb	r2, [r7, #5]
 8002934:	88f9      	ldrh	r1, [r7, #6]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2034      	movs	r0, #52	@ 0x34
 800293a:	47a0      	blx	r4
  }
 
  return ret;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	bf00      	nop
 8002948:	2002c304 	.word	0x2002c304
 800294c:	40015c04 	.word	0x40015c04
 8002950:	20000004 	.word	0x20000004
 8002954:	2002c300 	.word	0x2002c300

08002958 <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8002962:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <BSP_AUDIO_OUT_Play+0x4c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	b292      	uxth	r2, r2
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	2034      	movs	r0, #52	@ 0x34
 8002970:	4798      	blx	r3
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e00f      	b.n	800299c <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002982:	d203      	bcs.n	800298c <BSP_AUDIO_OUT_Play+0x34>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	b29b      	uxth	r3, r3
 800298a:	e001      	b.n	8002990 <BSP_AUDIO_OUT_Play+0x38>
 800298c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002990:	461a      	mov	r2, r3
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4804      	ldr	r0, [pc, #16]	@ (80029a8 <BSP_AUDIO_OUT_Play+0x50>)
 8002996:	f003 fef9 	bl	800678c <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 800299a:	2300      	movs	r3, #0
  }
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	2002c300 	.word	0x2002c300
 80029a8:	2002c304 	.word	0x2002c304

080029ac <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 80029b6:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	79fa      	ldrb	r2, [r7, #7]
 80029be:	4611      	mov	r1, r2
 80029c0:	2034      	movs	r0, #52	@ 0x34
 80029c2:	4798      	blx	r3
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <BSP_AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <BSP_AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80029ce:	2300      	movs	r3, #0
  }
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	2002c300 	.word	0x2002c300

080029dc <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80029e4:	f000 f834 	bl	8002a50 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80029f8:	f000 f831 	bl	8002a5e <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8002a0c:	480e      	ldr	r0, [pc, #56]	@ (8002a48 <HAL_SAI_ErrorCallback+0x44>)
 8002a0e:	f003 fffb 	bl	8006a08 <HAL_SAI_GetState>
 8002a12:	4603      	mov	r3, r0
 8002a14:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8002a16:	480d      	ldr	r0, [pc, #52]	@ (8002a4c <HAL_SAI_ErrorCallback+0x48>)
 8002a18:	f003 fff6 	bl	8006a08 <HAL_SAI_GetState>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d002      	beq.n	8002a2c <HAL_SAI_ErrorCallback+0x28>
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	2b12      	cmp	r3, #18
 8002a2a:	d101      	bne.n	8002a30 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8002a2c:	f000 f81e 	bl	8002a6c <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d002      	beq.n	8002a3c <HAL_SAI_ErrorCallback+0x38>
 8002a36:	7bbb      	ldrb	r3, [r7, #14]
 8002a38:	2b22      	cmp	r3, #34	@ 0x22
 8002a3a:	d101      	bne.n	8002a40 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8002a3c:	f000 fa52 	bl	8002ee4 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	2002c304 	.word	0x2002c304
 8002a4c:	2002c388 	.word	0x2002c388

08002a50 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
/**
  * @brief  Manages the DMA full Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
	// AUDIO PROCESSING SENT THROUGH HERE

}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0

	// AUDIO PROCESSING SENT THROUGH HERE
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	@ 0x30
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8002a86:	4b63      	ldr	r3, [pc, #396]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	4a62      	ldr	r2, [pc, #392]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002a8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a92:	4b60      	ldr	r3, [pc, #384]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8002a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	4a5c      	ldr	r2, [pc, #368]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aaa:	4b5a      	ldr	r3, [pc, #360]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8002ab6:	4b57      	ldr	r3, [pc, #348]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	4a56      	ldr	r2, [pc, #344]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac2:	4b54      	ldr	r3, [pc, #336]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8002ace:	4b51      	ldr	r3, [pc, #324]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	4a50      	ldr	r2, [pc, #320]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ada:	4b4e      	ldr	r3, [pc, #312]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8002ae6:	2380      	movs	r3, #128	@ 0x80
 8002ae8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002af2:	2303      	movs	r3, #3
 8002af4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002af6:	230a      	movs	r3, #10
 8002af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8002afa:	f107 031c 	add.w	r3, r7, #28
 8002afe:	4619      	mov	r1, r3
 8002b00:	4845      	ldr	r0, [pc, #276]	@ (8002c18 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002b02:	f001 f923 	bl	8003d4c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8002b06:	2320      	movs	r3, #32
 8002b08:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002b12:	2303      	movs	r3, #3
 8002b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8002b16:	230a      	movs	r3, #10
 8002b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8002b1a:	f107 031c 	add.w	r3, r7, #28
 8002b1e:	4619      	mov	r1, r3
 8002b20:	483d      	ldr	r0, [pc, #244]	@ (8002c18 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002b22:	f001 f913 	bl	8003d4c <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8002b26:	2340      	movs	r3, #64	@ 0x40
 8002b28:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002b36:	230a      	movs	r3, #10
 8002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8002b3a:	f107 031c 	add.w	r3, r7, #28
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4835      	ldr	r0, [pc, #212]	@ (8002c18 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002b42:	f001 f903 	bl	8003d4c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8002b46:	2310      	movs	r3, #16
 8002b48:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002b52:	2303      	movs	r3, #3
 8002b54:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002b56:	230a      	movs	r3, #10
 8002b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8002b5a:	f107 031c 	add.w	r3, r7, #28
 8002b5e:	4619      	mov	r1, r3
 8002b60:	482d      	ldr	r0, [pc, #180]	@ (8002c18 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002b62:	f001 f8f3 	bl	8003d4c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8002b66:	4b2b      	ldr	r3, [pc, #172]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002b6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b72:	4b28      	ldr	r3, [pc, #160]	@ (8002c14 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a26      	ldr	r2, [pc, #152]	@ (8002c1c <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d138      	bne.n	8002bfa <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8002b88:	4b25      	ldr	r3, [pc, #148]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002b8a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002b8e:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002b90:	4b23      	ldr	r3, [pc, #140]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002b92:	2240      	movs	r2, #64	@ 0x40
 8002b94:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002b96:	4b22      	ldr	r3, [pc, #136]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002b9c:	4b20      	ldr	r3, [pc, #128]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002b9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ba2:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002ba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002baa:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8002bac:	4b1c      	ldr	r3, [pc, #112]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002bae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bb2:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002bb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bba:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002bbc:	4b18      	ldr	r3, [pc, #96]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002bbe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bc2:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8002bc4:	4b16      	ldr	r3, [pc, #88]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002bca:	4b15      	ldr	r3, [pc, #84]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002bcc:	2203      	movs	r2, #3
 8002bce:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002bd0:	4b13      	ldr	r3, [pc, #76]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002bd6:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8002bdc:	4b10      	ldr	r3, [pc, #64]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002bde:	4a11      	ldr	r2, [pc, #68]	@ (8002c24 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8002be0:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a0e      	ldr	r2, [pc, #56]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002be6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002be8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8002bee:	480c      	ldr	r0, [pc, #48]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002bf0:	f000 fe32 	bl	8003858 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8002bf4:	480a      	ldr	r0, [pc, #40]	@ (8002c20 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002bf6:	f000 fd81 	bl	80036fc <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	210e      	movs	r1, #14
 8002bfe:	203c      	movs	r0, #60	@ 0x3c
 8002c00:	f000 fc53 	bl	80034aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8002c04:	203c      	movs	r0, #60	@ 0x3c
 8002c06:	f000 fc6c 	bl	80034e2 <HAL_NVIC_EnableIRQ>
}
 8002c0a:	bf00      	nop
 8002c0c:	3730      	adds	r7, #48	@ 0x30
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40015c04 	.word	0x40015c04
 8002c20:	2002c40c 	.word	0x2002c40c
 8002c24:	40026470 	.word	0x40026470

08002c28 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b0a6      	sub	sp, #152	@ 0x98
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 f9a7 	bl	8005f8c <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d009      	beq.n	8002c5c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d004      	beq.n	8002c5c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d112      	bne.n	8002c82 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002c5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c60:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8002c62:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c66:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8002c68:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8002c6c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8002c72:	2313      	movs	r3, #19
 8002c74:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f002 fd96 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 8002c80:	e012      	b.n	8002ca8 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002c82:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c86:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8002c88:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c8c:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8002c8e:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8002c92:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8002c94:	2307      	movs	r3, #7
 8002c96:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002c9c:	f107 0314 	add.w	r3, r7, #20
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f002 fd83 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	3798      	adds	r7, #152	@ 0x98
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002cba:	4a2b      	ldr	r2, [pc, #172]	@ (8002d68 <SAIx_Out_Init+0xb8>)
 8002cbc:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002cbe:	4b29      	ldr	r3, [pc, #164]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b27      	ldr	r3, [pc, #156]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ccc:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8002cce:	4a25      	ldr	r2, [pc, #148]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8002cd4:	4b23      	ldr	r3, [pc, #140]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002cda:	4b22      	ldr	r3, [pc, #136]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002ce0:	4b20      	ldr	r3, [pc, #128]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002ce8:	2280      	movs	r2, #128	@ 0x80
 8002cea:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002cec:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8002cfe:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d04:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002d06:	4b17      	ldr	r3, [pc, #92]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  haudio_out_sai.FrameInit.FrameLength = 64; 
 8002d0c:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002d0e:	2240      	movs	r2, #64	@ 0x40
 8002d10:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8002d12:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002d14:	2220      	movs	r2, #32
 8002d16:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002d18:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002d1a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d1e:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002d20:	4b10      	ldr	r3, [pc, #64]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002d26:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002d28:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002d2c:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8002d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8002d40:	4b08      	ldr	r3, [pc, #32]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002d42:	220f      	movs	r2, #15
 8002d44:	661a      	str	r2, [r3, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8002d46:	4807      	ldr	r0, [pc, #28]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002d48:	f003 fb6c 	bl	8006424 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002d4c:	4b05      	ldr	r3, [pc, #20]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b04      	ldr	r3, [pc, #16]	@ (8002d64 <SAIx_Out_Init+0xb4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002d5a:	601a      	str	r2, [r3, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	2002c304 	.word	0x2002c304
 8002d68:	40015c04 	.word	0x40015c04

08002d6c <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002d70:	4b07      	ldr	r3, [pc, #28]	@ (8002d90 <SAIx_Out_DeInit+0x24>)
 8002d72:	4a08      	ldr	r2, [pc, #32]	@ (8002d94 <SAIx_Out_DeInit+0x28>)
 8002d74:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002d76:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <SAIx_Out_DeInit+0x24>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b04      	ldr	r3, [pc, #16]	@ (8002d90 <SAIx_Out_DeInit+0x24>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002d84:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8002d86:	4802      	ldr	r0, [pc, #8]	@ (8002d90 <SAIx_Out_DeInit+0x24>)
 8002d88:	f003 fcca 	bl	8006720 <HAL_SAI_DeInit>
}
 8002d8c:	bf00      	nop
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	2002c304 	.word	0x2002c304
 8002d94:	40015c04 	.word	0x40015c04

08002d98 <BSP_AUDIO_IN_Init>:
  * @param  Volume: Initial volume level (in range 0(Mute)..80(+0dB)..100(+17.625dB))
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint16_t InputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	603a      	str	r2, [r7, #0]
 8002da2:	80fb      	strh	r3, [r7, #6]
 8002da4:	460b      	mov	r3, r1
 8002da6:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	75fb      	strb	r3, [r7, #23]
  uint32_t deviceid = 0x00;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002db6:	d006      	beq.n	8002dc6 <BSP_AUDIO_IN_Init+0x2e>
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dbe:	d002      	beq.n	8002dc6 <BSP_AUDIO_IN_Init+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	75fb      	strb	r3, [r7, #23]
 8002dc4:	e046      	b.n	8002e54 <BSP_AUDIO_IN_Init+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8002dc6:	f000 f9fd 	bl	80031c4 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8002dca:	2200      	movs	r2, #0
 8002dcc:	6839      	ldr	r1, [r7, #0]
 8002dce:	4824      	ldr	r0, [pc, #144]	@ (8002e60 <BSP_AUDIO_IN_Init+0xc8>)
 8002dd0:	f7ff ff2a 	bl	8002c28 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002dd4:	4b22      	ldr	r3, [pc, #136]	@ (8002e60 <BSP_AUDIO_IN_Init+0xc8>)
 8002dd6:	4a23      	ldr	r2, [pc, #140]	@ (8002e64 <BSP_AUDIO_IN_Init+0xcc>)
 8002dd8:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8002dda:	4821      	ldr	r0, [pc, #132]	@ (8002e60 <BSP_AUDIO_IN_Init+0xc8>)
 8002ddc:	f003 fe14 	bl	8006a08 <HAL_SAI_GetState>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d107      	bne.n	8002df6 <BSP_AUDIO_IN_Init+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8002de6:	2100      	movs	r1, #0
 8002de8:	481d      	ldr	r0, [pc, #116]	@ (8002e60 <BSP_AUDIO_IN_Init+0xc8>)
 8002dea:	f7ff fe47 	bl	8002a7c <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8002dee:	2100      	movs	r1, #0
 8002df0:	481b      	ldr	r0, [pc, #108]	@ (8002e60 <BSP_AUDIO_IN_Init+0xc8>)
 8002df2:	f000 f87f 	bl	8002ef4 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dfc:	d102      	bne.n	8002e04 <BSP_AUDIO_IN_Init+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8002dfe:	230a      	movs	r3, #10
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	e001      	b.n	8002e08 <BSP_AUDIO_IN_Init+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8002e04:	2305      	movs	r3, #5
 8002e06:	613b      	str	r3, [r7, #16]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	6939      	ldr	r1, [r7, #16]
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f000 f923 	bl	8003058 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002e12:	4b15      	ldr	r3, [pc, #84]	@ (8002e68 <BSP_AUDIO_IN_Init+0xd0>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2034      	movs	r0, #52	@ 0x34
 8002e18:	4798      	blx	r3
 8002e1a:	60f8      	str	r0, [r7, #12]

    if((deviceid) == WM8994_ID)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f648 1294 	movw	r2, #35220	@ 0x8994
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d109      	bne.n	8002e3a <BSP_AUDIO_IN_Init+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8002e26:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <BSP_AUDIO_IN_Init+0xd0>)
 8002e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2a:	2034      	movs	r0, #52	@ 0x34
 8002e2c:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e6c <BSP_AUDIO_IN_Init+0xd4>)
 8002e30:	4a0d      	ldr	r2, [pc, #52]	@ (8002e68 <BSP_AUDIO_IN_Init+0xd0>)
 8002e32:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	75fb      	strb	r3, [r7, #23]
 8002e38:	e001      	b.n	8002e3e <BSP_AUDIO_IN_Init+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	75fb      	strb	r3, [r7, #23]
    }

    if(ret == AUDIO_OK)
 8002e3e:	7dfb      	ldrb	r3, [r7, #23]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d107      	bne.n	8002e54 <BSP_AUDIO_IN_Init+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, Volume, AudioFreq);
 8002e44:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <BSP_AUDIO_IN_Init+0xd4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681c      	ldr	r4, [r3, #0]
 8002e4a:	797a      	ldrb	r2, [r7, #5]
 8002e4c:	88f9      	ldrh	r1, [r7, #6]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2034      	movs	r0, #52	@ 0x34
 8002e52:	47a0      	blx	r4
    }
  }
  return ret;
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd90      	pop	{r4, r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	2002c388 	.word	0x2002c388
 8002e64:	40015c24 	.word	0x40015c24
 8002e68:	20000004 	.word	0x20000004
 8002e6c:	2002c300 	.word	0x2002c300

08002e70 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4805      	ldr	r0, [pc, #20]	@ (8002e9c <BSP_AUDIO_IN_Record+0x2c>)
 8002e88:	f003 fd30 	bl	80068ec <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	b2db      	uxtb	r3, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	2002c388 	.word	0x2002c388

08002ea0 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002ea8:	f000 f80e 	bl	8002ec8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8002ebc:	f000 f80b 	bl	8002ed6 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
     to prepare the next buffer pointer and its size. */

	// Copy the second half of audioInputBuffer to audioOutputBuffer


}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0
     to prepare the next buffer pointer and its size. */

	// Copy the first half of audioInputBuffer to audioOutputBuffer


}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08c      	sub	sp, #48	@ 0x30
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002efe:	4b50      	ldr	r3, [pc, #320]	@ (8003040 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	4a4f      	ldr	r2, [pc, #316]	@ (8003040 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002f04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f0a:	4b4d      	ldr	r3, [pc, #308]	@ (8003040 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8002f16:	4b4a      	ldr	r3, [pc, #296]	@ (8003040 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	4a49      	ldr	r2, [pc, #292]	@ (8003040 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f22:	4b47      	ldr	r3, [pc, #284]	@ (8003040 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8002f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f32:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8002f40:	230a      	movs	r3, #10
 8002f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002f44:	f107 031c 	add.w	r3, r7, #28
 8002f48:	4619      	mov	r1, r3
 8002f4a:	483e      	ldr	r0, [pc, #248]	@ (8003044 <BSP_AUDIO_IN_MspInit+0x150>)
 8002f4c:	f000 fefe 	bl	8003d4c <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8002f50:	4b3b      	ldr	r3, [pc, #236]	@ (8003040 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f54:	4a3a      	ldr	r2, [pc, #232]	@ (8003040 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f5c:	4b38      	ldr	r3, [pc, #224]	@ (8003040 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8002f68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f6c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002f76:	2302      	movs	r3, #2
 8002f78:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8002f7a:	f107 031c 	add.w	r3, r7, #28
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4831      	ldr	r0, [pc, #196]	@ (8003048 <BSP_AUDIO_IN_MspInit+0x154>)
 8002f82:	f000 fee3 	bl	8003d4c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8002f86:	4b2e      	ldr	r3, [pc, #184]	@ (8003040 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8003040 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002f8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f92:	4b2b      	ldr	r3, [pc, #172]	@ (8003040 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800304c <BSP_AUDIO_IN_MspInit+0x158>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d137      	bne.n	8003018 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8002fa8:	4b29      	ldr	r3, [pc, #164]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002fae:	4b28      	ldr	r3, [pc, #160]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002fb4:	4b26      	ldr	r3, [pc, #152]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002fba:	4b25      	ldr	r3, [pc, #148]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002fbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fc0:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002fc2:	4b23      	ldr	r3, [pc, #140]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002fc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fc8:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8002fca:	4b21      	ldr	r3, [pc, #132]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002fcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fd0:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002fd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fd8:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002fda:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002fdc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fe0:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002fe8:	4b19      	ldr	r3, [pc, #100]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002fea:	2203      	movs	r2, #3
 8002fec:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002fee:	4b18      	ldr	r3, [pc, #96]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8002ff4:	4b16      	ldr	r3, [pc, #88]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002ffa:	4b15      	ldr	r3, [pc, #84]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002ffc:	4a15      	ldr	r2, [pc, #84]	@ (8003054 <BSP_AUDIO_IN_MspInit+0x160>)
 8002ffe:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a13      	ldr	r2, [pc, #76]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003004:	671a      	str	r2, [r3, #112]	@ 0x70
 8003006:	4a12      	ldr	r2, [pc, #72]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 800300c:	4810      	ldr	r0, [pc, #64]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 800300e:	f000 fc23 	bl	8003858 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8003012:	480f      	ldr	r0, [pc, #60]	@ (8003050 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003014:	f000 fb72 	bl	80036fc <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003018:	2200      	movs	r2, #0
 800301a:	210f      	movs	r1, #15
 800301c:	2046      	movs	r0, #70	@ 0x46
 800301e:	f000 fa44 	bl	80034aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8003022:	2046      	movs	r0, #70	@ 0x46
 8003024:	f000 fa5d 	bl	80034e2 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003028:	2200      	movs	r2, #0
 800302a:	210f      	movs	r1, #15
 800302c:	2028      	movs	r0, #40	@ 0x28
 800302e:	f000 fa3c 	bl	80034aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8003032:	2028      	movs	r0, #40	@ 0x28
 8003034:	f000 fa55 	bl	80034e2 <HAL_NVIC_EnableIRQ>
}
 8003038:	bf00      	nop
 800303a:	3730      	adds	r7, #48	@ 0x30
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	40021800 	.word	0x40021800
 8003048:	40021c00 	.word	0x40021c00
 800304c:	40015c24 	.word	0x40015c24
 8003050:	2002c46c 	.word	0x2002c46c
 8003054:	400264b8 	.word	0x400264b8

08003058 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003064:	4b53      	ldr	r3, [pc, #332]	@ (80031b4 <SAIx_In_Init+0x15c>)
 8003066:	4a54      	ldr	r2, [pc, #336]	@ (80031b8 <SAIx_In_Init+0x160>)
 8003068:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800306a:	4b52      	ldr	r3, [pc, #328]	@ (80031b4 <SAIx_In_Init+0x15c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b50      	ldr	r3, [pc, #320]	@ (80031b4 <SAIx_In_Init+0x15c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003078:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800307a:	4a4e      	ldr	r2, [pc, #312]	@ (80031b4 <SAIx_In_Init+0x15c>)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8003080:	4a4c      	ldr	r2, [pc, #304]	@ (80031b4 <SAIx_In_Init+0x15c>)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8003086:	4b4b      	ldr	r3, [pc, #300]	@ (80031b4 <SAIx_In_Init+0x15c>)
 8003088:	2200      	movs	r2, #0
 800308a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800308c:	4b49      	ldr	r3, [pc, #292]	@ (80031b4 <SAIx_In_Init+0x15c>)
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8003092:	4b48      	ldr	r3, [pc, #288]	@ (80031b4 <SAIx_In_Init+0x15c>)
 8003094:	2280      	movs	r2, #128	@ 0x80
 8003096:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003098:	4b46      	ldr	r3, [pc, #280]	@ (80031b4 <SAIx_In_Init+0x15c>)
 800309a:	2200      	movs	r2, #0
 800309c:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800309e:	4b45      	ldr	r3, [pc, #276]	@ (80031b4 <SAIx_In_Init+0x15c>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80030a4:	4b43      	ldr	r3, [pc, #268]	@ (80031b4 <SAIx_In_Init+0x15c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80030aa:	4b42      	ldr	r3, [pc, #264]	@ (80031b4 <SAIx_In_Init+0x15c>)
 80030ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030b0:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80030b2:	4b40      	ldr	r3, [pc, #256]	@ (80031b4 <SAIx_In_Init+0x15c>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 80030b8:	4b3e      	ldr	r3, [pc, #248]	@ (80031b4 <SAIx_In_Init+0x15c>)
 80030ba:	2240      	movs	r2, #64	@ 0x40
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80030be:	4b3d      	ldr	r3, [pc, #244]	@ (80031b4 <SAIx_In_Init+0x15c>)
 80030c0:	2220      	movs	r2, #32
 80030c2:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80030c4:	4b3b      	ldr	r3, [pc, #236]	@ (80031b4 <SAIx_In_Init+0x15c>)
 80030c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80030ca:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80030cc:	4b39      	ldr	r3, [pc, #228]	@ (80031b4 <SAIx_In_Init+0x15c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80030d2:	4b38      	ldr	r3, [pc, #224]	@ (80031b4 <SAIx_In_Init+0x15c>)
 80030d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80030d8:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80030da:	4b36      	ldr	r3, [pc, #216]	@ (80031b4 <SAIx_In_Init+0x15c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80030e0:	4b34      	ldr	r3, [pc, #208]	@ (80031b4 <SAIx_In_Init+0x15c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 80030e6:	4b33      	ldr	r3, [pc, #204]	@ (80031b4 <SAIx_In_Init+0x15c>)
 80030e8:	2204      	movs	r2, #4
 80030ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80030ec:	4a31      	ldr	r2, [pc, #196]	@ (80031b4 <SAIx_In_Init+0x15c>)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 80030f2:	4830      	ldr	r0, [pc, #192]	@ (80031b4 <SAIx_In_Init+0x15c>)
 80030f4:	f003 f996 	bl	8006424 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80030f8:	4b30      	ldr	r3, [pc, #192]	@ (80031bc <SAIx_In_Init+0x164>)
 80030fa:	4a31      	ldr	r2, [pc, #196]	@ (80031c0 <SAIx_In_Init+0x168>)
 80030fc:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80030fe:	4b2f      	ldr	r3, [pc, #188]	@ (80031bc <SAIx_In_Init+0x164>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4b2d      	ldr	r3, [pc, #180]	@ (80031bc <SAIx_In_Init+0x164>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800310c:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 800310e:	4a2b      	ldr	r2, [pc, #172]	@ (80031bc <SAIx_In_Init+0x164>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8003114:	4b29      	ldr	r3, [pc, #164]	@ (80031bc <SAIx_In_Init+0x164>)
 8003116:	2203      	movs	r2, #3
 8003118:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800311a:	4b28      	ldr	r3, [pc, #160]	@ (80031bc <SAIx_In_Init+0x164>)
 800311c:	2200      	movs	r2, #0
 800311e:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8003120:	4b26      	ldr	r3, [pc, #152]	@ (80031bc <SAIx_In_Init+0x164>)
 8003122:	2200      	movs	r2, #0
 8003124:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8003126:	4b25      	ldr	r3, [pc, #148]	@ (80031bc <SAIx_In_Init+0x164>)
 8003128:	2280      	movs	r2, #128	@ 0x80
 800312a:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800312c:	4b23      	ldr	r3, [pc, #140]	@ (80031bc <SAIx_In_Init+0x164>)
 800312e:	2200      	movs	r2, #0
 8003130:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8003132:	4b22      	ldr	r3, [pc, #136]	@ (80031bc <SAIx_In_Init+0x164>)
 8003134:	2201      	movs	r2, #1
 8003136:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8003138:	4b20      	ldr	r3, [pc, #128]	@ (80031bc <SAIx_In_Init+0x164>)
 800313a:	2201      	movs	r2, #1
 800313c:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 800313e:	4b1f      	ldr	r3, [pc, #124]	@ (80031bc <SAIx_In_Init+0x164>)
 8003140:	2200      	movs	r2, #0
 8003142:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003144:	4b1d      	ldr	r3, [pc, #116]	@ (80031bc <SAIx_In_Init+0x164>)
 8003146:	2201      	movs	r2, #1
 8003148:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 800314a:	4b1c      	ldr	r3, [pc, #112]	@ (80031bc <SAIx_In_Init+0x164>)
 800314c:	2240      	movs	r2, #64	@ 0x40
 800314e:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8003150:	4b1a      	ldr	r3, [pc, #104]	@ (80031bc <SAIx_In_Init+0x164>)
 8003152:	2220      	movs	r2, #32
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8003156:	4b19      	ldr	r3, [pc, #100]	@ (80031bc <SAIx_In_Init+0x164>)
 8003158:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800315c:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800315e:	4b17      	ldr	r3, [pc, #92]	@ (80031bc <SAIx_In_Init+0x164>)
 8003160:	2200      	movs	r2, #0
 8003162:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8003164:	4b15      	ldr	r3, [pc, #84]	@ (80031bc <SAIx_In_Init+0x164>)
 8003166:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800316a:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 800316c:	4b13      	ldr	r3, [pc, #76]	@ (80031bc <SAIx_In_Init+0x164>)
 800316e:	2200      	movs	r2, #0
 8003170:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003172:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <SAIx_In_Init+0x164>)
 8003174:	2200      	movs	r2, #0
 8003176:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8003178:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <SAIx_In_Init+0x164>)
 800317a:	2204      	movs	r2, #4
 800317c:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800317e:	4a0f      	ldr	r2, [pc, #60]	@ (80031bc <SAIx_In_Init+0x164>)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8003184:	480d      	ldr	r0, [pc, #52]	@ (80031bc <SAIx_In_Init+0x164>)
 8003186:	f003 f94d 	bl	8006424 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800318a:	4b0a      	ldr	r3, [pc, #40]	@ (80031b4 <SAIx_In_Init+0x15c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <SAIx_In_Init+0x15c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003198:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800319a:	4b08      	ldr	r3, [pc, #32]	@ (80031bc <SAIx_In_Init+0x164>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <SAIx_In_Init+0x164>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80031a8:	601a      	str	r2, [r3, #0]
}
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	2002c304 	.word	0x2002c304
 80031b8:	40015c04 	.word	0x40015c04
 80031bc:	2002c388 	.word	0x2002c388
 80031c0:	40015c24 	.word	0x40015c24

080031c4 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80031c8:	4b07      	ldr	r3, [pc, #28]	@ (80031e8 <SAIx_In_DeInit+0x24>)
 80031ca:	4a08      	ldr	r2, [pc, #32]	@ (80031ec <SAIx_In_DeInit+0x28>)
 80031cc:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80031ce:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <SAIx_In_DeInit+0x24>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b04      	ldr	r3, [pc, #16]	@ (80031e8 <SAIx_In_DeInit+0x24>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80031dc:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 80031de:	4802      	ldr	r0, [pc, #8]	@ (80031e8 <SAIx_In_DeInit+0x24>)
 80031e0:	f003 fa9e 	bl	8006720 <HAL_SAI_DeInit>
}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	2002c388 	.word	0x2002c388
 80031ec:	40015c24 	.word	0x40015c24

080031f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031f4:	2003      	movs	r0, #3
 80031f6:	f000 f94d 	bl	8003494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031fa:	2000      	movs	r0, #0
 80031fc:	f000 f806 	bl	800320c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003200:	f7fd fc94 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003214:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <HAL_InitTick+0x54>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b12      	ldr	r3, [pc, #72]	@ (8003264 <HAL_InitTick+0x58>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003222:	fbb3 f3f1 	udiv	r3, r3, r1
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f967 	bl	80034fe <HAL_SYSTICK_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e00e      	b.n	8003258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b0f      	cmp	r3, #15
 800323e:	d80a      	bhi.n	8003256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003240:	2200      	movs	r2, #0
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	f000 f92f 	bl	80034aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800324c:	4a06      	ldr	r2, [pc, #24]	@ (8003268 <HAL_InitTick+0x5c>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000000 	.word	0x20000000
 8003264:	20000038 	.word	0x20000038
 8003268:	20000034 	.word	0x20000034

0800326c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003270:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_IncTick+0x20>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <HAL_IncTick+0x24>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4413      	add	r3, r2
 800327c:	4a04      	ldr	r2, [pc, #16]	@ (8003290 <HAL_IncTick+0x24>)
 800327e:	6013      	str	r3, [r2, #0]
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20000038 	.word	0x20000038
 8003290:	2002c4cc 	.word	0x2002c4cc

08003294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return uwTick;
 8003298:	4b03      	ldr	r3, [pc, #12]	@ (80032a8 <HAL_GetTick+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	2002c4cc 	.word	0x2002c4cc

080032ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032b4:	f7ff ffee 	bl	8003294 <HAL_GetTick>
 80032b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d005      	beq.n	80032d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032c6:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <HAL_Delay+0x44>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032d2:	bf00      	nop
 80032d4:	f7ff ffde 	bl	8003294 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d8f7      	bhi.n	80032d4 <HAL_Delay+0x28>
  {
  }
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000038 	.word	0x20000038

080032f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003304:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <__NVIC_SetPriorityGrouping+0x40>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003310:	4013      	ands	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800331c:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 800331e:	4313      	orrs	r3, r2
 8003320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003322:	4a04      	ldr	r2, [pc, #16]	@ (8003334 <__NVIC_SetPriorityGrouping+0x40>)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	60d3      	str	r3, [r2, #12]
}
 8003328:	bf00      	nop
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00
 8003338:	05fa0000 	.word	0x05fa0000

0800333c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003340:	4b04      	ldr	r3, [pc, #16]	@ (8003354 <__NVIC_GetPriorityGrouping+0x18>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	f003 0307 	and.w	r3, r3, #7
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	2b00      	cmp	r3, #0
 8003368:	db0b      	blt.n	8003382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	4907      	ldr	r1, [pc, #28]	@ (8003390 <__NVIC_EnableIRQ+0x38>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2001      	movs	r0, #1
 800337a:	fa00 f202 	lsl.w	r2, r0, r2
 800337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000e100 	.word	0xe000e100

08003394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	6039      	str	r1, [r7, #0]
 800339e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	db0a      	blt.n	80033be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	490c      	ldr	r1, [pc, #48]	@ (80033e0 <__NVIC_SetPriority+0x4c>)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	0112      	lsls	r2, r2, #4
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	440b      	add	r3, r1
 80033b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033bc:	e00a      	b.n	80033d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4908      	ldr	r1, [pc, #32]	@ (80033e4 <__NVIC_SetPriority+0x50>)
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	3b04      	subs	r3, #4
 80033cc:	0112      	lsls	r2, r2, #4
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	440b      	add	r3, r1
 80033d2:	761a      	strb	r2, [r3, #24]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000e100 	.word	0xe000e100
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	@ 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f1c3 0307 	rsb	r3, r3, #7
 8003402:	2b04      	cmp	r3, #4
 8003404:	bf28      	it	cs
 8003406:	2304      	movcs	r3, #4
 8003408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3304      	adds	r3, #4
 800340e:	2b06      	cmp	r3, #6
 8003410:	d902      	bls.n	8003418 <NVIC_EncodePriority+0x30>
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3b03      	subs	r3, #3
 8003416:	e000      	b.n	800341a <NVIC_EncodePriority+0x32>
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800341c:	f04f 32ff 	mov.w	r2, #4294967295
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43da      	mvns	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	401a      	ands	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003430:	f04f 31ff 	mov.w	r1, #4294967295
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	fa01 f303 	lsl.w	r3, r1, r3
 800343a:	43d9      	mvns	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003440:	4313      	orrs	r3, r2
         );
}
 8003442:	4618      	mov	r0, r3
 8003444:	3724      	adds	r7, #36	@ 0x24
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3b01      	subs	r3, #1
 800345c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003460:	d301      	bcc.n	8003466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003462:	2301      	movs	r3, #1
 8003464:	e00f      	b.n	8003486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003466:	4a0a      	ldr	r2, [pc, #40]	@ (8003490 <SysTick_Config+0x40>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800346e:	210f      	movs	r1, #15
 8003470:	f04f 30ff 	mov.w	r0, #4294967295
 8003474:	f7ff ff8e 	bl	8003394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003478:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <SysTick_Config+0x40>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347e:	4b04      	ldr	r3, [pc, #16]	@ (8003490 <SysTick_Config+0x40>)
 8003480:	2207      	movs	r2, #7
 8003482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	e000e010 	.word	0xe000e010

08003494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff29 	bl	80032f4 <__NVIC_SetPriorityGrouping>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034bc:	f7ff ff3e 	bl	800333c <__NVIC_GetPriorityGrouping>
 80034c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	6978      	ldr	r0, [r7, #20]
 80034c8:	f7ff ff8e 	bl	80033e8 <NVIC_EncodePriority>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff5d 	bl	8003394 <__NVIC_SetPriority>
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff ff31 	bl	8003358 <__NVIC_EnableIRQ>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ffa2 	bl	8003450 <SysTick_Config>
 800350c:	4603      	mov	r3, r0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e054      	b.n	80035d4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	7f5b      	ldrb	r3, [r3, #29]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d105      	bne.n	8003540 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fb1a 	bl	8000b74 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	791b      	ldrb	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10c      	bne.n	8003568 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a22      	ldr	r2, [pc, #136]	@ (80035dc <HAL_CRC_Init+0xc4>)
 8003554:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0218 	bic.w	r2, r2, #24
 8003564:	609a      	str	r2, [r3, #8]
 8003566:	e00c      	b.n	8003582 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6899      	ldr	r1, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	461a      	mov	r2, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f834 	bl	80035e0 <HAL_CRCEx_Polynomial_Set>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e028      	b.n	80035d4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	795b      	ldrb	r3, [r3, #5]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d105      	bne.n	8003596 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f04f 32ff 	mov.w	r2, #4294967295
 8003592:	611a      	str	r2, [r3, #16]
 8003594:	e004      	b.n	80035a0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6912      	ldr	r2, [r2, #16]
 800359e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699a      	ldr	r2, [r3, #24]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	04c11db7 	.word	0x04c11db7

080035e0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80035f0:	231f      	movs	r3, #31
 80035f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	75fb      	strb	r3, [r7, #23]
 8003602:	e063      	b.n	80036cc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003604:	bf00      	nop
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1e5a      	subs	r2, r3, #1
 800360a:	613a      	str	r2, [r7, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d009      	beq.n	8003624 <HAL_CRCEx_Polynomial_Set+0x44>
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	fa22 f303 	lsr.w	r3, r2, r3
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b18      	cmp	r3, #24
 8003628:	d846      	bhi.n	80036b8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800362a:	a201      	add	r2, pc, #4	@ (adr r2, 8003630 <HAL_CRCEx_Polynomial_Set+0x50>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	080036bf 	.word	0x080036bf
 8003634:	080036b9 	.word	0x080036b9
 8003638:	080036b9 	.word	0x080036b9
 800363c:	080036b9 	.word	0x080036b9
 8003640:	080036b9 	.word	0x080036b9
 8003644:	080036b9 	.word	0x080036b9
 8003648:	080036b9 	.word	0x080036b9
 800364c:	080036b9 	.word	0x080036b9
 8003650:	080036ad 	.word	0x080036ad
 8003654:	080036b9 	.word	0x080036b9
 8003658:	080036b9 	.word	0x080036b9
 800365c:	080036b9 	.word	0x080036b9
 8003660:	080036b9 	.word	0x080036b9
 8003664:	080036b9 	.word	0x080036b9
 8003668:	080036b9 	.word	0x080036b9
 800366c:	080036b9 	.word	0x080036b9
 8003670:	080036a1 	.word	0x080036a1
 8003674:	080036b9 	.word	0x080036b9
 8003678:	080036b9 	.word	0x080036b9
 800367c:	080036b9 	.word	0x080036b9
 8003680:	080036b9 	.word	0x080036b9
 8003684:	080036b9 	.word	0x080036b9
 8003688:	080036b9 	.word	0x080036b9
 800368c:	080036b9 	.word	0x080036b9
 8003690:	08003695 	.word	0x08003695
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b06      	cmp	r3, #6
 8003698:	d913      	bls.n	80036c2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800369e:	e010      	b.n	80036c2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b07      	cmp	r3, #7
 80036a4:	d90f      	bls.n	80036c6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80036aa:	e00c      	b.n	80036c6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b0f      	cmp	r3, #15
 80036b0:	d90b      	bls.n	80036ca <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80036b6:	e008      	b.n	80036ca <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	75fb      	strb	r3, [r7, #23]
        break;
 80036bc:	e006      	b.n	80036cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80036be:	bf00      	nop
 80036c0:	e004      	b.n	80036cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80036c2:	bf00      	nop
 80036c4:	e002      	b.n	80036cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80036ca:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10d      	bne.n	80036ee <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f023 0118 	bic.w	r1, r3, #24
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003708:	f7ff fdc4 	bl	8003294 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e099      	b.n	800384c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003738:	e00f      	b.n	800375a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800373a:	f7ff fdab 	bl	8003294 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b05      	cmp	r3, #5
 8003746:	d908      	bls.n	800375a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2203      	movs	r2, #3
 8003752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e078      	b.n	800384c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e8      	bne.n	800373a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4b38      	ldr	r3, [pc, #224]	@ (8003854 <HAL_DMA_Init+0x158>)
 8003774:	4013      	ands	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003786:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d107      	bne.n	80037c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037bc:	4313      	orrs	r3, r2
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0307 	bic.w	r3, r3, #7
 80037da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d117      	bne.n	800381e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00e      	beq.n	800381e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f94b 	bl	8003a9c <DMA_CheckFifoParam>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2240      	movs	r2, #64	@ 0x40
 8003810:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800381a:	2301      	movs	r3, #1
 800381c:	e016      	b.n	800384c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f902 	bl	8003a30 <DMA_CalcBaseAndBitshift>
 800382c:	4603      	mov	r3, r0
 800382e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003834:	223f      	movs	r2, #63	@ 0x3f
 8003836:	409a      	lsls	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	f010803f 	.word	0xf010803f

08003858 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e050      	b.n	800390c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d101      	bne.n	800387a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003876:	2302      	movs	r3, #2
 8003878:	e048      	b.n	800390c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2200      	movs	r2, #0
 8003898:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2200      	movs	r2, #0
 80038a8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2200      	movs	r2, #0
 80038b0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2221      	movs	r2, #33	@ 0x21
 80038b8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f8b8 	bl	8003a30 <DMA_CalcBaseAndBitshift>
 80038c0:	4603      	mov	r3, r0
 80038c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c8:	223f      	movs	r2, #63	@ 0x3f
 80038ca:	409a      	lsls	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_DMA_Start_IT+0x26>
 8003936:	2302      	movs	r3, #2
 8003938:	e048      	b.n	80039cc <HAL_DMA_Start_IT+0xb8>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b01      	cmp	r3, #1
 800394c:	d137      	bne.n	80039be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f836 	bl	80039d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396c:	223f      	movs	r2, #63	@ 0x3f
 800396e:	409a      	lsls	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0216 	orr.w	r2, r2, #22
 8003982:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003992:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0208 	orr.w	r2, r2, #8
 80039aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e005      	b.n	80039ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
 80039c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b40      	cmp	r3, #64	@ 0x40
 8003a00:	d108      	bne.n	8003a14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a12:	e007      	b.n	8003a24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	3b10      	subs	r3, #16
 8003a40:	4a13      	ldr	r2, [pc, #76]	@ (8003a90 <DMA_CalcBaseAndBitshift+0x60>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a4a:	4a12      	ldr	r2, [pc, #72]	@ (8003a94 <DMA_CalcBaseAndBitshift+0x64>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d908      	bls.n	8003a70 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	4b0c      	ldr	r3, [pc, #48]	@ (8003a98 <DMA_CalcBaseAndBitshift+0x68>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	1d1a      	adds	r2, r3, #4
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a6e:	e006      	b.n	8003a7e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <DMA_CalcBaseAndBitshift+0x68>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	aaaaaaab 	.word	0xaaaaaaab
 8003a94:	08007be4 	.word	0x08007be4
 8003a98:	fffffc00 	.word	0xfffffc00

08003a9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d11f      	bne.n	8003af6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d856      	bhi.n	8003b6a <DMA_CheckFifoParam+0xce>
 8003abc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac4 <DMA_CheckFifoParam+0x28>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003ae7 	.word	0x08003ae7
 8003acc:	08003ad5 	.word	0x08003ad5
 8003ad0:	08003b6b 	.word	0x08003b6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d046      	beq.n	8003b6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae4:	e043      	b.n	8003b6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003aee:	d140      	bne.n	8003b72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af4:	e03d      	b.n	8003b72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003afe:	d121      	bne.n	8003b44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d837      	bhi.n	8003b76 <DMA_CheckFifoParam+0xda>
 8003b06:	a201      	add	r2, pc, #4	@ (adr r2, 8003b0c <DMA_CheckFifoParam+0x70>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003b1d 	.word	0x08003b1d
 8003b10:	08003b23 	.word	0x08003b23
 8003b14:	08003b1d 	.word	0x08003b1d
 8003b18:	08003b35 	.word	0x08003b35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b20:	e030      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d025      	beq.n	8003b7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b32:	e022      	b.n	8003b7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b3c:	d11f      	bne.n	8003b7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b42:	e01c      	b.n	8003b7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d903      	bls.n	8003b52 <DMA_CheckFifoParam+0xb6>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d003      	beq.n	8003b58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b50:	e018      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
      break;
 8003b56:	e015      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00e      	beq.n	8003b82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
      break;
 8003b68:	e00b      	b.n	8003b82 <DMA_CheckFifoParam+0xe6>
      break;
 8003b6a:	bf00      	nop
 8003b6c:	e00a      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e008      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b72:	bf00      	nop
 8003b74:	e006      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b76:	bf00      	nop
 8003b78:	e004      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e002      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b7e:	bf00      	nop
 8003b80:	e000      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b82:	bf00      	nop
    }
  } 
  
  return status; 
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop

08003b94 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e039      	b.n	8003c1a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fc fffa 	bl	8000bb4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be4:	f023 0107 	bic.w	r1, r3, #7
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003c24 <HAL_DMA2D_Init+0x90>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68d1      	ldr	r1, [r2, #12]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	430b      	orrs	r3, r1
 8003c08:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	ffffc000 	.word	0xffffc000

08003c28 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_DMA2D_ConfigLayer+0x20>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e079      	b.n	8003d3c <HAL_DMA2D_ConfigLayer+0x114>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	3318      	adds	r3, #24
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003c72:	4b35      	ldr	r3, [pc, #212]	@ (8003d48 <HAL_DMA2D_ConfigLayer+0x120>)
 8003c74:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b0a      	cmp	r3, #10
 8003c7c:	d003      	beq.n	8003c86 <HAL_DMA2D_ConfigLayer+0x5e>
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b09      	cmp	r3, #9
 8003c84:	d107      	bne.n	8003c96 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e005      	b.n	8003ca2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	061b      	lsls	r3, r3, #24
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d120      	bne.n	8003cea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	ea02 0103 	and.w	r1, r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b0a      	cmp	r3, #10
 8003cd0:	d003      	beq.n	8003cda <HAL_DMA2D_ConfigLayer+0xb2>
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b09      	cmp	r3, #9
 8003cd8:	d127      	bne.n	8003d2a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003ce6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ce8:	e01f      	b.n	8003d2a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	ea02 0103 	and.w	r1, r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b0a      	cmp	r3, #10
 8003d12:	d003      	beq.n	8003d1c <HAL_DMA2D_ConfigLayer+0xf4>
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b09      	cmp	r3, #9
 8003d1a:	d106      	bne.n	8003d2a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003d28:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	ff03000f 	.word	0xff03000f

08003d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b089      	sub	sp, #36	@ 0x24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	e175      	b.n	8004058 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	f040 8164 	bne.w	8004052 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d005      	beq.n	8003da2 <HAL_GPIO_Init+0x56>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d130      	bne.n	8003e04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	2203      	movs	r2, #3
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dd8:	2201      	movs	r2, #1
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 0201 	and.w	r2, r3, #1
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d017      	beq.n	8003e40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d123      	bne.n	8003e94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	08da      	lsrs	r2, r3, #3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3208      	adds	r2, #8
 8003e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	220f      	movs	r2, #15
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	08da      	lsrs	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3208      	adds	r2, #8
 8003e8e:	69b9      	ldr	r1, [r7, #24]
 8003e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0203 	and.w	r2, r3, #3
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80be 	beq.w	8004052 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed6:	4b66      	ldr	r3, [pc, #408]	@ (8004070 <HAL_GPIO_Init+0x324>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eda:	4a65      	ldr	r2, [pc, #404]	@ (8004070 <HAL_GPIO_Init+0x324>)
 8003edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ee2:	4b63      	ldr	r3, [pc, #396]	@ (8004070 <HAL_GPIO_Init+0x324>)
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003eee:	4a61      	ldr	r2, [pc, #388]	@ (8004074 <HAL_GPIO_Init+0x328>)
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	089b      	lsrs	r3, r3, #2
 8003ef4:	3302      	adds	r3, #2
 8003ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	220f      	movs	r2, #15
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a58      	ldr	r2, [pc, #352]	@ (8004078 <HAL_GPIO_Init+0x32c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d037      	beq.n	8003f8a <HAL_GPIO_Init+0x23e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a57      	ldr	r2, [pc, #348]	@ (800407c <HAL_GPIO_Init+0x330>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d031      	beq.n	8003f86 <HAL_GPIO_Init+0x23a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a56      	ldr	r2, [pc, #344]	@ (8004080 <HAL_GPIO_Init+0x334>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d02b      	beq.n	8003f82 <HAL_GPIO_Init+0x236>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a55      	ldr	r2, [pc, #340]	@ (8004084 <HAL_GPIO_Init+0x338>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d025      	beq.n	8003f7e <HAL_GPIO_Init+0x232>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a54      	ldr	r2, [pc, #336]	@ (8004088 <HAL_GPIO_Init+0x33c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01f      	beq.n	8003f7a <HAL_GPIO_Init+0x22e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a53      	ldr	r2, [pc, #332]	@ (800408c <HAL_GPIO_Init+0x340>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d019      	beq.n	8003f76 <HAL_GPIO_Init+0x22a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a52      	ldr	r2, [pc, #328]	@ (8004090 <HAL_GPIO_Init+0x344>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <HAL_GPIO_Init+0x226>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a51      	ldr	r2, [pc, #324]	@ (8004094 <HAL_GPIO_Init+0x348>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00d      	beq.n	8003f6e <HAL_GPIO_Init+0x222>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a50      	ldr	r2, [pc, #320]	@ (8004098 <HAL_GPIO_Init+0x34c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <HAL_GPIO_Init+0x21e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a4f      	ldr	r2, [pc, #316]	@ (800409c <HAL_GPIO_Init+0x350>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d101      	bne.n	8003f66 <HAL_GPIO_Init+0x21a>
 8003f62:	2309      	movs	r3, #9
 8003f64:	e012      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f66:	230a      	movs	r3, #10
 8003f68:	e010      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	e00e      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f6e:	2307      	movs	r3, #7
 8003f70:	e00c      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f72:	2306      	movs	r3, #6
 8003f74:	e00a      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f76:	2305      	movs	r3, #5
 8003f78:	e008      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f7a:	2304      	movs	r3, #4
 8003f7c:	e006      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e004      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e002      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_GPIO_Init+0x240>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	f002 0203 	and.w	r2, r2, #3
 8003f92:	0092      	lsls	r2, r2, #2
 8003f94:	4093      	lsls	r3, r2
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f9c:	4935      	ldr	r1, [pc, #212]	@ (8004074 <HAL_GPIO_Init+0x328>)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003faa:	4b3d      	ldr	r3, [pc, #244]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fce:	4a34      	ldr	r2, [pc, #208]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fd4:	4b32      	ldr	r3, [pc, #200]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ff8:	4a29      	ldr	r2, [pc, #164]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ffe:	4b28      	ldr	r3, [pc, #160]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	43db      	mvns	r3, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4013      	ands	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004022:	4a1f      	ldr	r2, [pc, #124]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004028:	4b1d      	ldr	r3, [pc, #116]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800404c:	4a14      	ldr	r2, [pc, #80]	@ (80040a0 <HAL_GPIO_Init+0x354>)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3301      	adds	r3, #1
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b0f      	cmp	r3, #15
 800405c:	f67f ae86 	bls.w	8003d6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	3724      	adds	r7, #36	@ 0x24
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800
 8004074:	40013800 	.word	0x40013800
 8004078:	40020000 	.word	0x40020000
 800407c:	40020400 	.word	0x40020400
 8004080:	40020800 	.word	0x40020800
 8004084:	40020c00 	.word	0x40020c00
 8004088:	40021000 	.word	0x40021000
 800408c:	40021400 	.word	0x40021400
 8004090:	40021800 	.word	0x40021800
 8004094:	40021c00 	.word	0x40021c00
 8004098:	40022000 	.word	0x40022000
 800409c:	40022400 	.word	0x40022400
 80040a0:	40013c00 	.word	0x40013c00

080040a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80040ae:	2300      	movs	r3, #0
 80040b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e0d9      	b.n	8004274 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80040c0:	2201      	movs	r2, #1
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	f040 80c9 	bne.w	800426e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80040dc:	4a6b      	ldr	r2, [pc, #428]	@ (800428c <HAL_GPIO_DeInit+0x1e8>)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	3302      	adds	r3, #2
 80040e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	220f      	movs	r2, #15
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	4013      	ands	r3, r2
 80040fc:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a63      	ldr	r2, [pc, #396]	@ (8004290 <HAL_GPIO_DeInit+0x1ec>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d037      	beq.n	8004176 <HAL_GPIO_DeInit+0xd2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a62      	ldr	r2, [pc, #392]	@ (8004294 <HAL_GPIO_DeInit+0x1f0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d031      	beq.n	8004172 <HAL_GPIO_DeInit+0xce>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a61      	ldr	r2, [pc, #388]	@ (8004298 <HAL_GPIO_DeInit+0x1f4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d02b      	beq.n	800416e <HAL_GPIO_DeInit+0xca>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a60      	ldr	r2, [pc, #384]	@ (800429c <HAL_GPIO_DeInit+0x1f8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d025      	beq.n	800416a <HAL_GPIO_DeInit+0xc6>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a5f      	ldr	r2, [pc, #380]	@ (80042a0 <HAL_GPIO_DeInit+0x1fc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01f      	beq.n	8004166 <HAL_GPIO_DeInit+0xc2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a5e      	ldr	r2, [pc, #376]	@ (80042a4 <HAL_GPIO_DeInit+0x200>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d019      	beq.n	8004162 <HAL_GPIO_DeInit+0xbe>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a5d      	ldr	r2, [pc, #372]	@ (80042a8 <HAL_GPIO_DeInit+0x204>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <HAL_GPIO_DeInit+0xba>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a5c      	ldr	r2, [pc, #368]	@ (80042ac <HAL_GPIO_DeInit+0x208>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00d      	beq.n	800415a <HAL_GPIO_DeInit+0xb6>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a5b      	ldr	r2, [pc, #364]	@ (80042b0 <HAL_GPIO_DeInit+0x20c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d007      	beq.n	8004156 <HAL_GPIO_DeInit+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a5a      	ldr	r2, [pc, #360]	@ (80042b4 <HAL_GPIO_DeInit+0x210>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <HAL_GPIO_DeInit+0xae>
 800414e:	2309      	movs	r3, #9
 8004150:	e012      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 8004152:	230a      	movs	r3, #10
 8004154:	e010      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 8004156:	2308      	movs	r3, #8
 8004158:	e00e      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 800415a:	2307      	movs	r3, #7
 800415c:	e00c      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 800415e:	2306      	movs	r3, #6
 8004160:	e00a      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 8004162:	2305      	movs	r3, #5
 8004164:	e008      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 8004166:	2304      	movs	r3, #4
 8004168:	e006      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 800416a:	2303      	movs	r3, #3
 800416c:	e004      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 800416e:	2302      	movs	r3, #2
 8004170:	e002      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <HAL_GPIO_DeInit+0xd4>
 8004176:	2300      	movs	r3, #0
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	f002 0203 	and.w	r2, r2, #3
 800417e:	0092      	lsls	r2, r2, #2
 8004180:	4093      	lsls	r3, r2
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	429a      	cmp	r2, r3
 8004186:	d132      	bne.n	80041ee <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004188:	4b4b      	ldr	r3, [pc, #300]	@ (80042b8 <HAL_GPIO_DeInit+0x214>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	43db      	mvns	r3, r3
 8004190:	4949      	ldr	r1, [pc, #292]	@ (80042b8 <HAL_GPIO_DeInit+0x214>)
 8004192:	4013      	ands	r3, r2
 8004194:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004196:	4b48      	ldr	r3, [pc, #288]	@ (80042b8 <HAL_GPIO_DeInit+0x214>)
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	43db      	mvns	r3, r3
 800419e:	4946      	ldr	r1, [pc, #280]	@ (80042b8 <HAL_GPIO_DeInit+0x214>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80041a4:	4b44      	ldr	r3, [pc, #272]	@ (80042b8 <HAL_GPIO_DeInit+0x214>)
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	43db      	mvns	r3, r3
 80041ac:	4942      	ldr	r1, [pc, #264]	@ (80042b8 <HAL_GPIO_DeInit+0x214>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80041b2:	4b41      	ldr	r3, [pc, #260]	@ (80042b8 <HAL_GPIO_DeInit+0x214>)
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	43db      	mvns	r3, r3
 80041ba:	493f      	ldr	r1, [pc, #252]	@ (80042b8 <HAL_GPIO_DeInit+0x214>)
 80041bc:	4013      	ands	r3, r2
 80041be:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	220f      	movs	r2, #15
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80041d0:	4a2e      	ldr	r2, [pc, #184]	@ (800428c <HAL_GPIO_DeInit+0x1e8>)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	089b      	lsrs	r3, r3, #2
 80041d6:	3302      	adds	r3, #2
 80041d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	43da      	mvns	r2, r3
 80041e0:	482a      	ldr	r0, [pc, #168]	@ (800428c <HAL_GPIO_DeInit+0x1e8>)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	089b      	lsrs	r3, r3, #2
 80041e6:	400a      	ands	r2, r1
 80041e8:	3302      	adds	r3, #2
 80041ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	2103      	movs	r1, #3
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	401a      	ands	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	08da      	lsrs	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3208      	adds	r2, #8
 800420c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	220f      	movs	r2, #15
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	08d2      	lsrs	r2, r2, #3
 8004224:	4019      	ands	r1, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3208      	adds	r2, #8
 800422a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	2103      	movs	r1, #3
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	43db      	mvns	r3, r3
 800423e:	401a      	ands	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	2101      	movs	r1, #1
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	fa01 f303 	lsl.w	r3, r1, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	401a      	ands	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	2103      	movs	r1, #3
 8004262:	fa01 f303 	lsl.w	r3, r1, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	401a      	ands	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	3301      	adds	r3, #1
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2b0f      	cmp	r3, #15
 8004278:	f67f af22 	bls.w	80040c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40013800 	.word	0x40013800
 8004290:	40020000 	.word	0x40020000
 8004294:	40020400 	.word	0x40020400
 8004298:	40020800 	.word	0x40020800
 800429c:	40020c00 	.word	0x40020c00
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40021400 	.word	0x40021400
 80042a8:	40021800 	.word	0x40021800
 80042ac:	40021c00 	.word	0x40021c00
 80042b0:	40022000 	.word	0x40022000
 80042b4:	40022400 	.word	0x40022400
 80042b8:	40013c00 	.word	0x40013c00

080042bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e08b      	b.n	80043e6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f8b5 	bl	8004452 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	@ 0x24
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800430c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800431c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d107      	bne.n	8004336 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	e006      	b.n	8004344 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004342:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d108      	bne.n	800435e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	e007      	b.n	800436e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800436c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6859      	ldr	r1, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4b1d      	ldr	r3, [pc, #116]	@ (80043f0 <HAL_I2C_Init+0x134>)
 800437a:	430b      	orrs	r3, r1
 800437c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800438c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69d9      	ldr	r1, [r3, #28]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	02008000 	.word	0x02008000

080043f4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e021      	b.n	800444a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2224      	movs	r2, #36	@ 0x24
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0201 	bic.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f821 	bl	8004466 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	461a      	mov	r2, r3
 800448a:	4603      	mov	r3, r0
 800448c:	817b      	strh	r3, [r7, #10]
 800448e:	460b      	mov	r3, r1
 8004490:	813b      	strh	r3, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b20      	cmp	r3, #32
 80044a0:	f040 80f9 	bne.w	8004696 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_I2C_Mem_Write+0x34>
 80044aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d105      	bne.n	80044bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0ed      	b.n	8004698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_I2C_Mem_Write+0x4e>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e0e6      	b.n	8004698 <HAL_I2C_Mem_Write+0x21c>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044d2:	f7fe fedf 	bl	8003294 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	2319      	movs	r3, #25
 80044de:	2201      	movs	r2, #1
 80044e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fad1 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0d1      	b.n	8004698 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2221      	movs	r2, #33	@ 0x21
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2240      	movs	r2, #64	@ 0x40
 8004500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a3a      	ldr	r2, [r7, #32]
 800450e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004514:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800451c:	88f8      	ldrh	r0, [r7, #6]
 800451e:	893a      	ldrh	r2, [r7, #8]
 8004520:	8979      	ldrh	r1, [r7, #10]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	4603      	mov	r3, r0
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 f9e1 	bl	80048f4 <I2C_RequestMemoryWrite>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0a9      	b.n	8004698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	2bff      	cmp	r3, #255	@ 0xff
 800454c:	d90e      	bls.n	800456c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	22ff      	movs	r2, #255	@ 0xff
 8004552:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004558:	b2da      	uxtb	r2, r3
 800455a:	8979      	ldrh	r1, [r7, #10]
 800455c:	2300      	movs	r3, #0
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fc55 	bl	8004e14 <I2C_TransferConfig>
 800456a:	e00f      	b.n	800458c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457a:	b2da      	uxtb	r2, r3
 800457c:	8979      	ldrh	r1, [r7, #10]
 800457e:	2300      	movs	r3, #0
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fc44 	bl	8004e14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fad4 	bl	8004b3e <I2C_WaitOnTXISFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e07b      	b.n	8004698 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d034      	beq.n	8004644 <HAL_I2C_Mem_Write+0x1c8>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d130      	bne.n	8004644 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e8:	2200      	movs	r2, #0
 80045ea:	2180      	movs	r1, #128	@ 0x80
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 fa4d 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e04d      	b.n	8004698 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	2bff      	cmp	r3, #255	@ 0xff
 8004604:	d90e      	bls.n	8004624 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	22ff      	movs	r2, #255	@ 0xff
 800460a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004610:	b2da      	uxtb	r2, r3
 8004612:	8979      	ldrh	r1, [r7, #10]
 8004614:	2300      	movs	r3, #0
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fbf9 	bl	8004e14 <I2C_TransferConfig>
 8004622:	e00f      	b.n	8004644 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004632:	b2da      	uxtb	r2, r3
 8004634:	8979      	ldrh	r1, [r7, #10]
 8004636:	2300      	movs	r3, #0
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fbe8 	bl	8004e14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d19e      	bne.n	800458c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 faba 	bl	8004bcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e01a      	b.n	8004698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2220      	movs	r2, #32
 8004668:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b0a      	ldr	r3, [pc, #40]	@ (80046a0 <HAL_I2C_Mem_Write+0x224>)
 8004676:	400b      	ands	r3, r1
 8004678:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	e000      	b.n	8004698 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004696:	2302      	movs	r3, #2
  }
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	fe00e800 	.word	0xfe00e800

080046a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	4608      	mov	r0, r1
 80046ae:	4611      	mov	r1, r2
 80046b0:	461a      	mov	r2, r3
 80046b2:	4603      	mov	r3, r0
 80046b4:	817b      	strh	r3, [r7, #10]
 80046b6:	460b      	mov	r3, r1
 80046b8:	813b      	strh	r3, [r7, #8]
 80046ba:	4613      	mov	r3, r2
 80046bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	f040 80fd 	bne.w	80048c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_I2C_Mem_Read+0x34>
 80046d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d105      	bne.n	80046e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0f1      	b.n	80048c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_I2C_Mem_Read+0x4e>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e0ea      	b.n	80048c8 <HAL_I2C_Mem_Read+0x224>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046fa:	f7fe fdcb 	bl	8003294 <HAL_GetTick>
 80046fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2319      	movs	r3, #25
 8004706:	2201      	movs	r2, #1
 8004708:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f9bd 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0d5      	b.n	80048c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2222      	movs	r2, #34	@ 0x22
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2240      	movs	r2, #64	@ 0x40
 8004728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a3a      	ldr	r2, [r7, #32]
 8004736:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800473c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004744:	88f8      	ldrh	r0, [r7, #6]
 8004746:	893a      	ldrh	r2, [r7, #8]
 8004748:	8979      	ldrh	r1, [r7, #10]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	4603      	mov	r3, r0
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f921 	bl	800499c <I2C_RequestMemoryRead>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0ad      	b.n	80048c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2bff      	cmp	r3, #255	@ 0xff
 8004774:	d90e      	bls.n	8004794 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004780:	b2da      	uxtb	r2, r3
 8004782:	8979      	ldrh	r1, [r7, #10]
 8004784:	4b52      	ldr	r3, [pc, #328]	@ (80048d0 <HAL_I2C_Mem_Read+0x22c>)
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fb41 	bl	8004e14 <I2C_TransferConfig>
 8004792:	e00f      	b.n	80047b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	8979      	ldrh	r1, [r7, #10]
 80047a6:	4b4a      	ldr	r3, [pc, #296]	@ (80048d0 <HAL_I2C_Mem_Read+0x22c>)
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fb30 	bl	8004e14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ba:	2200      	movs	r2, #0
 80047bc:	2104      	movs	r1, #4
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 f964 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e07c      	b.n	80048c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d034      	beq.n	8004874 <HAL_I2C_Mem_Read+0x1d0>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800480e:	2b00      	cmp	r3, #0
 8004810:	d130      	bne.n	8004874 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004818:	2200      	movs	r2, #0
 800481a:	2180      	movs	r1, #128	@ 0x80
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f935 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e04d      	b.n	80048c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	2bff      	cmp	r3, #255	@ 0xff
 8004834:	d90e      	bls.n	8004854 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004840:	b2da      	uxtb	r2, r3
 8004842:	8979      	ldrh	r1, [r7, #10]
 8004844:	2300      	movs	r3, #0
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 fae1 	bl	8004e14 <I2C_TransferConfig>
 8004852:	e00f      	b.n	8004874 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004862:	b2da      	uxtb	r2, r3
 8004864:	8979      	ldrh	r1, [r7, #10]
 8004866:	2300      	movs	r3, #0
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 fad0 	bl	8004e14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d19a      	bne.n	80047b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f9a2 	bl	8004bcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e01a      	b.n	80048c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2220      	movs	r2, #32
 8004898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6859      	ldr	r1, [r3, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b0b      	ldr	r3, [pc, #44]	@ (80048d4 <HAL_I2C_Mem_Read+0x230>)
 80048a6:	400b      	ands	r3, r1
 80048a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e000      	b.n	80048c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80048c6:	2302      	movs	r3, #2
  }
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	80002400 	.word	0x80002400
 80048d4:	fe00e800 	.word	0xfe00e800

080048d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e6:	b2db      	uxtb	r3, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	4608      	mov	r0, r1
 80048fe:	4611      	mov	r1, r2
 8004900:	461a      	mov	r2, r3
 8004902:	4603      	mov	r3, r0
 8004904:	817b      	strh	r3, [r7, #10]
 8004906:	460b      	mov	r3, r1
 8004908:	813b      	strh	r3, [r7, #8]
 800490a:	4613      	mov	r3, r2
 800490c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	b2da      	uxtb	r2, r3
 8004912:	8979      	ldrh	r1, [r7, #10]
 8004914:	4b20      	ldr	r3, [pc, #128]	@ (8004998 <I2C_RequestMemoryWrite+0xa4>)
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fa79 	bl	8004e14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	69b9      	ldr	r1, [r7, #24]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f909 	bl	8004b3e <I2C_WaitOnTXISFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e02c      	b.n	8004990 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d105      	bne.n	8004948 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800493c:	893b      	ldrh	r3, [r7, #8]
 800493e:	b2da      	uxtb	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	629a      	str	r2, [r3, #40]	@ 0x28
 8004946:	e015      	b.n	8004974 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004948:	893b      	ldrh	r3, [r7, #8]
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	b29b      	uxth	r3, r3
 800494e:	b2da      	uxtb	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	69b9      	ldr	r1, [r7, #24]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f8ef 	bl	8004b3e <I2C_WaitOnTXISFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e012      	b.n	8004990 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800496a:	893b      	ldrh	r3, [r7, #8]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2200      	movs	r2, #0
 800497c:	2180      	movs	r1, #128	@ 0x80
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f884 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	80002000 	.word	0x80002000

0800499c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	4608      	mov	r0, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	461a      	mov	r2, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	817b      	strh	r3, [r7, #10]
 80049ae:	460b      	mov	r3, r1
 80049b0:	813b      	strh	r3, [r7, #8]
 80049b2:	4613      	mov	r3, r2
 80049b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	8979      	ldrh	r1, [r7, #10]
 80049bc:	4b20      	ldr	r3, [pc, #128]	@ (8004a40 <I2C_RequestMemoryRead+0xa4>)
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	2300      	movs	r3, #0
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fa26 	bl	8004e14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	69b9      	ldr	r1, [r7, #24]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f8b6 	bl	8004b3e <I2C_WaitOnTXISFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e02c      	b.n	8004a36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d105      	bne.n	80049ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049e2:	893b      	ldrh	r3, [r7, #8]
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80049ec:	e015      	b.n	8004a1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049ee:	893b      	ldrh	r3, [r7, #8]
 80049f0:	0a1b      	lsrs	r3, r3, #8
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	69b9      	ldr	r1, [r7, #24]
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f89c 	bl	8004b3e <I2C_WaitOnTXISFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e012      	b.n	8004a36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a10:	893b      	ldrh	r3, [r7, #8]
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2200      	movs	r2, #0
 8004a22:	2140      	movs	r1, #64	@ 0x40
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f831 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	80002000 	.word	0x80002000

08004a44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d103      	bne.n	8004a62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d007      	beq.n	8004a80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	619a      	str	r2, [r3, #24]
  }
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a9c:	e03b      	b.n	8004b16 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	6839      	ldr	r1, [r7, #0]
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f8d6 	bl	8004c54 <I2C_IsErrorOccurred>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e041      	b.n	8004b36 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d02d      	beq.n	8004b16 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aba:	f7fe fbeb 	bl	8003294 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d122      	bne.n	8004b16 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d113      	bne.n	8004b16 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af2:	f043 0220 	orr.w	r2, r3, #32
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e00f      	b.n	8004b36 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699a      	ldr	r2, [r3, #24]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	bf0c      	ite	eq
 8004b26:	2301      	moveq	r3, #1
 8004b28:	2300      	movne	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d0b4      	beq.n	8004a9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b4a:	e033      	b.n	8004bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 f87f 	bl	8004c54 <I2C_IsErrorOccurred>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e031      	b.n	8004bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d025      	beq.n	8004bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b68:	f7fe fb94 	bl	8003294 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d302      	bcc.n	8004b7e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d11a      	bne.n	8004bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d013      	beq.n	8004bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e007      	b.n	8004bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d1c4      	bne.n	8004b4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bd8:	e02f      	b.n	8004c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f838 	bl	8004c54 <I2C_IsErrorOccurred>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e02d      	b.n	8004c4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bee:	f7fe fb51 	bl	8003294 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d11a      	bne.n	8004c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d013      	beq.n	8004c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c16:	f043 0220 	orr.w	r2, r3, #32
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e007      	b.n	8004c4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d1c8      	bne.n	8004bda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08a      	sub	sp, #40	@ 0x28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d068      	beq.n	8004d52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2210      	movs	r2, #16
 8004c86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c88:	e049      	b.n	8004d1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d045      	beq.n	8004d1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c92:	f7fe faff 	bl	8003294 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d302      	bcc.n	8004ca8 <I2C_IsErrorOccurred+0x54>
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d13a      	bne.n	8004d1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cca:	d121      	bne.n	8004d10 <I2C_IsErrorOccurred+0xbc>
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cd2:	d01d      	beq.n	8004d10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004cd4:	7cfb      	ldrb	r3, [r7, #19]
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d01a      	beq.n	8004d10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ce8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004cea:	f7fe fad3 	bl	8003294 <HAL_GetTick>
 8004cee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cf0:	e00e      	b.n	8004d10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004cf2:	f7fe facf 	bl	8003294 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b19      	cmp	r3, #25
 8004cfe:	d907      	bls.n	8004d10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	f043 0320 	orr.w	r3, r3, #32
 8004d06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004d0e:	e006      	b.n	8004d1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d1e9      	bne.n	8004cf2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d003      	beq.n	8004d34 <I2C_IsErrorOccurred+0xe0>
 8004d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0aa      	beq.n	8004c8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d103      	bne.n	8004d44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2220      	movs	r2, #32
 8004d42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	f043 0304 	orr.w	r3, r3, #4
 8004d4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00b      	beq.n	8004d7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	f043 0308 	orr.w	r3, r3, #8
 8004d8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00b      	beq.n	8004dc0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	f043 0302 	orr.w	r3, r3, #2
 8004dae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004db8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01c      	beq.n	8004e02 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f7ff fe3b 	bl	8004a44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6859      	ldr	r1, [r3, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8004e10 <I2C_IsErrorOccurred+0x1bc>)
 8004dda:	400b      	ands	r3, r1
 8004ddc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004e02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3728      	adds	r7, #40	@ 0x28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	fe00e800 	.word	0xfe00e800

08004e14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	817b      	strh	r3, [r7, #10]
 8004e22:	4613      	mov	r3, r2
 8004e24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e26:	897b      	ldrh	r3, [r7, #10]
 8004e28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e2c:	7a7b      	ldrb	r3, [r7, #9]
 8004e2e:	041b      	lsls	r3, r3, #16
 8004e30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	0d5b      	lsrs	r3, r3, #21
 8004e4e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004e52:	4b08      	ldr	r3, [pc, #32]	@ (8004e74 <I2C_TransferConfig+0x60>)
 8004e54:	430b      	orrs	r3, r1
 8004e56:	43db      	mvns	r3, r3
 8004e58:	ea02 0103 	and.w	r1, r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	03ff63ff 	.word	0x03ff63ff

08004e78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e7c:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a04      	ldr	r2, [pc, #16]	@ (8004e94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e86:	6013      	str	r3, [r2, #0]
}
 8004e88:	bf00      	nop
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40007000 	.word	0x40007000

08004e98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e291      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8087 	beq.w	8004fca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ebc:	4b96      	ldr	r3, [pc, #600]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 030c 	and.w	r3, r3, #12
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d00c      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec8:	4b93      	ldr	r3, [pc, #588]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 030c 	and.w	r3, r3, #12
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d112      	bne.n	8004efa <HAL_RCC_OscConfig+0x62>
 8004ed4:	4b90      	ldr	r3, [pc, #576]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004edc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ee0:	d10b      	bne.n	8004efa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee2:	4b8d      	ldr	r3, [pc, #564]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d06c      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x130>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d168      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e26b      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f02:	d106      	bne.n	8004f12 <HAL_RCC_OscConfig+0x7a>
 8004f04:	4b84      	ldr	r3, [pc, #528]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a83      	ldr	r2, [pc, #524]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	e02e      	b.n	8004f70 <HAL_RCC_OscConfig+0xd8>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10c      	bne.n	8004f34 <HAL_RCC_OscConfig+0x9c>
 8004f1a:	4b7f      	ldr	r3, [pc, #508]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a7e      	ldr	r2, [pc, #504]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	4b7c      	ldr	r3, [pc, #496]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a7b      	ldr	r2, [pc, #492]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	e01d      	b.n	8004f70 <HAL_RCC_OscConfig+0xd8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f3c:	d10c      	bne.n	8004f58 <HAL_RCC_OscConfig+0xc0>
 8004f3e:	4b76      	ldr	r3, [pc, #472]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a75      	ldr	r2, [pc, #468]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	4b73      	ldr	r3, [pc, #460]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a72      	ldr	r2, [pc, #456]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	e00b      	b.n	8004f70 <HAL_RCC_OscConfig+0xd8>
 8004f58:	4b6f      	ldr	r3, [pc, #444]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a6e      	ldr	r2, [pc, #440]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f62:	6013      	str	r3, [r2, #0]
 8004f64:	4b6c      	ldr	r3, [pc, #432]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a6b      	ldr	r2, [pc, #428]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d013      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7fe f98c 	bl	8003294 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f80:	f7fe f988 	bl	8003294 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b64      	cmp	r3, #100	@ 0x64
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e21f      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f92:	4b61      	ldr	r3, [pc, #388]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0f0      	beq.n	8004f80 <HAL_RCC_OscConfig+0xe8>
 8004f9e:	e014      	b.n	8004fca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa0:	f7fe f978 	bl	8003294 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fa8:	f7fe f974 	bl	8003294 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b64      	cmp	r3, #100	@ 0x64
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e20b      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fba:	4b57      	ldr	r3, [pc, #348]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x110>
 8004fc6:	e000      	b.n	8004fca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d069      	beq.n	80050aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fd6:	4b50      	ldr	r3, [pc, #320]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00b      	beq.n	8004ffa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fe2:	4b4d      	ldr	r3, [pc, #308]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 030c 	and.w	r3, r3, #12
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d11c      	bne.n	8005028 <HAL_RCC_OscConfig+0x190>
 8004fee:	4b4a      	ldr	r3, [pc, #296]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d116      	bne.n	8005028 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffa:	4b47      	ldr	r3, [pc, #284]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d005      	beq.n	8005012 <HAL_RCC_OscConfig+0x17a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d001      	beq.n	8005012 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e1df      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005012:	4b41      	ldr	r3, [pc, #260]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	493d      	ldr	r1, [pc, #244]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8005022:	4313      	orrs	r3, r2
 8005024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005026:	e040      	b.n	80050aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d023      	beq.n	8005078 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005030:	4b39      	ldr	r3, [pc, #228]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a38      	ldr	r2, [pc, #224]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fe f92a 	bl	8003294 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005044:	f7fe f926 	bl	8003294 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e1bd      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005056:	4b30      	ldr	r3, [pc, #192]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f0      	beq.n	8005044 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005062:	4b2d      	ldr	r3, [pc, #180]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4929      	ldr	r1, [pc, #164]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 8005072:	4313      	orrs	r3, r2
 8005074:	600b      	str	r3, [r1, #0]
 8005076:	e018      	b.n	80050aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005078:	4b27      	ldr	r3, [pc, #156]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a26      	ldr	r2, [pc, #152]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fe f906 	bl	8003294 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800508c:	f7fe f902 	bl	8003294 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e199      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509e:	4b1e      	ldr	r3, [pc, #120]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d038      	beq.n	8005128 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d019      	beq.n	80050f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050be:	4b16      	ldr	r3, [pc, #88]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 80050c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050c2:	4a15      	ldr	r2, [pc, #84]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ca:	f7fe f8e3 	bl	8003294 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d2:	f7fe f8df 	bl	8003294 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e176      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 80050e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x23a>
 80050f0:	e01a      	b.n	8005128 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050f2:	4b09      	ldr	r3, [pc, #36]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 80050f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f6:	4a08      	ldr	r2, [pc, #32]	@ (8005118 <HAL_RCC_OscConfig+0x280>)
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fe:	f7fe f8c9 	bl	8003294 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005104:	e00a      	b.n	800511c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005106:	f7fe f8c5 	bl	8003294 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d903      	bls.n	800511c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e15c      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
 8005118:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800511c:	4b91      	ldr	r3, [pc, #580]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 800511e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1ee      	bne.n	8005106 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80a4 	beq.w	800527e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005136:	4b8b      	ldr	r3, [pc, #556]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10d      	bne.n	800515e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005142:	4b88      	ldr	r3, [pc, #544]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	4a87      	ldr	r2, [pc, #540]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800514c:	6413      	str	r3, [r2, #64]	@ 0x40
 800514e:	4b85      	ldr	r3, [pc, #532]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005156:	60bb      	str	r3, [r7, #8]
 8005158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800515a:	2301      	movs	r3, #1
 800515c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800515e:	4b82      	ldr	r3, [pc, #520]	@ (8005368 <HAL_RCC_OscConfig+0x4d0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005166:	2b00      	cmp	r3, #0
 8005168:	d118      	bne.n	800519c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800516a:	4b7f      	ldr	r3, [pc, #508]	@ (8005368 <HAL_RCC_OscConfig+0x4d0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a7e      	ldr	r2, [pc, #504]	@ (8005368 <HAL_RCC_OscConfig+0x4d0>)
 8005170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005176:	f7fe f88d 	bl	8003294 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800517e:	f7fe f889 	bl	8003294 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b64      	cmp	r3, #100	@ 0x64
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e120      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005190:	4b75      	ldr	r3, [pc, #468]	@ (8005368 <HAL_RCC_OscConfig+0x4d0>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d106      	bne.n	80051b2 <HAL_RCC_OscConfig+0x31a>
 80051a4:	4b6f      	ldr	r3, [pc, #444]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a8:	4a6e      	ldr	r2, [pc, #440]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b0:	e02d      	b.n	800520e <HAL_RCC_OscConfig+0x376>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10c      	bne.n	80051d4 <HAL_RCC_OscConfig+0x33c>
 80051ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051be:	4a69      	ldr	r2, [pc, #420]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c6:	4b67      	ldr	r3, [pc, #412]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ca:	4a66      	ldr	r2, [pc, #408]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80051cc:	f023 0304 	bic.w	r3, r3, #4
 80051d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051d2:	e01c      	b.n	800520e <HAL_RCC_OscConfig+0x376>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2b05      	cmp	r3, #5
 80051da:	d10c      	bne.n	80051f6 <HAL_RCC_OscConfig+0x35e>
 80051dc:	4b61      	ldr	r3, [pc, #388]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80051de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e0:	4a60      	ldr	r2, [pc, #384]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80051e2:	f043 0304 	orr.w	r3, r3, #4
 80051e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051e8:	4b5e      	ldr	r3, [pc, #376]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ec:	4a5d      	ldr	r2, [pc, #372]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051f4:	e00b      	b.n	800520e <HAL_RCC_OscConfig+0x376>
 80051f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80051f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fa:	4a5a      	ldr	r2, [pc, #360]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	6713      	str	r3, [r2, #112]	@ 0x70
 8005202:	4b58      	ldr	r3, [pc, #352]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005206:	4a57      	ldr	r2, [pc, #348]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005208:	f023 0304 	bic.w	r3, r3, #4
 800520c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d015      	beq.n	8005242 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005216:	f7fe f83d 	bl	8003294 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521c:	e00a      	b.n	8005234 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800521e:	f7fe f839 	bl	8003294 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800522c:	4293      	cmp	r3, r2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e0ce      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005234:	4b4b      	ldr	r3, [pc, #300]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0ee      	beq.n	800521e <HAL_RCC_OscConfig+0x386>
 8005240:	e014      	b.n	800526c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005242:	f7fe f827 	bl	8003294 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005248:	e00a      	b.n	8005260 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524a:	f7fe f823 	bl	8003294 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005258:	4293      	cmp	r3, r2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e0b8      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005260:	4b40      	ldr	r3, [pc, #256]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1ee      	bne.n	800524a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800526c:	7dfb      	ldrb	r3, [r7, #23]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d105      	bne.n	800527e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005272:	4b3c      	ldr	r3, [pc, #240]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	4a3b      	ldr	r2, [pc, #236]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005278:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800527c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 80a4 	beq.w	80053d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005288:	4b36      	ldr	r3, [pc, #216]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 030c 	and.w	r3, r3, #12
 8005290:	2b08      	cmp	r3, #8
 8005292:	d06b      	beq.n	800536c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d149      	bne.n	8005330 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529c:	4b31      	ldr	r3, [pc, #196]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a30      	ldr	r2, [pc, #192]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80052a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a8:	f7fd fff4 	bl	8003294 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b0:	f7fd fff0 	bl	8003294 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e087      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c2:	4b28      	ldr	r3, [pc, #160]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69da      	ldr	r2, [r3, #28]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052dc:	019b      	lsls	r3, r3, #6
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	3b01      	subs	r3, #1
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f0:	061b      	lsls	r3, r3, #24
 80052f2:	4313      	orrs	r3, r2
 80052f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80052f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80052fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052fc:	4b19      	ldr	r3, [pc, #100]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a18      	ldr	r2, [pc, #96]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005302:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7fd ffc4 	bl	8003294 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005310:	f7fd ffc0 	bl	8003294 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e057      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005322:	4b10      	ldr	r3, [pc, #64]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0x478>
 800532e:	e04f      	b.n	80053d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005330:	4b0c      	ldr	r3, [pc, #48]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a0b      	ldr	r2, [pc, #44]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005336:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800533a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fd ffaa 	bl	8003294 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005344:	f7fd ffa6 	bl	8003294 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e03d      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005356:	4b03      	ldr	r3, [pc, #12]	@ (8005364 <HAL_RCC_OscConfig+0x4cc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0x4ac>
 8005362:	e035      	b.n	80053d0 <HAL_RCC_OscConfig+0x538>
 8005364:	40023800 	.word	0x40023800
 8005368:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800536c:	4b1b      	ldr	r3, [pc, #108]	@ (80053dc <HAL_RCC_OscConfig+0x544>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d028      	beq.n	80053cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005384:	429a      	cmp	r2, r3
 8005386:	d121      	bne.n	80053cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005392:	429a      	cmp	r2, r3
 8005394:	d11a      	bne.n	80053cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800539c:	4013      	ands	r3, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d111      	bne.n	80053cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b2:	085b      	lsrs	r3, r3, #1
 80053b4:	3b01      	subs	r3, #1
 80053b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d107      	bne.n	80053cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d001      	beq.n	80053d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40023800 	.word	0x40023800

080053e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0d0      	b.n	800559a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053f8:	4b6a      	ldr	r3, [pc, #424]	@ (80055a4 <HAL_RCC_ClockConfig+0x1c4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d910      	bls.n	8005428 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005406:	4b67      	ldr	r3, [pc, #412]	@ (80055a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f023 020f 	bic.w	r2, r3, #15
 800540e:	4965      	ldr	r1, [pc, #404]	@ (80055a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	4313      	orrs	r3, r2
 8005414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005416:	4b63      	ldr	r3, [pc, #396]	@ (80055a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d001      	beq.n	8005428 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0b8      	b.n	800559a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d020      	beq.n	8005476 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005440:	4b59      	ldr	r3, [pc, #356]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	4a58      	ldr	r2, [pc, #352]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005446:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800544a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005458:	4b53      	ldr	r3, [pc, #332]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	4a52      	ldr	r2, [pc, #328]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 800545e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005462:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005464:	4b50      	ldr	r3, [pc, #320]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	494d      	ldr	r1, [pc, #308]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005472:	4313      	orrs	r3, r2
 8005474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d040      	beq.n	8005504 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d107      	bne.n	800549a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548a:	4b47      	ldr	r3, [pc, #284]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d115      	bne.n	80054c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e07f      	b.n	800559a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d107      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a2:	4b41      	ldr	r3, [pc, #260]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e073      	b.n	800559a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b2:	4b3d      	ldr	r3, [pc, #244]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e06b      	b.n	800559a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054c2:	4b39      	ldr	r3, [pc, #228]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f023 0203 	bic.w	r2, r3, #3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	4936      	ldr	r1, [pc, #216]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d4:	f7fd fede 	bl	8003294 <HAL_GetTick>
 80054d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054da:	e00a      	b.n	80054f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054dc:	f7fd feda 	bl	8003294 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e053      	b.n	800559a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f2:	4b2d      	ldr	r3, [pc, #180]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 020c 	and.w	r2, r3, #12
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	429a      	cmp	r2, r3
 8005502:	d1eb      	bne.n	80054dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005504:	4b27      	ldr	r3, [pc, #156]	@ (80055a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d210      	bcs.n	8005534 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005512:	4b24      	ldr	r3, [pc, #144]	@ (80055a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f023 020f 	bic.w	r2, r3, #15
 800551a:	4922      	ldr	r1, [pc, #136]	@ (80055a4 <HAL_RCC_ClockConfig+0x1c4>)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	4313      	orrs	r3, r2
 8005520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005522:	4b20      	ldr	r3, [pc, #128]	@ (80055a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d001      	beq.n	8005534 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e032      	b.n	800559a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005540:	4b19      	ldr	r3, [pc, #100]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4916      	ldr	r1, [pc, #88]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 800554e:	4313      	orrs	r3, r2
 8005550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800555e:	4b12      	ldr	r3, [pc, #72]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	490e      	ldr	r1, [pc, #56]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 800556e:	4313      	orrs	r3, r2
 8005570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005572:	f000 f821 	bl	80055b8 <HAL_RCC_GetSysClockFreq>
 8005576:	4602      	mov	r2, r0
 8005578:	4b0b      	ldr	r3, [pc, #44]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c8>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	490a      	ldr	r1, [pc, #40]	@ (80055ac <HAL_RCC_ClockConfig+0x1cc>)
 8005584:	5ccb      	ldrb	r3, [r1, r3]
 8005586:	fa22 f303 	lsr.w	r3, r2, r3
 800558a:	4a09      	ldr	r2, [pc, #36]	@ (80055b0 <HAL_RCC_ClockConfig+0x1d0>)
 800558c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800558e:	4b09      	ldr	r3, [pc, #36]	@ (80055b4 <HAL_RCC_ClockConfig+0x1d4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f7fd fe3a 	bl	800320c <HAL_InitTick>

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40023c00 	.word	0x40023c00
 80055a8:	40023800 	.word	0x40023800
 80055ac:	08007bcc 	.word	0x08007bcc
 80055b0:	20000000 	.word	0x20000000
 80055b4:	20000034 	.word	0x20000034

080055b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055bc:	b090      	sub	sp, #64	@ 0x40
 80055be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80055c4:	2300      	movs	r3, #0
 80055c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055c8:	2300      	movs	r3, #0
 80055ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055d0:	4b59      	ldr	r3, [pc, #356]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x180>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 030c 	and.w	r3, r3, #12
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d00d      	beq.n	80055f8 <HAL_RCC_GetSysClockFreq+0x40>
 80055dc:	2b08      	cmp	r3, #8
 80055de:	f200 80a1 	bhi.w	8005724 <HAL_RCC_GetSysClockFreq+0x16c>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <HAL_RCC_GetSysClockFreq+0x34>
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d003      	beq.n	80055f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80055ea:	e09b      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055ec:	4b53      	ldr	r3, [pc, #332]	@ (800573c <HAL_RCC_GetSysClockFreq+0x184>)
 80055ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055f0:	e09b      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055f2:	4b53      	ldr	r3, [pc, #332]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x188>)
 80055f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055f6:	e098      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055f8:	4b4f      	ldr	r3, [pc, #316]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x180>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005600:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005602:	4b4d      	ldr	r3, [pc, #308]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x180>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d028      	beq.n	8005660 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800560e:	4b4a      	ldr	r3, [pc, #296]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x180>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	099b      	lsrs	r3, r3, #6
 8005614:	2200      	movs	r2, #0
 8005616:	623b      	str	r3, [r7, #32]
 8005618:	627a      	str	r2, [r7, #36]	@ 0x24
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005620:	2100      	movs	r1, #0
 8005622:	4b47      	ldr	r3, [pc, #284]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x188>)
 8005624:	fb03 f201 	mul.w	r2, r3, r1
 8005628:	2300      	movs	r3, #0
 800562a:	fb00 f303 	mul.w	r3, r0, r3
 800562e:	4413      	add	r3, r2
 8005630:	4a43      	ldr	r2, [pc, #268]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x188>)
 8005632:	fba0 1202 	umull	r1, r2, r0, r2
 8005636:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005638:	460a      	mov	r2, r1
 800563a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800563c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800563e:	4413      	add	r3, r2
 8005640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005644:	2200      	movs	r2, #0
 8005646:	61bb      	str	r3, [r7, #24]
 8005648:	61fa      	str	r2, [r7, #28]
 800564a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800564e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005652:	f7fa fdd9 	bl	8000208 <__aeabi_uldivmod>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4613      	mov	r3, r2
 800565c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800565e:	e053      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005660:	4b35      	ldr	r3, [pc, #212]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x180>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	099b      	lsrs	r3, r3, #6
 8005666:	2200      	movs	r2, #0
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	617a      	str	r2, [r7, #20]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005672:	f04f 0b00 	mov.w	fp, #0
 8005676:	4652      	mov	r2, sl
 8005678:	465b      	mov	r3, fp
 800567a:	f04f 0000 	mov.w	r0, #0
 800567e:	f04f 0100 	mov.w	r1, #0
 8005682:	0159      	lsls	r1, r3, #5
 8005684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005688:	0150      	lsls	r0, r2, #5
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	ebb2 080a 	subs.w	r8, r2, sl
 8005692:	eb63 090b 	sbc.w	r9, r3, fp
 8005696:	f04f 0200 	mov.w	r2, #0
 800569a:	f04f 0300 	mov.w	r3, #0
 800569e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056aa:	ebb2 0408 	subs.w	r4, r2, r8
 80056ae:	eb63 0509 	sbc.w	r5, r3, r9
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	00eb      	lsls	r3, r5, #3
 80056bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056c0:	00e2      	lsls	r2, r4, #3
 80056c2:	4614      	mov	r4, r2
 80056c4:	461d      	mov	r5, r3
 80056c6:	eb14 030a 	adds.w	r3, r4, sl
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	eb45 030b 	adc.w	r3, r5, fp
 80056d0:	607b      	str	r3, [r7, #4]
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056de:	4629      	mov	r1, r5
 80056e0:	028b      	lsls	r3, r1, #10
 80056e2:	4621      	mov	r1, r4
 80056e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056e8:	4621      	mov	r1, r4
 80056ea:	028a      	lsls	r2, r1, #10
 80056ec:	4610      	mov	r0, r2
 80056ee:	4619      	mov	r1, r3
 80056f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f2:	2200      	movs	r2, #0
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	60fa      	str	r2, [r7, #12]
 80056f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056fc:	f7fa fd84 	bl	8000208 <__aeabi_uldivmod>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4613      	mov	r3, r2
 8005706:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005708:	4b0b      	ldr	r3, [pc, #44]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x180>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	0c1b      	lsrs	r3, r3, #16
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	3301      	adds	r3, #1
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005718:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005722:	e002      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005724:	4b05      	ldr	r3, [pc, #20]	@ (800573c <HAL_RCC_GetSysClockFreq+0x184>)
 8005726:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800572c:	4618      	mov	r0, r3
 800572e:	3740      	adds	r7, #64	@ 0x40
 8005730:	46bd      	mov	sp, r7
 8005732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005736:	bf00      	nop
 8005738:	40023800 	.word	0x40023800
 800573c:	00f42400 	.word	0x00f42400
 8005740:	017d7840 	.word	0x017d7840

08005744 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005748:	4b03      	ldr	r3, [pc, #12]	@ (8005758 <HAL_RCC_GetHCLKFreq+0x14>)
 800574a:	681b      	ldr	r3, [r3, #0]
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	20000000 	.word	0x20000000

0800575c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005760:	f7ff fff0 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 8005764:	4602      	mov	r2, r0
 8005766:	4b05      	ldr	r3, [pc, #20]	@ (800577c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	0a9b      	lsrs	r3, r3, #10
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	4903      	ldr	r1, [pc, #12]	@ (8005780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005772:	5ccb      	ldrb	r3, [r1, r3]
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005778:	4618      	mov	r0, r3
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40023800 	.word	0x40023800
 8005780:	08007bdc 	.word	0x08007bdc

08005784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005788:	f7ff ffdc 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 800578c:	4602      	mov	r2, r0
 800578e:	4b05      	ldr	r3, [pc, #20]	@ (80057a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	0b5b      	lsrs	r3, r3, #13
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	4903      	ldr	r1, [pc, #12]	@ (80057a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800579a:	5ccb      	ldrb	r3, [r1, r3]
 800579c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40023800 	.word	0x40023800
 80057a8:	08007bdc 	.word	0x08007bdc

080057ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d012      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057d4:	4b69      	ldr	r3, [pc, #420]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	4a68      	ldr	r2, [pc, #416]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80057de:	6093      	str	r3, [r2, #8]
 80057e0:	4b66      	ldr	r3, [pc, #408]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e8:	4964      	ldr	r1, [pc, #400]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80057f6:	2301      	movs	r3, #1
 80057f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d017      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005806:	4b5d      	ldr	r3, [pc, #372]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800580c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005814:	4959      	ldr	r1, [pc, #356]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005820:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005824:	d101      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005826:	2301      	movs	r3, #1
 8005828:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005832:	2301      	movs	r3, #1
 8005834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d017      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005842:	4b4e      	ldr	r3, [pc, #312]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005844:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005848:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005850:	494a      	ldr	r1, [pc, #296]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005860:	d101      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005862:	2301      	movs	r3, #1
 8005864:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800586e:	2301      	movs	r3, #1
 8005870:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800587e:	2301      	movs	r3, #1
 8005880:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 808b 	beq.w	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005890:	4b3a      	ldr	r3, [pc, #232]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005894:	4a39      	ldr	r2, [pc, #228]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800589a:	6413      	str	r3, [r2, #64]	@ 0x40
 800589c:	4b37      	ldr	r3, [pc, #220]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058a8:	4b35      	ldr	r3, [pc, #212]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a34      	ldr	r2, [pc, #208]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b4:	f7fd fcee 	bl	8003294 <HAL_GetTick>
 80058b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058ba:	e008      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058bc:	f7fd fcea 	bl	8003294 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b64      	cmp	r3, #100	@ 0x64
 80058c8:	d901      	bls.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e357      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0f0      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058da:	4b28      	ldr	r3, [pc, #160]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d035      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d02e      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058f8:	4b20      	ldr	r3, [pc, #128]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005900:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005902:	4b1e      	ldr	r3, [pc, #120]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005906:	4a1d      	ldr	r2, [pc, #116]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800590c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800590e:	4b1b      	ldr	r3, [pc, #108]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005912:	4a1a      	ldr	r2, [pc, #104]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005918:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800591a:	4a18      	ldr	r2, [pc, #96]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005920:	4b16      	ldr	r3, [pc, #88]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b01      	cmp	r3, #1
 800592a:	d114      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592c:	f7fd fcb2 	bl	8003294 <HAL_GetTick>
 8005930:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005932:	e00a      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005934:	f7fd fcae 	bl	8003294 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e319      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800594a:	4b0c      	ldr	r3, [pc, #48]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800594c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0ee      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800595e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005962:	d111      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005964:	4b05      	ldr	r3, [pc, #20]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005970:	4b04      	ldr	r3, [pc, #16]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005972:	400b      	ands	r3, r1
 8005974:	4901      	ldr	r1, [pc, #4]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005976:	4313      	orrs	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
 800597a:	e00b      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800597c:	40023800 	.word	0x40023800
 8005980:	40007000 	.word	0x40007000
 8005984:	0ffffcff 	.word	0x0ffffcff
 8005988:	4baa      	ldr	r3, [pc, #680]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	4aa9      	ldr	r2, [pc, #676]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800598e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005992:	6093      	str	r3, [r2, #8]
 8005994:	4ba7      	ldr	r3, [pc, #668]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005996:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a0:	49a4      	ldr	r1, [pc, #656]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d010      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059b2:	4ba0      	ldr	r3, [pc, #640]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059b8:	4a9e      	ldr	r2, [pc, #632]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80059c2:	4b9c      	ldr	r3, [pc, #624]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059cc:	4999      	ldr	r1, [pc, #612]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059e0:	4b94      	ldr	r3, [pc, #592]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059ee:	4991      	ldr	r1, [pc, #580]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a02:	4b8c      	ldr	r3, [pc, #560]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a10:	4988      	ldr	r1, [pc, #544]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a24:	4b83      	ldr	r3, [pc, #524]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a32:	4980      	ldr	r1, [pc, #512]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a46:	4b7b      	ldr	r3, [pc, #492]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a54:	4977      	ldr	r1, [pc, #476]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a68:	4b72      	ldr	r3, [pc, #456]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a6e:	f023 0203 	bic.w	r2, r3, #3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a76:	496f      	ldr	r1, [pc, #444]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a90:	f023 020c 	bic.w	r2, r3, #12
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a98:	4966      	ldr	r1, [pc, #408]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aac:	4b61      	ldr	r3, [pc, #388]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aba:	495e      	ldr	r1, [pc, #376]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ace:	4b59      	ldr	r3, [pc, #356]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005adc:	4955      	ldr	r1, [pc, #340]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005af0:	4b50      	ldr	r3, [pc, #320]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afe:	494d      	ldr	r1, [pc, #308]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b12:	4b48      	ldr	r3, [pc, #288]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b18:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b20:	4944      	ldr	r1, [pc, #272]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005b34:	4b3f      	ldr	r3, [pc, #252]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b42:	493c      	ldr	r1, [pc, #240]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005b56:	4b37      	ldr	r3, [pc, #220]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b64:	4933      	ldr	r1, [pc, #204]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b78:	4b2e      	ldr	r3, [pc, #184]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b86:	492b      	ldr	r1, [pc, #172]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d011      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b9a:	4b26      	ldr	r3, [pc, #152]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ba8:	4922      	ldr	r1, [pc, #136]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bb8:	d101      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bda:	4b16      	ldr	r3, [pc, #88]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005be8:	4912      	ldr	r1, [pc, #72]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00b      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c02:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c0c:	4909      	ldr	r1, [pc, #36]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d006      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80d9 	beq.w	8005dda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c28:	4b02      	ldr	r3, [pc, #8]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a01      	ldr	r2, [pc, #4]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c32:	e001      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005c34:	40023800 	.word	0x40023800
 8005c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c3a:	f7fd fb2b 	bl	8003294 <HAL_GetTick>
 8005c3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c40:	e008      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c42:	f7fd fb27 	bl	8003294 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b64      	cmp	r3, #100	@ 0x64
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e194      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c54:	4b6c      	ldr	r3, [pc, #432]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1f0      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d021      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11d      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c74:	4b64      	ldr	r3, [pc, #400]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c7a:	0c1b      	lsrs	r3, r3, #16
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c82:	4b61      	ldr	r3, [pc, #388]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c88:	0e1b      	lsrs	r3, r3, #24
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	019a      	lsls	r2, r3, #6
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	041b      	lsls	r3, r3, #16
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	061b      	lsls	r3, r3, #24
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	071b      	lsls	r3, r3, #28
 8005ca8:	4957      	ldr	r1, [pc, #348]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cc4:	d00a      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d02e      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cda:	d129      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ce2:	0c1b      	lsrs	r3, r3, #16
 8005ce4:	f003 0303 	and.w	r3, r3, #3
 8005ce8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cea:	4b47      	ldr	r3, [pc, #284]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cf0:	0f1b      	lsrs	r3, r3, #28
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	019a      	lsls	r2, r3, #6
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	041b      	lsls	r3, r3, #16
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	061b      	lsls	r3, r3, #24
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	071b      	lsls	r3, r3, #28
 8005d10:	493d      	ldr	r1, [pc, #244]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d18:	4b3b      	ldr	r3, [pc, #236]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d1e:	f023 021f 	bic.w	r2, r3, #31
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d26:	3b01      	subs	r3, #1
 8005d28:	4937      	ldr	r1, [pc, #220]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01d      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d3c:	4b32      	ldr	r3, [pc, #200]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d42:	0e1b      	lsrs	r3, r3, #24
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d50:	0f1b      	lsrs	r3, r3, #28
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	019a      	lsls	r2, r3, #6
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	041b      	lsls	r3, r3, #16
 8005d64:	431a      	orrs	r2, r3
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	061b      	lsls	r3, r3, #24
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	071b      	lsls	r3, r3, #28
 8005d70:	4925      	ldr	r1, [pc, #148]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d011      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	019a      	lsls	r2, r3, #6
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	041b      	lsls	r3, r3, #16
 8005d90:	431a      	orrs	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	061b      	lsls	r3, r3, #24
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	071b      	lsls	r3, r3, #28
 8005da0:	4919      	ldr	r1, [pc, #100]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005da8:	4b17      	ldr	r3, [pc, #92]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a16      	ldr	r2, [pc, #88]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db4:	f7fd fa6e 	bl	8003294 <HAL_GetTick>
 8005db8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dba:	e008      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005dbc:	f7fd fa6a 	bl	8003294 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b64      	cmp	r3, #100	@ 0x64
 8005dc8:	d901      	bls.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e0d7      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dce:	4b0e      	ldr	r3, [pc, #56]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0f0      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	f040 80cd 	bne.w	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005de2:	4b09      	ldr	r3, [pc, #36]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a08      	ldr	r2, [pc, #32]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005de8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dee:	f7fd fa51 	bl	8003294 <HAL_GetTick>
 8005df2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005df4:	e00a      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005df6:	f7fd fa4d 	bl	8003294 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b64      	cmp	r3, #100	@ 0x64
 8005e02:	d903      	bls.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e0ba      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005e08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e0c:	4b5e      	ldr	r3, [pc, #376]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e18:	d0ed      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d009      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d02e      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d12a      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e42:	4b51      	ldr	r3, [pc, #324]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e48:	0c1b      	lsrs	r3, r3, #16
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e50:	4b4d      	ldr	r3, [pc, #308]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e56:	0f1b      	lsrs	r3, r3, #28
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	019a      	lsls	r2, r3, #6
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	041b      	lsls	r3, r3, #16
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	061b      	lsls	r3, r3, #24
 8005e70:	431a      	orrs	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	071b      	lsls	r3, r3, #28
 8005e76:	4944      	ldr	r1, [pc, #272]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e7e:	4b42      	ldr	r3, [pc, #264]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e84:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	493d      	ldr	r1, [pc, #244]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d022      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ea8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eac:	d11d      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005eae:	4b36      	ldr	r3, [pc, #216]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb4:	0e1b      	lsrs	r3, r3, #24
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ebc:	4b32      	ldr	r3, [pc, #200]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec2:	0f1b      	lsrs	r3, r3, #28
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	019a      	lsls	r2, r3, #6
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	041b      	lsls	r3, r3, #16
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	061b      	lsls	r3, r3, #24
 8005edc:	431a      	orrs	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	071b      	lsls	r3, r3, #28
 8005ee2:	4929      	ldr	r1, [pc, #164]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d028      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ef6:	4b24      	ldr	r3, [pc, #144]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efc:	0e1b      	lsrs	r3, r3, #24
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f04:	4b20      	ldr	r3, [pc, #128]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f0a:	0c1b      	lsrs	r3, r3, #16
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	019a      	lsls	r2, r3, #6
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	041b      	lsls	r3, r3, #16
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	061b      	lsls	r3, r3, #24
 8005f22:	431a      	orrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	071b      	lsls	r3, r3, #28
 8005f2a:	4917      	ldr	r1, [pc, #92]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f32:	4b15      	ldr	r3, [pc, #84]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f40:	4911      	ldr	r1, [pc, #68]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f48:	4b0f      	ldr	r3, [pc, #60]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f54:	f7fd f99e 	bl	8003294 <HAL_GetTick>
 8005f58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f5c:	f7fd f99a 	bl	8003294 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b64      	cmp	r3, #100	@ 0x64
 8005f68:	d901      	bls.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e007      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f6e:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f7a:	d1ef      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3720      	adds	r7, #32
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	40023800 	.word	0x40023800

08005f8c <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a80      	ldr	r2, [pc, #512]	@ (800619c <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8005f9c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8005f9e:	4b80      	ldr	r3, [pc, #512]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fa4:	099b      	lsrs	r3, r3, #6
 8005fa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005fae:	4b7c      	ldr	r3, [pc, #496]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fb4:	0c1b      	lsrs	r3, r3, #16
 8005fb6:	f003 0203 	and.w	r2, r3, #3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fbe:	4b78      	ldr	r3, [pc, #480]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fc4:	0e1b      	lsrs	r3, r3, #24
 8005fc6:	f003 020f 	and.w	r2, r3, #15
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fce:	4b74      	ldr	r3, [pc, #464]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fd4:	0f1b      	lsrs	r3, r3, #28
 8005fd6:	f003 0207 	and.w	r2, r3, #7
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8005fde:	4b70      	ldr	r3, [pc, #448]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe4:	099b      	lsrs	r3, r3, #6
 8005fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005fee:	4b6c      	ldr	r3, [pc, #432]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8005ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff4:	0c1b      	lsrs	r3, r3, #16
 8005ff6:	f003 0203 	and.w	r2, r3, #3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ffe:	4b68      	ldr	r3, [pc, #416]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006004:	0e1b      	lsrs	r3, r3, #24
 8006006:	f003 020f 	and.w	r2, r3, #15
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800600e:	4b64      	ldr	r3, [pc, #400]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006014:	0f1b      	lsrs	r3, r3, #28
 8006016:	f003 0207 	and.w	r2, r3, #7
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800601e:	4b60      	ldr	r3, [pc, #384]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006024:	f003 021f 	and.w	r2, r3, #31
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800602c:	4b5c      	ldr	r3, [pc, #368]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800602e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	f003 021f 	and.w	r2, r3, #31
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800603c:	4b58      	ldr	r3, [pc, #352]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800603e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006042:	0c1b      	lsrs	r3, r3, #16
 8006044:	f003 0203 	and.w	r2, r3, #3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800604c:	4b54      	ldr	r3, [pc, #336]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800604e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006052:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800605a:	4b51      	ldr	r3, [pc, #324]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800605c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006060:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8006068:	4b4d      	ldr	r3, [pc, #308]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8006074:	4b4a      	ldr	r3, [pc, #296]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8006082:	4b47      	ldr	r3, [pc, #284]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006088:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8006090:	4b43      	ldr	r3, [pc, #268]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006096:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800609e:	4b40      	ldr	r3, [pc, #256]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80060a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a4:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80060ac:	4b3c      	ldr	r3, [pc, #240]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80060ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b2:	f003 0203 	and.w	r2, r3, #3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80060ba:	4b39      	ldr	r3, [pc, #228]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80060bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c0:	f003 020c 	and.w	r2, r3, #12
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80060c8:	4b35      	ldr	r3, [pc, #212]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80060ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ce:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80060d6:	4b32      	ldr	r3, [pc, #200]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80060d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060dc:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80060e4:	4b2e      	ldr	r3, [pc, #184]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80060e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ea:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80060f2:	4b2b      	ldr	r3, [pc, #172]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80060f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f8:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8006100:	4b27      	ldr	r3, [pc, #156]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006106:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800610e:	4b24      	ldr	r3, [pc, #144]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006114:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800611c:	4b20      	ldr	r3, [pc, #128]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800611e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006122:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800612a:	4b1d      	ldr	r3, [pc, #116]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800612c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006130:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8006138:	4b19      	ldr	r3, [pc, #100]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800613a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800613e:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006146:	4b16      	ldr	r3, [pc, #88]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800614c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006156:	4b12      	ldr	r3, [pc, #72]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800615e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006160:	4b0f      	ldr	r3, [pc, #60]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006164:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8006170:	4b0b      	ldr	r3, [pc, #44]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006172:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006176:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d103      	bne.n	8006186 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8006184:	e003      	b.n	800618e <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800618c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800618e:	bf00      	nop
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	00fffff1 	.word	0x00fffff1
 80061a0:	40023800 	.word	0x40023800

080061a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80061c2:	f040 808d 	bne.w	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 80061c6:	4b93      	ldr	r3, [pc, #588]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061cc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80061d4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061dc:	d07c      	beq.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061e4:	d87b      	bhi.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d004      	beq.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061f2:	d039      	beq.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80061f4:	e073      	b.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80061f6:	4b87      	ldr	r3, [pc, #540]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d108      	bne.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006202:	4b84      	ldr	r3, [pc, #528]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800620a:	4a83      	ldr	r2, [pc, #524]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	e007      	b.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006214:	4b7f      	ldr	r3, [pc, #508]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800621c:	4a7f      	ldr	r2, [pc, #508]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800621e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006222:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006224:	4b7b      	ldr	r3, [pc, #492]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800622a:	0e1b      	lsrs	r3, r3, #24
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006232:	4b78      	ldr	r3, [pc, #480]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006238:	099b      	lsrs	r3, r3, #6
 800623a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	fb03 f202 	mul.w	r2, r3, r2
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	fbb2 f3f3 	udiv	r3, r2, r3
 800624a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800624c:	4b71      	ldr	r3, [pc, #452]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800624e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006252:	0a1b      	lsrs	r3, r3, #8
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	3301      	adds	r3, #1
 800625a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	617b      	str	r3, [r7, #20]
        break;
 8006266:	e03b      	b.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006268:	4b6a      	ldr	r3, [pc, #424]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d108      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006274:	4b67      	ldr	r3, [pc, #412]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800627c:	4a66      	ldr	r2, [pc, #408]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800627e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006282:	613b      	str	r3, [r7, #16]
 8006284:	e007      	b.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006286:	4b63      	ldr	r3, [pc, #396]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800628e:	4a63      	ldr	r2, [pc, #396]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006290:	fbb2 f3f3 	udiv	r3, r2, r3
 8006294:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006296:	4b5f      	ldr	r3, [pc, #380]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800629c:	0e1b      	lsrs	r3, r3, #24
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80062a4:	4b5b      	ldr	r3, [pc, #364]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062aa:	099b      	lsrs	r3, r3, #6
 80062ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	fb03 f202 	mul.w	r2, r3, r2
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062bc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80062be:	4b55      	ldr	r3, [pc, #340]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	3301      	adds	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d4:	617b      	str	r3, [r7, #20]
        break;
 80062d6:	e003      	b.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80062d8:	4b51      	ldr	r3, [pc, #324]	@ (8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80062da:	617b      	str	r3, [r7, #20]
        break;
 80062dc:	e000      	b.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 80062de:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062e6:	f040 808d 	bne.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 80062ea:	4b4a      	ldr	r3, [pc, #296]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062f0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80062f8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006300:	d07c      	beq.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006308:	d87b      	bhi.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d004      	beq.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006316:	d039      	beq.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006318:	e073      	b.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800631a:	4b3e      	ldr	r3, [pc, #248]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d108      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006326:	4b3b      	ldr	r3, [pc, #236]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800632e:	4a3a      	ldr	r2, [pc, #232]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006330:	fbb2 f3f3 	udiv	r3, r2, r3
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	e007      	b.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006338:	4b36      	ldr	r3, [pc, #216]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006340:	4a36      	ldr	r2, [pc, #216]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006342:	fbb2 f3f3 	udiv	r3, r2, r3
 8006346:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006348:	4b32      	ldr	r3, [pc, #200]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800634e:	0e1b      	lsrs	r3, r3, #24
 8006350:	f003 030f 	and.w	r3, r3, #15
 8006354:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006356:	4b2f      	ldr	r3, [pc, #188]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635c:	099b      	lsrs	r3, r3, #6
 800635e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	fb03 f202 	mul.w	r2, r3, r2
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	fbb2 f3f3 	udiv	r3, r2, r3
 800636e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006370:	4b28      	ldr	r3, [pc, #160]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006372:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006376:	0a1b      	lsrs	r3, r3, #8
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	3301      	adds	r3, #1
 800637e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	fbb2 f3f3 	udiv	r3, r2, r3
 8006388:	617b      	str	r3, [r7, #20]
        break;
 800638a:	e03b      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800638c:	4b21      	ldr	r3, [pc, #132]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d108      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006398:	4b1e      	ldr	r3, [pc, #120]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80063a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a6:	613b      	str	r3, [r7, #16]
 80063a8:	e007      	b.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80063aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063b2:	4a1a      	ldr	r2, [pc, #104]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80063b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80063ba:	4b16      	ldr	r3, [pc, #88]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063c0:	0e1b      	lsrs	r3, r3, #24
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80063c8:	4b12      	ldr	r3, [pc, #72]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063ce:	099b      	lsrs	r3, r3, #6
 80063d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	fb03 f202 	mul.w	r2, r3, r2
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80063e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063e8:	f003 031f 	and.w	r3, r3, #31
 80063ec:	3301      	adds	r3, #1
 80063ee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f8:	617b      	str	r3, [r7, #20]
        break;
 80063fa:	e003      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 80063fc:	4b08      	ldr	r3, [pc, #32]	@ (8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80063fe:	617b      	str	r3, [r7, #20]
        break;
 8006400:	e000      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8006402:	bf00      	nop
      }
    }
  }

  return frequency;
 8006404:	697b      	ldr	r3, [r7, #20]
}
 8006406:	4618      	mov	r0, r3
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	40023800 	.word	0x40023800
 8006418:	00f42400 	.word	0x00f42400
 800641c:	017d7840 	.word	0x017d7840
 8006420:	00bb8000 	.word	0x00bb8000

08006424 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800642c:	2300      	movs	r3, #0
 800642e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006434:	2300      	movs	r3, #0
 8006436:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e156      	b.n	80066f0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7fa fc6e 	bl	8000d38 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fb13 	bl	8006a90 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d00c      	beq.n	800648c <HAL_SAI_Init+0x68>
 8006472:	2b02      	cmp	r3, #2
 8006474:	d80d      	bhi.n	8006492 <HAL_SAI_Init+0x6e>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <HAL_SAI_Init+0x5c>
 800647a:	2b01      	cmp	r3, #1
 800647c:	d003      	beq.n	8006486 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800647e:	e008      	b.n	8006492 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	61fb      	str	r3, [r7, #28]
      break;
 8006484:	e006      	b.n	8006494 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006486:	2310      	movs	r3, #16
 8006488:	61fb      	str	r3, [r7, #28]
      break;
 800648a:	e003      	b.n	8006494 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800648c:	2320      	movs	r3, #32
 800648e:	61fb      	str	r3, [r7, #28]
      break;
 8006490:	e000      	b.n	8006494 <HAL_SAI_Init+0x70>
      break;
 8006492:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	2b03      	cmp	r3, #3
 800649a:	d81e      	bhi.n	80064da <HAL_SAI_Init+0xb6>
 800649c:	a201      	add	r2, pc, #4	@ (adr r2, 80064a4 <HAL_SAI_Init+0x80>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064b5 	.word	0x080064b5
 80064a8:	080064bb 	.word	0x080064bb
 80064ac:	080064c3 	.word	0x080064c3
 80064b0:	080064cb 	.word	0x080064cb
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
    }
    break;
 80064b8:	e010      	b.n	80064dc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80064ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064be:	617b      	str	r3, [r7, #20]
    }
    break;
 80064c0:	e00c      	b.n	80064dc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80064c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80064c6:	617b      	str	r3, [r7, #20]
    }
    break;
 80064c8:	e008      	b.n	80064dc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80064ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80064ce:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	61fb      	str	r3, [r7, #28]
    }
    break;
 80064d8:	e000      	b.n	80064dc <HAL_SAI_Init+0xb8>
    default:
      break;
 80064da:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a85      	ldr	r2, [pc, #532]	@ (80066f8 <HAL_SAI_Init+0x2d4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d004      	beq.n	80064f0 <HAL_SAI_Init+0xcc>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a84      	ldr	r2, [pc, #528]	@ (80066fc <HAL_SAI_Init+0x2d8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d103      	bne.n	80064f8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80064f0:	4a83      	ldr	r2, [pc, #524]	@ (8006700 <HAL_SAI_Init+0x2dc>)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	e002      	b.n	80064fe <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80064f8:	4a82      	ldr	r2, [pc, #520]	@ (8006704 <HAL_SAI_Init+0x2e0>)
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d04c      	beq.n	80065a0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a7a      	ldr	r2, [pc, #488]	@ (80066f8 <HAL_SAI_Init+0x2d4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d004      	beq.n	800651e <HAL_SAI_Init+0xfa>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a78      	ldr	r2, [pc, #480]	@ (80066fc <HAL_SAI_Init+0x2d8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d104      	bne.n	8006528 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800651e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006522:	f7ff fe3f 	bl	80061a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006526:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a76      	ldr	r2, [pc, #472]	@ (8006708 <HAL_SAI_Init+0x2e4>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d004      	beq.n	800653c <HAL_SAI_Init+0x118>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a75      	ldr	r2, [pc, #468]	@ (800670c <HAL_SAI_Init+0x2e8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d104      	bne.n	8006546 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800653c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006540:	f7ff fe30 	bl	80061a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006544:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4613      	mov	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	461a      	mov	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	025b      	lsls	r3, r3, #9
 8006558:	fbb2 f3f3 	udiv	r3, r2, r3
 800655c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4a6b      	ldr	r2, [pc, #428]	@ (8006710 <HAL_SAI_Init+0x2ec>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	08da      	lsrs	r2, r3, #3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800656c:	68f9      	ldr	r1, [r7, #12]
 800656e:	4b68      	ldr	r3, [pc, #416]	@ (8006710 <HAL_SAI_Init+0x2ec>)
 8006570:	fba3 2301 	umull	r2, r3, r3, r1
 8006574:	08da      	lsrs	r2, r3, #3
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	1aca      	subs	r2, r1, r3
 8006580:	2a08      	cmp	r2, #8
 8006582:	d904      	bls.n	800658e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006592:	2b04      	cmp	r3, #4
 8006594:	d104      	bne.n	80065a0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	085a      	lsrs	r2, r3, #1
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <HAL_SAI_Init+0x18c>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d109      	bne.n	80065c4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_SAI_Init+0x198>
 80065b8:	2300      	movs	r3, #0
 80065ba:	e001      	b.n	80065c0 <HAL_SAI_Init+0x19c>
 80065bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	e008      	b.n	80065d6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d102      	bne.n	80065d2 <HAL_SAI_Init+0x1ae>
 80065cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065d0:	e000      	b.n	80065d4 <HAL_SAI_Init+0x1b0>
 80065d2:	2300      	movs	r3, #0
 80065d4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6819      	ldr	r1, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	4b4c      	ldr	r3, [pc, #304]	@ (8006714 <HAL_SAI_Init+0x2f0>)
 80065e2:	400b      	ands	r3, r1
 80065e4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6819      	ldr	r1, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80065fa:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006600:	431a      	orrs	r2, r3
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800660e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800661a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	051b      	lsls	r3, r3, #20
 8006622:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6859      	ldr	r1, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4b38      	ldr	r3, [pc, #224]	@ (8006718 <HAL_SAI_Init+0x2f4>)
 8006638:	400b      	ands	r3, r1
 800663a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6859      	ldr	r1, [r3, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6899      	ldr	r1, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	4b2d      	ldr	r3, [pc, #180]	@ (800671c <HAL_SAI_Init+0x2f8>)
 8006666:	400b      	ands	r3, r1
 8006668:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6899      	ldr	r1, [r3, #8]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006674:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800667a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8006680:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8006686:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668c:	3b01      	subs	r3, #1
 800668e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006690:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68d9      	ldr	r1, [r3, #12]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80066a8:	400b      	ands	r3, r1
 80066aa:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68d9      	ldr	r1, [r3, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ba:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066c0:	041b      	lsls	r3, r3, #16
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c8:	3b01      	subs	r3, #1
 80066ca:	021b      	lsls	r3, r3, #8
 80066cc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3720      	adds	r7, #32
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40015804 	.word	0x40015804
 80066fc:	40015824 	.word	0x40015824
 8006700:	40015800 	.word	0x40015800
 8006704:	40015c00 	.word	0x40015c00
 8006708:	40015c04 	.word	0x40015c04
 800670c:	40015c24 	.word	0x40015c24
 8006710:	cccccccd 	.word	0xcccccccd
 8006714:	ff05c010 	.word	0xff05c010
 8006718:	ffff1ff0 	.word	0xffff1ff0
 800671c:	fff88000 	.word	0xfff88000

08006720 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e027      	b.n	8006782 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2202      	movs	r2, #2
 8006736:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2200      	movs	r2, #0
 8006740:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f04f 32ff 	mov.w	r2, #4294967295
 800674a:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f99f 	bl	8006a90 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f042 0208 	orr.w	r2, r2, #8
 8006760:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fa fb64 	bl	8000e30 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
	...

0800678c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	4613      	mov	r3, r2
 8006798:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800679a:	f7fc fd7b 	bl	8003294 <HAL_GetTick>
 800679e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <HAL_SAI_Transmit_DMA+0x20>
 80067a6:	88fb      	ldrh	r3, [r7, #6]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e093      	b.n	80068d8 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	f040 808c 	bne.w	80068d6 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_SAI_Transmit_DMA+0x40>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e085      	b.n	80068d8 <HAL_SAI_Transmit_DMA+0x14c>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	88fa      	ldrh	r2, [r7, #6]
 80067de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	88fa      	ldrh	r2, [r7, #6]
 80067e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2212      	movs	r2, #18
 80067f6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067fe:	4a38      	ldr	r2, [pc, #224]	@ (80068e0 <HAL_SAI_Transmit_DMA+0x154>)
 8006800:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006806:	4a37      	ldr	r2, [pc, #220]	@ (80068e4 <HAL_SAI_Transmit_DMA+0x158>)
 8006808:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800680e:	4a36      	ldr	r2, [pc, #216]	@ (80068e8 <HAL_SAI_Transmit_DMA+0x15c>)
 8006810:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006816:	2200      	movs	r2, #0
 8006818:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006822:	4619      	mov	r1, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	331c      	adds	r3, #28
 800682a:	461a      	mov	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006832:	f7fd f86f 	bl	8003914 <HAL_DMA_Start_IT>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e047      	b.n	80068d8 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006848:	2100      	movs	r1, #0
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f8ea 	bl	8006a24 <SAI_InterruptFlag>
 8006850:	4601      	mov	r1, r0
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800686e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006870:	e015      	b.n	800689e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8006872:	f7fc fd0f 	bl	8003294 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006880:	d90d      	bls.n	800689e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006888:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e01c      	b.n	80068d8 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0e2      	beq.n	8006872 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d107      	bne.n	80068ca <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80068c8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	e000      	b.n	80068d8 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80068d6:	2302      	movs	r3, #2
  }
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	08006b61 	.word	0x08006b61
 80068e4:	08006b01 	.word	0x08006b01
 80068e8:	08006bf9 	.word	0x08006bf9

080068ec <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	4613      	mov	r3, r2
 80068f8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <HAL_SAI_Receive_DMA+0x1a>
 8006900:	88fb      	ldrh	r3, [r7, #6]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e074      	b.n	80069f4 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b01      	cmp	r3, #1
 8006914:	d16d      	bne.n	80069f2 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_SAI_Receive_DMA+0x38>
 8006920:	2302      	movs	r3, #2
 8006922:	e067      	b.n	80069f4 <HAL_SAI_Receive_DMA+0x108>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	88fa      	ldrh	r2, [r7, #6]
 8006936:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	88fa      	ldrh	r2, [r7, #6]
 800693e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2222      	movs	r2, #34	@ 0x22
 800694e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006956:	4a29      	ldr	r2, [pc, #164]	@ (80069fc <HAL_SAI_Receive_DMA+0x110>)
 8006958:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800695e:	4a28      	ldr	r2, [pc, #160]	@ (8006a00 <HAL_SAI_Receive_DMA+0x114>)
 8006960:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006966:	4a27      	ldr	r2, [pc, #156]	@ (8006a04 <HAL_SAI_Receive_DMA+0x118>)
 8006968:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696e:	2200      	movs	r2, #0
 8006970:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	331c      	adds	r3, #28
 800697c:	4619      	mov	r1, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006982:	461a      	mov	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800698a:	f7fc ffc3 	bl	8003914 <HAL_DMA_Start_IT>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e029      	b.n	80069f4 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80069a0:	2100      	movs	r1, #0
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 f83e 	bl	8006a24 <SAI_InterruptFlag>
 80069a8:	4601      	mov	r1, r0
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80069c6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d107      	bne.n	80069e6 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80069e4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	e000      	b.n	80069f4 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 80069f2:	2302      	movs	r3, #2
  }
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	08006bdd 	.word	0x08006bdd
 8006a00:	08006b7d 	.word	0x08006b7d
 8006a04:	08006bf9 	.word	0x08006bf9

08006a08 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006a16:	b2db      	uxtb	r3, r3
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d103      	bne.n	8006a40 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f043 0308 	orr.w	r3, r3, #8
 8006a3e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	d10b      	bne.n	8006a60 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d003      	beq.n	8006a58 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d103      	bne.n	8006a60 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f043 0310 	orr.w	r3, r3, #16
 8006a5e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d003      	beq.n	8006a70 <SAI_InterruptFlag+0x4c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d104      	bne.n	8006a7a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	e003      	b.n	8006a82 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f043 0304 	orr.w	r3, r3, #4
 8006a80:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006a82:	68fb      	ldr	r3, [r7, #12]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006a98:	4b17      	ldr	r3, [pc, #92]	@ (8006af8 <SAI_Disable+0x68>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a17      	ldr	r2, [pc, #92]	@ (8006afc <SAI_Disable+0x6c>)
 8006a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa2:	0b1b      	lsrs	r3, r3, #12
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006aba:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	1e5a      	subs	r2, r3, #1
 8006ac0:	60fa      	str	r2, [r7, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006acc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	72fb      	strb	r3, [r7, #11]
      break;
 8006ada:	e006      	b.n	8006aea <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e8      	bne.n	8006abc <SAI_Disable+0x2c>

  return status;
 8006aea:	7afb      	ldrb	r3, [r7, #11]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	20000000 	.word	0x20000000
 8006afc:	95cbec1b 	.word	0x95cbec1b

08006b00 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b16:	d01c      	beq.n	8006b52 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006b2e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006b30:	2100      	movs	r1, #0
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f7ff ff76 	bl	8006a24 <SAI_InterruptFlag>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	43d9      	mvns	r1, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691a      	ldr	r2, [r3, #16]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	400a      	ands	r2, r1
 8006b48:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7fb ff42 	bl	80029dc <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006b58:	bf00      	nop
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7fb ff3e 	bl	80029f0 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006b74:	bf00      	nop
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b88:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b92:	d01c      	beq.n	8006bce <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006ba2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006bac:	2100      	movs	r1, #0
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f7ff ff38 	bl	8006a24 <SAI_InterruptFlag>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	43d9      	mvns	r1, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691a      	ldr	r2, [r3, #16]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	400a      	ands	r2, r1
 8006bc4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7fc f966 	bl	8002ea0 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f7fc f962 	bl	8002eb4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006bf0:	bf00      	nop
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c04:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d004      	beq.n	8006c2a <SAI_DMAError+0x32>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d112      	bne.n	8006c50 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006c38:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7ff ff28 	bl	8006a90 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f7fb fed7 	bl	8002a04 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006c56:	bf00      	nop
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e049      	b.n	8006d04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d106      	bne.n	8006c8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7f9 ffb5 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f000 f8ff 	bl	8006ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d101      	bne.n	8006d28 <HAL_TIM_ConfigClockSource+0x1c>
 8006d24:	2302      	movs	r3, #2
 8006d26:	e0b4      	b.n	8006e92 <HAL_TIM_ConfigClockSource+0x186>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	4b56      	ldr	r3, [pc, #344]	@ (8006e9c <HAL_TIM_ConfigClockSource+0x190>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d60:	d03e      	beq.n	8006de0 <HAL_TIM_ConfigClockSource+0xd4>
 8006d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d66:	f200 8087 	bhi.w	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d6e:	f000 8086 	beq.w	8006e7e <HAL_TIM_ConfigClockSource+0x172>
 8006d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d76:	d87f      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d78:	2b70      	cmp	r3, #112	@ 0x70
 8006d7a:	d01a      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0xa6>
 8006d7c:	2b70      	cmp	r3, #112	@ 0x70
 8006d7e:	d87b      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d80:	2b60      	cmp	r3, #96	@ 0x60
 8006d82:	d050      	beq.n	8006e26 <HAL_TIM_ConfigClockSource+0x11a>
 8006d84:	2b60      	cmp	r3, #96	@ 0x60
 8006d86:	d877      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d88:	2b50      	cmp	r3, #80	@ 0x50
 8006d8a:	d03c      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0xfa>
 8006d8c:	2b50      	cmp	r3, #80	@ 0x50
 8006d8e:	d873      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d90:	2b40      	cmp	r3, #64	@ 0x40
 8006d92:	d058      	beq.n	8006e46 <HAL_TIM_ConfigClockSource+0x13a>
 8006d94:	2b40      	cmp	r3, #64	@ 0x40
 8006d96:	d86f      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006d98:	2b30      	cmp	r3, #48	@ 0x30
 8006d9a:	d064      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006d9c:	2b30      	cmp	r3, #48	@ 0x30
 8006d9e:	d86b      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d060      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d867      	bhi.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d05c      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006dac:	2b10      	cmp	r3, #16
 8006dae:	d05a      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0x15a>
 8006db0:	e062      	b.n	8006e78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006dc2:	f000 f993 	bl	80070ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006dd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	609a      	str	r2, [r3, #8]
      break;
 8006dde:	e04f      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006df0:	f000 f97c 	bl	80070ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e02:	609a      	str	r2, [r3, #8]
      break;
 8006e04:	e03c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e12:	461a      	mov	r2, r3
 8006e14:	f000 f8f0 	bl	8006ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2150      	movs	r1, #80	@ 0x50
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 f949 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 8006e24:	e02c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e32:	461a      	mov	r2, r3
 8006e34:	f000 f90f 	bl	8007056 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2160      	movs	r1, #96	@ 0x60
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 f939 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 8006e44:	e01c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e52:	461a      	mov	r2, r3
 8006e54:	f000 f8d0 	bl	8006ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2140      	movs	r1, #64	@ 0x40
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 f929 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 8006e64:	e00c      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f000 f920 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 8006e76:	e003      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e7c:	e000      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	fffeff88 	.word	0xfffeff88

08006ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a46      	ldr	r2, [pc, #280]	@ (8006fcc <TIM_Base_SetConfig+0x12c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d013      	beq.n	8006ee0 <TIM_Base_SetConfig+0x40>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ebe:	d00f      	beq.n	8006ee0 <TIM_Base_SetConfig+0x40>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a43      	ldr	r2, [pc, #268]	@ (8006fd0 <TIM_Base_SetConfig+0x130>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00b      	beq.n	8006ee0 <TIM_Base_SetConfig+0x40>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a42      	ldr	r2, [pc, #264]	@ (8006fd4 <TIM_Base_SetConfig+0x134>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d007      	beq.n	8006ee0 <TIM_Base_SetConfig+0x40>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a41      	ldr	r2, [pc, #260]	@ (8006fd8 <TIM_Base_SetConfig+0x138>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d003      	beq.n	8006ee0 <TIM_Base_SetConfig+0x40>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a40      	ldr	r2, [pc, #256]	@ (8006fdc <TIM_Base_SetConfig+0x13c>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d108      	bne.n	8006ef2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a35      	ldr	r2, [pc, #212]	@ (8006fcc <TIM_Base_SetConfig+0x12c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d02b      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f00:	d027      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a32      	ldr	r2, [pc, #200]	@ (8006fd0 <TIM_Base_SetConfig+0x130>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d023      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a31      	ldr	r2, [pc, #196]	@ (8006fd4 <TIM_Base_SetConfig+0x134>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d01f      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a30      	ldr	r2, [pc, #192]	@ (8006fd8 <TIM_Base_SetConfig+0x138>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d01b      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a2f      	ldr	r2, [pc, #188]	@ (8006fdc <TIM_Base_SetConfig+0x13c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d017      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a2e      	ldr	r2, [pc, #184]	@ (8006fe0 <TIM_Base_SetConfig+0x140>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d013      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8006fe4 <TIM_Base_SetConfig+0x144>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00f      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a2c      	ldr	r2, [pc, #176]	@ (8006fe8 <TIM_Base_SetConfig+0x148>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00b      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8006fec <TIM_Base_SetConfig+0x14c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d007      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a2a      	ldr	r2, [pc, #168]	@ (8006ff0 <TIM_Base_SetConfig+0x150>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d003      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a29      	ldr	r2, [pc, #164]	@ (8006ff4 <TIM_Base_SetConfig+0x154>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d108      	bne.n	8006f64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a10      	ldr	r2, [pc, #64]	@ (8006fcc <TIM_Base_SetConfig+0x12c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d003      	beq.n	8006f98 <TIM_Base_SetConfig+0xf8>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a12      	ldr	r2, [pc, #72]	@ (8006fdc <TIM_Base_SetConfig+0x13c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d103      	bne.n	8006fa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	691a      	ldr	r2, [r3, #16]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d105      	bne.n	8006fbe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f023 0201 	bic.w	r2, r3, #1
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	611a      	str	r2, [r3, #16]
  }
}
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40000400 	.word	0x40000400
 8006fd4:	40000800 	.word	0x40000800
 8006fd8:	40000c00 	.word	0x40000c00
 8006fdc:	40010400 	.word	0x40010400
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40014400 	.word	0x40014400
 8006fe8:	40014800 	.word	0x40014800
 8006fec:	40001800 	.word	0x40001800
 8006ff0:	40001c00 	.word	0x40001c00
 8006ff4:	40002000 	.word	0x40002000

08006ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f023 0201 	bic.w	r2, r3, #1
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f023 030a 	bic.w	r3, r3, #10
 8007034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007056:	b480      	push	{r7}
 8007058:	b087      	sub	sp, #28
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	f023 0210 	bic.w	r2, r3, #16
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007080:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	031b      	lsls	r3, r3, #12
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	4313      	orrs	r3, r2
 800708a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007092:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	621a      	str	r2, [r3, #32]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b085      	sub	sp, #20
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	f043 0307 	orr.w	r3, r3, #7
 80070d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	609a      	str	r2, [r3, #8]
}
 80070e0:	bf00      	nop
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007106:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	021a      	lsls	r2, r3, #8
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	431a      	orrs	r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4313      	orrs	r3, r2
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	4313      	orrs	r3, r2
 8007118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	609a      	str	r2, [r3, #8]
}
 8007120:	bf00      	nop
 8007122:	371c      	adds	r7, #28
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007140:	2302      	movs	r3, #2
 8007142:	e06d      	b.n	8007220 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a30      	ldr	r2, [pc, #192]	@ (800722c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d004      	beq.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a2f      	ldr	r2, [pc, #188]	@ (8007230 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d108      	bne.n	800718a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800717e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007190:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a20      	ldr	r2, [pc, #128]	@ (800722c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d022      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071b6:	d01d      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007234 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d018      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007238 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d013      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a1a      	ldr	r2, [pc, #104]	@ (800723c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d00e      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a15      	ldr	r2, [pc, #84]	@ (8007230 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d009      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a16      	ldr	r2, [pc, #88]	@ (8007240 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d004      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a15      	ldr	r2, [pc, #84]	@ (8007244 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d10c      	bne.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	4313      	orrs	r3, r2
 8007204:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	40010000 	.word	0x40010000
 8007230:	40010400 	.word	0x40010400
 8007234:	40000400 	.word	0x40000400
 8007238:	40000800 	.word	0x40000800
 800723c:	40000c00 	.word	0x40000c00
 8007240:	40014000 	.word	0x40014000
 8007244:	40001800 	.word	0x40001800

08007248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e040      	b.n	80072dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800725e:	2b00      	cmp	r3, #0
 8007260:	d106      	bne.n	8007270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7f9 fce2 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2224      	movs	r2, #36	@ 0x24
 8007274:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 0201 	bic.w	r2, r2, #1
 8007284:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa8c 	bl	80077ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f825 	bl	80072e4 <UART_SetConfig>
 800729a:	4603      	mov	r3, r0
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e01b      	b.n	80072dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0201 	orr.w	r2, r2, #1
 80072d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fb0b 	bl	80078f0 <UART_CheckIdleState>
 80072da:	4603      	mov	r3, r0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689a      	ldr	r2, [r3, #8]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	431a      	orrs	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	431a      	orrs	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	4ba6      	ldr	r3, [pc, #664]	@ (80075a8 <UART_SetConfig+0x2c4>)
 8007310:	4013      	ands	r3, r2
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6812      	ldr	r2, [r2, #0]
 8007316:	6979      	ldr	r1, [r7, #20]
 8007318:	430b      	orrs	r3, r1
 800731a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	697a      	ldr	r2, [r7, #20]
 800733e:	4313      	orrs	r3, r2
 8007340:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	430a      	orrs	r2, r1
 8007354:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a94      	ldr	r2, [pc, #592]	@ (80075ac <UART_SetConfig+0x2c8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d120      	bne.n	80073a2 <UART_SetConfig+0xbe>
 8007360:	4b93      	ldr	r3, [pc, #588]	@ (80075b0 <UART_SetConfig+0x2cc>)
 8007362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007366:	f003 0303 	and.w	r3, r3, #3
 800736a:	2b03      	cmp	r3, #3
 800736c:	d816      	bhi.n	800739c <UART_SetConfig+0xb8>
 800736e:	a201      	add	r2, pc, #4	@ (adr r2, 8007374 <UART_SetConfig+0x90>)
 8007370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007374:	08007385 	.word	0x08007385
 8007378:	08007391 	.word	0x08007391
 800737c:	0800738b 	.word	0x0800738b
 8007380:	08007397 	.word	0x08007397
 8007384:	2301      	movs	r3, #1
 8007386:	77fb      	strb	r3, [r7, #31]
 8007388:	e150      	b.n	800762c <UART_SetConfig+0x348>
 800738a:	2302      	movs	r3, #2
 800738c:	77fb      	strb	r3, [r7, #31]
 800738e:	e14d      	b.n	800762c <UART_SetConfig+0x348>
 8007390:	2304      	movs	r3, #4
 8007392:	77fb      	strb	r3, [r7, #31]
 8007394:	e14a      	b.n	800762c <UART_SetConfig+0x348>
 8007396:	2308      	movs	r3, #8
 8007398:	77fb      	strb	r3, [r7, #31]
 800739a:	e147      	b.n	800762c <UART_SetConfig+0x348>
 800739c:	2310      	movs	r3, #16
 800739e:	77fb      	strb	r3, [r7, #31]
 80073a0:	e144      	b.n	800762c <UART_SetConfig+0x348>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a83      	ldr	r2, [pc, #524]	@ (80075b4 <UART_SetConfig+0x2d0>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d132      	bne.n	8007412 <UART_SetConfig+0x12e>
 80073ac:	4b80      	ldr	r3, [pc, #512]	@ (80075b0 <UART_SetConfig+0x2cc>)
 80073ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b2:	f003 030c 	and.w	r3, r3, #12
 80073b6:	2b0c      	cmp	r3, #12
 80073b8:	d828      	bhi.n	800740c <UART_SetConfig+0x128>
 80073ba:	a201      	add	r2, pc, #4	@ (adr r2, 80073c0 <UART_SetConfig+0xdc>)
 80073bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c0:	080073f5 	.word	0x080073f5
 80073c4:	0800740d 	.word	0x0800740d
 80073c8:	0800740d 	.word	0x0800740d
 80073cc:	0800740d 	.word	0x0800740d
 80073d0:	08007401 	.word	0x08007401
 80073d4:	0800740d 	.word	0x0800740d
 80073d8:	0800740d 	.word	0x0800740d
 80073dc:	0800740d 	.word	0x0800740d
 80073e0:	080073fb 	.word	0x080073fb
 80073e4:	0800740d 	.word	0x0800740d
 80073e8:	0800740d 	.word	0x0800740d
 80073ec:	0800740d 	.word	0x0800740d
 80073f0:	08007407 	.word	0x08007407
 80073f4:	2300      	movs	r3, #0
 80073f6:	77fb      	strb	r3, [r7, #31]
 80073f8:	e118      	b.n	800762c <UART_SetConfig+0x348>
 80073fa:	2302      	movs	r3, #2
 80073fc:	77fb      	strb	r3, [r7, #31]
 80073fe:	e115      	b.n	800762c <UART_SetConfig+0x348>
 8007400:	2304      	movs	r3, #4
 8007402:	77fb      	strb	r3, [r7, #31]
 8007404:	e112      	b.n	800762c <UART_SetConfig+0x348>
 8007406:	2308      	movs	r3, #8
 8007408:	77fb      	strb	r3, [r7, #31]
 800740a:	e10f      	b.n	800762c <UART_SetConfig+0x348>
 800740c:	2310      	movs	r3, #16
 800740e:	77fb      	strb	r3, [r7, #31]
 8007410:	e10c      	b.n	800762c <UART_SetConfig+0x348>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a68      	ldr	r2, [pc, #416]	@ (80075b8 <UART_SetConfig+0x2d4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d120      	bne.n	800745e <UART_SetConfig+0x17a>
 800741c:	4b64      	ldr	r3, [pc, #400]	@ (80075b0 <UART_SetConfig+0x2cc>)
 800741e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007422:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007426:	2b30      	cmp	r3, #48	@ 0x30
 8007428:	d013      	beq.n	8007452 <UART_SetConfig+0x16e>
 800742a:	2b30      	cmp	r3, #48	@ 0x30
 800742c:	d814      	bhi.n	8007458 <UART_SetConfig+0x174>
 800742e:	2b20      	cmp	r3, #32
 8007430:	d009      	beq.n	8007446 <UART_SetConfig+0x162>
 8007432:	2b20      	cmp	r3, #32
 8007434:	d810      	bhi.n	8007458 <UART_SetConfig+0x174>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <UART_SetConfig+0x15c>
 800743a:	2b10      	cmp	r3, #16
 800743c:	d006      	beq.n	800744c <UART_SetConfig+0x168>
 800743e:	e00b      	b.n	8007458 <UART_SetConfig+0x174>
 8007440:	2300      	movs	r3, #0
 8007442:	77fb      	strb	r3, [r7, #31]
 8007444:	e0f2      	b.n	800762c <UART_SetConfig+0x348>
 8007446:	2302      	movs	r3, #2
 8007448:	77fb      	strb	r3, [r7, #31]
 800744a:	e0ef      	b.n	800762c <UART_SetConfig+0x348>
 800744c:	2304      	movs	r3, #4
 800744e:	77fb      	strb	r3, [r7, #31]
 8007450:	e0ec      	b.n	800762c <UART_SetConfig+0x348>
 8007452:	2308      	movs	r3, #8
 8007454:	77fb      	strb	r3, [r7, #31]
 8007456:	e0e9      	b.n	800762c <UART_SetConfig+0x348>
 8007458:	2310      	movs	r3, #16
 800745a:	77fb      	strb	r3, [r7, #31]
 800745c:	e0e6      	b.n	800762c <UART_SetConfig+0x348>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a56      	ldr	r2, [pc, #344]	@ (80075bc <UART_SetConfig+0x2d8>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d120      	bne.n	80074aa <UART_SetConfig+0x1c6>
 8007468:	4b51      	ldr	r3, [pc, #324]	@ (80075b0 <UART_SetConfig+0x2cc>)
 800746a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800746e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007472:	2bc0      	cmp	r3, #192	@ 0xc0
 8007474:	d013      	beq.n	800749e <UART_SetConfig+0x1ba>
 8007476:	2bc0      	cmp	r3, #192	@ 0xc0
 8007478:	d814      	bhi.n	80074a4 <UART_SetConfig+0x1c0>
 800747a:	2b80      	cmp	r3, #128	@ 0x80
 800747c:	d009      	beq.n	8007492 <UART_SetConfig+0x1ae>
 800747e:	2b80      	cmp	r3, #128	@ 0x80
 8007480:	d810      	bhi.n	80074a4 <UART_SetConfig+0x1c0>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d002      	beq.n	800748c <UART_SetConfig+0x1a8>
 8007486:	2b40      	cmp	r3, #64	@ 0x40
 8007488:	d006      	beq.n	8007498 <UART_SetConfig+0x1b4>
 800748a:	e00b      	b.n	80074a4 <UART_SetConfig+0x1c0>
 800748c:	2300      	movs	r3, #0
 800748e:	77fb      	strb	r3, [r7, #31]
 8007490:	e0cc      	b.n	800762c <UART_SetConfig+0x348>
 8007492:	2302      	movs	r3, #2
 8007494:	77fb      	strb	r3, [r7, #31]
 8007496:	e0c9      	b.n	800762c <UART_SetConfig+0x348>
 8007498:	2304      	movs	r3, #4
 800749a:	77fb      	strb	r3, [r7, #31]
 800749c:	e0c6      	b.n	800762c <UART_SetConfig+0x348>
 800749e:	2308      	movs	r3, #8
 80074a0:	77fb      	strb	r3, [r7, #31]
 80074a2:	e0c3      	b.n	800762c <UART_SetConfig+0x348>
 80074a4:	2310      	movs	r3, #16
 80074a6:	77fb      	strb	r3, [r7, #31]
 80074a8:	e0c0      	b.n	800762c <UART_SetConfig+0x348>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a44      	ldr	r2, [pc, #272]	@ (80075c0 <UART_SetConfig+0x2dc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d125      	bne.n	8007500 <UART_SetConfig+0x21c>
 80074b4:	4b3e      	ldr	r3, [pc, #248]	@ (80075b0 <UART_SetConfig+0x2cc>)
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074c2:	d017      	beq.n	80074f4 <UART_SetConfig+0x210>
 80074c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074c8:	d817      	bhi.n	80074fa <UART_SetConfig+0x216>
 80074ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074ce:	d00b      	beq.n	80074e8 <UART_SetConfig+0x204>
 80074d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074d4:	d811      	bhi.n	80074fa <UART_SetConfig+0x216>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <UART_SetConfig+0x1fe>
 80074da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074de:	d006      	beq.n	80074ee <UART_SetConfig+0x20a>
 80074e0:	e00b      	b.n	80074fa <UART_SetConfig+0x216>
 80074e2:	2300      	movs	r3, #0
 80074e4:	77fb      	strb	r3, [r7, #31]
 80074e6:	e0a1      	b.n	800762c <UART_SetConfig+0x348>
 80074e8:	2302      	movs	r3, #2
 80074ea:	77fb      	strb	r3, [r7, #31]
 80074ec:	e09e      	b.n	800762c <UART_SetConfig+0x348>
 80074ee:	2304      	movs	r3, #4
 80074f0:	77fb      	strb	r3, [r7, #31]
 80074f2:	e09b      	b.n	800762c <UART_SetConfig+0x348>
 80074f4:	2308      	movs	r3, #8
 80074f6:	77fb      	strb	r3, [r7, #31]
 80074f8:	e098      	b.n	800762c <UART_SetConfig+0x348>
 80074fa:	2310      	movs	r3, #16
 80074fc:	77fb      	strb	r3, [r7, #31]
 80074fe:	e095      	b.n	800762c <UART_SetConfig+0x348>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a2f      	ldr	r2, [pc, #188]	@ (80075c4 <UART_SetConfig+0x2e0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d125      	bne.n	8007556 <UART_SetConfig+0x272>
 800750a:	4b29      	ldr	r3, [pc, #164]	@ (80075b0 <UART_SetConfig+0x2cc>)
 800750c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007510:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007514:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007518:	d017      	beq.n	800754a <UART_SetConfig+0x266>
 800751a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800751e:	d817      	bhi.n	8007550 <UART_SetConfig+0x26c>
 8007520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007524:	d00b      	beq.n	800753e <UART_SetConfig+0x25a>
 8007526:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800752a:	d811      	bhi.n	8007550 <UART_SetConfig+0x26c>
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <UART_SetConfig+0x254>
 8007530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007534:	d006      	beq.n	8007544 <UART_SetConfig+0x260>
 8007536:	e00b      	b.n	8007550 <UART_SetConfig+0x26c>
 8007538:	2301      	movs	r3, #1
 800753a:	77fb      	strb	r3, [r7, #31]
 800753c:	e076      	b.n	800762c <UART_SetConfig+0x348>
 800753e:	2302      	movs	r3, #2
 8007540:	77fb      	strb	r3, [r7, #31]
 8007542:	e073      	b.n	800762c <UART_SetConfig+0x348>
 8007544:	2304      	movs	r3, #4
 8007546:	77fb      	strb	r3, [r7, #31]
 8007548:	e070      	b.n	800762c <UART_SetConfig+0x348>
 800754a:	2308      	movs	r3, #8
 800754c:	77fb      	strb	r3, [r7, #31]
 800754e:	e06d      	b.n	800762c <UART_SetConfig+0x348>
 8007550:	2310      	movs	r3, #16
 8007552:	77fb      	strb	r3, [r7, #31]
 8007554:	e06a      	b.n	800762c <UART_SetConfig+0x348>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1b      	ldr	r2, [pc, #108]	@ (80075c8 <UART_SetConfig+0x2e4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d138      	bne.n	80075d2 <UART_SetConfig+0x2ee>
 8007560:	4b13      	ldr	r3, [pc, #76]	@ (80075b0 <UART_SetConfig+0x2cc>)
 8007562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007566:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800756a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800756e:	d017      	beq.n	80075a0 <UART_SetConfig+0x2bc>
 8007570:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007574:	d82a      	bhi.n	80075cc <UART_SetConfig+0x2e8>
 8007576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800757a:	d00b      	beq.n	8007594 <UART_SetConfig+0x2b0>
 800757c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007580:	d824      	bhi.n	80075cc <UART_SetConfig+0x2e8>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <UART_SetConfig+0x2aa>
 8007586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800758a:	d006      	beq.n	800759a <UART_SetConfig+0x2b6>
 800758c:	e01e      	b.n	80075cc <UART_SetConfig+0x2e8>
 800758e:	2300      	movs	r3, #0
 8007590:	77fb      	strb	r3, [r7, #31]
 8007592:	e04b      	b.n	800762c <UART_SetConfig+0x348>
 8007594:	2302      	movs	r3, #2
 8007596:	77fb      	strb	r3, [r7, #31]
 8007598:	e048      	b.n	800762c <UART_SetConfig+0x348>
 800759a:	2304      	movs	r3, #4
 800759c:	77fb      	strb	r3, [r7, #31]
 800759e:	e045      	b.n	800762c <UART_SetConfig+0x348>
 80075a0:	2308      	movs	r3, #8
 80075a2:	77fb      	strb	r3, [r7, #31]
 80075a4:	e042      	b.n	800762c <UART_SetConfig+0x348>
 80075a6:	bf00      	nop
 80075a8:	efff69f3 	.word	0xefff69f3
 80075ac:	40011000 	.word	0x40011000
 80075b0:	40023800 	.word	0x40023800
 80075b4:	40004400 	.word	0x40004400
 80075b8:	40004800 	.word	0x40004800
 80075bc:	40004c00 	.word	0x40004c00
 80075c0:	40005000 	.word	0x40005000
 80075c4:	40011400 	.word	0x40011400
 80075c8:	40007800 	.word	0x40007800
 80075cc:	2310      	movs	r3, #16
 80075ce:	77fb      	strb	r3, [r7, #31]
 80075d0:	e02c      	b.n	800762c <UART_SetConfig+0x348>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a72      	ldr	r2, [pc, #456]	@ (80077a0 <UART_SetConfig+0x4bc>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d125      	bne.n	8007628 <UART_SetConfig+0x344>
 80075dc:	4b71      	ldr	r3, [pc, #452]	@ (80077a4 <UART_SetConfig+0x4c0>)
 80075de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80075e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80075ea:	d017      	beq.n	800761c <UART_SetConfig+0x338>
 80075ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80075f0:	d817      	bhi.n	8007622 <UART_SetConfig+0x33e>
 80075f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075f6:	d00b      	beq.n	8007610 <UART_SetConfig+0x32c>
 80075f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075fc:	d811      	bhi.n	8007622 <UART_SetConfig+0x33e>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <UART_SetConfig+0x326>
 8007602:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007606:	d006      	beq.n	8007616 <UART_SetConfig+0x332>
 8007608:	e00b      	b.n	8007622 <UART_SetConfig+0x33e>
 800760a:	2300      	movs	r3, #0
 800760c:	77fb      	strb	r3, [r7, #31]
 800760e:	e00d      	b.n	800762c <UART_SetConfig+0x348>
 8007610:	2302      	movs	r3, #2
 8007612:	77fb      	strb	r3, [r7, #31]
 8007614:	e00a      	b.n	800762c <UART_SetConfig+0x348>
 8007616:	2304      	movs	r3, #4
 8007618:	77fb      	strb	r3, [r7, #31]
 800761a:	e007      	b.n	800762c <UART_SetConfig+0x348>
 800761c:	2308      	movs	r3, #8
 800761e:	77fb      	strb	r3, [r7, #31]
 8007620:	e004      	b.n	800762c <UART_SetConfig+0x348>
 8007622:	2310      	movs	r3, #16
 8007624:	77fb      	strb	r3, [r7, #31]
 8007626:	e001      	b.n	800762c <UART_SetConfig+0x348>
 8007628:	2310      	movs	r3, #16
 800762a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007634:	d15b      	bne.n	80076ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007636:	7ffb      	ldrb	r3, [r7, #31]
 8007638:	2b08      	cmp	r3, #8
 800763a:	d828      	bhi.n	800768e <UART_SetConfig+0x3aa>
 800763c:	a201      	add	r2, pc, #4	@ (adr r2, 8007644 <UART_SetConfig+0x360>)
 800763e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007642:	bf00      	nop
 8007644:	08007669 	.word	0x08007669
 8007648:	08007671 	.word	0x08007671
 800764c:	08007679 	.word	0x08007679
 8007650:	0800768f 	.word	0x0800768f
 8007654:	0800767f 	.word	0x0800767f
 8007658:	0800768f 	.word	0x0800768f
 800765c:	0800768f 	.word	0x0800768f
 8007660:	0800768f 	.word	0x0800768f
 8007664:	08007687 	.word	0x08007687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007668:	f7fe f878 	bl	800575c <HAL_RCC_GetPCLK1Freq>
 800766c:	61b8      	str	r0, [r7, #24]
        break;
 800766e:	e013      	b.n	8007698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007670:	f7fe f888 	bl	8005784 <HAL_RCC_GetPCLK2Freq>
 8007674:	61b8      	str	r0, [r7, #24]
        break;
 8007676:	e00f      	b.n	8007698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007678:	4b4b      	ldr	r3, [pc, #300]	@ (80077a8 <UART_SetConfig+0x4c4>)
 800767a:	61bb      	str	r3, [r7, #24]
        break;
 800767c:	e00c      	b.n	8007698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800767e:	f7fd ff9b 	bl	80055b8 <HAL_RCC_GetSysClockFreq>
 8007682:	61b8      	str	r0, [r7, #24]
        break;
 8007684:	e008      	b.n	8007698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800768a:	61bb      	str	r3, [r7, #24]
        break;
 800768c:	e004      	b.n	8007698 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	77bb      	strb	r3, [r7, #30]
        break;
 8007696:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d074      	beq.n	8007788 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	005a      	lsls	r2, r3, #1
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	085b      	lsrs	r3, r3, #1
 80076a8:	441a      	add	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	2b0f      	cmp	r3, #15
 80076b8:	d916      	bls.n	80076e8 <UART_SetConfig+0x404>
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c0:	d212      	bcs.n	80076e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f023 030f 	bic.w	r3, r3, #15
 80076ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	89fb      	ldrh	r3, [r7, #14]
 80076da:	4313      	orrs	r3, r2
 80076dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	89fa      	ldrh	r2, [r7, #14]
 80076e4:	60da      	str	r2, [r3, #12]
 80076e6:	e04f      	b.n	8007788 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	77bb      	strb	r3, [r7, #30]
 80076ec:	e04c      	b.n	8007788 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076ee:	7ffb      	ldrb	r3, [r7, #31]
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d828      	bhi.n	8007746 <UART_SetConfig+0x462>
 80076f4:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <UART_SetConfig+0x418>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	08007721 	.word	0x08007721
 8007700:	08007729 	.word	0x08007729
 8007704:	08007731 	.word	0x08007731
 8007708:	08007747 	.word	0x08007747
 800770c:	08007737 	.word	0x08007737
 8007710:	08007747 	.word	0x08007747
 8007714:	08007747 	.word	0x08007747
 8007718:	08007747 	.word	0x08007747
 800771c:	0800773f 	.word	0x0800773f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007720:	f7fe f81c 	bl	800575c <HAL_RCC_GetPCLK1Freq>
 8007724:	61b8      	str	r0, [r7, #24]
        break;
 8007726:	e013      	b.n	8007750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007728:	f7fe f82c 	bl	8005784 <HAL_RCC_GetPCLK2Freq>
 800772c:	61b8      	str	r0, [r7, #24]
        break;
 800772e:	e00f      	b.n	8007750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007730:	4b1d      	ldr	r3, [pc, #116]	@ (80077a8 <UART_SetConfig+0x4c4>)
 8007732:	61bb      	str	r3, [r7, #24]
        break;
 8007734:	e00c      	b.n	8007750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007736:	f7fd ff3f 	bl	80055b8 <HAL_RCC_GetSysClockFreq>
 800773a:	61b8      	str	r0, [r7, #24]
        break;
 800773c:	e008      	b.n	8007750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800773e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007742:	61bb      	str	r3, [r7, #24]
        break;
 8007744:	e004      	b.n	8007750 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	77bb      	strb	r3, [r7, #30]
        break;
 800774e:	bf00      	nop
    }

    if (pclk != 0U)
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d018      	beq.n	8007788 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	085a      	lsrs	r2, r3, #1
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	441a      	add	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	fbb2 f3f3 	udiv	r3, r2, r3
 8007768:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	2b0f      	cmp	r3, #15
 800776e:	d909      	bls.n	8007784 <UART_SetConfig+0x4a0>
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007776:	d205      	bcs.n	8007784 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	60da      	str	r2, [r3, #12]
 8007782:	e001      	b.n	8007788 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007794:	7fbb      	ldrb	r3, [r7, #30]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3720      	adds	r7, #32
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	40007c00 	.word	0x40007c00
 80077a4:	40023800 	.word	0x40023800
 80077a8:	00f42400 	.word	0x00f42400

080077ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b8:	f003 0308 	and.w	r3, r3, #8
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00a      	beq.n	80077d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00a      	beq.n	80077f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00a      	beq.n	800781a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781e:	f003 0304 	and.w	r3, r3, #4
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007840:	f003 0310 	and.w	r3, r3, #16
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00a      	beq.n	800785e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007862:	f003 0320 	and.w	r3, r3, #32
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01a      	beq.n	80078c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078aa:	d10a      	bne.n	80078c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	605a      	str	r2, [r3, #4]
  }
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08c      	sub	sp, #48	@ 0x30
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007900:	f7fb fcc8 	bl	8003294 <HAL_GetTick>
 8007904:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0308 	and.w	r3, r3, #8
 8007910:	2b08      	cmp	r3, #8
 8007912:	d12e      	bne.n	8007972 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007914:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791c:	2200      	movs	r2, #0
 800791e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f83b 	bl	800799e <UART_WaitOnFlagUntilTimeout>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d021      	beq.n	8007972 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	60fb      	str	r3, [r7, #12]
   return(result);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007942:	623b      	str	r3, [r7, #32]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	461a      	mov	r2, r3
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	61fb      	str	r3, [r7, #28]
 800794e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	69b9      	ldr	r1, [r7, #24]
 8007952:	69fa      	ldr	r2, [r7, #28]
 8007954:	e841 2300 	strex	r3, r2, [r1]
 8007958:	617b      	str	r3, [r7, #20]
   return(result);
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e6      	bne.n	800792e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2220      	movs	r2, #32
 8007964:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e011      	b.n	8007996 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2220      	movs	r2, #32
 8007976:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2220      	movs	r2, #32
 800797c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3728      	adds	r7, #40	@ 0x28
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	603b      	str	r3, [r7, #0]
 80079aa:	4613      	mov	r3, r2
 80079ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ae:	e04f      	b.n	8007a50 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b6:	d04b      	beq.n	8007a50 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079b8:	f7fb fc6c 	bl	8003294 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d302      	bcc.n	80079ce <UART_WaitOnFlagUntilTimeout+0x30>
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e04e      	b.n	8007a70 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d037      	beq.n	8007a50 <UART_WaitOnFlagUntilTimeout+0xb2>
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b80      	cmp	r3, #128	@ 0x80
 80079e4:	d034      	beq.n	8007a50 <UART_WaitOnFlagUntilTimeout+0xb2>
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b40      	cmp	r3, #64	@ 0x40
 80079ea:	d031      	beq.n	8007a50 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f003 0308 	and.w	r3, r3, #8
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d110      	bne.n	8007a1c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2208      	movs	r2, #8
 8007a00:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 f838 	bl	8007a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2208      	movs	r2, #8
 8007a0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e029      	b.n	8007a70 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a2a:	d111      	bne.n	8007a50 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 f81e 	bl	8007a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e00f      	b.n	8007a70 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	69da      	ldr	r2, [r3, #28]
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	bf0c      	ite	eq
 8007a60:	2301      	moveq	r3, #1
 8007a62:	2300      	movne	r3, #0
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	461a      	mov	r2, r3
 8007a68:	79fb      	ldrb	r3, [r7, #7]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d0a0      	beq.n	80079b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b095      	sub	sp, #84	@ 0x54
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007aa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007aa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e6      	bne.n	8007a80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	f023 0301 	bic.w	r3, r3, #1
 8007ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3308      	adds	r3, #8
 8007ad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ada:	e841 2300 	strex	r3, r2, [r1]
 8007ade:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e5      	bne.n	8007ab2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d118      	bne.n	8007b20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f023 0310 	bic.w	r3, r3, #16
 8007b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b0c:	61bb      	str	r3, [r7, #24]
 8007b0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6979      	ldr	r1, [r7, #20]
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	613b      	str	r3, [r7, #16]
   return(result);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e6      	bne.n	8007aee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2220      	movs	r2, #32
 8007b24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007b34:	bf00      	nop
 8007b36:	3754      	adds	r7, #84	@ 0x54
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <memset>:
 8007b40:	4402      	add	r2, r0
 8007b42:	4603      	mov	r3, r0
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d100      	bne.n	8007b4a <memset+0xa>
 8007b48:	4770      	bx	lr
 8007b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b4e:	e7f9      	b.n	8007b44 <memset+0x4>

08007b50 <__libc_init_array>:
 8007b50:	b570      	push	{r4, r5, r6, lr}
 8007b52:	4d0d      	ldr	r5, [pc, #52]	@ (8007b88 <__libc_init_array+0x38>)
 8007b54:	4c0d      	ldr	r4, [pc, #52]	@ (8007b8c <__libc_init_array+0x3c>)
 8007b56:	1b64      	subs	r4, r4, r5
 8007b58:	10a4      	asrs	r4, r4, #2
 8007b5a:	2600      	movs	r6, #0
 8007b5c:	42a6      	cmp	r6, r4
 8007b5e:	d109      	bne.n	8007b74 <__libc_init_array+0x24>
 8007b60:	4d0b      	ldr	r5, [pc, #44]	@ (8007b90 <__libc_init_array+0x40>)
 8007b62:	4c0c      	ldr	r4, [pc, #48]	@ (8007b94 <__libc_init_array+0x44>)
 8007b64:	f000 f826 	bl	8007bb4 <_init>
 8007b68:	1b64      	subs	r4, r4, r5
 8007b6a:	10a4      	asrs	r4, r4, #2
 8007b6c:	2600      	movs	r6, #0
 8007b6e:	42a6      	cmp	r6, r4
 8007b70:	d105      	bne.n	8007b7e <__libc_init_array+0x2e>
 8007b72:	bd70      	pop	{r4, r5, r6, pc}
 8007b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b78:	4798      	blx	r3
 8007b7a:	3601      	adds	r6, #1
 8007b7c:	e7ee      	b.n	8007b5c <__libc_init_array+0xc>
 8007b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b82:	4798      	blx	r3
 8007b84:	3601      	adds	r6, #1
 8007b86:	e7f2      	b.n	8007b6e <__libc_init_array+0x1e>
 8007b88:	08007bf4 	.word	0x08007bf4
 8007b8c:	08007bf4 	.word	0x08007bf4
 8007b90:	08007bf4 	.word	0x08007bf4
 8007b94:	08007bf8 	.word	0x08007bf8

08007b98 <memcpy>:
 8007b98:	440a      	add	r2, r1
 8007b9a:	4291      	cmp	r1, r2
 8007b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ba0:	d100      	bne.n	8007ba4 <memcpy+0xc>
 8007ba2:	4770      	bx	lr
 8007ba4:	b510      	push	{r4, lr}
 8007ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007baa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bae:	4291      	cmp	r1, r2
 8007bb0:	d1f9      	bne.n	8007ba6 <memcpy+0xe>
 8007bb2:	bd10      	pop	{r4, pc}

08007bb4 <_init>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	bf00      	nop
 8007bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bba:	bc08      	pop	{r3}
 8007bbc:	469e      	mov	lr, r3
 8007bbe:	4770      	bx	lr

08007bc0 <_fini>:
 8007bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc2:	bf00      	nop
 8007bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bc6:	bc08      	pop	{r3}
 8007bc8:	469e      	mov	lr, r3
 8007bca:	4770      	bx	lr
