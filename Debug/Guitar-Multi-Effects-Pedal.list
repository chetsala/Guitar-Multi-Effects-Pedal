
Guitar-Multi-Effects-Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089e4  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b18  08008bac  08008bac  00009bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6c4  0800a6c4  0000c018  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6c4  0800a6c4  0000b6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6cc  0800a6cc  0000c018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6cc  0800a6cc  0000b6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a6d0  0800a6d0  0000b6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  0800a6d4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e4  20000018  0800a6ec  0000c018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013fc  0800a6ec  0000c3fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020865  00000000  00000000  0000c048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004070  00000000  00000000  0002c8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c78  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001641  00000000  00000000  00032598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000056ae  00000000  00000000  00033bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024163  00000000  00000000  00039287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105655  00000000  00000000  0005d3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00162a3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007950  00000000  00000000  00162a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  0016a3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008b94 	.word	0x08008b94

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	08008b94 	.word	0x08008b94

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <Display_Init>:




void Display_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
    // Initialize the display hardware
    BSP_LCD_Init();
 80004fc:	f001 fb80 	bl	8001c00 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000500:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8000504:	2000      	movs	r0, #0
 8000506:	f001 fc13 	bl	8001d30 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(0);
 800050a:	2000      	movs	r0, #0
 800050c:	f001 fc70 	bl	8001df0 <BSP_LCD_SelectLayer>

    // Clear the display with a default color
    BSP_LCD_Clear(LCD_COLOR_WHITE); // Clear the LCD display
 8000510:	f04f 30ff 	mov.w	r0, #4294967295
 8000514:	f001 fcc8 	bl	8001ea8 <BSP_LCD_Clear>
    BSP_LCD_DisplayOn();
 8000518:	f001 fe42 	bl	80021a0 <BSP_LCD_DisplayOn>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800051c:	f04f 30ff 	mov.w	r0, #4294967295
 8000520:	f001 fc8e 	bl	8001e40 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000524:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000528:	f001 fc72 	bl	8001e10 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24); //set the font of the text
 800052c:	4802      	ldr	r0, [pc, #8]	@ (8000538 <Display_Init+0x40>)
 800052e:	f001 fca1 	bl	8001e74 <BSP_LCD_SetFont>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000004 	.word	0x20000004

0800053c <Display_Draw_Text>:


void Display_Draw_Text(const char *text, uint16_t x, uint16_t y)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	807b      	strh	r3, [r7, #2]
 8000548:	4613      	mov	r3, r2
 800054a:	803b      	strh	r3, [r7, #0]

    BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, CENTER_MODE);
 800054c:	8839      	ldrh	r1, [r7, #0]
 800054e:	8878      	ldrh	r0, [r7, #2]
 8000550:	2301      	movs	r3, #1
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	f001 fd14 	bl	8001f80 <BSP_LCD_DisplayStringAt>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
	processData(&input_data[BUFFER_SIZE / 2], &processed_data[BUFFER_SIZE / 2], BUFFER_SIZE / 2);
	dataReadyFlag = 1;
}

void BSP_AUDIO_OUT_HalfTransfer_CallBack()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	memcpy(&output_data[0], &processed_data[0], BUFFER_SIZE / 2 * sizeof(int16_t));
 8000564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000568:	4902      	ldr	r1, [pc, #8]	@ (8000574 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 800056a:	4803      	ldr	r0, [pc, #12]	@ (8000578 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x18>)
 800056c:	f008 fb04 	bl	8008b78 <memcpy>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000840 	.word	0x20000840
 8000578:	20000c40 	.word	0x20000c40

0800057c <BSP_AUDIO_OUT_TransferComplete_CallBack>:

void BSP_AUDIO_OUT_TransferComplete_CallBack()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	memcpy(&output_data[BUFFER_SIZE / 2], &processed_data[BUFFER_SIZE / 2], BUFFER_SIZE / 2 * sizeof(int16_t));
 8000580:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000584:	4902      	ldr	r1, [pc, #8]	@ (8000590 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
 8000586:	4803      	ldr	r0, [pc, #12]	@ (8000594 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x18>)
 8000588:	f008 faf6 	bl	8008b78 <memcpy>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000a40 	.word	0x20000a40
 8000594:	20000e40 	.word	0x20000e40

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f002 f9ce 	bl	800293c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f85c 	bl	800065c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005a4:	f000 f8ca 	bl	800073c <PeriphCommonClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 fbb6 	bl	8000d18 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ac:	f000 fb40 	bl	8000c30 <MX_DMA_Init>
  MX_SAI2_Init();
 80005b0:	f000 fa12 	bl	80009d8 <MX_SAI2_Init>
  MX_USART1_UART_Init();
 80005b4:	f000 fb0c 	bl	8000bd0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80005b8:	f000 fab6 	bl	8000b28 <MX_TIM1_Init>
  MX_DMA2D_Init();
 80005bc:	f000 f8e8 	bl	8000790 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80005c0:	f000 f958 	bl	8000874 <MX_LTDC_Init>
  MX_FMC_Init();
 80005c4:	f000 fb5a 	bl	8000c7c <MX_FMC_Init>
  MX_I2C3_Init();
 80005c8:	f000 f914 	bl	80007f4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  Display_Init();
 80005cc:	f7ff ff94 	bl	80004f8 <Display_Init>
  if (wm8994_Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_HEADPHONE , 80, SAI_AUDIO_FREQUENCY_48K)==0)
 80005d0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80005d4:	2250      	movs	r2, #80	@ 0x50
 80005d6:	f240 3102 	movw	r1, #770	@ 0x302
 80005da:	2034      	movs	r0, #52	@ 0x34
 80005dc:	f007 fa5a 	bl	8007a94 <wm8994_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d104      	bne.n	80005f0 <main+0x58>
  {
	  Display_Draw_Text("Codec initialized", 0, 10);
 80005e6:	220a      	movs	r2, #10
 80005e8:	2100      	movs	r1, #0
 80005ea:	4815      	ldr	r0, [pc, #84]	@ (8000640 <main+0xa8>)
 80005ec:	f7ff ffa6 	bl	800053c <Display_Draw_Text>
  }
  HAL_Delay(50);
 80005f0:	2032      	movs	r0, #50	@ 0x32
 80005f2:	f002 fa01 	bl	80029f8 <HAL_Delay>
  else{
	  Display_Draw_Text("SAI Recieve Not Setup", 0, 30);
  }
*/

  if (HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t *)output_data, BUFFER_SIZE) == HAL_OK)
 80005f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005fa:	4912      	ldr	r1, [pc, #72]	@ (8000644 <main+0xac>)
 80005fc:	4812      	ldr	r0, [pc, #72]	@ (8000648 <main+0xb0>)
 80005fe:	f005 ffa7 	bl	8006550 <HAL_SAI_Transmit_DMA>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d105      	bne.n	8000614 <main+0x7c>
  {
	  Display_Draw_Text("SAI Transmit Setup", 0, 50);
 8000608:	2232      	movs	r2, #50	@ 0x32
 800060a:	2100      	movs	r1, #0
 800060c:	480f      	ldr	r0, [pc, #60]	@ (800064c <main+0xb4>)
 800060e:	f7ff ff95 	bl	800053c <Display_Draw_Text>
 8000612:	e004      	b.n	800061e <main+0x86>
  }
  else{
	  Display_Draw_Text("SAI Transmit Not Setup", 0, 50);
 8000614:	2232      	movs	r2, #50	@ 0x32
 8000616:	2100      	movs	r1, #0
 8000618:	480d      	ldr	r0, [pc, #52]	@ (8000650 <main+0xb8>)
 800061a:	f7ff ff8f 	bl	800053c <Display_Draw_Text>
  }

  dataReadyFlag = 0;
 800061e:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <main+0xbc>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]

  fill_buffer_with_square_wave(input_data, BUFFER_SIZE);
 8000624:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000628:	480b      	ldr	r0, [pc, #44]	@ (8000658 <main+0xc0>)
 800062a:	f000 fc05 	bl	8000e38 <fill_buffer_with_square_wave>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (dataReadyFlag){
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <main+0xbc>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0fb      	beq.n	800062e <main+0x96>

		  // Reset the flag after processing
	dataReadyFlag = 0;
 8000636:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <main+0xbc>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
	  if (dataReadyFlag){
 800063c:	e7f7      	b.n	800062e <main+0x96>
 800063e:	bf00      	nop
 8000640:	08008bac 	.word	0x08008bac
 8000644:	20000c40 	.word	0x20000c40
 8000648:	20000170 	.word	0x20000170
 800064c:	08008bc0 	.word	0x08008bc0
 8000650:	08008bd4 	.word	0x08008bd4
 8000654:	20001040 	.word	0x20001040
 8000658:	20000440 	.word	0x20000440

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	@ 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f008 fa57 	bl	8008b1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000680:	f004 fbce 	bl	8004e20 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	4b2b      	ldr	r3, [pc, #172]	@ (8000734 <SystemClock_Config+0xd8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a2a      	ldr	r2, [pc, #168]	@ (8000734 <SystemClock_Config+0xd8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <SystemClock_Config+0xd8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemClock_Config+0xdc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a25      	ldr	r2, [pc, #148]	@ (8000738 <SystemClock_Config+0xdc>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemClock_Config+0xdc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006c8:	2319      	movs	r3, #25
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80006cc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80006d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 fbfe 	bl	8004ee0 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006ea:	f000 fbdd 	bl	8000ea8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ee:	f004 fba7 	bl	8004e40 <HAL_PWREx_EnableOverDrive>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006f8:	f000 fbd6 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000708:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2106      	movs	r1, #6
 800071a:	4618      	mov	r0, r3
 800071c:	f004 fe84 	bl	8005428 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000726:	f000 fbbf 	bl	8000ea8 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	@ 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0a2      	sub	sp, #136	@ 0x88
 8000740:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2284      	movs	r2, #132	@ 0x84
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f008 f9e8 	bl	8008b1e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2;
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <PeriphCommonClock_Config+0x50>)
 8000750:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000752:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000756:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000758:	2305      	movs	r3, #5
 800075a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 800075c:	2308      	movs	r3, #8
 800075e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000768:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800076e:	2300      	movs	r3, #0
 8000770:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f005 f83d 	bl	80057f4 <HAL_RCCEx_PeriphCLKConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8000780:	f000 fb92 	bl	8000ea8 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3788      	adds	r7, #136	@ 0x88
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	00100008 	.word	0x00100008

08000790 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_DMA2D_Init+0x5c>)
 8000796:	4a16      	ldr	r2, [pc, #88]	@ (80007f0 <MX_DMA2D_Init+0x60>)
 8000798:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_DMA2D_Init+0x5c>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_DMA2D_Init+0x5c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_DMA2D_Init+0x5c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_DMA2D_Init+0x5c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_DMA2D_Init+0x5c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_DMA2D_Init+0x5c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_DMA2D_Init+0x5c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007c4:	4809      	ldr	r0, [pc, #36]	@ (80007ec <MX_DMA2D_Init+0x5c>)
 80007c6:	f002 fe23 	bl	8003410 <HAL_DMA2D_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007d0:	f000 fb6a 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007d4:	2101      	movs	r1, #1
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_DMA2D_Init+0x5c>)
 80007d8:	f002 ff78 	bl	80036cc <HAL_DMA2D_ConfigLayer>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007e2:	f000 fb61 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000034 	.word	0x20000034
 80007f0:	4002b000 	.word	0x4002b000

080007f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_I2C3_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	@ (800086c <MX_I2C3_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <MX_I2C3_Init+0x74>)
 8000800:	4a1b      	ldr	r2, [pc, #108]	@ (8000870 <MX_I2C3_Init+0x7c>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000804:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_I2C3_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080a:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_I2C3_Init+0x74>)
 800080c:	2201      	movs	r2, #1
 800080e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <MX_I2C3_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_I2C3_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_I2C3_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_I2C3_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_I2C3_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800082e:	480e      	ldr	r0, [pc, #56]	@ (8000868 <MX_I2C3_Init+0x74>)
 8000830:	f003 fb4c 	bl	8003ecc <HAL_I2C_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800083a:	f000 fb35 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083e:	2100      	movs	r1, #0
 8000840:	4809      	ldr	r0, [pc, #36]	@ (8000868 <MX_I2C3_Init+0x74>)
 8000842:	f003 ff9f 	bl	8004784 <HAL_I2CEx_ConfigAnalogFilter>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800084c:	f000 fb2c 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MX_I2C3_Init+0x74>)
 8000854:	f003 ffe1 	bl	800481a <HAL_I2CEx_ConfigDigitalFilter>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800085e:	f000 fb23 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000074 	.word	0x20000074
 800086c:	40005c00 	.word	0x40005c00
 8000870:	00c0eaff 	.word	0x00c0eaff

08000874 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b09a      	sub	sp, #104	@ 0x68
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800087a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800087e:	2234      	movs	r2, #52	@ 0x34
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f008 f94b 	bl	8008b1e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2234      	movs	r2, #52	@ 0x34
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f008 f945 	bl	8008b1e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000894:	4b4e      	ldr	r3, [pc, #312]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 8000896:	4a4f      	ldr	r2, [pc, #316]	@ (80009d4 <MX_LTDC_Init+0x160>)
 8000898:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800089a:	4b4d      	ldr	r3, [pc, #308]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008a0:	4b4b      	ldr	r3, [pc, #300]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008a6:	4b4a      	ldr	r3, [pc, #296]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008ac:	4b48      	ldr	r3, [pc, #288]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80008b2:	4b47      	ldr	r3, [pc, #284]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80008b4:	2207      	movs	r2, #7
 80008b6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80008b8:	4b45      	ldr	r3, [pc, #276]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80008be:	4b44      	ldr	r3, [pc, #272]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80008c0:	220e      	movs	r2, #14
 80008c2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80008c4:	4b42      	ldr	r3, [pc, #264]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80008c6:	2205      	movs	r2, #5
 80008c8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80008ca:	4b41      	ldr	r3, [pc, #260]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80008cc:	f240 228e 	movw	r2, #654	@ 0x28e
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80008d2:	4b3f      	ldr	r3, [pc, #252]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80008d4:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80008d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80008da:	4b3d      	ldr	r3, [pc, #244]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80008dc:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80008e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80008e2:	4b3b      	ldr	r3, [pc, #236]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80008e4:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80008e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008ea:	4b39      	ldr	r3, [pc, #228]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008f2:	4b37      	ldr	r3, [pc, #220]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008fa:	4b35      	ldr	r3, [pc, #212]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000902:	4833      	ldr	r0, [pc, #204]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 8000904:	f003 ffd6 	bl	80048b4 <HAL_LTDC_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800090e:	f000 facb 	bl	8000ea8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000922:	2300      	movs	r3, #0
 8000924:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800092e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000932:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000934:	2305      	movs	r3, #5
 8000936:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000956:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800095a:	2200      	movs	r2, #0
 800095c:	4619      	mov	r1, r3
 800095e:	481c      	ldr	r0, [pc, #112]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 8000960:	f004 f878 	bl	8004a54 <HAL_LTDC_ConfigLayer>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800096a:	f000 fa9d 	bl	8000ea8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800098a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800098e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000990:	2305      	movs	r3, #5
 8000992:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80009b2:	463b      	mov	r3, r7
 80009b4:	2201      	movs	r2, #1
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <MX_LTDC_Init+0x15c>)
 80009ba:	f004 f84b 	bl	8004a54 <HAL_LTDC_ConfigLayer>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80009c4:	f000 fa70 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	3768      	adds	r7, #104	@ 0x68
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000c8 	.word	0x200000c8
 80009d4:	40016800 	.word	0x40016800

080009d8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80009dc:	4b4e      	ldr	r3, [pc, #312]	@ (8000b18 <MX_SAI2_Init+0x140>)
 80009de:	4a4f      	ldr	r2, [pc, #316]	@ (8000b1c <MX_SAI2_Init+0x144>)
 80009e0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80009e2:	4b4d      	ldr	r3, [pc, #308]	@ (8000b18 <MX_SAI2_Init+0x140>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80009e8:	4b4b      	ldr	r3, [pc, #300]	@ (8000b18 <MX_SAI2_Init+0x140>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 80009ee:	4b4a      	ldr	r3, [pc, #296]	@ (8000b18 <MX_SAI2_Init+0x140>)
 80009f0:	2280      	movs	r2, #128	@ 0x80
 80009f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80009f4:	4b48      	ldr	r3, [pc, #288]	@ (8000b18 <MX_SAI2_Init+0x140>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80009fa:	4b47      	ldr	r3, [pc, #284]	@ (8000b18 <MX_SAI2_Init+0x140>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000a00:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000a06:	4b44      	ldr	r3, [pc, #272]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000a0c:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a12:	4b41      	ldr	r3, [pc, #260]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000a18:	4b3f      	ldr	r3, [pc, #252]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a1a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000a1e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a20:	4b3d      	ldr	r3, [pc, #244]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a26:	4b3c      	ldr	r3, [pc, #240]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a2c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000a32:	4b39      	ldr	r3, [pc, #228]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 32;
 8000a38:	4b37      	ldr	r3, [pc, #220]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a3a:	2220      	movs	r2, #32
 8000a3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000a3e:	4b36      	ldr	r3, [pc, #216]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000a44:	4b34      	ldr	r3, [pc, #208]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000a4a:	4b33      	ldr	r3, [pc, #204]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000a50:	4b31      	ldr	r3, [pc, #196]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000a56:	4b30      	ldr	r3, [pc, #192]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000a62:	4b2d      	ldr	r3, [pc, #180]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000a68:	4b2b      	ldr	r3, [pc, #172]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000a6e:	482a      	ldr	r0, [pc, #168]	@ (8000b18 <MX_SAI2_Init+0x140>)
 8000a70:	f005 fbf0 	bl	8006254 <HAL_SAI_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_SAI2_Init+0xa6>
  {
    Error_Handler();
 8000a7a:	f000 fa15 	bl	8000ea8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000a7e:	4b28      	ldr	r3, [pc, #160]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000a80:	4a28      	ldr	r2, [pc, #160]	@ (8000b24 <MX_SAI2_Init+0x14c>)
 8000a82:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000a84:	4b26      	ldr	r3, [pc, #152]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000a8a:	4b25      	ldr	r3, [pc, #148]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8000a90:	4b23      	ldr	r3, [pc, #140]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000a92:	2280      	movs	r2, #128	@ 0x80
 8000a94:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000a96:	4b22      	ldr	r3, [pc, #136]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000a9c:	4b20      	ldr	r3, [pc, #128]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000ace:	2220      	movs	r2, #32
 8000ad0:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000af0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000af6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000b02:	4807      	ldr	r0, [pc, #28]	@ (8000b20 <MX_SAI2_Init+0x148>)
 8000b04:	f005 fba6 	bl	8006254 <HAL_SAI_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_SAI2_Init+0x13a>
  {
    Error_Handler();
 8000b0e:	f000 f9cb 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000170 	.word	0x20000170
 8000b1c:	40015c04 	.word	0x40015c04
 8000b20:	200001f4 	.word	0x200001f4
 8000b24:	40015c24 	.word	0x40015c24

08000b28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b46:	4b20      	ldr	r3, [pc, #128]	@ (8000bc8 <MX_TIM1_Init+0xa0>)
 8000b48:	4a20      	ldr	r2, [pc, #128]	@ (8000bcc <MX_TIM1_Init+0xa4>)
 8000b4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc8 <MX_TIM1_Init+0xa0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc8 <MX_TIM1_Init+0xa0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <MX_TIM1_Init+0xa0>)
 8000b5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b60:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <MX_TIM1_Init+0xa0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b66:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <MX_TIM1_Init+0xa0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <MX_TIM1_Init+0xa0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b72:	4815      	ldr	r0, [pc, #84]	@ (8000bc8 <MX_TIM1_Init+0xa0>)
 8000b74:	f005 ff1a 	bl	80069ac <HAL_TIM_Base_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b7e:	f000 f993 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480e      	ldr	r0, [pc, #56]	@ (8000bc8 <MX_TIM1_Init+0xa0>)
 8000b90:	f005 ff64 	bl	8006a5c <HAL_TIM_ConfigClockSource>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b9a:	f000 f985 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4619      	mov	r1, r3
 8000bae:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <MX_TIM1_Init+0xa0>)
 8000bb0:	f006 f964 	bl	8006e7c <HAL_TIMEx_MasterConfigSynchronization>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bba:	f000 f975 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000338 	.word	0x20000338
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bd6:	4a15      	ldr	r2, [pc, #84]	@ (8000c2c <MX_USART1_UART_Init+0x5c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bda:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c14:	f006 f9c0 	bl	8006f98 <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 f943 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000384 	.word	0x20000384
 8000c2c:	40011000 	.word	0x40011000

08000c30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <MX_DMA_Init+0x48>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c78 <MX_DMA_Init+0x48>)
 8000c3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <MX_DMA_Init+0x48>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	203c      	movs	r0, #60	@ 0x3c
 8000c54:	f001 ffcf 	bl	8002bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000c58:	203c      	movs	r0, #60	@ 0x3c
 8000c5a:	f001 ffe8 	bl	8002c2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2045      	movs	r0, #69	@ 0x45
 8000c64:	f001 ffc7 	bl	8002bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c68:	2045      	movs	r0, #69	@ 0x45
 8000c6a:	f001 ffe0 	bl	8002c2e <HAL_NVIC_EnableIRQ>

}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <MX_FMC_Init+0x94>)
 8000c96:	4a1f      	ldr	r2, [pc, #124]	@ (8000d14 <MX_FMC_Init+0x98>)
 8000c98:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <MX_FMC_Init+0x94>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_FMC_Init+0x94>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <MX_FMC_Init+0x94>)
 8000ca8:	2208      	movs	r2, #8
 8000caa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <MX_FMC_Init+0x94>)
 8000cae:	2210      	movs	r2, #16
 8000cb0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <MX_FMC_Init+0x94>)
 8000cb4:	2240      	movs	r2, #64	@ 0x40
 8000cb6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <MX_FMC_Init+0x94>)
 8000cba:	2280      	movs	r2, #128	@ 0x80
 8000cbc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_FMC_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_FMC_Init+0x94>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_FMC_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_FMC_Init+0x94>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000cda:	2310      	movs	r3, #16
 8000cdc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000cde:	2310      	movs	r3, #16
 8000ce0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000cea:	2310      	movs	r3, #16
 8000cec:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000cee:	2310      	movs	r3, #16
 8000cf0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4806      	ldr	r0, [pc, #24]	@ (8000d10 <MX_FMC_Init+0x94>)
 8000cf8:	f005 fdc7 	bl	800688a <HAL_SDRAM_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000d02:	f000 f8d1 	bl	8000ea8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000d06:	bf00      	nop
 8000d08:	3720      	adds	r7, #32
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000040c 	.word	0x2000040c
 8000d14:	a0000140 	.word	0xa0000140

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b08d      	sub	sp, #52	@ 0x34
 8000d1c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1e:	4b45      	ldr	r3, [pc, #276]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a44      	ldr	r2, [pc, #272]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d24:	f043 0310 	orr.w	r3, r3, #16
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b42      	ldr	r3, [pc, #264]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0310 	and.w	r3, r3, #16
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b3f      	ldr	r3, [pc, #252]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a3e      	ldr	r2, [pc, #248]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b3c      	ldr	r3, [pc, #240]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	4b39      	ldr	r3, [pc, #228]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a38      	ldr	r2, [pc, #224]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b36      	ldr	r3, [pc, #216]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d66:	4b33      	ldr	r3, [pc, #204]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a32      	ldr	r2, [pc, #200]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b30      	ldr	r3, [pc, #192]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d7a:	623b      	str	r3, [r7, #32]
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a2c      	ldr	r2, [pc, #176]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d92:	61fb      	str	r3, [r7, #28]
 8000d94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d96:	4b27      	ldr	r3, [pc, #156]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a26      	ldr	r2, [pc, #152]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b24      	ldr	r3, [pc, #144]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b21      	ldr	r3, [pc, #132]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a20      	ldr	r2, [pc, #128]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b1e      	ldr	r3, [pc, #120]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a1a      	ldr	r2, [pc, #104]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000dde:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a14      	ldr	r2, [pc, #80]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000de4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000df6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000dfc:	f043 0320 	orr.w	r3, r3, #32
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0320 	and.w	r3, r3, #32
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0e:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a08      	ldr	r2, [pc, #32]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <MX_GPIO_Init+0x11c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e26:	bf00      	nop
 8000e28:	3734      	adds	r7, #52	@ 0x34
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800

08000e38 <fill_buffer_with_square_wave>:

    dataReadyFlag = 0;
}

static void fill_buffer_with_square_wave(int16_t *buf, uint32_t num_samples)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	@ 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
    // Fill up a 100 Hz square wave
    // 48 kHz sample rate -> 480 samples in 100 Hz -> toggle every 240 samples
    int toggle_period = 240;
 8000e42:	23f0      	movs	r3, #240	@ 0xf0
 8000e44:	613b      	str	r3, [r7, #16]
    int count = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    int wave_state = 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]
    int magnitude = 30000;
 8000e4e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000e52:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < num_samples; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e01b      	b.n	8000e92 <fill_buffer_with_square_wave+0x5a>
    {
        // Set the buffer value based on the wave state
        buf[i] = magnitude * wave_state;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	fb12 f303 	smulbb	r3, r2, r3
 8000e66:	b299      	uxth	r1, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b20a      	sxth	r2, r1
 8000e72:	801a      	strh	r2, [r3, #0]

        count++;
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	3301      	adds	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
        if (count >= toggle_period)
 8000e7a:	69fa      	ldr	r2, [r7, #28]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	db04      	blt.n	8000e8c <fill_buffer_with_square_wave+0x54>
        {
            count = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
            wave_state = wave_state * (-1);  // Toggle the wave state between 1 and -1
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	425b      	negs	r3, r3
 8000e8a:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < num_samples; i++)
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d8df      	bhi.n	8000e5a <fill_buffer_with_square_wave+0x22>
        }
    }
}
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
 8000e9e:	3724      	adds	r7, #36	@ 0x24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <Error_Handler+0x8>

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	4a08      	ldr	r2, [pc, #32]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <HAL_DMA2D_MspInit+0x38>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d10b      	bne.n	8000f26 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_DMA2D_MspInit+0x3c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a09      	ldr	r2, [pc, #36]	@ (8000f38 <HAL_DMA2D_MspInit+0x3c>)
 8000f14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <HAL_DMA2D_MspInit+0x3c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	4002b000 	.word	0x4002b000
 8000f38:	40023800 	.word	0x40023800

08000f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b0ac      	sub	sp, #176	@ 0xb0
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	2284      	movs	r2, #132	@ 0x84
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f007 fdde 	bl	8008b1e <memset>
  if(hi2c->Instance==I2C3)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a33      	ldr	r2, [pc, #204]	@ (8001034 <HAL_I2C_MspInit+0xf8>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d15e      	bne.n	800102a <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000f6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f70:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f004 fc39 	bl	80057f4 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000f88:	f7ff ff8e 	bl	8000ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <HAL_I2C_MspInit+0xfc>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	4a29      	ldr	r2, [pc, #164]	@ (8001038 <HAL_I2C_MspInit+0xfc>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f98:	4b27      	ldr	r3, [pc, #156]	@ (8001038 <HAL_I2C_MspInit+0xfc>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa4:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <HAL_I2C_MspInit+0xfc>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa8:	4a23      	ldr	r2, [pc, #140]	@ (8001038 <HAL_I2C_MspInit+0xfc>)
 8000faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <HAL_I2C_MspInit+0xfc>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PH7     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc4:	2312      	movs	r3, #18
 8000fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fdc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4816      	ldr	r0, [pc, #88]	@ (800103c <HAL_I2C_MspInit+0x100>)
 8000fe4:	f002 fca0 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fee:	2312      	movs	r3, #18
 8000ff0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001000:	2304      	movs	r3, #4
 8001002:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001006:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800100a:	4619      	mov	r1, r3
 800100c:	480c      	ldr	r0, [pc, #48]	@ (8001040 <HAL_I2C_MspInit+0x104>)
 800100e:	f002 fc8b 	bl	8003928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <HAL_I2C_MspInit+0xfc>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	4a08      	ldr	r2, [pc, #32]	@ (8001038 <HAL_I2C_MspInit+0xfc>)
 8001018:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800101c:	6413      	str	r3, [r2, #64]	@ 0x40
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_I2C_MspInit+0xfc>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800102a:	bf00      	nop
 800102c:	37b0      	adds	r7, #176	@ 0xb0
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40005c00 	.word	0x40005c00
 8001038:	40023800 	.word	0x40023800
 800103c:	40020800 	.word	0x40020800
 8001040:	40021c00 	.word	0x40021c00

08001044 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <HAL_I2C_MspDeInit+0x38>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d10e      	bne.n	8001074 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <HAL_I2C_MspDeInit+0x3c>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	4a09      	ldr	r2, [pc, #36]	@ (8001080 <HAL_I2C_MspDeInit+0x3c>)
 800105c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001060:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PH7     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001062:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001066:	4807      	ldr	r0, [pc, #28]	@ (8001084 <HAL_I2C_MspDeInit+0x40>)
 8001068:	f002 fe0a 	bl	8003c80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	4806      	ldr	r0, [pc, #24]	@ (8001088 <HAL_I2C_MspDeInit+0x44>)
 8001070:	f002 fe06 	bl	8003c80 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40005c00 	.word	0x40005c00
 8001080:	40023800 	.word	0x40023800
 8001084:	40020800 	.word	0x40020800
 8001088:	40021c00 	.word	0x40021c00

0800108c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b092      	sub	sp, #72	@ 0x48
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a99      	ldr	r2, [pc, #612]	@ (8001310 <HAL_LTDC_MspInit+0x284>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	f040 812b 	bne.w	8001306 <HAL_LTDC_MspInit+0x27a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010b0:	4b98      	ldr	r3, [pc, #608]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 80010b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b4:	4a97      	ldr	r2, [pc, #604]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 80010b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80010bc:	4b95      	ldr	r3, [pc, #596]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 80010be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80010c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c8:	4b92      	ldr	r3, [pc, #584]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010cc:	4a91      	ldr	r2, [pc, #580]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	4a8b      	ldr	r2, [pc, #556]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ec:	4b89      	ldr	r3, [pc, #548]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f8:	4b86      	ldr	r3, [pc, #536]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	4a85      	ldr	r2, [pc, #532]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 80010fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001102:	6313      	str	r3, [r2, #48]	@ 0x30
 8001104:	4b83      	ldr	r3, [pc, #524]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001110:	4b80      	ldr	r3, [pc, #512]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001114:	4a7f      	ldr	r2, [pc, #508]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 8001116:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800111a:	6313      	str	r3, [r2, #48]	@ 0x30
 800111c:	4b7d      	ldr	r3, [pc, #500]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001124:	623b      	str	r3, [r7, #32]
 8001126:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001128:	4b7a      	ldr	r3, [pc, #488]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112c:	4a79      	ldr	r2, [pc, #484]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 800112e:	f043 0308 	orr.w	r3, r3, #8
 8001132:	6313      	str	r3, [r2, #48]	@ 0x30
 8001134:	4b77      	ldr	r3, [pc, #476]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001140:	4b74      	ldr	r3, [pc, #464]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001144:	4a73      	ldr	r2, [pc, #460]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6313      	str	r3, [r2, #48]	@ 0x30
 800114c:	4b71      	ldr	r3, [pc, #452]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b6e      	ldr	r3, [pc, #440]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115c:	4a6d      	ldr	r2, [pc, #436]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6313      	str	r3, [r2, #48]	@ 0x30
 8001164:	4b6b      	ldr	r3, [pc, #428]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001170:	4b68      	ldr	r3, [pc, #416]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001174:	4a67      	ldr	r2, [pc, #412]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 8001176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800117a:	6313      	str	r3, [r2, #48]	@ 0x30
 800117c:	4b65      	ldr	r3, [pc, #404]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001188:	4b62      	ldr	r3, [pc, #392]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118c:	4a61      	ldr	r2, [pc, #388]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 800118e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001192:	6313      	str	r3, [r2, #48]	@ 0x30
 8001194:	4b5f      	ldr	r3, [pc, #380]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a0:	4b5c      	ldr	r3, [pc, #368]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	4a5b      	ldr	r2, [pc, #364]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 80011a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ac:	4b59      	ldr	r3, [pc, #356]	@ (8001314 <HAL_LTDC_MspInit+0x288>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
    PI14     ------> LTDC_CLK
    PH3     ------> LTDC_R1
    PG6     ------> LTDC_R7
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80011b8:	2370      	movs	r3, #112	@ 0x70
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011c8:	230e      	movs	r3, #14
 80011ca:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011cc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011d0:	4619      	mov	r1, r3
 80011d2:	4851      	ldr	r0, [pc, #324]	@ (8001318 <HAL_LTDC_MspInit+0x28c>)
 80011d4:	f002 fba8 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011dc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ea:	230e      	movs	r3, #14
 80011ec:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011f2:	4619      	mov	r1, r3
 80011f4:	4849      	ldr	r0, [pc, #292]	@ (800131c <HAL_LTDC_MspInit+0x290>)
 80011f6:	f002 fb97 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_6;
 80011fa:	f44f 5321 	mov.w	r3, #10304	@ 0x2840
 80011fe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800120c:	230e      	movs	r3, #14
 800120e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001210:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001214:	4619      	mov	r1, r3
 8001216:	4842      	ldr	r0, [pc, #264]	@ (8001320 <HAL_LTDC_MspInit+0x294>)
 8001218:	f002 fb86 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800121c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001220:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800122e:	230e      	movs	r3, #14
 8001230:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001232:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001236:	4619      	mov	r1, r3
 8001238:	483a      	ldr	r0, [pc, #232]	@ (8001324 <HAL_LTDC_MspInit+0x298>)
 800123a:	f002 fb75 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 800123e:	2348      	movs	r3, #72	@ 0x48
 8001240:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800124e:	230e      	movs	r3, #14
 8001250:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001252:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001256:	4619      	mov	r1, r3
 8001258:	4833      	ldr	r0, [pc, #204]	@ (8001328 <HAL_LTDC_MspInit+0x29c>)
 800125a:	f002 fb65 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800125e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001262:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001270:	230e      	movs	r3, #14
 8001272:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001274:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001278:	4619      	mov	r1, r3
 800127a:	482c      	ldr	r0, [pc, #176]	@ (800132c <HAL_LTDC_MspInit+0x2a0>)
 800127c:	f002 fb54 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8;
 8001280:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001284:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001292:	230e      	movs	r3, #14
 8001294:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800129a:	4619      	mov	r1, r3
 800129c:	4824      	ldr	r0, [pc, #144]	@ (8001330 <HAL_LTDC_MspInit+0x2a4>)
 800129e:	f002 fb43 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_9
 80012a2:	f244 6313 	movw	r3, #17939	@ 0x4613
 80012a6:	637b      	str	r3, [r7, #52]	@ 0x34
                          |GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012b4:	230e      	movs	r3, #14
 80012b6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012bc:	4619      	mov	r1, r3
 80012be:	481d      	ldr	r0, [pc, #116]	@ (8001334 <HAL_LTDC_MspInit+0x2a8>)
 80012c0:	f002 fb32 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_4;
 80012c4:	2390      	movs	r3, #144	@ 0x90
 80012c6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012d4:	230e      	movs	r3, #14
 80012d6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012dc:	4619      	mov	r1, r3
 80012de:	4816      	ldr	r0, [pc, #88]	@ (8001338 <HAL_LTDC_MspInit+0x2ac>)
 80012e0:	f002 fb22 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 80012e4:	f24e 2308 	movw	r3, #57864	@ 0xe208
 80012e8:	637b      	str	r3, [r7, #52]	@ 0x34
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012f6:	230e      	movs	r3, #14
 80012f8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012fe:	4619      	mov	r1, r3
 8001300:	480e      	ldr	r0, [pc, #56]	@ (800133c <HAL_LTDC_MspInit+0x2b0>)
 8001302:	f002 fb11 	bl	8003928 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001306:	bf00      	nop
 8001308:	3748      	adds	r7, #72	@ 0x48
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40016800 	.word	0x40016800
 8001314:	40023800 	.word	0x40023800
 8001318:	40021000 	.word	0x40021000
 800131c:	40020400 	.word	0x40020400
 8001320:	40021800 	.word	0x40021800
 8001324:	40022400 	.word	0x40022400
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40020800 	.word	0x40020800
 8001330:	40020000 	.word	0x40020000
 8001334:	40022000 	.word	0x40022000
 8001338:	40022800 	.word	0x40022800
 800133c:	40021c00 	.word	0x40021c00

08001340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <HAL_TIM_Base_MspInit+0x38>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d10b      	bne.n	800136a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_TIM_Base_MspInit+0x3c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	4a09      	ldr	r2, [pc, #36]	@ (800137c <HAL_TIM_Base_MspInit+0x3c>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6453      	str	r3, [r2, #68]	@ 0x44
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <HAL_TIM_Base_MspInit+0x3c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40010000 	.word	0x40010000
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0ac      	sub	sp, #176	@ 0xb0
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001398:	f107 0318 	add.w	r3, r7, #24
 800139c:	2284      	movs	r2, #132	@ 0x84
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f007 fbbc 	bl	8008b1e <memset>
  if(huart->Instance==USART1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a32      	ldr	r2, [pc, #200]	@ (8001474 <HAL_UART_MspInit+0xf4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d15c      	bne.n	800146a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013b0:	2340      	movs	r3, #64	@ 0x40
 80013b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013b4:	2300      	movs	r3, #0
 80013b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b8:	f107 0318 	add.w	r3, r7, #24
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fa19 	bl	80057f4 <HAL_RCCEx_PeriphCLKConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013c8:	f7ff fd6e 	bl	8000ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001478 <HAL_UART_MspInit+0xf8>)
 80013ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d0:	4a29      	ldr	r2, [pc, #164]	@ (8001478 <HAL_UART_MspInit+0xf8>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d8:	4b27      	ldr	r3, [pc, #156]	@ (8001478 <HAL_UART_MspInit+0xf8>)
 80013da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <HAL_UART_MspInit+0xf8>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e8:	4a23      	ldr	r2, [pc, #140]	@ (8001478 <HAL_UART_MspInit+0xf8>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f0:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <HAL_UART_MspInit+0xf8>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <HAL_UART_MspInit+0xf8>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	4a1d      	ldr	r2, [pc, #116]	@ (8001478 <HAL_UART_MspInit+0xf8>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6313      	str	r3, [r2, #48]	@ 0x30
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <HAL_UART_MspInit+0xf8>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800142c:	2307      	movs	r3, #7
 800142e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001436:	4619      	mov	r1, r3
 8001438:	4810      	ldr	r0, [pc, #64]	@ (800147c <HAL_UART_MspInit+0xfc>)
 800143a:	f002 fa75 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800143e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001442:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001458:	2307      	movs	r3, #7
 800145a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001462:	4619      	mov	r1, r3
 8001464:	4806      	ldr	r0, [pc, #24]	@ (8001480 <HAL_UART_MspInit+0x100>)
 8001466:	f002 fa5f 	bl	8003928 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800146a:	bf00      	nop
 800146c:	37b0      	adds	r7, #176	@ 0xb0
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40011000 	.word	0x40011000
 8001478:	40023800 	.word	0x40023800
 800147c:	40020400 	.word	0x40020400
 8001480:	40020000 	.word	0x40020000

08001484 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001498:	4b3a      	ldr	r3, [pc, #232]	@ (8001584 <HAL_FMC_MspInit+0x100>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d16d      	bne.n	800157c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80014a0:	4b38      	ldr	r3, [pc, #224]	@ (8001584 <HAL_FMC_MspInit+0x100>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80014a6:	4b38      	ldr	r3, [pc, #224]	@ (8001588 <HAL_FMC_MspInit+0x104>)
 80014a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014aa:	4a37      	ldr	r2, [pc, #220]	@ (8001588 <HAL_FMC_MspInit+0x104>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6393      	str	r3, [r2, #56]	@ 0x38
 80014b2:	4b35      	ldr	r3, [pc, #212]	@ (8001588 <HAL_FMC_MspInit+0x104>)
 80014b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2
 80014be:	f248 1337 	movw	r3, #33079	@ 0x8137
 80014c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014d0:	230c      	movs	r3, #12
 80014d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	482c      	ldr	r0, [pc, #176]	@ (800158c <HAL_FMC_MspInit+0x108>)
 80014da:	f002 fa25 	bl	8003928 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80014de:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80014e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014f0:	230c      	movs	r3, #12
 80014f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	4825      	ldr	r0, [pc, #148]	@ (8001590 <HAL_FMC_MspInit+0x10c>)
 80014fa:	f002 fa15 	bl	8003928 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80014fe:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001502:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001510:	230c      	movs	r3, #12
 8001512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4619      	mov	r1, r3
 8001518:	481e      	ldr	r0, [pc, #120]	@ (8001594 <HAL_FMC_MspInit+0x110>)
 800151a:	f002 fa05 	bl	8003928 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_2;
 800151e:	2324      	movs	r3, #36	@ 0x24
 8001520:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800152e:	230c      	movs	r3, #12
 8001530:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	4619      	mov	r1, r3
 8001536:	4818      	ldr	r0, [pc, #96]	@ (8001598 <HAL_FMC_MspInit+0x114>)
 8001538:	f002 f9f6 	bl	8003928 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800153c:	2304      	movs	r3, #4
 800153e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800154c:	230c      	movs	r3, #12
 800154e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4619      	mov	r1, r3
 8001554:	4811      	ldr	r0, [pc, #68]	@ (800159c <HAL_FMC_MspInit+0x118>)
 8001556:	f002 f9e7 	bl	8003928 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 800155a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800155e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800156c:	230c      	movs	r3, #12
 800156e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	480a      	ldr	r0, [pc, #40]	@ (80015a0 <HAL_FMC_MspInit+0x11c>)
 8001576:	f002 f9d7 	bl	8003928 <HAL_GPIO_Init>
 800157a:	e000      	b.n	800157e <HAL_FMC_MspInit+0xfa>
    return;
 800157c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20001044 	.word	0x20001044
 8001588:	40023800 	.word	0x40023800
 800158c:	40021800 	.word	0x40021800
 8001590:	40020c00 	.word	0x40020c00
 8001594:	40021400 	.word	0x40021400
 8001598:	40021c00 	.word	0x40021c00
 800159c:	40020800 	.word	0x40020800
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015ac:	f7ff ff6a 	bl	8001484 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	@ 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001770 <HAL_SAI_MspInit+0x1b8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d16a      	bne.n	80016a0 <HAL_SAI_MspInit+0xe8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80015ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001774 <HAL_SAI_MspInit+0x1bc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10b      	bne.n	80015ea <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80015d2:	4b69      	ldr	r3, [pc, #420]	@ (8001778 <HAL_SAI_MspInit+0x1c0>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	4a68      	ldr	r2, [pc, #416]	@ (8001778 <HAL_SAI_MspInit+0x1c0>)
 80015d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015de:	4b66      	ldr	r3, [pc, #408]	@ (8001778 <HAL_SAI_MspInit+0x1c0>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80015ea:	4b62      	ldr	r3, [pc, #392]	@ (8001774 <HAL_SAI_MspInit+0x1bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3301      	adds	r3, #1
 80015f0:	4a60      	ldr	r2, [pc, #384]	@ (8001774 <HAL_SAI_MspInit+0x1bc>)
 80015f2:	6013      	str	r3, [r2, #0]
    PE0     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015f4:	2301      	movs	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001604:	230a      	movs	r3, #10
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	485b      	ldr	r0, [pc, #364]	@ (800177c <HAL_SAI_MspInit+0x1c4>)
 8001610:	f002 f98a 	bl	8003928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 8001614:	23e0      	movs	r3, #224	@ 0xe0
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001624:	230a      	movs	r3, #10
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	4854      	ldr	r0, [pc, #336]	@ (8001780 <HAL_SAI_MspInit+0x1c8>)
 8001630:	f002 f97a 	bl	8003928 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8001634:	4b53      	ldr	r3, [pc, #332]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 8001636:	4a54      	ldr	r2, [pc, #336]	@ (8001788 <HAL_SAI_MspInit+0x1d0>)
 8001638:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 800163a:	4b52      	ldr	r3, [pc, #328]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 800163c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001640:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001642:	4b50      	ldr	r3, [pc, #320]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 8001644:	2240      	movs	r2, #64	@ 0x40
 8001646:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001648:	4b4e      	ldr	r3, [pc, #312]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 800164e:	4b4d      	ldr	r3, [pc, #308]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 8001650:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001654:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001656:	4b4b      	ldr	r3, [pc, #300]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800165c:	4b49      	ldr	r3, [pc, #292]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8001662:	4b48      	ldr	r3, [pc, #288]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 8001664:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001668:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 800166a:	4b46      	ldr	r3, [pc, #280]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 800166c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001670:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001672:	4b44      	ldr	r3, [pc, #272]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8001678:	4842      	ldr	r0, [pc, #264]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 800167a:	f001 faf3 	bl	8002c64 <HAL_DMA_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_SAI_MspInit+0xd0>
    {
      Error_Handler();
 8001684:	f7ff fc10 	bl	8000ea8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a3e      	ldr	r2, [pc, #248]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 800168c:	671a      	str	r2, [r3, #112]	@ 0x70
 800168e:	4a3d      	ldr	r2, [pc, #244]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a3b      	ldr	r2, [pc, #236]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 8001698:	66da      	str	r2, [r3, #108]	@ 0x6c
 800169a:	4a3a      	ldr	r2, [pc, #232]	@ (8001784 <HAL_SAI_MspInit+0x1cc>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a39      	ldr	r2, [pc, #228]	@ (800178c <HAL_SAI_MspInit+0x1d4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d15d      	bne.n	8001766 <HAL_SAI_MspInit+0x1ae>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80016aa:	4b32      	ldr	r3, [pc, #200]	@ (8001774 <HAL_SAI_MspInit+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10b      	bne.n	80016ca <HAL_SAI_MspInit+0x112>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80016b2:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <HAL_SAI_MspInit+0x1c0>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	4a30      	ldr	r2, [pc, #192]	@ (8001778 <HAL_SAI_MspInit+0x1c0>)
 80016b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016be:	4b2e      	ldr	r3, [pc, #184]	@ (8001778 <HAL_SAI_MspInit+0x1c0>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80016ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <HAL_SAI_MspInit+0x1bc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	4a28      	ldr	r2, [pc, #160]	@ (8001774 <HAL_SAI_MspInit+0x1bc>)
 80016d2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80016e6:	230a      	movs	r3, #10
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4827      	ldr	r0, [pc, #156]	@ (8001790 <HAL_SAI_MspInit+0x1d8>)
 80016f2:	f002 f919 	bl	8003928 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream6;
 80016f6:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 80016f8:	4a27      	ldr	r2, [pc, #156]	@ (8001798 <HAL_SAI_MspInit+0x1e0>)
 80016fa:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 80016fc:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 80016fe:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001702:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001704:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800170a:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001710:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 8001712:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001716:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001718:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 800171a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800171e:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001720:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 8001722:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001726:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8001728:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 800172a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800172e:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8001730:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 8001732:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001736:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 800173e:	4815      	ldr	r0, [pc, #84]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 8001740:	f001 fa90 	bl	8002c64 <HAL_DMA_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_SAI_MspInit+0x196>
    {
      Error_Handler();
 800174a:	f7ff fbad 	bl	8000ea8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a10      	ldr	r2, [pc, #64]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 8001752:	671a      	str	r2, [r3, #112]	@ 0x70
 8001754:	4a0f      	ldr	r2, [pc, #60]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 800175e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001760:	4a0c      	ldr	r2, [pc, #48]	@ (8001794 <HAL_SAI_MspInit+0x1dc>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	@ 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40015c04 	.word	0x40015c04
 8001774:	20001048 	.word	0x20001048
 8001778:	40023800 	.word	0x40023800
 800177c:	40021000 	.word	0x40021000
 8001780:	40022000 	.word	0x40022000
 8001784:	20000278 	.word	0x20000278
 8001788:	40026470 	.word	0x40026470
 800178c:	40015c24 	.word	0x40015c24
 8001790:	40021800 	.word	0x40021800
 8001794:	200002d8 	.word	0x200002d8
 8001798:	400264a0 	.word	0x400264a0

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <NMI_Handler+0x4>

080017a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <MemManage_Handler+0x4>

080017b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f2:	f001 f8e1 	bl	80029b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <DMA2_Stream4_IRQHandler+0x10>)
 8001802:	f001 fb9b 	bl	8002f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000278 	.word	0x20000278

08001810 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <DMA2_Stream6_IRQHandler+0x10>)
 8001816:	f001 fb91 	bl	8002f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200002d8 	.word	0x200002d8

08001824 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <SystemInit+0x20>)
 800182a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800182e:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <SystemInit+0x20>)
 8001830:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001834:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001880 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800184c:	f7ff ffea 	bl	8001824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001850:	480c      	ldr	r0, [pc, #48]	@ (8001884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001852:	490d      	ldr	r1, [pc, #52]	@ (8001888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001854:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001868:	4c0a      	ldr	r4, [pc, #40]	@ (8001894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001876:	f007 f95b 	bl	8008b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187a:	f7fe fe8d 	bl	8000598 <main>
  bx  lr    
 800187e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001880:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800188c:	0800a6d4 	.word	0x0800a6d4
  ldr r2, =_sbss
 8001890:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001894:	200013fc 	.word	0x200013fc

08001898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC_IRQHandler>
	...

0800189c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	@ 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a51      	ldr	r2, [pc, #324]	@ (80019ec <I2Cx_MspInit+0x150>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d14d      	bne.n	8001948 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018ac:	4b50      	ldr	r3, [pc, #320]	@ (80019f0 <I2Cx_MspInit+0x154>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b0:	4a4f      	ldr	r2, [pc, #316]	@ (80019f0 <I2Cx_MspInit+0x154>)
 80018b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b8:	4b4d      	ldr	r3, [pc, #308]	@ (80019f0 <I2Cx_MspInit+0x154>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80018c8:	2312      	movs	r3, #18
 80018ca:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80018d0:	2302      	movs	r3, #2
 80018d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80018d4:	2304      	movs	r3, #4
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	4845      	ldr	r0, [pc, #276]	@ (80019f4 <I2Cx_MspInit+0x158>)
 80018e0:	f002 f822 	bl	8003928 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80018e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	4840      	ldr	r0, [pc, #256]	@ (80019f4 <I2Cx_MspInit+0x158>)
 80018f2:	f002 f819 	bl	8003928 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80018f6:	4b3e      	ldr	r3, [pc, #248]	@ (80019f0 <I2Cx_MspInit+0x154>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	4a3d      	ldr	r2, [pc, #244]	@ (80019f0 <I2Cx_MspInit+0x154>)
 80018fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001900:	6413      	str	r3, [r2, #64]	@ 0x40
 8001902:	4b3b      	ldr	r3, [pc, #236]	@ (80019f0 <I2Cx_MspInit+0x154>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800190e:	4b38      	ldr	r3, [pc, #224]	@ (80019f0 <I2Cx_MspInit+0x154>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4a37      	ldr	r2, [pc, #220]	@ (80019f0 <I2Cx_MspInit+0x154>)
 8001914:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001918:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800191a:	4b35      	ldr	r3, [pc, #212]	@ (80019f0 <I2Cx_MspInit+0x154>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4a34      	ldr	r2, [pc, #208]	@ (80019f0 <I2Cx_MspInit+0x154>)
 8001920:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001924:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	210f      	movs	r1, #15
 800192a:	2048      	movs	r0, #72	@ 0x48
 800192c:	f001 f963 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001930:	2048      	movs	r0, #72	@ 0x48
 8001932:	f001 f97c 	bl	8002c2e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	210f      	movs	r1, #15
 800193a:	2049      	movs	r0, #73	@ 0x49
 800193c:	f001 f95b 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001940:	2049      	movs	r0, #73	@ 0x49
 8001942:	f001 f974 	bl	8002c2e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001946:	e04d      	b.n	80019e4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001948:	4b29      	ldr	r3, [pc, #164]	@ (80019f0 <I2Cx_MspInit+0x154>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194c:	4a28      	ldr	r2, [pc, #160]	@ (80019f0 <I2Cx_MspInit+0x154>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	6313      	str	r3, [r2, #48]	@ 0x30
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <I2Cx_MspInit+0x154>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001964:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001966:	2312      	movs	r3, #18
 8001968:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800196e:	2302      	movs	r3, #2
 8001970:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001972:	2304      	movs	r3, #4
 8001974:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	481e      	ldr	r0, [pc, #120]	@ (80019f8 <I2Cx_MspInit+0x15c>)
 800197e:	f001 ffd3 	bl	8003928 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001982:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001986:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	481a      	ldr	r0, [pc, #104]	@ (80019f8 <I2Cx_MspInit+0x15c>)
 8001990:	f001 ffca 	bl	8003928 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001994:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <I2Cx_MspInit+0x154>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	4a15      	ldr	r2, [pc, #84]	@ (80019f0 <I2Cx_MspInit+0x154>)
 800199a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800199e:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <I2Cx_MspInit+0x154>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80019ac:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <I2Cx_MspInit+0x154>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a0f      	ldr	r2, [pc, #60]	@ (80019f0 <I2Cx_MspInit+0x154>)
 80019b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019b6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80019b8:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <I2Cx_MspInit+0x154>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4a0c      	ldr	r2, [pc, #48]	@ (80019f0 <I2Cx_MspInit+0x154>)
 80019be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80019c2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	210f      	movs	r1, #15
 80019c8:	201f      	movs	r0, #31
 80019ca:	f001 f914 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80019ce:	201f      	movs	r0, #31
 80019d0:	f001 f92d 	bl	8002c2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	210f      	movs	r1, #15
 80019d8:	2020      	movs	r0, #32
 80019da:	f001 f90c 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80019de:	2020      	movs	r0, #32
 80019e0:	f001 f925 	bl	8002c2e <HAL_NVIC_EnableIRQ>
}
 80019e4:	bf00      	nop
 80019e6:	3730      	adds	r7, #48	@ 0x30
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	2000104c 	.word	0x2000104c
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40021c00 	.word	0x40021c00
 80019f8:	40020400 	.word	0x40020400

080019fc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f002 fc41 	bl	800428c <HAL_I2C_GetState>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d125      	bne.n	8001a5c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a14      	ldr	r2, [pc, #80]	@ (8001a64 <I2Cx_Init+0x68>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d103      	bne.n	8001a20 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a13      	ldr	r2, [pc, #76]	@ (8001a68 <I2Cx_Init+0x6c>)
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e002      	b.n	8001a26 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a12      	ldr	r2, [pc, #72]	@ (8001a6c <I2Cx_Init+0x70>)
 8001a24:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a11      	ldr	r2, [pc, #68]	@ (8001a70 <I2Cx_Init+0x74>)
 8001a2a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff23 	bl	800189c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f002 fa38 	bl	8003ecc <HAL_I2C_Init>
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000104c 	.word	0x2000104c
 8001a68:	40005c00 	.word	0x40005c00
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	40912732 	.word	0x40912732

08001a74 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	72fb      	strb	r3, [r7, #11]
 8001a86:	460b      	mov	r3, r1
 8001a88:	813b      	strh	r3, [r7, #8]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a92:	7afb      	ldrb	r3, [r7, #11]
 8001a94:	b299      	uxth	r1, r3
 8001a96:	88f8      	ldrh	r0, [r7, #6]
 8001a98:	893a      	ldrh	r2, [r7, #8]
 8001a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a9e:	9302      	str	r3, [sp, #8]
 8001aa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f002 fada 	bl	8004064 <HAL_I2C_Mem_Write>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001aba:	7afb      	ldrb	r3, [r7, #11]
 8001abc:	4619      	mov	r1, r3
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f805 	bl	8001ace <I2Cx_Error>
  }
  return status;
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f002 fa92 	bl	8004004 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff8b 	bl	80019fc <I2Cx_Init>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001af4:	4802      	ldr	r0, [pc, #8]	@ (8001b00 <AUDIO_IO_Init+0x10>)
 8001af6:	f7ff ff81 	bl	80019fc <I2Cx_Init>
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000104c 	.word	0x2000104c

08001b04 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	80bb      	strh	r3, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8001b16:	887b      	ldrh	r3, [r7, #2]
 8001b18:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8001b1a:	89fb      	ldrh	r3, [r7, #14]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001b22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	b21a      	sxth	r2, r3
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001b36:	88ba      	ldrh	r2, [r7, #4]
 8001b38:	79f9      	ldrb	r1, [r7, #7]
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	1cbb      	adds	r3, r7, #2
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2302      	movs	r3, #2
 8001b44:	4803      	ldr	r0, [pc, #12]	@ (8001b54 <AUDIO_IO_Write+0x50>)
 8001b46:	f7ff ff95 	bl	8001a74 <I2Cx_WriteMultiple>
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000104c 	.word	0x2000104c

08001b58 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 ff49 	bl	80029f8 <HAL_Delay>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8001b76:	f7fe fd01 	bl	800057c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8001b8a:	f7fe fce9 	bl	8000560 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8001ba0:	480e      	ldr	r0, [pc, #56]	@ (8001bdc <HAL_SAI_ErrorCallback+0x44>)
 8001ba2:	f004 fd85 	bl	80066b0 <HAL_SAI_GetState>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8001baa:	480d      	ldr	r0, [pc, #52]	@ (8001be0 <HAL_SAI_ErrorCallback+0x48>)
 8001bac:	f004 fd80 	bl	80066b0 <HAL_SAI_GetState>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d002      	beq.n	8001bc0 <HAL_SAI_ErrorCallback+0x28>
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	2b12      	cmp	r3, #18
 8001bbe:	d101      	bne.n	8001bc4 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001bc0:	f000 f810 	bl	8001be4 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8001bc4:	7bbb      	ldrb	r3, [r7, #14]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d002      	beq.n	8001bd0 <HAL_SAI_ErrorCallback+0x38>
 8001bca:	7bbb      	ldrb	r3, [r7, #14]
 8001bcc:	2b22      	cmp	r3, #34	@ 0x22
 8001bce:	d101      	bne.n	8001bd4 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8001bd0:	f000 f80f 	bl	8001bf2 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200010a0 	.word	0x200010a0
 8001be0:	20001124 	.word	0x20001124

08001be4 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001c04:	4b31      	ldr	r3, [pc, #196]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c06:	2228      	movs	r2, #40	@ 0x28
 8001c08:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001c0a:	4b30      	ldr	r3, [pc, #192]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c0c:	2209      	movs	r2, #9
 8001c0e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001c10:	4b2e      	ldr	r3, [pc, #184]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c12:	2235      	movs	r2, #53	@ 0x35
 8001c14:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001c16:	4b2d      	ldr	r3, [pc, #180]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c18:	220b      	movs	r2, #11
 8001c1a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c1e:	f240 121b 	movw	r2, #283	@ 0x11b
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001c24:	4b29      	ldr	r3, [pc, #164]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c26:	f240 2215 	movw	r2, #533	@ 0x215
 8001c2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001c2c:	4b27      	ldr	r3, [pc, #156]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c2e:	f240 121d 	movw	r2, #285	@ 0x11d
 8001c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001c34:	4b25      	ldr	r3, [pc, #148]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c36:	f240 2235 	movw	r2, #565	@ 0x235
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4823      	ldr	r0, [pc, #140]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c40:	f000 fba6 	bl	8002390 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001c44:	4b21      	ldr	r3, [pc, #132]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c46:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001c4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c4e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8001c52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001c64:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001c6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001c72:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001c78:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001c7e:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	@ (8001cd0 <BSP_LCD_Init+0xd0>)
 8001c88:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001c8a:	4810      	ldr	r0, [pc, #64]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c8c:	f002 ff20 	bl	8004ad0 <HAL_LTDC_GetState>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001c96:	2100      	movs	r1, #0
 8001c98:	480c      	ldr	r0, [pc, #48]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001c9a:	f000 fa9f 	bl	80021dc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8001c9e:	480b      	ldr	r0, [pc, #44]	@ (8001ccc <BSP_LCD_Init+0xcc>)
 8001ca0:	f002 fe08 	bl	80048b4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001caa:	480a      	ldr	r0, [pc, #40]	@ (8001cd4 <BSP_LCD_Init+0xd4>)
 8001cac:	f002 f8f4 	bl	8003e98 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2108      	movs	r1, #8
 8001cb4:	4808      	ldr	r0, [pc, #32]	@ (8001cd8 <BSP_LCD_Init+0xd8>)
 8001cb6:	f002 f8ef 	bl	8003e98 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001cba:	f000 fc89 	bl	80025d0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001cbe:	4807      	ldr	r0, [pc, #28]	@ (8001cdc <BSP_LCD_Init+0xdc>)
 8001cc0:	f000 f8d8 	bl	8001e74 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200011a8 	.word	0x200011a8
 8001cd0:	40016800 	.word	0x40016800
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40022800 	.word	0x40022800
 8001cdc:	20000004 	.word	0x20000004

08001ce0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <BSP_LCD_GetXSize+0x20>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a06      	ldr	r2, [pc, #24]	@ (8001d04 <BSP_LCD_GetXSize+0x24>)
 8001cea:	2134      	movs	r1, #52	@ 0x34
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3360      	adds	r3, #96	@ 0x60
 8001cf4:	681b      	ldr	r3, [r3, #0]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	20001290 	.word	0x20001290
 8001d04:	200011a8 	.word	0x200011a8

08001d08 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <BSP_LCD_GetYSize+0x20>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a06      	ldr	r2, [pc, #24]	@ (8001d2c <BSP_LCD_GetYSize+0x24>)
 8001d12:	2134      	movs	r1, #52	@ 0x34
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3364      	adds	r3, #100	@ 0x64
 8001d1c:	681b      	ldr	r3, [r3, #0]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	20001290 	.word	0x20001290
 8001d2c:	200011a8 	.word	0x200011a8

08001d30 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b090      	sub	sp, #64	@ 0x40
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001d40:	f7ff ffce 	bl	8001ce0 <BSP_LCD_GetXSize>
 8001d44:	4603      	mov	r3, r0
 8001d46:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001d4c:	f7ff ffdc 	bl	8001d08 <BSP_LCD_GetYSize>
 8001d50:	4603      	mov	r3, r0
 8001d52:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8001d5c:	23ff      	movs	r3, #255	@ 0xff
 8001d5e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001d76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001d7c:	2307      	movs	r3, #7
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001d80:	f7ff ffae 	bl	8001ce0 <BSP_LCD_GetXSize>
 8001d84:	4603      	mov	r3, r0
 8001d86:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001d88:	f7ff ffbe 	bl	8001d08 <BSP_LCD_GetYSize>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001d90:	88fa      	ldrh	r2, [r7, #6]
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	4619      	mov	r1, r3
 8001d98:	4812      	ldr	r0, [pc, #72]	@ (8001de4 <BSP_LCD_LayerDefaultInit+0xb4>)
 8001d9a:	f002 fe5b 	bl	8004a54 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001d9e:	88fa      	ldrh	r2, [r7, #6]
 8001da0:	4911      	ldr	r1, [pc, #68]	@ (8001de8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	3304      	adds	r3, #4
 8001dae:	f04f 32ff 	mov.w	r2, #4294967295
 8001db2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001db4:	88fa      	ldrh	r2, [r7, #6]
 8001db6:	490c      	ldr	r1, [pc, #48]	@ (8001de8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	4a09      	ldr	r2, [pc, #36]	@ (8001dec <BSP_LCD_LayerDefaultInit+0xbc>)
 8001dc6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001dc8:	88fa      	ldrh	r2, [r7, #6]
 8001dca:	4907      	ldr	r1, [pc, #28]	@ (8001de8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8001dda:	601a      	str	r2, [r3, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	3740      	adds	r7, #64	@ 0x40
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200011a8 	.word	0x200011a8
 8001de8:	20001294 	.word	0x20001294
 8001dec:	20000004 	.word	0x20000004

08001df0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001df8:	4a04      	ldr	r2, [pc, #16]	@ (8001e0c <BSP_LCD_SelectLayer+0x1c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
} 
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20001290 	.word	0x20001290

08001e10 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001e18:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <BSP_LCD_SetTextColor+0x28>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4907      	ldr	r1, [pc, #28]	@ (8001e3c <BSP_LCD_SetTextColor+0x2c>)
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	20001290 	.word	0x20001290
 8001e3c:	20001294 	.word	0x20001294

08001e40 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <BSP_LCD_SetBackColor+0x2c>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4908      	ldr	r1, [pc, #32]	@ (8001e70 <BSP_LCD_SetBackColor+0x30>)
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	3304      	adds	r3, #4
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	601a      	str	r2, [r3, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20001290 	.word	0x20001290
 8001e70:	20001294 	.word	0x20001294

08001e74 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <BSP_LCD_SetFont+0x2c>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4908      	ldr	r1, [pc, #32]	@ (8001ea4 <BSP_LCD_SetFont+0x30>)
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3308      	adds	r3, #8
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	601a      	str	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20001290 	.word	0x20001290
 8001ea4:	20001294 	.word	0x20001294

08001ea8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <BSP_LCD_Clear+0x48>)
 8001eb2:	681c      	ldr	r4, [r3, #0]
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef0 <BSP_LCD_Clear+0x48>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef4 <BSP_LCD_Clear+0x4c>)
 8001eba:	2134      	movs	r1, #52	@ 0x34
 8001ebc:	fb01 f303 	mul.w	r3, r1, r3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	335c      	adds	r3, #92	@ 0x5c
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461e      	mov	r6, r3
 8001ec8:	f7ff ff0a 	bl	8001ce0 <BSP_LCD_GetXSize>
 8001ecc:	4605      	mov	r5, r0
 8001ece:	f7ff ff1b 	bl	8001d08 <BSP_LCD_GetYSize>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	4613      	mov	r3, r2
 8001ede:	462a      	mov	r2, r5
 8001ee0:	4631      	mov	r1, r6
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f000 fb28 	bl	8002538 <LL_FillBuffer>
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef0:	20001290 	.word	0x20001290
 8001ef4:	200011a8 	.word	0x200011a8

08001ef8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
 8001f02:	460b      	mov	r3, r1
 8001f04:	80bb      	strh	r3, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f78 <BSP_LCD_DisplayChar+0x80>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	491b      	ldr	r1, [pc, #108]	@ (8001f7c <BSP_LCD_DisplayChar+0x84>)
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	3308      	adds	r3, #8
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001f26:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <BSP_LCD_DisplayChar+0x80>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4c14      	ldr	r4, [pc, #80]	@ (8001f7c <BSP_LCD_DisplayChar+0x84>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4423      	add	r3, r4
 8001f36:	3308      	adds	r3, #8
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001f3c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001f40:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <BSP_LCD_DisplayChar+0x80>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4c0d      	ldr	r4, [pc, #52]	@ (8001f7c <BSP_LCD_DisplayChar+0x84>)
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4423      	add	r3, r4
 8001f50:	3308      	adds	r3, #8
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	889b      	ldrh	r3, [r3, #4]
 8001f56:	3307      	adds	r3, #7
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	da00      	bge.n	8001f5e <BSP_LCD_DisplayChar+0x66>
 8001f5c:	3307      	adds	r3, #7
 8001f5e:	10db      	asrs	r3, r3, #3
 8001f60:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001f64:	18ca      	adds	r2, r1, r3
 8001f66:	88b9      	ldrh	r1, [r7, #4]
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fa2c 	bl	80023c8 <DrawChar>
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd90      	pop	{r4, r7, pc}
 8001f78:	20001290 	.word	0x20001290
 8001f7c:	20001294 	.word	0x20001294

08001f80 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60ba      	str	r2, [r7, #8]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	81fb      	strh	r3, [r7, #14]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	81bb      	strh	r3, [r7, #12]
 8001f92:	4613      	mov	r3, r2
 8001f94:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8001f96:	2301      	movs	r3, #1
 8001f98:	83fb      	strh	r3, [r7, #30]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001faa:	e002      	b.n	8001fb2 <BSP_LCD_DisplayStringAt+0x32>
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	617a      	str	r2, [r7, #20]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f6      	bne.n	8001fac <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001fbe:	f7ff fe8f 	bl	8001ce0 <BSP_LCD_GetXSize>
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	4b50      	ldr	r3, [pc, #320]	@ (8002108 <BSP_LCD_DisplayStringAt+0x188>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4850      	ldr	r0, [pc, #320]	@ (800210c <BSP_LCD_DisplayStringAt+0x18c>)
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4403      	add	r3, r0
 8001fd4:	3308      	adds	r3, #8
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	889b      	ldrh	r3, [r3, #4]
 8001fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fde:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d01c      	beq.n	8002020 <BSP_LCD_DisplayStringAt+0xa0>
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	dc33      	bgt.n	8002052 <BSP_LCD_DisplayStringAt+0xd2>
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d002      	beq.n	8001ff4 <BSP_LCD_DisplayStringAt+0x74>
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d019      	beq.n	8002026 <BSP_LCD_DisplayStringAt+0xa6>
 8001ff2:	e02e      	b.n	8002052 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	1ad1      	subs	r1, r2, r3
 8001ffa:	4b43      	ldr	r3, [pc, #268]	@ (8002108 <BSP_LCD_DisplayStringAt+0x188>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4843      	ldr	r0, [pc, #268]	@ (800210c <BSP_LCD_DisplayStringAt+0x18c>)
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4403      	add	r3, r0
 800200a:	3308      	adds	r3, #8
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	889b      	ldrh	r3, [r3, #4]
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	085b      	lsrs	r3, r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	89fb      	ldrh	r3, [r7, #14]
 800201a:	4413      	add	r3, r2
 800201c:	83fb      	strh	r3, [r7, #30]
      break;
 800201e:	e01b      	b.n	8002058 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002020:	89fb      	ldrh	r3, [r7, #14]
 8002022:	83fb      	strh	r3, [r7, #30]
      break;
 8002024:	e018      	b.n	8002058 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	b299      	uxth	r1, r3
 800202e:	4b36      	ldr	r3, [pc, #216]	@ (8002108 <BSP_LCD_DisplayStringAt+0x188>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4836      	ldr	r0, [pc, #216]	@ (800210c <BSP_LCD_DisplayStringAt+0x18c>)
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4403      	add	r3, r0
 800203e:	3308      	adds	r3, #8
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	889b      	ldrh	r3, [r3, #4]
 8002044:	fb11 f303 	smulbb	r3, r1, r3
 8002048:	b29a      	uxth	r2, r3
 800204a:	89fb      	ldrh	r3, [r7, #14]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	83fb      	strh	r3, [r7, #30]
      break;
 8002050:	e002      	b.n	8002058 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002052:	89fb      	ldrh	r3, [r7, #14]
 8002054:	83fb      	strh	r3, [r7, #30]
      break;
 8002056:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002058:	8bfb      	ldrh	r3, [r7, #30]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <BSP_LCD_DisplayStringAt+0xe6>
 800205e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002062:	2b00      	cmp	r3, #0
 8002064:	da1d      	bge.n	80020a2 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002066:	2301      	movs	r3, #1
 8002068:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800206a:	e01a      	b.n	80020a2 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	781a      	ldrb	r2, [r3, #0]
 8002070:	89b9      	ldrh	r1, [r7, #12]
 8002072:	8bfb      	ldrh	r3, [r7, #30]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff3f 	bl	8001ef8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800207a:	4b23      	ldr	r3, [pc, #140]	@ (8002108 <BSP_LCD_DisplayStringAt+0x188>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4923      	ldr	r1, [pc, #140]	@ (800210c <BSP_LCD_DisplayStringAt+0x18c>)
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	3308      	adds	r3, #8
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	889a      	ldrh	r2, [r3, #4]
 8002090:	8bfb      	ldrh	r3, [r7, #30]
 8002092:	4413      	add	r3, r2
 8002094:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3301      	adds	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
    i++;
 800209c:	8bbb      	ldrh	r3, [r7, #28]
 800209e:	3301      	adds	r3, #1
 80020a0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2dc      	uxtb	r4, r3
 80020b0:	f7ff fe16 	bl	8001ce0 <BSP_LCD_GetXSize>
 80020b4:	8bb9      	ldrh	r1, [r7, #28]
 80020b6:	4b14      	ldr	r3, [pc, #80]	@ (8002108 <BSP_LCD_DisplayStringAt+0x188>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4d14      	ldr	r5, [pc, #80]	@ (800210c <BSP_LCD_DisplayStringAt+0x18c>)
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	442b      	add	r3, r5
 80020c6:	3308      	adds	r3, #8
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	889b      	ldrh	r3, [r3, #4]
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	1ac3      	subs	r3, r0, r3
 80020d2:	b299      	uxth	r1, r3
 80020d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <BSP_LCD_DisplayStringAt+0x188>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	480c      	ldr	r0, [pc, #48]	@ (800210c <BSP_LCD_DisplayStringAt+0x18c>)
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4403      	add	r3, r0
 80020e4:	3308      	adds	r3, #8
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	889b      	ldrh	r3, [r3, #4]
 80020ea:	4299      	cmp	r1, r3
 80020ec:	bf2c      	ite	cs
 80020ee:	2301      	movcs	r3, #1
 80020f0:	2300      	movcc	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	4023      	ands	r3, r4
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1b7      	bne.n	800206c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bdb0      	pop	{r4, r5, r7, pc}
 8002106:	bf00      	nop
 8002108:	20001290 	.word	0x20001290
 800210c:	20001294 	.word	0x20001294

08002110 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002110:	b5b0      	push	{r4, r5, r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	603a      	str	r2, [r7, #0]
 800211a:	80fb      	strh	r3, [r7, #6]
 800211c:	460b      	mov	r3, r1
 800211e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002120:	4b1d      	ldr	r3, [pc, #116]	@ (8002198 <BSP_LCD_DrawPixel+0x88>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1d      	ldr	r2, [pc, #116]	@ (800219c <BSP_LCD_DrawPixel+0x8c>)
 8002126:	2134      	movs	r1, #52	@ 0x34
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3348      	adds	r3, #72	@ 0x48
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d116      	bne.n	8002164 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002136:	4b18      	ldr	r3, [pc, #96]	@ (8002198 <BSP_LCD_DrawPixel+0x88>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a18      	ldr	r2, [pc, #96]	@ (800219c <BSP_LCD_DrawPixel+0x8c>)
 800213c:	2134      	movs	r1, #52	@ 0x34
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	335c      	adds	r3, #92	@ 0x5c
 8002146:	681c      	ldr	r4, [r3, #0]
 8002148:	88bd      	ldrh	r5, [r7, #4]
 800214a:	f7ff fdc9 	bl	8001ce0 <BSP_LCD_GetXSize>
 800214e:	4603      	mov	r3, r0
 8002150:	fb03 f205 	mul.w	r2, r3, r5
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	4413      	add	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4423      	add	r3, r4
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	b292      	uxth	r2, r2
 8002160:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002162:	e015      	b.n	8002190 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <BSP_LCD_DrawPixel+0x88>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0c      	ldr	r2, [pc, #48]	@ (800219c <BSP_LCD_DrawPixel+0x8c>)
 800216a:	2134      	movs	r1, #52	@ 0x34
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	335c      	adds	r3, #92	@ 0x5c
 8002174:	681c      	ldr	r4, [r3, #0]
 8002176:	88bd      	ldrh	r5, [r7, #4]
 8002178:	f7ff fdb2 	bl	8001ce0 <BSP_LCD_GetXSize>
 800217c:	4603      	mov	r3, r0
 800217e:	fb03 f205 	mul.w	r2, r3, r5
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4423      	add	r3, r4
 800218a:	461a      	mov	r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	6013      	str	r3, [r2, #0]
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bdb0      	pop	{r4, r5, r7, pc}
 8002198:	20001290 	.word	0x20001290
 800219c:	200011a8 	.word	0x200011a8

080021a0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80021a4:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <BSP_LCD_DisplayOn+0x30>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <BSP_LCD_DisplayOn+0x30>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80021b4:	2201      	movs	r2, #1
 80021b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021ba:	4806      	ldr	r0, [pc, #24]	@ (80021d4 <BSP_LCD_DisplayOn+0x34>)
 80021bc:	f001 fe6c 	bl	8003e98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80021c0:	2201      	movs	r2, #1
 80021c2:	2108      	movs	r1, #8
 80021c4:	4804      	ldr	r0, [pc, #16]	@ (80021d8 <BSP_LCD_DisplayOn+0x38>)
 80021c6:	f001 fe67 	bl	8003e98 <HAL_GPIO_WritePin>
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200011a8 	.word	0x200011a8
 80021d4:	40022000 	.word	0x40022000
 80021d8:	40022800 	.word	0x40022800

080021dc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b090      	sub	sp, #64	@ 0x40
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80021e6:	4b64      	ldr	r3, [pc, #400]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	4a63      	ldr	r2, [pc, #396]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 80021ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80021f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021f2:	4b61      	ldr	r3, [pc, #388]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80021fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	4a5d      	ldr	r2, [pc, #372]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 8002204:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002208:	6313      	str	r3, [r2, #48]	@ 0x30
 800220a:	4b5b      	ldr	r3, [pc, #364]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002216:	4b58      	ldr	r3, [pc, #352]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a57      	ldr	r2, [pc, #348]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 800221c:	f043 0310 	orr.w	r3, r3, #16
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b55      	ldr	r3, [pc, #340]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	623b      	str	r3, [r7, #32]
 800222c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800222e:	4b52      	ldr	r3, [pc, #328]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4a51      	ldr	r2, [pc, #324]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 8002234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
 800223a:	4b4f      	ldr	r3, [pc, #316]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002246:	4b4c      	ldr	r3, [pc, #304]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	4a4b      	ldr	r2, [pc, #300]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002250:	6313      	str	r3, [r2, #48]	@ 0x30
 8002252:	4b49      	ldr	r3, [pc, #292]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225a:	61bb      	str	r3, [r7, #24]
 800225c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800225e:	4b46      	ldr	r3, [pc, #280]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a45      	ldr	r2, [pc, #276]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 8002264:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b43      	ldr	r3, [pc, #268]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002276:	4b40      	ldr	r3, [pc, #256]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	4a3f      	ldr	r2, [pc, #252]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 800227c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002280:	6313      	str	r3, [r2, #48]	@ 0x30
 8002282:	4b3d      	ldr	r3, [pc, #244]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800228e:	4b3a      	ldr	r3, [pc, #232]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a39      	ldr	r2, [pc, #228]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b37      	ldr	r3, [pc, #220]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80022a6:	4b34      	ldr	r3, [pc, #208]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a33      	ldr	r2, [pc, #204]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 80022ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <BSP_LCD_MspInit+0x19c>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80022be:	2310      	movs	r3, #16
 80022c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80022ca:	2302      	movs	r3, #2
 80022cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80022ce:	230e      	movs	r3, #14
 80022d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80022d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022d6:	4619      	mov	r1, r3
 80022d8:	4828      	ldr	r0, [pc, #160]	@ (800237c <BSP_LCD_MspInit+0x1a0>)
 80022da:	f001 fb25 	bl	8003928 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80022de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80022e8:	2309      	movs	r3, #9
 80022ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80022ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022f0:	4619      	mov	r1, r3
 80022f2:	4823      	ldr	r0, [pc, #140]	@ (8002380 <BSP_LCD_MspInit+0x1a4>)
 80022f4:	f001 fb18 	bl	8003928 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80022f8:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002302:	230e      	movs	r3, #14
 8002304:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002306:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800230a:	4619      	mov	r1, r3
 800230c:	481d      	ldr	r0, [pc, #116]	@ (8002384 <BSP_LCD_MspInit+0x1a8>)
 800230e:	f001 fb0b 	bl	8003928 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002312:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002316:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800231c:	230e      	movs	r3, #14
 800231e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002320:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002324:	4619      	mov	r1, r3
 8002326:	4818      	ldr	r0, [pc, #96]	@ (8002388 <BSP_LCD_MspInit+0x1ac>)
 8002328:	f001 fafe 	bl	8003928 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800232c:	23f7      	movs	r3, #247	@ 0xf7
 800232e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002334:	230e      	movs	r3, #14
 8002336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002338:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800233c:	4619      	mov	r1, r3
 800233e:	4813      	ldr	r0, [pc, #76]	@ (800238c <BSP_LCD_MspInit+0x1b0>)
 8002340:	f001 faf2 	bl	8003928 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800234a:	2301      	movs	r3, #1
 800234c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800234e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002352:	4619      	mov	r1, r3
 8002354:	480b      	ldr	r0, [pc, #44]	@ (8002384 <BSP_LCD_MspInit+0x1a8>)
 8002356:	f001 fae7 	bl	8003928 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800235a:	2308      	movs	r3, #8
 800235c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800235e:	2301      	movs	r3, #1
 8002360:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002362:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002366:	4619      	mov	r1, r3
 8002368:	4808      	ldr	r0, [pc, #32]	@ (800238c <BSP_LCD_MspInit+0x1b0>)
 800236a:	f001 fadd 	bl	8003928 <HAL_GPIO_Init>
}
 800236e:	bf00      	nop
 8002370:	3740      	adds	r7, #64	@ 0x40
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40021000 	.word	0x40021000
 8002380:	40021800 	.word	0x40021800
 8002384:	40022000 	.word	0x40022000
 8002388:	40022400 	.word	0x40022400
 800238c:	40022800 	.word	0x40022800

08002390 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800239a:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <BSP_LCD_ClockConfig+0x34>)
 800239c:	2208      	movs	r2, #8
 800239e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80023a0:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <BSP_LCD_ClockConfig+0x34>)
 80023a2:	22c0      	movs	r2, #192	@ 0xc0
 80023a4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80023a6:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <BSP_LCD_ClockConfig+0x34>)
 80023a8:	2205      	movs	r2, #5
 80023aa:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80023ac:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <BSP_LCD_ClockConfig+0x34>)
 80023ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80023b4:	4803      	ldr	r0, [pc, #12]	@ (80023c4 <BSP_LCD_ClockConfig+0x34>)
 80023b6:	f003 fa1d 	bl	80057f4 <HAL_RCCEx_PeriphCLKConfig>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200012ac 	.word	0x200012ac

080023c8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	603a      	str	r2, [r7, #0]
 80023d2:	80fb      	strh	r3, [r7, #6]
 80023d4:	460b      	mov	r3, r1
 80023d6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80023e0:	4b53      	ldr	r3, [pc, #332]	@ (8002530 <DrawChar+0x168>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4953      	ldr	r1, [pc, #332]	@ (8002534 <DrawChar+0x16c>)
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	3308      	adds	r3, #8
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	88db      	ldrh	r3, [r3, #6]
 80023f6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80023f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002530 <DrawChar+0x168>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	494d      	ldr	r1, [pc, #308]	@ (8002534 <DrawChar+0x16c>)
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	3308      	adds	r3, #8
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	889b      	ldrh	r3, [r3, #4]
 800240e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002410:	8a3b      	ldrh	r3, [r7, #16]
 8002412:	3307      	adds	r3, #7
 8002414:	2b00      	cmp	r3, #0
 8002416:	da00      	bge.n	800241a <DrawChar+0x52>
 8002418:	3307      	adds	r3, #7
 800241a:	10db      	asrs	r3, r3, #3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	b2da      	uxtb	r2, r3
 8002422:	8a3b      	ldrh	r3, [r7, #16]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e076      	b.n	800251e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002430:	8a3b      	ldrh	r3, [r7, #16]
 8002432:	3307      	adds	r3, #7
 8002434:	2b00      	cmp	r3, #0
 8002436:	da00      	bge.n	800243a <DrawChar+0x72>
 8002438:	3307      	adds	r3, #7
 800243a:	10db      	asrs	r3, r3, #3
 800243c:	461a      	mov	r2, r3
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	fb02 f303 	mul.w	r3, r2, r3
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	4413      	add	r3, r2
 8002448:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800244a:	8a3b      	ldrh	r3, [r7, #16]
 800244c:	3307      	adds	r3, #7
 800244e:	2b00      	cmp	r3, #0
 8002450:	da00      	bge.n	8002454 <DrawChar+0x8c>
 8002452:	3307      	adds	r3, #7
 8002454:	10db      	asrs	r3, r3, #3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d002      	beq.n	8002460 <DrawChar+0x98>
 800245a:	2b02      	cmp	r3, #2
 800245c:	d004      	beq.n	8002468 <DrawChar+0xa0>
 800245e:	e00c      	b.n	800247a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	617b      	str	r3, [r7, #20]
      break;
 8002466:	e016      	b.n	8002496 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	021b      	lsls	r3, r3, #8
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	3201      	adds	r2, #1
 8002472:	7812      	ldrb	r2, [r2, #0]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
      break;
 8002478:	e00d      	b.n	8002496 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	041a      	lsls	r2, r3, #16
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	3301      	adds	r3, #1
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	4313      	orrs	r3, r2
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	3202      	adds	r2, #2
 800248e:	7812      	ldrb	r2, [r2, #0]
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
      break;
 8002494:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	e036      	b.n	800250a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800249c:	8a3a      	ldrh	r2, [r7, #16]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	1ad2      	subs	r2, r2, r3
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	4413      	add	r3, r2
 80024a6:	3b01      	subs	r3, #1
 80024a8:	2201      	movs	r2, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d012      	beq.n	80024de <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	4413      	add	r3, r2
 80024c0:	b298      	uxth	r0, r3
 80024c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002530 <DrawChar+0x168>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	491b      	ldr	r1, [pc, #108]	@ (8002534 <DrawChar+0x16c>)
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	88bb      	ldrh	r3, [r7, #4]
 80024d6:	4619      	mov	r1, r3
 80024d8:	f7ff fe1a 	bl	8002110 <BSP_LCD_DrawPixel>
 80024dc:	e012      	b.n	8002504 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	4413      	add	r3, r2
 80024e6:	b298      	uxth	r0, r3
 80024e8:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <DrawChar+0x168>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4911      	ldr	r1, [pc, #68]	@ (8002534 <DrawChar+0x16c>)
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3304      	adds	r3, #4
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	88bb      	ldrh	r3, [r7, #4]
 80024fe:	4619      	mov	r1, r3
 8002500:	f7ff fe06 	bl	8002110 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	3301      	adds	r3, #1
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	8a3b      	ldrh	r3, [r7, #16]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	429a      	cmp	r2, r3
 8002510:	d3c4      	bcc.n	800249c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8002512:	88bb      	ldrh	r3, [r7, #4]
 8002514:	3301      	adds	r3, #1
 8002516:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	3301      	adds	r3, #1
 800251c:	61fb      	str	r3, [r7, #28]
 800251e:	8a7b      	ldrh	r3, [r7, #18]
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	429a      	cmp	r2, r3
 8002524:	d384      	bcc.n	8002430 <DrawChar+0x68>
  }
}
 8002526:	bf00      	nop
 8002528:	bf00      	nop
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20001290 	.word	0x20001290
 8002534:	20001294 	.word	0x20001294

08002538 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002546:	4b1e      	ldr	r3, [pc, #120]	@ (80025c0 <LL_FillBuffer+0x88>)
 8002548:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800254c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <LL_FillBuffer+0x8c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1d      	ldr	r2, [pc, #116]	@ (80025c8 <LL_FillBuffer+0x90>)
 8002554:	2134      	movs	r1, #52	@ 0x34
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	3348      	adds	r3, #72	@ 0x48
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b02      	cmp	r3, #2
 8002562:	d103      	bne.n	800256c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002564:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <LL_FillBuffer+0x88>)
 8002566:	2202      	movs	r2, #2
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	e002      	b.n	8002572 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800256c:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <LL_FillBuffer+0x88>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002572:	4a13      	ldr	r2, [pc, #76]	@ (80025c0 <LL_FillBuffer+0x88>)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002578:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <LL_FillBuffer+0x88>)
 800257a:	4a14      	ldr	r2, [pc, #80]	@ (80025cc <LL_FillBuffer+0x94>)
 800257c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800257e:	4810      	ldr	r0, [pc, #64]	@ (80025c0 <LL_FillBuffer+0x88>)
 8002580:	f000 ff46 	bl	8003410 <HAL_DMA2D_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d115      	bne.n	80025b6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800258a:	68f9      	ldr	r1, [r7, #12]
 800258c:	480c      	ldr	r0, [pc, #48]	@ (80025c0 <LL_FillBuffer+0x88>)
 800258e:	f001 f89d 	bl	80036cc <HAL_DMA2D_ConfigLayer>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10e      	bne.n	80025b6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69f9      	ldr	r1, [r7, #28]
 80025a2:	4807      	ldr	r0, [pc, #28]	@ (80025c0 <LL_FillBuffer+0x88>)
 80025a4:	f000 ff7e 	bl	80034a4 <HAL_DMA2D_Start>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d103      	bne.n	80025b6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80025ae:	210a      	movs	r1, #10
 80025b0:	4803      	ldr	r0, [pc, #12]	@ (80025c0 <LL_FillBuffer+0x88>)
 80025b2:	f000 ffa2 	bl	80034fa <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20001250 	.word	0x20001250
 80025c4:	20001290 	.word	0x20001290
 80025c8:	200011a8 	.word	0x200011a8
 80025cc:	4002b000 	.word	0x4002b000

080025d0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80025d4:	4b29      	ldr	r3, [pc, #164]	@ (800267c <BSP_SDRAM_Init+0xac>)
 80025d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002680 <BSP_SDRAM_Init+0xb0>)
 80025d8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80025da:	4b2a      	ldr	r3, [pc, #168]	@ (8002684 <BSP_SDRAM_Init+0xb4>)
 80025dc:	2202      	movs	r2, #2
 80025de:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80025e0:	4b28      	ldr	r3, [pc, #160]	@ (8002684 <BSP_SDRAM_Init+0xb4>)
 80025e2:	2207      	movs	r2, #7
 80025e4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80025e6:	4b27      	ldr	r3, [pc, #156]	@ (8002684 <BSP_SDRAM_Init+0xb4>)
 80025e8:	2204      	movs	r2, #4
 80025ea:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80025ec:	4b25      	ldr	r3, [pc, #148]	@ (8002684 <BSP_SDRAM_Init+0xb4>)
 80025ee:	2207      	movs	r2, #7
 80025f0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80025f2:	4b24      	ldr	r3, [pc, #144]	@ (8002684 <BSP_SDRAM_Init+0xb4>)
 80025f4:	2202      	movs	r2, #2
 80025f6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80025f8:	4b22      	ldr	r3, [pc, #136]	@ (8002684 <BSP_SDRAM_Init+0xb4>)
 80025fa:	2202      	movs	r2, #2
 80025fc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80025fe:	4b21      	ldr	r3, [pc, #132]	@ (8002684 <BSP_SDRAM_Init+0xb4>)
 8002600:	2202      	movs	r2, #2
 8002602:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002604:	4b1d      	ldr	r3, [pc, #116]	@ (800267c <BSP_SDRAM_Init+0xac>)
 8002606:	2200      	movs	r2, #0
 8002608:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800260a:	4b1c      	ldr	r3, [pc, #112]	@ (800267c <BSP_SDRAM_Init+0xac>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <BSP_SDRAM_Init+0xac>)
 8002612:	2204      	movs	r2, #4
 8002614:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002616:	4b19      	ldr	r3, [pc, #100]	@ (800267c <BSP_SDRAM_Init+0xac>)
 8002618:	2210      	movs	r2, #16
 800261a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800261c:	4b17      	ldr	r3, [pc, #92]	@ (800267c <BSP_SDRAM_Init+0xac>)
 800261e:	2240      	movs	r2, #64	@ 0x40
 8002620:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002622:	4b16      	ldr	r3, [pc, #88]	@ (800267c <BSP_SDRAM_Init+0xac>)
 8002624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002628:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800262a:	4b14      	ldr	r3, [pc, #80]	@ (800267c <BSP_SDRAM_Init+0xac>)
 800262c:	2200      	movs	r2, #0
 800262e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002630:	4b12      	ldr	r3, [pc, #72]	@ (800267c <BSP_SDRAM_Init+0xac>)
 8002632:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002636:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002638:	4b10      	ldr	r3, [pc, #64]	@ (800267c <BSP_SDRAM_Init+0xac>)
 800263a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800263e:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002640:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <BSP_SDRAM_Init+0xac>)
 8002642:	2200      	movs	r2, #0
 8002644:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002646:	2100      	movs	r1, #0
 8002648:	480c      	ldr	r0, [pc, #48]	@ (800267c <BSP_SDRAM_Init+0xac>)
 800264a:	f000 f87f 	bl	800274c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800264e:	490d      	ldr	r1, [pc, #52]	@ (8002684 <BSP_SDRAM_Init+0xb4>)
 8002650:	480a      	ldr	r0, [pc, #40]	@ (800267c <BSP_SDRAM_Init+0xac>)
 8002652:	f004 f91a 	bl	800688a <HAL_SDRAM_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800265c:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <BSP_SDRAM_Init+0xb8>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	e002      	b.n	800266a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002664:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <BSP_SDRAM_Init+0xb8>)
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800266a:	f240 6003 	movw	r0, #1539	@ 0x603
 800266e:	f000 f80d 	bl	800268c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002672:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <BSP_SDRAM_Init+0xb8>)
 8002674:	781b      	ldrb	r3, [r3, #0]
}
 8002676:	4618      	mov	r0, r3
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20001330 	.word	0x20001330
 8002680:	a0000140 	.word	0xa0000140
 8002684:	20001364 	.word	0x20001364
 8002688:	2000000c 	.word	0x2000000c

0800268c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002698:	4b2a      	ldr	r3, [pc, #168]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800269e:	4b29      	ldr	r3, [pc, #164]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026a0:	2210      	movs	r2, #16
 80026a2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80026a4:	4b27      	ldr	r3, [pc, #156]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80026aa:	4b26      	ldr	r3, [pc, #152]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80026b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026b4:	4923      	ldr	r1, [pc, #140]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026b6:	4824      	ldr	r0, [pc, #144]	@ (8002748 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80026b8:	f004 f91b 	bl	80068f2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80026bc:	2001      	movs	r0, #1
 80026be:	f000 f99b 	bl	80029f8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80026c2:	4b20      	ldr	r3, [pc, #128]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026c4:	2202      	movs	r2, #2
 80026c6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80026c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026ca:	2210      	movs	r2, #16
 80026cc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80026ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80026d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80026da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026de:	4919      	ldr	r1, [pc, #100]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026e0:	4819      	ldr	r0, [pc, #100]	@ (8002748 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80026e2:	f004 f906 	bl	80068f2 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80026e6:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026e8:	2203      	movs	r2, #3
 80026ea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80026ec:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026ee:	2210      	movs	r2, #16
 80026f0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80026f2:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026f4:	2208      	movs	r2, #8
 80026f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80026f8:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80026fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002702:	4910      	ldr	r1, [pc, #64]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002704:	4810      	ldr	r0, [pc, #64]	@ (8002748 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002706:	f004 f8f4 	bl	80068f2 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800270a:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800270e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002710:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002712:	2204      	movs	r2, #4
 8002714:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002716:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002718:	2210      	movs	r2, #16
 800271a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800271c:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800271e:	2201      	movs	r2, #1
 8002720:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4a07      	ldr	r2, [pc, #28]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002726:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002728:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800272c:	4905      	ldr	r1, [pc, #20]	@ (8002744 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800272e:	4806      	ldr	r0, [pc, #24]	@ (8002748 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002730:	f004 f8df 	bl	80068f2 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4804      	ldr	r0, [pc, #16]	@ (8002748 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002738:	f004 f910 	bl	800695c <HAL_SDRAM_ProgramRefreshRate>
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20001380 	.word	0x20001380
 8002748:	20001330 	.word	0x20001330

0800274c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800274c:	b580      	push	{r7, lr}
 800274e:	b090      	sub	sp, #64	@ 0x40
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002756:	4b70      	ldr	r3, [pc, #448]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 8002758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800275a:	4a6f      	ldr	r2, [pc, #444]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6393      	str	r3, [r2, #56]	@ 0x38
 8002762:	4b6d      	ldr	r3, [pc, #436]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 8002764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800276c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800276e:	4b6a      	ldr	r3, [pc, #424]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	4a69      	ldr	r2, [pc, #420]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 8002774:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002778:	6313      	str	r3, [r2, #48]	@ 0x30
 800277a:	4b67      	ldr	r3, [pc, #412]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002786:	4b64      	ldr	r3, [pc, #400]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	4a63      	ldr	r2, [pc, #396]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	6313      	str	r3, [r2, #48]	@ 0x30
 8002792:	4b61      	ldr	r3, [pc, #388]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	623b      	str	r3, [r7, #32]
 800279c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800279e:	4b5e      	ldr	r3, [pc, #376]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 80027a4:	f043 0308 	orr.w	r3, r3, #8
 80027a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027b6:	4b58      	ldr	r3, [pc, #352]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	4a57      	ldr	r2, [pc, #348]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 80027bc:	f043 0310 	orr.w	r3, r3, #16
 80027c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c2:	4b55      	ldr	r3, [pc, #340]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ce:	4b52      	ldr	r3, [pc, #328]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	4a51      	ldr	r2, [pc, #324]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 80027d4:	f043 0320 	orr.w	r3, r3, #32
 80027d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027da:	4b4f      	ldr	r3, [pc, #316]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	4a4b      	ldr	r2, [pc, #300]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 80027ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f2:	4b49      	ldr	r3, [pc, #292]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027fe:	4b46      	ldr	r3, [pc, #280]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	4a45      	ldr	r2, [pc, #276]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 8002804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002808:	6313      	str	r3, [r2, #48]	@ 0x30
 800280a:	4b43      	ldr	r3, [pc, #268]	@ (8002918 <BSP_SDRAM_MspInit+0x1cc>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800281a:	2301      	movs	r3, #1
 800281c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800281e:	2302      	movs	r3, #2
 8002820:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002822:	230c      	movs	r3, #12
 8002824:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002826:	2308      	movs	r3, #8
 8002828:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800282a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800282e:	4619      	mov	r1, r3
 8002830:	483a      	ldr	r0, [pc, #232]	@ (800291c <BSP_SDRAM_MspInit+0x1d0>)
 8002832:	f001 f879 	bl	8003928 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002836:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800283a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800283c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002840:	4619      	mov	r1, r3
 8002842:	4837      	ldr	r0, [pc, #220]	@ (8002920 <BSP_SDRAM_MspInit+0x1d4>)
 8002844:	f001 f870 	bl	8003928 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002848:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800284c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800284e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002852:	4619      	mov	r1, r3
 8002854:	4833      	ldr	r0, [pc, #204]	@ (8002924 <BSP_SDRAM_MspInit+0x1d8>)
 8002856:	f001 f867 	bl	8003928 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800285a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800285e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002860:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002864:	4619      	mov	r1, r3
 8002866:	4830      	ldr	r0, [pc, #192]	@ (8002928 <BSP_SDRAM_MspInit+0x1dc>)
 8002868:	f001 f85e 	bl	8003928 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800286c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002870:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002872:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002876:	4619      	mov	r1, r3
 8002878:	482c      	ldr	r0, [pc, #176]	@ (800292c <BSP_SDRAM_MspInit+0x1e0>)
 800287a:	f001 f855 	bl	8003928 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800287e:	2328      	movs	r3, #40	@ 0x28
 8002880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002882:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002886:	4619      	mov	r1, r3
 8002888:	4829      	ldr	r0, [pc, #164]	@ (8002930 <BSP_SDRAM_MspInit+0x1e4>)
 800288a:	f001 f84d 	bl	8003928 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800288e:	4b29      	ldr	r3, [pc, #164]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 8002890:	2200      	movs	r2, #0
 8002892:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002894:	4b27      	ldr	r3, [pc, #156]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 8002896:	2280      	movs	r2, #128	@ 0x80
 8002898:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800289a:	4b26      	ldr	r3, [pc, #152]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 800289c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028a0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80028a2:	4b24      	ldr	r3, [pc, #144]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 80028a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028a8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028aa:	4b22      	ldr	r3, [pc, #136]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 80028ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028b0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80028b2:	4b20      	ldr	r3, [pc, #128]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 80028b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028b8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80028ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 80028bc:	2200      	movs	r2, #0
 80028be:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80028c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 80028c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028c6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80028c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80028ce:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 80028d0:	2203      	movs	r2, #3
 80028d2:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80028d4:	4b17      	ldr	r3, [pc, #92]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80028da:	4b16      	ldr	r3, [pc, #88]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 80028dc:	2200      	movs	r2, #0
 80028de:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80028e0:	4b14      	ldr	r3, [pc, #80]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 80028e2:	4a15      	ldr	r2, [pc, #84]	@ (8002938 <BSP_SDRAM_MspInit+0x1ec>)
 80028e4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a12      	ldr	r2, [pc, #72]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80028ec:	4a11      	ldr	r2, [pc, #68]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80028f2:	4810      	ldr	r0, [pc, #64]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 80028f4:	f000 fa64 	bl	8002dc0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80028f8:	480e      	ldr	r0, [pc, #56]	@ (8002934 <BSP_SDRAM_MspInit+0x1e8>)
 80028fa:	f000 f9b3 	bl	8002c64 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	210f      	movs	r1, #15
 8002902:	2038      	movs	r0, #56	@ 0x38
 8002904:	f000 f977 	bl	8002bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002908:	2038      	movs	r0, #56	@ 0x38
 800290a:	f000 f990 	bl	8002c2e <HAL_NVIC_EnableIRQ>
}
 800290e:	bf00      	nop
 8002910:	3740      	adds	r7, #64	@ 0x40
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	40020800 	.word	0x40020800
 8002920:	40020c00 	.word	0x40020c00
 8002924:	40021000 	.word	0x40021000
 8002928:	40021400 	.word	0x40021400
 800292c:	40021800 	.word	0x40021800
 8002930:	40021c00 	.word	0x40021c00
 8002934:	20001390 	.word	0x20001390
 8002938:	40026410 	.word	0x40026410

0800293c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002940:	2003      	movs	r0, #3
 8002942:	f000 f94d 	bl	8002be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002946:	2000      	movs	r0, #0
 8002948:	f000 f806 	bl	8002958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800294c:	f7fe fab2 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002960:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <HAL_InitTick+0x54>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b12      	ldr	r3, [pc, #72]	@ (80029b0 <HAL_InitTick+0x58>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800296e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f967 	bl	8002c4a <HAL_SYSTICK_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e00e      	b.n	80029a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b0f      	cmp	r3, #15
 800298a:	d80a      	bhi.n	80029a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298c:	2200      	movs	r2, #0
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f000 f92f 	bl	8002bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002998:	4a06      	ldr	r2, [pc, #24]	@ (80029b4 <HAL_InitTick+0x5c>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	e000      	b.n	80029a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000014 	.word	0x20000014
 80029b4:	20000010 	.word	0x20000010

080029b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029bc:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_IncTick+0x20>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_IncTick+0x24>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	4a04      	ldr	r2, [pc, #16]	@ (80029dc <HAL_IncTick+0x24>)
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000014 	.word	0x20000014
 80029dc:	200013f0 	.word	0x200013f0

080029e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return uwTick;
 80029e4:	4b03      	ldr	r3, [pc, #12]	@ (80029f4 <HAL_GetTick+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	200013f0 	.word	0x200013f0

080029f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff ffee 	bl	80029e0 <HAL_GetTick>
 8002a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d005      	beq.n	8002a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a12:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <HAL_Delay+0x44>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a1e:	bf00      	nop
 8002a20:	f7ff ffde 	bl	80029e0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d8f7      	bhi.n	8002a20 <HAL_Delay+0x28>
  {
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000014 	.word	0x20000014

08002a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a50:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <__NVIC_SetPriorityGrouping+0x40>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	@ (8002a80 <__NVIC_SetPriorityGrouping+0x40>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00
 8002a84:	05fa0000 	.word	0x05fa0000

08002a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a8c:	4b04      	ldr	r3, [pc, #16]	@ (8002aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	f003 0307 	and.w	r3, r3, #7
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db0b      	blt.n	8002ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	4907      	ldr	r1, [pc, #28]	@ (8002adc <__NVIC_EnableIRQ+0x38>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000e100 	.word	0xe000e100

08002ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	db0a      	blt.n	8002b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	490c      	ldr	r1, [pc, #48]	@ (8002b2c <__NVIC_SetPriority+0x4c>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	440b      	add	r3, r1
 8002b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b08:	e00a      	b.n	8002b20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4908      	ldr	r1, [pc, #32]	@ (8002b30 <__NVIC_SetPriority+0x50>)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	3b04      	subs	r3, #4
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	761a      	strb	r2, [r3, #24]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000e100 	.word	0xe000e100
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	@ 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f1c3 0307 	rsb	r3, r3, #7
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	bf28      	it	cs
 8002b52:	2304      	movcs	r3, #4
 8002b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d902      	bls.n	8002b64 <NVIC_EncodePriority+0x30>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3b03      	subs	r3, #3
 8002b62:	e000      	b.n	8002b66 <NVIC_EncodePriority+0x32>
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	401a      	ands	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	4313      	orrs	r3, r2
         );
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	@ 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bac:	d301      	bcc.n	8002bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00f      	b.n	8002bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bdc <SysTick_Config+0x40>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bba:	210f      	movs	r1, #15
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	f7ff ff8e 	bl	8002ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc4:	4b05      	ldr	r3, [pc, #20]	@ (8002bdc <SysTick_Config+0x40>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bca:	4b04      	ldr	r3, [pc, #16]	@ (8002bdc <SysTick_Config+0x40>)
 8002bcc:	2207      	movs	r2, #7
 8002bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	e000e010 	.word	0xe000e010

08002be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ff29 	bl	8002a40 <__NVIC_SetPriorityGrouping>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c08:	f7ff ff3e 	bl	8002a88 <__NVIC_GetPriorityGrouping>
 8002c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f7ff ff8e 	bl	8002b34 <NVIC_EncodePriority>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff5d 	bl	8002ae0 <__NVIC_SetPriority>
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff31 	bl	8002aa4 <__NVIC_EnableIRQ>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ffa2 	bl	8002b9c <SysTick_Config>
 8002c58:	4603      	mov	r3, r0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c70:	f7ff feb6 	bl	80029e0 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e099      	b.n	8002db4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca0:	e00f      	b.n	8002cc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ca2:	f7ff fe9d 	bl	80029e0 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d908      	bls.n	8002cc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2203      	movs	r2, #3
 8002cba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e078      	b.n	8002db4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e8      	bne.n	8002ca2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	4b38      	ldr	r3, [pc, #224]	@ (8002dbc <HAL_DMA_Init+0x158>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d107      	bne.n	8002d2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d24:	4313      	orrs	r3, r2
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f023 0307 	bic.w	r3, r3, #7
 8002d42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d117      	bne.n	8002d86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00e      	beq.n	8002d86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 fad5 	bl	8003318 <DMA_CheckFifoParam>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2240      	movs	r2, #64	@ 0x40
 8002d78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d82:	2301      	movs	r3, #1
 8002d84:	e016      	b.n	8002db4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fa8c 	bl	80032ac <DMA_CalcBaseAndBitshift>
 8002d94:	4603      	mov	r3, r0
 8002d96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9c:	223f      	movs	r2, #63	@ 0x3f
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	f010803f 	.word	0xf010803f

08002dc0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e050      	b.n	8002e74 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d101      	bne.n	8002de2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002dde:	2302      	movs	r3, #2
 8002de0:	e048      	b.n	8002e74 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2221      	movs	r2, #33	@ 0x21
 8002e20:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fa42 	bl	80032ac <DMA_CalcBaseAndBitshift>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e30:	223f      	movs	r2, #63	@ 0x3f
 8002e32:	409a      	lsls	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_DMA_Start_IT+0x26>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e048      	b.n	8002f34 <HAL_DMA_Start_IT+0xb8>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d137      	bne.n	8002f26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f9c0 	bl	8003250 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	223f      	movs	r2, #63	@ 0x3f
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0216 	orr.w	r2, r2, #22
 8002eea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002efa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0208 	orr.w	r2, r2, #8
 8002f12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e005      	b.n	8002f32 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002f48:	4b8e      	ldr	r3, [pc, #568]	@ (8003184 <HAL_DMA_IRQHandler+0x248>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a8e      	ldr	r2, [pc, #568]	@ (8003188 <HAL_DMA_IRQHandler+0x24c>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	0a9b      	lsrs	r3, r3, #10
 8002f54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f66:	2208      	movs	r2, #8
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01a      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d013      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0204 	bic.w	r2, r2, #4
 8002f8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f94:	2208      	movs	r2, #8
 8002f96:	409a      	lsls	r2, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa0:	f043 0201 	orr.w	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fac:	2201      	movs	r2, #1
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d012      	beq.n	8002fde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00b      	beq.n	8002fde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fca:	2201      	movs	r2, #1
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd6:	f043 0202 	orr.w	r2, r3, #2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d012      	beq.n	8003014 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00b      	beq.n	8003014 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003000:	2204      	movs	r2, #4
 8003002:	409a      	lsls	r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300c:	f043 0204 	orr.w	r2, r3, #4
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003018:	2210      	movs	r2, #16
 800301a:	409a      	lsls	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d043      	beq.n	80030ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d03c      	beq.n	80030ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003036:	2210      	movs	r2, #16
 8003038:	409a      	lsls	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d018      	beq.n	800307e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d108      	bne.n	800306c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d024      	beq.n	80030ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
 800306a:	e01f      	b.n	80030ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01b      	beq.n	80030ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
 800307c:	e016      	b.n	80030ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d107      	bne.n	800309c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0208 	bic.w	r2, r2, #8
 800309a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b0:	2220      	movs	r2, #32
 80030b2:	409a      	lsls	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 808f 	beq.w	80031dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8087 	beq.w	80031dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d2:	2220      	movs	r2, #32
 80030d4:	409a      	lsls	r2, r3
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b05      	cmp	r3, #5
 80030e4:	d136      	bne.n	8003154 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0216 	bic.w	r2, r2, #22
 80030f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003104:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <HAL_DMA_IRQHandler+0x1da>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0208 	bic.w	r2, r2, #8
 8003124:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312a:	223f      	movs	r2, #63	@ 0x3f
 800312c:	409a      	lsls	r2, r3
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003146:	2b00      	cmp	r3, #0
 8003148:	d07e      	beq.n	8003248 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	4798      	blx	r3
        }
        return;
 8003152:	e079      	b.n	8003248 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01d      	beq.n	800319e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10d      	bne.n	800318c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003174:	2b00      	cmp	r3, #0
 8003176:	d031      	beq.n	80031dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	4798      	blx	r3
 8003180:	e02c      	b.n	80031dc <HAL_DMA_IRQHandler+0x2a0>
 8003182:	bf00      	nop
 8003184:	20000000 	.word	0x20000000
 8003188:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d023      	beq.n	80031dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4798      	blx	r3
 800319c:	e01e      	b.n	80031dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10f      	bne.n	80031cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0210 	bic.w	r2, r2, #16
 80031ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d032      	beq.n	800324a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d022      	beq.n	8003236 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2205      	movs	r2, #5
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0201 	bic.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	3301      	adds	r3, #1
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	429a      	cmp	r2, r3
 8003212:	d307      	bcc.n	8003224 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f2      	bne.n	8003208 <HAL_DMA_IRQHandler+0x2cc>
 8003222:	e000      	b.n	8003226 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003224:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	4798      	blx	r3
 8003246:	e000      	b.n	800324a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003248:	bf00      	nop
    }
  }
}
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800326c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b40      	cmp	r3, #64	@ 0x40
 800327c:	d108      	bne.n	8003290 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800328e:	e007      	b.n	80032a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	60da      	str	r2, [r3, #12]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	3b10      	subs	r3, #16
 80032bc:	4a13      	ldr	r2, [pc, #76]	@ (800330c <DMA_CalcBaseAndBitshift+0x60>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032c6:	4a12      	ldr	r2, [pc, #72]	@ (8003310 <DMA_CalcBaseAndBitshift+0x64>)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d908      	bls.n	80032ec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003314 <DMA_CalcBaseAndBitshift+0x68>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	1d1a      	adds	r2, r3, #4
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80032ea:	e006      	b.n	80032fa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	4b08      	ldr	r3, [pc, #32]	@ (8003314 <DMA_CalcBaseAndBitshift+0x68>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	aaaaaaab 	.word	0xaaaaaaab
 8003310:	0800a6bc 	.word	0x0800a6bc
 8003314:	fffffc00 	.word	0xfffffc00

08003318 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003328:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d11f      	bne.n	8003372 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d856      	bhi.n	80033e6 <DMA_CheckFifoParam+0xce>
 8003338:	a201      	add	r2, pc, #4	@ (adr r2, 8003340 <DMA_CheckFifoParam+0x28>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003351 	.word	0x08003351
 8003344:	08003363 	.word	0x08003363
 8003348:	08003351 	.word	0x08003351
 800334c:	080033e7 	.word	0x080033e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d046      	beq.n	80033ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003360:	e043      	b.n	80033ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003366:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800336a:	d140      	bne.n	80033ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003370:	e03d      	b.n	80033ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800337a:	d121      	bne.n	80033c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b03      	cmp	r3, #3
 8003380:	d837      	bhi.n	80033f2 <DMA_CheckFifoParam+0xda>
 8003382:	a201      	add	r2, pc, #4	@ (adr r2, 8003388 <DMA_CheckFifoParam+0x70>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	08003399 	.word	0x08003399
 800338c:	0800339f 	.word	0x0800339f
 8003390:	08003399 	.word	0x08003399
 8003394:	080033b1 	.word	0x080033b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
      break;
 800339c:	e030      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d025      	beq.n	80033f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ae:	e022      	b.n	80033f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033b8:	d11f      	bne.n	80033fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033be:	e01c      	b.n	80033fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d903      	bls.n	80033ce <DMA_CheckFifoParam+0xb6>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d003      	beq.n	80033d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033cc:	e018      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
      break;
 80033d2:	e015      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00e      	beq.n	80033fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      break;
 80033e4:	e00b      	b.n	80033fe <DMA_CheckFifoParam+0xe6>
      break;
 80033e6:	bf00      	nop
 80033e8:	e00a      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      break;
 80033ea:	bf00      	nop
 80033ec:	e008      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      break;
 80033ee:	bf00      	nop
 80033f0:	e006      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      break;
 80033f2:	bf00      	nop
 80033f4:	e004      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      break;
 80033f6:	bf00      	nop
 80033f8:	e002      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      break;   
 80033fa:	bf00      	nop
 80033fc:	e000      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      break;
 80033fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop

08003410 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e039      	b.n	8003496 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd fd60 	bl	8000efc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003460:	f023 0107 	bic.w	r1, r3, #7
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003476:	4b0a      	ldr	r3, [pc, #40]	@ (80034a0 <HAL_DMA2D_Init+0x90>)
 8003478:	4013      	ands	r3, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68d1      	ldr	r1, [r2, #12]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	430b      	orrs	r3, r1
 8003484:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	ffffc000 	.word	0xffffc000

080034a4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_DMA2D_Start+0x1c>
 80034bc:	2302      	movs	r3, #2
 80034be:	e018      	b.n	80034f2 <HAL_DMA2D_Start+0x4e>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f988 	bl	80037f0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d056      	beq.n	80035c4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003516:	f7ff fa63 	bl	80029e0 <HAL_GetTick>
 800351a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800351c:	e04b      	b.n	80035b6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800352c:	2b00      	cmp	r3, #0
 800352e:	d023      	beq.n	8003578 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353e:	f043 0202 	orr.w	r2, r3, #2
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003554:	f043 0201 	orr.w	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2221      	movs	r2, #33	@ 0x21
 8003562:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2204      	movs	r2, #4
 8003568:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0a5      	b.n	80036c4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357e:	d01a      	beq.n	80035b6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003580:	f7ff fa2e 	bl	80029e0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d302      	bcc.n	8003596 <HAL_DMA2D_PollForTransfer+0x9c>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10f      	bne.n	80035b6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359a:	f043 0220 	orr.w	r2, r3, #32
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2203      	movs	r2, #3
 80035a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e086      	b.n	80036c4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ac      	beq.n	800351e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d061      	beq.n	80036aa <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80035e6:	f7ff f9fb 	bl	80029e0 <HAL_GetTick>
 80035ea:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80035ec:	e056      	b.n	800369c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d02e      	beq.n	800365e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360e:	f043 0204 	orr.w	r2, r3, #4
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003624:	f043 0202 	orr.w	r2, r3, #2
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363a:	f043 0201 	orr.w	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2229      	movs	r2, #41	@ 0x29
 8003648:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2204      	movs	r2, #4
 800364e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e032      	b.n	80036c4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d01a      	beq.n	800369c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003666:	f7ff f9bb 	bl	80029e0 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d302      	bcc.n	800367c <HAL_DMA2D_PollForTransfer+0x182>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10f      	bne.n	800369c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003680:	f043 0220 	orr.w	r2, r3, #32
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2203      	movs	r2, #3
 800368c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e013      	b.n	80036c4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0a1      	beq.n	80035ee <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2212      	movs	r2, #18
 80036b0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_DMA2D_ConfigLayer+0x20>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e079      	b.n	80037e0 <HAL_DMA2D_ConfigLayer+0x114>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	3318      	adds	r3, #24
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003716:	4b35      	ldr	r3, [pc, #212]	@ (80037ec <HAL_DMA2D_ConfigLayer+0x120>)
 8003718:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b0a      	cmp	r3, #10
 8003720:	d003      	beq.n	800372a <HAL_DMA2D_ConfigLayer+0x5e>
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b09      	cmp	r3, #9
 8003728:	d107      	bne.n	800373a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	e005      	b.n	8003746 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	061b      	lsls	r3, r3, #24
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d120      	bne.n	800378e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43db      	mvns	r3, r3
 8003756:	ea02 0103 	and.w	r1, r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	430a      	orrs	r2, r1
 8003762:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b0a      	cmp	r3, #10
 8003774:	d003      	beq.n	800377e <HAL_DMA2D_ConfigLayer+0xb2>
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b09      	cmp	r3, #9
 800377c:	d127      	bne.n	80037ce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800378a:	629a      	str	r2, [r3, #40]	@ 0x28
 800378c:	e01f      	b.n	80037ce <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	43db      	mvns	r3, r3
 8003798:	ea02 0103 	and.w	r1, r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b0a      	cmp	r3, #10
 80037b6:	d003      	beq.n	80037c0 <HAL_DMA2D_ConfigLayer+0xf4>
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b09      	cmp	r3, #9
 80037be:	d106      	bne.n	80037ce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80037cc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	ff03000f 	.word	0xff03000f

080037f0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b08b      	sub	sp, #44	@ 0x2c
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003804:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	041a      	lsls	r2, r3, #16
 800380c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380e:	431a      	orrs	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003828:	d174      	bne.n	8003914 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003830:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003838:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003840:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d108      	bne.n	8003862 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	431a      	orrs	r2, r3
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	4313      	orrs	r3, r2
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003860:	e053      	b.n	800390a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d106      	bne.n	8003878 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	4313      	orrs	r3, r2
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	627b      	str	r3, [r7, #36]	@ 0x24
 8003876:	e048      	b.n	800390a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d111      	bne.n	80038a4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	0cdb      	lsrs	r3, r3, #19
 8003884:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	0a9b      	lsrs	r3, r3, #10
 800388a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	08db      	lsrs	r3, r3, #3
 8003890:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	02db      	lsls	r3, r3, #11
 800389a:	4313      	orrs	r3, r2
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a2:	e032      	b.n	800390a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d117      	bne.n	80038dc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	0fdb      	lsrs	r3, r3, #31
 80038b0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	0cdb      	lsrs	r3, r3, #19
 80038b6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	0adb      	lsrs	r3, r3, #11
 80038bc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	08db      	lsrs	r3, r3, #3
 80038c2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	029b      	lsls	r3, r3, #10
 80038cc:	431a      	orrs	r2, r3
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	03db      	lsls	r3, r3, #15
 80038d2:	4313      	orrs	r3, r2
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038da:	e016      	b.n	800390a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	0f1b      	lsrs	r3, r3, #28
 80038e0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	0d1b      	lsrs	r3, r3, #20
 80038e6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	0b1b      	lsrs	r3, r3, #12
 80038ec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	011a      	lsls	r2, r3, #4
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	431a      	orrs	r2, r3
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	031b      	lsls	r3, r3, #12
 8003902:	4313      	orrs	r3, r2
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003910:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003912:	e003      	b.n	800391c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	60da      	str	r2, [r3, #12]
}
 800391c:	bf00      	nop
 800391e:	372c      	adds	r7, #44	@ 0x2c
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003928:	b480      	push	{r7}
 800392a:	b089      	sub	sp, #36	@ 0x24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	e175      	b.n	8003c34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003948:	2201      	movs	r2, #1
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4013      	ands	r3, r2
 800395a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	429a      	cmp	r2, r3
 8003962:	f040 8164 	bne.w	8003c2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d005      	beq.n	800397e <HAL_GPIO_Init+0x56>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d130      	bne.n	80039e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	2203      	movs	r2, #3
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039b4:	2201      	movs	r2, #1
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 0201 	and.w	r2, r3, #1
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d017      	beq.n	8003a1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	2203      	movs	r2, #3
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d123      	bne.n	8003a70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	08da      	lsrs	r2, r3, #3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3208      	adds	r2, #8
 8003a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	220f      	movs	r2, #15
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	08da      	lsrs	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3208      	adds	r2, #8
 8003a6a:	69b9      	ldr	r1, [r7, #24]
 8003a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0203 	and.w	r2, r3, #3
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80be 	beq.w	8003c2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab2:	4b66      	ldr	r3, [pc, #408]	@ (8003c4c <HAL_GPIO_Init+0x324>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab6:	4a65      	ldr	r2, [pc, #404]	@ (8003c4c <HAL_GPIO_Init+0x324>)
 8003ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003abe:	4b63      	ldr	r3, [pc, #396]	@ (8003c4c <HAL_GPIO_Init+0x324>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003aca:	4a61      	ldr	r2, [pc, #388]	@ (8003c50 <HAL_GPIO_Init+0x328>)
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	220f      	movs	r2, #15
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4013      	ands	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a58      	ldr	r2, [pc, #352]	@ (8003c54 <HAL_GPIO_Init+0x32c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d037      	beq.n	8003b66 <HAL_GPIO_Init+0x23e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a57      	ldr	r2, [pc, #348]	@ (8003c58 <HAL_GPIO_Init+0x330>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d031      	beq.n	8003b62 <HAL_GPIO_Init+0x23a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a56      	ldr	r2, [pc, #344]	@ (8003c5c <HAL_GPIO_Init+0x334>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d02b      	beq.n	8003b5e <HAL_GPIO_Init+0x236>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a55      	ldr	r2, [pc, #340]	@ (8003c60 <HAL_GPIO_Init+0x338>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d025      	beq.n	8003b5a <HAL_GPIO_Init+0x232>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a54      	ldr	r2, [pc, #336]	@ (8003c64 <HAL_GPIO_Init+0x33c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01f      	beq.n	8003b56 <HAL_GPIO_Init+0x22e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a53      	ldr	r2, [pc, #332]	@ (8003c68 <HAL_GPIO_Init+0x340>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d019      	beq.n	8003b52 <HAL_GPIO_Init+0x22a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a52      	ldr	r2, [pc, #328]	@ (8003c6c <HAL_GPIO_Init+0x344>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <HAL_GPIO_Init+0x226>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a51      	ldr	r2, [pc, #324]	@ (8003c70 <HAL_GPIO_Init+0x348>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00d      	beq.n	8003b4a <HAL_GPIO_Init+0x222>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a50      	ldr	r2, [pc, #320]	@ (8003c74 <HAL_GPIO_Init+0x34c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d007      	beq.n	8003b46 <HAL_GPIO_Init+0x21e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a4f      	ldr	r2, [pc, #316]	@ (8003c78 <HAL_GPIO_Init+0x350>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d101      	bne.n	8003b42 <HAL_GPIO_Init+0x21a>
 8003b3e:	2309      	movs	r3, #9
 8003b40:	e012      	b.n	8003b68 <HAL_GPIO_Init+0x240>
 8003b42:	230a      	movs	r3, #10
 8003b44:	e010      	b.n	8003b68 <HAL_GPIO_Init+0x240>
 8003b46:	2308      	movs	r3, #8
 8003b48:	e00e      	b.n	8003b68 <HAL_GPIO_Init+0x240>
 8003b4a:	2307      	movs	r3, #7
 8003b4c:	e00c      	b.n	8003b68 <HAL_GPIO_Init+0x240>
 8003b4e:	2306      	movs	r3, #6
 8003b50:	e00a      	b.n	8003b68 <HAL_GPIO_Init+0x240>
 8003b52:	2305      	movs	r3, #5
 8003b54:	e008      	b.n	8003b68 <HAL_GPIO_Init+0x240>
 8003b56:	2304      	movs	r3, #4
 8003b58:	e006      	b.n	8003b68 <HAL_GPIO_Init+0x240>
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e004      	b.n	8003b68 <HAL_GPIO_Init+0x240>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e002      	b.n	8003b68 <HAL_GPIO_Init+0x240>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <HAL_GPIO_Init+0x240>
 8003b66:	2300      	movs	r3, #0
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	f002 0203 	and.w	r2, r2, #3
 8003b6e:	0092      	lsls	r2, r2, #2
 8003b70:	4093      	lsls	r3, r2
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b78:	4935      	ldr	r1, [pc, #212]	@ (8003c50 <HAL_GPIO_Init+0x328>)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	3302      	adds	r3, #2
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b86:	4b3d      	ldr	r3, [pc, #244]	@ (8003c7c <HAL_GPIO_Init+0x354>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4013      	ands	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003baa:	4a34      	ldr	r2, [pc, #208]	@ (8003c7c <HAL_GPIO_Init+0x354>)
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bb0:	4b32      	ldr	r3, [pc, #200]	@ (8003c7c <HAL_GPIO_Init+0x354>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bd4:	4a29      	ldr	r2, [pc, #164]	@ (8003c7c <HAL_GPIO_Init+0x354>)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bda:	4b28      	ldr	r3, [pc, #160]	@ (8003c7c <HAL_GPIO_Init+0x354>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4013      	ands	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8003c7c <HAL_GPIO_Init+0x354>)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c04:	4b1d      	ldr	r3, [pc, #116]	@ (8003c7c <HAL_GPIO_Init+0x354>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c28:	4a14      	ldr	r2, [pc, #80]	@ (8003c7c <HAL_GPIO_Init+0x354>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3301      	adds	r3, #1
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	2b0f      	cmp	r3, #15
 8003c38:	f67f ae86 	bls.w	8003948 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	3724      	adds	r7, #36	@ 0x24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40013800 	.word	0x40013800
 8003c54:	40020000 	.word	0x40020000
 8003c58:	40020400 	.word	0x40020400
 8003c5c:	40020800 	.word	0x40020800
 8003c60:	40020c00 	.word	0x40020c00
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40021400 	.word	0x40021400
 8003c6c:	40021800 	.word	0x40021800
 8003c70:	40021c00 	.word	0x40021c00
 8003c74:	40022000 	.word	0x40022000
 8003c78:	40022400 	.word	0x40022400
 8003c7c:	40013c00 	.word	0x40013c00

08003c80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003c92:	2300      	movs	r3, #0
 8003c94:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	e0d9      	b.n	8003e50 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4013      	ands	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	f040 80c9 	bne.w	8003e4a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003cb8:	4a6b      	ldr	r2, [pc, #428]	@ (8003e68 <HAL_GPIO_DeInit+0x1e8>)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	089b      	lsrs	r3, r3, #2
 8003cbe:	3302      	adds	r3, #2
 8003cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	220f      	movs	r2, #15
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a63      	ldr	r2, [pc, #396]	@ (8003e6c <HAL_GPIO_DeInit+0x1ec>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d037      	beq.n	8003d52 <HAL_GPIO_DeInit+0xd2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a62      	ldr	r2, [pc, #392]	@ (8003e70 <HAL_GPIO_DeInit+0x1f0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d031      	beq.n	8003d4e <HAL_GPIO_DeInit+0xce>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a61      	ldr	r2, [pc, #388]	@ (8003e74 <HAL_GPIO_DeInit+0x1f4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d02b      	beq.n	8003d4a <HAL_GPIO_DeInit+0xca>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a60      	ldr	r2, [pc, #384]	@ (8003e78 <HAL_GPIO_DeInit+0x1f8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d025      	beq.n	8003d46 <HAL_GPIO_DeInit+0xc6>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a5f      	ldr	r2, [pc, #380]	@ (8003e7c <HAL_GPIO_DeInit+0x1fc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01f      	beq.n	8003d42 <HAL_GPIO_DeInit+0xc2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a5e      	ldr	r2, [pc, #376]	@ (8003e80 <HAL_GPIO_DeInit+0x200>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d019      	beq.n	8003d3e <HAL_GPIO_DeInit+0xbe>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a5d      	ldr	r2, [pc, #372]	@ (8003e84 <HAL_GPIO_DeInit+0x204>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <HAL_GPIO_DeInit+0xba>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a5c      	ldr	r2, [pc, #368]	@ (8003e88 <HAL_GPIO_DeInit+0x208>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00d      	beq.n	8003d36 <HAL_GPIO_DeInit+0xb6>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a5b      	ldr	r2, [pc, #364]	@ (8003e8c <HAL_GPIO_DeInit+0x20c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d007      	beq.n	8003d32 <HAL_GPIO_DeInit+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a5a      	ldr	r2, [pc, #360]	@ (8003e90 <HAL_GPIO_DeInit+0x210>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_GPIO_DeInit+0xae>
 8003d2a:	2309      	movs	r3, #9
 8003d2c:	e012      	b.n	8003d54 <HAL_GPIO_DeInit+0xd4>
 8003d2e:	230a      	movs	r3, #10
 8003d30:	e010      	b.n	8003d54 <HAL_GPIO_DeInit+0xd4>
 8003d32:	2308      	movs	r3, #8
 8003d34:	e00e      	b.n	8003d54 <HAL_GPIO_DeInit+0xd4>
 8003d36:	2307      	movs	r3, #7
 8003d38:	e00c      	b.n	8003d54 <HAL_GPIO_DeInit+0xd4>
 8003d3a:	2306      	movs	r3, #6
 8003d3c:	e00a      	b.n	8003d54 <HAL_GPIO_DeInit+0xd4>
 8003d3e:	2305      	movs	r3, #5
 8003d40:	e008      	b.n	8003d54 <HAL_GPIO_DeInit+0xd4>
 8003d42:	2304      	movs	r3, #4
 8003d44:	e006      	b.n	8003d54 <HAL_GPIO_DeInit+0xd4>
 8003d46:	2303      	movs	r3, #3
 8003d48:	e004      	b.n	8003d54 <HAL_GPIO_DeInit+0xd4>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e002      	b.n	8003d54 <HAL_GPIO_DeInit+0xd4>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <HAL_GPIO_DeInit+0xd4>
 8003d52:	2300      	movs	r3, #0
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	f002 0203 	and.w	r2, r2, #3
 8003d5a:	0092      	lsls	r2, r2, #2
 8003d5c:	4093      	lsls	r3, r2
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d132      	bne.n	8003dca <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003d64:	4b4b      	ldr	r3, [pc, #300]	@ (8003e94 <HAL_GPIO_DeInit+0x214>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	4949      	ldr	r1, [pc, #292]	@ (8003e94 <HAL_GPIO_DeInit+0x214>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003d72:	4b48      	ldr	r3, [pc, #288]	@ (8003e94 <HAL_GPIO_DeInit+0x214>)
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	4946      	ldr	r1, [pc, #280]	@ (8003e94 <HAL_GPIO_DeInit+0x214>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003d80:	4b44      	ldr	r3, [pc, #272]	@ (8003e94 <HAL_GPIO_DeInit+0x214>)
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	4942      	ldr	r1, [pc, #264]	@ (8003e94 <HAL_GPIO_DeInit+0x214>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003d8e:	4b41      	ldr	r3, [pc, #260]	@ (8003e94 <HAL_GPIO_DeInit+0x214>)
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	493f      	ldr	r1, [pc, #252]	@ (8003e94 <HAL_GPIO_DeInit+0x214>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	220f      	movs	r2, #15
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003dac:	4a2e      	ldr	r2, [pc, #184]	@ (8003e68 <HAL_GPIO_DeInit+0x1e8>)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	3302      	adds	r3, #2
 8003db4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	43da      	mvns	r2, r3
 8003dbc:	482a      	ldr	r0, [pc, #168]	@ (8003e68 <HAL_GPIO_DeInit+0x1e8>)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	400a      	ands	r2, r1
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	2103      	movs	r1, #3
 8003dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	401a      	ands	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	08da      	lsrs	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3208      	adds	r2, #8
 8003de8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	220f      	movs	r2, #15
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	08d2      	lsrs	r2, r2, #3
 8003e00:	4019      	ands	r1, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3208      	adds	r2, #8
 8003e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	2103      	movs	r1, #3
 8003e14:	fa01 f303 	lsl.w	r3, r1, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	2101      	movs	r1, #1
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	401a      	ands	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	2103      	movs	r1, #3
 8003e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e42:	43db      	mvns	r3, r3
 8003e44:	401a      	ands	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2b0f      	cmp	r3, #15
 8003e54:	f67f af22 	bls.w	8003c9c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40013800 	.word	0x40013800
 8003e6c:	40020000 	.word	0x40020000
 8003e70:	40020400 	.word	0x40020400
 8003e74:	40020800 	.word	0x40020800
 8003e78:	40020c00 	.word	0x40020c00
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40021400 	.word	0x40021400
 8003e84:	40021800 	.word	0x40021800
 8003e88:	40021c00 	.word	0x40021c00
 8003e8c:	40022000 	.word	0x40022000
 8003e90:	40022400 	.word	0x40022400
 8003e94:	40013c00 	.word	0x40013c00

08003e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	807b      	strh	r3, [r7, #2]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ea8:	787b      	ldrb	r3, [r7, #1]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eae:	887a      	ldrh	r2, [r7, #2]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003eb4:	e003      	b.n	8003ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003eb6:	887b      	ldrh	r3, [r7, #2]
 8003eb8:	041a      	lsls	r2, r3, #16
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	619a      	str	r2, [r3, #24]
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e08b      	b.n	8003ff6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd f822 	bl	8000f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2224      	movs	r2, #36	@ 0x24
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d107      	bne.n	8003f46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	e006      	b.n	8003f54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d108      	bne.n	8003f6e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f6a:	605a      	str	r2, [r3, #4]
 8003f6c:	e007      	b.n	8003f7e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b1d      	ldr	r3, [pc, #116]	@ (8004000 <HAL_I2C_Init+0x134>)
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69d9      	ldr	r1, [r3, #28]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1a      	ldr	r2, [r3, #32]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	02008000 	.word	0x02008000

08004004 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e021      	b.n	800405a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2224      	movs	r2, #36	@ 0x24
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fd f808 	bl	8001044 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	461a      	mov	r2, r3
 8004072:	4603      	mov	r3, r0
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	460b      	mov	r3, r1
 8004078:	813b      	strh	r3, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b20      	cmp	r3, #32
 8004088:	f040 80f9 	bne.w	800427e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_I2C_Mem_Write+0x34>
 8004092:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800409e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0ed      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_I2C_Mem_Write+0x4e>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e0e6      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040ba:	f7fe fc91 	bl	80029e0 <HAL_GetTick>
 80040be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	2319      	movs	r3, #25
 80040c6:	2201      	movs	r2, #1
 80040c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f963 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0d1      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2221      	movs	r2, #33	@ 0x21
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2240      	movs	r2, #64	@ 0x40
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a3a      	ldr	r2, [r7, #32]
 80040f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004104:	88f8      	ldrh	r0, [r7, #6]
 8004106:	893a      	ldrh	r2, [r7, #8]
 8004108:	8979      	ldrh	r1, [r7, #10]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	4603      	mov	r3, r0
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f8c7 	bl	80042a8 <I2C_RequestMemoryWrite>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0a9      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2bff      	cmp	r3, #255	@ 0xff
 8004134:	d90e      	bls.n	8004154 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	22ff      	movs	r2, #255	@ 0xff
 800413a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004140:	b2da      	uxtb	r2, r3
 8004142:	8979      	ldrh	r1, [r7, #10]
 8004144:	2300      	movs	r3, #0
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fae7 	bl	8004720 <I2C_TransferConfig>
 8004152:	e00f      	b.n	8004174 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004162:	b2da      	uxtb	r2, r3
 8004164:	8979      	ldrh	r1, [r7, #10]
 8004166:	2300      	movs	r3, #0
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fad6 	bl	8004720 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f966 	bl	800444a <I2C_WaitOnTXISFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e07b      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d034      	beq.n	800422c <HAL_I2C_Mem_Write+0x1c8>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d130      	bne.n	800422c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d0:	2200      	movs	r2, #0
 80041d2:	2180      	movs	r1, #128	@ 0x80
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f8df 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e04d      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2bff      	cmp	r3, #255	@ 0xff
 80041ec:	d90e      	bls.n	800420c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	22ff      	movs	r2, #255	@ 0xff
 80041f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	8979      	ldrh	r1, [r7, #10]
 80041fc:	2300      	movs	r3, #0
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fa8b 	bl	8004720 <I2C_TransferConfig>
 800420a:	e00f      	b.n	800422c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421a:	b2da      	uxtb	r2, r3
 800421c:	8979      	ldrh	r1, [r7, #10]
 800421e:	2300      	movs	r3, #0
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 fa7a 	bl	8004720 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d19e      	bne.n	8004174 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f94c 	bl	80044d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e01a      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2220      	movs	r2, #32
 8004250:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b0a      	ldr	r3, [pc, #40]	@ (8004288 <HAL_I2C_Mem_Write+0x224>)
 800425e:	400b      	ands	r3, r1
 8004260:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e000      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800427e:	2302      	movs	r3, #2
  }
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	fe00e800 	.word	0xfe00e800

0800428c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800429a:	b2db      	uxtb	r3, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	4608      	mov	r0, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	461a      	mov	r2, r3
 80042b6:	4603      	mov	r3, r0
 80042b8:	817b      	strh	r3, [r7, #10]
 80042ba:	460b      	mov	r3, r1
 80042bc:	813b      	strh	r3, [r7, #8]
 80042be:	4613      	mov	r3, r2
 80042c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	8979      	ldrh	r1, [r7, #10]
 80042c8:	4b20      	ldr	r3, [pc, #128]	@ (800434c <I2C_RequestMemoryWrite+0xa4>)
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fa25 	bl	8004720 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	69b9      	ldr	r1, [r7, #24]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f8b5 	bl	800444a <I2C_WaitOnTXISFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e02c      	b.n	8004344 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d105      	bne.n	80042fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042f0:	893b      	ldrh	r3, [r7, #8]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80042fa:	e015      	b.n	8004328 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042fc:	893b      	ldrh	r3, [r7, #8]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	b29b      	uxth	r3, r3
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	69b9      	ldr	r1, [r7, #24]
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f89b 	bl	800444a <I2C_WaitOnTXISFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e012      	b.n	8004344 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800431e:	893b      	ldrh	r3, [r7, #8]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2200      	movs	r2, #0
 8004330:	2180      	movs	r1, #128	@ 0x80
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f830 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	80002000 	.word	0x80002000

08004350 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b02      	cmp	r3, #2
 8004364:	d103      	bne.n	800436e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2200      	movs	r2, #0
 800436c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b01      	cmp	r3, #1
 800437a:	d007      	beq.n	800438c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	619a      	str	r2, [r3, #24]
  }
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a8:	e03b      	b.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	6839      	ldr	r1, [r7, #0]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f8d6 	bl	8004560 <I2C_IsErrorOccurred>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e041      	b.n	8004442 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d02d      	beq.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fe fb0b 	bl	80029e0 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d122      	bne.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d113      	bne.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e00f      	b.n	8004442 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4013      	ands	r3, r2
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	429a      	cmp	r2, r3
 800443e:	d0b4      	beq.n	80043aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004456:	e033      	b.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f87f 	bl	8004560 <I2C_IsErrorOccurred>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e031      	b.n	80044d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004472:	d025      	beq.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004474:	f7fe fab4 	bl	80029e0 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	429a      	cmp	r2, r3
 8004482:	d302      	bcc.n	800448a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d11a      	bne.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b02      	cmp	r3, #2
 8004496:	d013      	beq.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e007      	b.n	80044d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d1c4      	bne.n	8004458 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044e4:	e02f      	b.n	8004546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f838 	bl	8004560 <I2C_IsErrorOccurred>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e02d      	b.n	8004556 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fa:	f7fe fa71 	bl	80029e0 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	429a      	cmp	r2, r3
 8004508:	d302      	bcc.n	8004510 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11a      	bne.n	8004546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b20      	cmp	r3, #32
 800451c:	d013      	beq.n	8004546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e007      	b.n	8004556 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b20      	cmp	r3, #32
 8004552:	d1c8      	bne.n	80044e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	@ 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b00      	cmp	r3, #0
 800458a:	d068      	beq.n	800465e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2210      	movs	r2, #16
 8004592:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004594:	e049      	b.n	800462a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d045      	beq.n	800462a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800459e:	f7fe fa1f 	bl	80029e0 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d302      	bcc.n	80045b4 <I2C_IsErrorOccurred+0x54>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d13a      	bne.n	800462a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045d6:	d121      	bne.n	800461c <I2C_IsErrorOccurred+0xbc>
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045de:	d01d      	beq.n	800461c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d01a      	beq.n	800461c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045f6:	f7fe f9f3 	bl	80029e0 <HAL_GetTick>
 80045fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045fc:	e00e      	b.n	800461c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045fe:	f7fe f9ef 	bl	80029e0 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b19      	cmp	r3, #25
 800460a:	d907      	bls.n	800461c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	f043 0320 	orr.w	r3, r3, #32
 8004612:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800461a:	e006      	b.n	800462a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b20      	cmp	r3, #32
 8004628:	d1e9      	bne.n	80045fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b20      	cmp	r3, #32
 8004636:	d003      	beq.n	8004640 <I2C_IsErrorOccurred+0xe0>
 8004638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0aa      	beq.n	8004596 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004644:	2b00      	cmp	r3, #0
 8004646:	d103      	bne.n	8004650 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2220      	movs	r2, #32
 800464e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	f043 0304 	orr.w	r3, r3, #4
 8004656:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00b      	beq.n	8004688 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004680:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	f043 0308 	orr.w	r3, r3, #8
 8004698:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00b      	beq.n	80046cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	f043 0302 	orr.w	r3, r3, #2
 80046ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80046cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01c      	beq.n	800470e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7ff fe3b 	bl	8004350 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b0d      	ldr	r3, [pc, #52]	@ (800471c <I2C_IsErrorOccurred+0x1bc>)
 80046e6:	400b      	ands	r3, r1
 80046e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800470e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004712:	4618      	mov	r0, r3
 8004714:	3728      	adds	r7, #40	@ 0x28
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	fe00e800 	.word	0xfe00e800

08004720 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	817b      	strh	r3, [r7, #10]
 800472e:	4613      	mov	r3, r2
 8004730:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004732:	897b      	ldrh	r3, [r7, #10]
 8004734:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004738:	7a7b      	ldrb	r3, [r7, #9]
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004740:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	4313      	orrs	r3, r2
 800474a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800474e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	0d5b      	lsrs	r3, r3, #21
 800475a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800475e:	4b08      	ldr	r3, [pc, #32]	@ (8004780 <I2C_TransferConfig+0x60>)
 8004760:	430b      	orrs	r3, r1
 8004762:	43db      	mvns	r3, r3
 8004764:	ea02 0103 	and.w	r1, r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	03ff63ff 	.word	0x03ff63ff

08004784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b20      	cmp	r3, #32
 8004798:	d138      	bne.n	800480c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e032      	b.n	800480e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2224      	movs	r2, #36	@ 0x24
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6819      	ldr	r1, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	e000      	b.n	800480e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800480c:	2302      	movs	r3, #2
  }
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b20      	cmp	r3, #32
 800482e:	d139      	bne.n	80048a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800483a:	2302      	movs	r3, #2
 800483c:	e033      	b.n	80048a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2224      	movs	r2, #36	@ 0x24
 800484a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800486c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e0bf      	b.n	8004a46 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fc fbd6 	bl	800108c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80048f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6999      	ldr	r1, [r3, #24]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800490c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6899      	ldr	r1, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	4b4a      	ldr	r3, [pc, #296]	@ (8004a50 <HAL_LTDC_Init+0x19c>)
 8004928:	400b      	ands	r3, r1
 800492a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	041b      	lsls	r3, r3, #16
 8004932:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6899      	ldr	r1, [r3, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68d9      	ldr	r1, [r3, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4b3e      	ldr	r3, [pc, #248]	@ (8004a50 <HAL_LTDC_Init+0x19c>)
 8004956:	400b      	ands	r3, r1
 8004958:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	041b      	lsls	r3, r3, #16
 8004960:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68d9      	ldr	r1, [r3, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1a      	ldr	r2, [r3, #32]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6919      	ldr	r1, [r3, #16]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b33      	ldr	r3, [pc, #204]	@ (8004a50 <HAL_LTDC_Init+0x19c>)
 8004984:	400b      	ands	r3, r1
 8004986:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498c:	041b      	lsls	r3, r3, #16
 800498e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6919      	ldr	r1, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6959      	ldr	r1, [r3, #20]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	4b27      	ldr	r3, [pc, #156]	@ (8004a50 <HAL_LTDC_Init+0x19c>)
 80049b2:	400b      	ands	r3, r1
 80049b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6959      	ldr	r1, [r3, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049da:	021b      	lsls	r3, r3, #8
 80049dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80049f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0206 	orr.w	r2, r2, #6
 8004a22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	f000f800 	.word	0xf000f800

08004a54 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a54:	b5b0      	push	{r4, r5, r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_LTDC_ConfigLayer+0x1a>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e02c      	b.n	8004ac8 <HAL_LTDC_ConfigLayer+0x74>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2134      	movs	r1, #52	@ 0x34
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	4413      	add	r3, r2
 8004a8a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4614      	mov	r4, r2
 8004a92:	461d      	mov	r5, r3
 8004a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 f81f 	bl	8004aec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bdb0      	pop	{r4, r5, r7, pc}

08004ad0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004ade:	b2db      	uxtb	r3, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b089      	sub	sp, #36	@ 0x24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	0c1b      	lsrs	r3, r3, #16
 8004b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b08:	4413      	add	r3, r2
 8004b0a:	041b      	lsls	r3, r3, #16
 8004b0c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	01db      	lsls	r3, r3, #7
 8004b18:	4413      	add	r3, r2
 8004b1a:	3384      	adds	r3, #132	@ 0x84
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	4611      	mov	r1, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	01d2      	lsls	r2, r2, #7
 8004b28:	440a      	add	r2, r1
 8004b2a:	3284      	adds	r2, #132	@ 0x84
 8004b2c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004b30:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	0c1b      	lsrs	r3, r3, #16
 8004b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b42:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b44:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	01db      	lsls	r3, r3, #7
 8004b50:	440b      	add	r3, r1
 8004b52:	3384      	adds	r3, #132	@ 0x84
 8004b54:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b5a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b6a:	4413      	add	r3, r2
 8004b6c:	041b      	lsls	r3, r3, #16
 8004b6e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	01db      	lsls	r3, r3, #7
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3384      	adds	r3, #132	@ 0x84
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	6812      	ldr	r2, [r2, #0]
 8004b84:	4611      	mov	r1, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	01d2      	lsls	r2, r2, #7
 8004b8a:	440a      	add	r2, r1
 8004b8c:	3284      	adds	r2, #132	@ 0x84
 8004b8e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004b92:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ba2:	4413      	add	r3, r2
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4619      	mov	r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	01db      	lsls	r3, r3, #7
 8004bb0:	440b      	add	r3, r1
 8004bb2:	3384      	adds	r3, #132	@ 0x84
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	01db      	lsls	r3, r3, #7
 8004bc6:	4413      	add	r3, r2
 8004bc8:	3384      	adds	r3, #132	@ 0x84
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	6812      	ldr	r2, [r2, #0]
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	01d2      	lsls	r2, r2, #7
 8004bd6:	440a      	add	r2, r1
 8004bd8:	3284      	adds	r2, #132	@ 0x84
 8004bda:	f023 0307 	bic.w	r3, r3, #7
 8004bde:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	01db      	lsls	r3, r3, #7
 8004bea:	4413      	add	r3, r2
 8004bec:	3384      	adds	r3, #132	@ 0x84
 8004bee:	461a      	mov	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c06:	041b      	lsls	r3, r3, #16
 8004c08:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	061b      	lsls	r3, r3, #24
 8004c10:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	01db      	lsls	r3, r3, #7
 8004c1c:	4413      	add	r3, r2
 8004c1e:	3384      	adds	r3, #132	@ 0x84
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	01db      	lsls	r3, r3, #7
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3384      	adds	r3, #132	@ 0x84
 8004c30:	461a      	mov	r2, r3
 8004c32:	2300      	movs	r3, #0
 8004c34:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	431a      	orrs	r2, r3
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	431a      	orrs	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	01db      	lsls	r3, r3, #7
 8004c50:	440b      	add	r3, r1
 8004c52:	3384      	adds	r3, #132	@ 0x84
 8004c54:	4619      	mov	r1, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	01db      	lsls	r3, r3, #7
 8004c66:	4413      	add	r3, r2
 8004c68:	3384      	adds	r3, #132	@ 0x84
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	4611      	mov	r1, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	01d2      	lsls	r2, r2, #7
 8004c76:	440a      	add	r2, r1
 8004c78:	3284      	adds	r2, #132	@ 0x84
 8004c7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c7e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	01db      	lsls	r3, r3, #7
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3384      	adds	r3, #132	@ 0x84
 8004c8e:	461a      	mov	r2, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	01db      	lsls	r3, r3, #7
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3384      	adds	r3, #132	@ 0x84
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4619      	mov	r1, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	01db      	lsls	r3, r3, #7
 8004cb0:	440b      	add	r3, r1
 8004cb2:	3384      	adds	r3, #132	@ 0x84
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4b58      	ldr	r3, [pc, #352]	@ (8004e18 <LTDC_SetConfig+0x32c>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	68f9      	ldr	r1, [r7, #12]
 8004cc6:	6809      	ldr	r1, [r1, #0]
 8004cc8:	4608      	mov	r0, r1
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	01c9      	lsls	r1, r1, #7
 8004cce:	4401      	add	r1, r0
 8004cd0:	3184      	adds	r1, #132	@ 0x84
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	01db      	lsls	r3, r3, #7
 8004ce0:	4413      	add	r3, r2
 8004ce2:	3384      	adds	r3, #132	@ 0x84
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	01db      	lsls	r3, r3, #7
 8004cf0:	4413      	add	r3, r2
 8004cf2:	3384      	adds	r3, #132	@ 0x84
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	01db      	lsls	r3, r3, #7
 8004d04:	4413      	add	r3, r2
 8004d06:	3384      	adds	r3, #132	@ 0x84
 8004d08:	461a      	mov	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004d18:	2304      	movs	r3, #4
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	e01b      	b.n	8004d56 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d102      	bne.n	8004d2c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004d26:	2303      	movs	r3, #3
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	e014      	b.n	8004d56 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d00b      	beq.n	8004d4c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d007      	beq.n	8004d4c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d003      	beq.n	8004d4c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d48:	2b07      	cmp	r3, #7
 8004d4a:	d102      	bne.n	8004d52 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	61fb      	str	r3, [r7, #28]
 8004d50:	e001      	b.n	8004d56 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004d52:	2301      	movs	r3, #1
 8004d54:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	01db      	lsls	r3, r3, #7
 8004d60:	4413      	add	r3, r2
 8004d62:	3384      	adds	r3, #132	@ 0x84
 8004d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	6812      	ldr	r2, [r2, #0]
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	01d2      	lsls	r2, r2, #7
 8004d70:	440a      	add	r2, r1
 8004d72:	3284      	adds	r2, #132	@ 0x84
 8004d74:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004d78:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	fb02 f303 	mul.w	r3, r2, r3
 8004d84:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	6859      	ldr	r1, [r3, #4]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	1acb      	subs	r3, r1, r3
 8004d90:	69f9      	ldr	r1, [r7, #28]
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	6809      	ldr	r1, [r1, #0]
 8004d9c:	4608      	mov	r0, r1
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	01c9      	lsls	r1, r1, #7
 8004da2:	4401      	add	r1, r0
 8004da4:	3184      	adds	r1, #132	@ 0x84
 8004da6:	4313      	orrs	r3, r2
 8004da8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	01db      	lsls	r3, r3, #7
 8004db4:	4413      	add	r3, r2
 8004db6:	3384      	adds	r3, #132	@ 0x84
 8004db8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	01db      	lsls	r3, r3, #7
 8004dc4:	440b      	add	r3, r1
 8004dc6:	3384      	adds	r3, #132	@ 0x84
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4b14      	ldr	r3, [pc, #80]	@ (8004e1c <LTDC_SetConfig+0x330>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	01db      	lsls	r3, r3, #7
 8004dda:	4413      	add	r3, r2
 8004ddc:	3384      	adds	r3, #132	@ 0x84
 8004dde:	461a      	mov	r2, r3
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	01db      	lsls	r3, r3, #7
 8004df0:	4413      	add	r3, r2
 8004df2:	3384      	adds	r3, #132	@ 0x84
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	01d2      	lsls	r2, r2, #7
 8004e00:	440a      	add	r2, r1
 8004e02:	3284      	adds	r2, #132	@ 0x84
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	6013      	str	r3, [r2, #0]
}
 8004e0a:	bf00      	nop
 8004e0c:	3724      	adds	r7, #36	@ 0x24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	fffff8f8 	.word	0xfffff8f8
 8004e1c:	fffff800 	.word	0xfffff800

08004e20 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e24:	4b05      	ldr	r3, [pc, #20]	@ (8004e3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a04      	ldr	r2, [pc, #16]	@ (8004e3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e2e:	6013      	str	r3, [r2, #0]
}
 8004e30:	bf00      	nop
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40007000 	.word	0x40007000

08004e40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e4a:	4b23      	ldr	r3, [pc, #140]	@ (8004ed8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4e:	4a22      	ldr	r2, [pc, #136]	@ (8004ed8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e56:	4b20      	ldr	r3, [pc, #128]	@ (8004ed8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e62:	4b1e      	ldr	r3, [pc, #120]	@ (8004edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1d      	ldr	r2, [pc, #116]	@ (8004edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e6e:	f7fd fdb7 	bl	80029e0 <HAL_GetTick>
 8004e72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e74:	e009      	b.n	8004e8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e76:	f7fd fdb3 	bl	80029e0 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e84:	d901      	bls.n	8004e8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e022      	b.n	8004ed0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e8a:	4b14      	ldr	r3, [pc, #80]	@ (8004edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e96:	d1ee      	bne.n	8004e76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e98:	4b10      	ldr	r3, [pc, #64]	@ (8004edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8004edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ea4:	f7fd fd9c 	bl	80029e0 <HAL_GetTick>
 8004ea8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004eaa:	e009      	b.n	8004ec0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004eac:	f7fd fd98 	bl	80029e0 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004eba:	d901      	bls.n	8004ec0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e007      	b.n	8004ed0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ec0:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ecc:	d1ee      	bne.n	8004eac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	40007000 	.word	0x40007000

08004ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e291      	b.n	800541a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 8087 	beq.w	8005012 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f04:	4b96      	ldr	r3, [pc, #600]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 030c 	and.w	r3, r3, #12
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d00c      	beq.n	8004f2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f10:	4b93      	ldr	r3, [pc, #588]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 030c 	and.w	r3, r3, #12
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d112      	bne.n	8004f42 <HAL_RCC_OscConfig+0x62>
 8004f1c:	4b90      	ldr	r3, [pc, #576]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f28:	d10b      	bne.n	8004f42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f2a:	4b8d      	ldr	r3, [pc, #564]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d06c      	beq.n	8005010 <HAL_RCC_OscConfig+0x130>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d168      	bne.n	8005010 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e26b      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f4a:	d106      	bne.n	8004f5a <HAL_RCC_OscConfig+0x7a>
 8004f4c:	4b84      	ldr	r3, [pc, #528]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a83      	ldr	r2, [pc, #524]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	e02e      	b.n	8004fb8 <HAL_RCC_OscConfig+0xd8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10c      	bne.n	8004f7c <HAL_RCC_OscConfig+0x9c>
 8004f62:	4b7f      	ldr	r3, [pc, #508]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a7e      	ldr	r2, [pc, #504]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4b7c      	ldr	r3, [pc, #496]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a7b      	ldr	r2, [pc, #492]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004f74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	e01d      	b.n	8004fb8 <HAL_RCC_OscConfig+0xd8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f84:	d10c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0xc0>
 8004f86:	4b76      	ldr	r3, [pc, #472]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a75      	ldr	r2, [pc, #468]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	4b73      	ldr	r3, [pc, #460]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a72      	ldr	r2, [pc, #456]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	e00b      	b.n	8004fb8 <HAL_RCC_OscConfig+0xd8>
 8004fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a6e      	ldr	r2, [pc, #440]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	4b6c      	ldr	r3, [pc, #432]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a6b      	ldr	r2, [pc, #428]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d013      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc0:	f7fd fd0e 	bl	80029e0 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc8:	f7fd fd0a 	bl	80029e0 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b64      	cmp	r3, #100	@ 0x64
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e21f      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fda:	4b61      	ldr	r3, [pc, #388]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0f0      	beq.n	8004fc8 <HAL_RCC_OscConfig+0xe8>
 8004fe6:	e014      	b.n	8005012 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fd fcfa 	bl	80029e0 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff0:	f7fd fcf6 	bl	80029e0 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b64      	cmp	r3, #100	@ 0x64
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e20b      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005002:	4b57      	ldr	r3, [pc, #348]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f0      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x110>
 800500e:	e000      	b.n	8005012 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d069      	beq.n	80050f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800501e:	4b50      	ldr	r3, [pc, #320]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00b      	beq.n	8005042 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800502a:	4b4d      	ldr	r3, [pc, #308]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b08      	cmp	r3, #8
 8005034:	d11c      	bne.n	8005070 <HAL_RCC_OscConfig+0x190>
 8005036:	4b4a      	ldr	r3, [pc, #296]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d116      	bne.n	8005070 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005042:	4b47      	ldr	r3, [pc, #284]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <HAL_RCC_OscConfig+0x17a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d001      	beq.n	800505a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e1df      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800505a:	4b41      	ldr	r3, [pc, #260]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	493d      	ldr	r1, [pc, #244]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 800506a:	4313      	orrs	r3, r2
 800506c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800506e:	e040      	b.n	80050f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d023      	beq.n	80050c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005078:	4b39      	ldr	r3, [pc, #228]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a38      	ldr	r2, [pc, #224]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fd fcac 	bl	80029e0 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800508c:	f7fd fca8 	bl	80029e0 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e1bd      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509e:	4b30      	ldr	r3, [pc, #192]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	4929      	ldr	r1, [pc, #164]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	600b      	str	r3, [r1, #0]
 80050be:	e018      	b.n	80050f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c0:	4b27      	ldr	r3, [pc, #156]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a26      	ldr	r2, [pc, #152]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 80050c6:	f023 0301 	bic.w	r3, r3, #1
 80050ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fd fc88 	bl	80029e0 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d4:	f7fd fc84 	bl	80029e0 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e199      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d038      	beq.n	8005170 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d019      	beq.n	800513a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005106:	4b16      	ldr	r3, [pc, #88]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8005108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800510a:	4a15      	ldr	r2, [pc, #84]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005112:	f7fd fc65 	bl	80029e0 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800511a:	f7fd fc61 	bl	80029e0 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e176      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800512c:	4b0c      	ldr	r3, [pc, #48]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 800512e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCC_OscConfig+0x23a>
 8005138:	e01a      	b.n	8005170 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800513a:	4b09      	ldr	r3, [pc, #36]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 800513c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513e:	4a08      	ldr	r2, [pc, #32]	@ (8005160 <HAL_RCC_OscConfig+0x280>)
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005146:	f7fd fc4b 	bl	80029e0 <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800514c:	e00a      	b.n	8005164 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800514e:	f7fd fc47 	bl	80029e0 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d903      	bls.n	8005164 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e15c      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
 8005160:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005164:	4b91      	ldr	r3, [pc, #580]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1ee      	bne.n	800514e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 80a4 	beq.w	80052c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517e:	4b8b      	ldr	r3, [pc, #556]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10d      	bne.n	80051a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800518a:	4b88      	ldr	r3, [pc, #544]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	4a87      	ldr	r2, [pc, #540]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005194:	6413      	str	r3, [r2, #64]	@ 0x40
 8005196:	4b85      	ldr	r3, [pc, #532]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800519e:	60bb      	str	r3, [r7, #8]
 80051a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a2:	2301      	movs	r3, #1
 80051a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051a6:	4b82      	ldr	r3, [pc, #520]	@ (80053b0 <HAL_RCC_OscConfig+0x4d0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d118      	bne.n	80051e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80051b2:	4b7f      	ldr	r3, [pc, #508]	@ (80053b0 <HAL_RCC_OscConfig+0x4d0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a7e      	ldr	r2, [pc, #504]	@ (80053b0 <HAL_RCC_OscConfig+0x4d0>)
 80051b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051be:	f7fd fc0f 	bl	80029e0 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c6:	f7fd fc0b 	bl	80029e0 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b64      	cmp	r3, #100	@ 0x64
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e120      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051d8:	4b75      	ldr	r3, [pc, #468]	@ (80053b0 <HAL_RCC_OscConfig+0x4d0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0f0      	beq.n	80051c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d106      	bne.n	80051fa <HAL_RCC_OscConfig+0x31a>
 80051ec:	4b6f      	ldr	r3, [pc, #444]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f0:	4a6e      	ldr	r2, [pc, #440]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051f8:	e02d      	b.n	8005256 <HAL_RCC_OscConfig+0x376>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0x33c>
 8005202:	4b6a      	ldr	r3, [pc, #424]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005206:	4a69      	ldr	r2, [pc, #420]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005208:	f023 0301 	bic.w	r3, r3, #1
 800520c:	6713      	str	r3, [r2, #112]	@ 0x70
 800520e:	4b67      	ldr	r3, [pc, #412]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005212:	4a66      	ldr	r2, [pc, #408]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005214:	f023 0304 	bic.w	r3, r3, #4
 8005218:	6713      	str	r3, [r2, #112]	@ 0x70
 800521a:	e01c      	b.n	8005256 <HAL_RCC_OscConfig+0x376>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2b05      	cmp	r3, #5
 8005222:	d10c      	bne.n	800523e <HAL_RCC_OscConfig+0x35e>
 8005224:	4b61      	ldr	r3, [pc, #388]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005228:	4a60      	ldr	r2, [pc, #384]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 800522a:	f043 0304 	orr.w	r3, r3, #4
 800522e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005230:	4b5e      	ldr	r3, [pc, #376]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005234:	4a5d      	ldr	r2, [pc, #372]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	6713      	str	r3, [r2, #112]	@ 0x70
 800523c:	e00b      	b.n	8005256 <HAL_RCC_OscConfig+0x376>
 800523e:	4b5b      	ldr	r3, [pc, #364]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005242:	4a5a      	ldr	r2, [pc, #360]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	6713      	str	r3, [r2, #112]	@ 0x70
 800524a:	4b58      	ldr	r3, [pc, #352]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524e:	4a57      	ldr	r2, [pc, #348]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005250:	f023 0304 	bic.w	r3, r3, #4
 8005254:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d015      	beq.n	800528a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525e:	f7fd fbbf 	bl	80029e0 <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005264:	e00a      	b.n	800527c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005266:	f7fd fbbb 	bl	80029e0 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005274:	4293      	cmp	r3, r2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e0ce      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800527c:	4b4b      	ldr	r3, [pc, #300]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 800527e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0ee      	beq.n	8005266 <HAL_RCC_OscConfig+0x386>
 8005288:	e014      	b.n	80052b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528a:	f7fd fba9 	bl	80029e0 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005290:	e00a      	b.n	80052a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005292:	f7fd fba5 	bl	80029e0 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e0b8      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a8:	4b40      	ldr	r3, [pc, #256]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1ee      	bne.n	8005292 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d105      	bne.n	80052c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ba:	4b3c      	ldr	r3, [pc, #240]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	4a3b      	ldr	r2, [pc, #236]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 80052c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052c4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 80a4 	beq.w	8005418 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052d0:	4b36      	ldr	r3, [pc, #216]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 030c 	and.w	r3, r3, #12
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d06b      	beq.n	80053b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d149      	bne.n	8005378 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e4:	4b31      	ldr	r3, [pc, #196]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a30      	ldr	r2, [pc, #192]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 80052ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f0:	f7fd fb76 	bl	80029e0 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f8:	f7fd fb72 	bl	80029e0 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e087      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530a:	4b28      	ldr	r3, [pc, #160]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f0      	bne.n	80052f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69da      	ldr	r2, [r3, #28]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	019b      	lsls	r3, r3, #6
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	3b01      	subs	r3, #1
 8005330:	041b      	lsls	r3, r3, #16
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005338:	061b      	lsls	r3, r3, #24
 800533a:	4313      	orrs	r3, r2
 800533c:	4a1b      	ldr	r2, [pc, #108]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 800533e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005342:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005344:	4b19      	ldr	r3, [pc, #100]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a18      	ldr	r2, [pc, #96]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 800534a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800534e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005350:	f7fd fb46 	bl	80029e0 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005358:	f7fd fb42 	bl	80029e0 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e057      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800536a:	4b10      	ldr	r3, [pc, #64]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f0      	beq.n	8005358 <HAL_RCC_OscConfig+0x478>
 8005376:	e04f      	b.n	8005418 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005378:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a0b      	ldr	r2, [pc, #44]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 800537e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fd fb2c 	bl	80029e0 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800538c:	f7fd fb28 	bl	80029e0 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e03d      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539e:	4b03      	ldr	r3, [pc, #12]	@ (80053ac <HAL_RCC_OscConfig+0x4cc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1f0      	bne.n	800538c <HAL_RCC_OscConfig+0x4ac>
 80053aa:	e035      	b.n	8005418 <HAL_RCC_OscConfig+0x538>
 80053ac:	40023800 	.word	0x40023800
 80053b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80053b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005424 <HAL_RCC_OscConfig+0x544>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d028      	beq.n	8005414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d121      	bne.n	8005414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053da:	429a      	cmp	r2, r3
 80053dc:	d11a      	bne.n	8005414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053e4:	4013      	ands	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d111      	bne.n	8005414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	3b01      	subs	r3, #1
 80053fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005400:	429a      	cmp	r2, r3
 8005402:	d107      	bne.n	8005414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005410:	429a      	cmp	r2, r3
 8005412:	d001      	beq.n	8005418 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40023800 	.word	0x40023800

08005428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e0d0      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005440:	4b6a      	ldr	r3, [pc, #424]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d910      	bls.n	8005470 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544e:	4b67      	ldr	r3, [pc, #412]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 020f 	bic.w	r2, r3, #15
 8005456:	4965      	ldr	r1, [pc, #404]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	4313      	orrs	r3, r2
 800545c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800545e:	4b63      	ldr	r3, [pc, #396]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d001      	beq.n	8005470 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e0b8      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d020      	beq.n	80054be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005488:	4b59      	ldr	r3, [pc, #356]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	4a58      	ldr	r2, [pc, #352]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 800548e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005492:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054a0:	4b53      	ldr	r3, [pc, #332]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	4a52      	ldr	r2, [pc, #328]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 80054a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ac:	4b50      	ldr	r3, [pc, #320]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	494d      	ldr	r1, [pc, #308]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d040      	beq.n	800554c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d107      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d2:	4b47      	ldr	r3, [pc, #284]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d115      	bne.n	800550a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e07f      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d107      	bne.n	80054fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ea:	4b41      	ldr	r3, [pc, #260]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d109      	bne.n	800550a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e073      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fa:	4b3d      	ldr	r3, [pc, #244]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e06b      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800550a:	4b39      	ldr	r3, [pc, #228]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f023 0203 	bic.w	r2, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	4936      	ldr	r1, [pc, #216]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 8005518:	4313      	orrs	r3, r2
 800551a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800551c:	f7fd fa60 	bl	80029e0 <HAL_GetTick>
 8005520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005522:	e00a      	b.n	800553a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005524:	f7fd fa5c 	bl	80029e0 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005532:	4293      	cmp	r3, r2
 8005534:	d901      	bls.n	800553a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e053      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553a:	4b2d      	ldr	r3, [pc, #180]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 020c 	and.w	r2, r3, #12
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	429a      	cmp	r2, r3
 800554a:	d1eb      	bne.n	8005524 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800554c:	4b27      	ldr	r3, [pc, #156]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d210      	bcs.n	800557c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555a:	4b24      	ldr	r3, [pc, #144]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f023 020f 	bic.w	r2, r3, #15
 8005562:	4922      	ldr	r1, [pc, #136]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	4313      	orrs	r3, r2
 8005568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800556a:	4b20      	ldr	r3, [pc, #128]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d001      	beq.n	800557c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e032      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005588:	4b19      	ldr	r3, [pc, #100]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4916      	ldr	r1, [pc, #88]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 8005596:	4313      	orrs	r3, r2
 8005598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055a6:	4b12      	ldr	r3, [pc, #72]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	490e      	ldr	r1, [pc, #56]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055ba:	f000 f821 	bl	8005600 <HAL_RCC_GetSysClockFreq>
 80055be:	4602      	mov	r2, r0
 80055c0:	4b0b      	ldr	r3, [pc, #44]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	490a      	ldr	r1, [pc, #40]	@ (80055f4 <HAL_RCC_ClockConfig+0x1cc>)
 80055cc:	5ccb      	ldrb	r3, [r1, r3]
 80055ce:	fa22 f303 	lsr.w	r3, r2, r3
 80055d2:	4a09      	ldr	r2, [pc, #36]	@ (80055f8 <HAL_RCC_ClockConfig+0x1d0>)
 80055d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055d6:	4b09      	ldr	r3, [pc, #36]	@ (80055fc <HAL_RCC_ClockConfig+0x1d4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fd f9bc 	bl	8002958 <HAL_InitTick>

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40023c00 	.word	0x40023c00
 80055f0:	40023800 	.word	0x40023800
 80055f4:	08008bec 	.word	0x08008bec
 80055f8:	20000000 	.word	0x20000000
 80055fc:	20000010 	.word	0x20000010

08005600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005604:	b090      	sub	sp, #64	@ 0x40
 8005606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	637b      	str	r3, [r7, #52]	@ 0x34
 800560c:	2300      	movs	r3, #0
 800560e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005610:	2300      	movs	r3, #0
 8005612:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005618:	4b59      	ldr	r3, [pc, #356]	@ (8005780 <HAL_RCC_GetSysClockFreq+0x180>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 030c 	and.w	r3, r3, #12
 8005620:	2b08      	cmp	r3, #8
 8005622:	d00d      	beq.n	8005640 <HAL_RCC_GetSysClockFreq+0x40>
 8005624:	2b08      	cmp	r3, #8
 8005626:	f200 80a1 	bhi.w	800576c <HAL_RCC_GetSysClockFreq+0x16c>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_RCC_GetSysClockFreq+0x34>
 800562e:	2b04      	cmp	r3, #4
 8005630:	d003      	beq.n	800563a <HAL_RCC_GetSysClockFreq+0x3a>
 8005632:	e09b      	b.n	800576c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005634:	4b53      	ldr	r3, [pc, #332]	@ (8005784 <HAL_RCC_GetSysClockFreq+0x184>)
 8005636:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005638:	e09b      	b.n	8005772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800563a:	4b53      	ldr	r3, [pc, #332]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x188>)
 800563c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800563e:	e098      	b.n	8005772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005640:	4b4f      	ldr	r3, [pc, #316]	@ (8005780 <HAL_RCC_GetSysClockFreq+0x180>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005648:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800564a:	4b4d      	ldr	r3, [pc, #308]	@ (8005780 <HAL_RCC_GetSysClockFreq+0x180>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d028      	beq.n	80056a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005656:	4b4a      	ldr	r3, [pc, #296]	@ (8005780 <HAL_RCC_GetSysClockFreq+0x180>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	099b      	lsrs	r3, r3, #6
 800565c:	2200      	movs	r2, #0
 800565e:	623b      	str	r3, [r7, #32]
 8005660:	627a      	str	r2, [r7, #36]	@ 0x24
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005668:	2100      	movs	r1, #0
 800566a:	4b47      	ldr	r3, [pc, #284]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x188>)
 800566c:	fb03 f201 	mul.w	r2, r3, r1
 8005670:	2300      	movs	r3, #0
 8005672:	fb00 f303 	mul.w	r3, r0, r3
 8005676:	4413      	add	r3, r2
 8005678:	4a43      	ldr	r2, [pc, #268]	@ (8005788 <HAL_RCC_GetSysClockFreq+0x188>)
 800567a:	fba0 1202 	umull	r1, r2, r0, r2
 800567e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005680:	460a      	mov	r2, r1
 8005682:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005686:	4413      	add	r3, r2
 8005688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800568a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568c:	2200      	movs	r2, #0
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	61fa      	str	r2, [r7, #28]
 8005692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005696:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800569a:	f7fa fdb5 	bl	8000208 <__aeabi_uldivmod>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4613      	mov	r3, r2
 80056a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056a6:	e053      	b.n	8005750 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a8:	4b35      	ldr	r3, [pc, #212]	@ (8005780 <HAL_RCC_GetSysClockFreq+0x180>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	099b      	lsrs	r3, r3, #6
 80056ae:	2200      	movs	r2, #0
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	617a      	str	r2, [r7, #20]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056ba:	f04f 0b00 	mov.w	fp, #0
 80056be:	4652      	mov	r2, sl
 80056c0:	465b      	mov	r3, fp
 80056c2:	f04f 0000 	mov.w	r0, #0
 80056c6:	f04f 0100 	mov.w	r1, #0
 80056ca:	0159      	lsls	r1, r3, #5
 80056cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056d0:	0150      	lsls	r0, r2, #5
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	ebb2 080a 	subs.w	r8, r2, sl
 80056da:	eb63 090b 	sbc.w	r9, r3, fp
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056f2:	ebb2 0408 	subs.w	r4, r2, r8
 80056f6:	eb63 0509 	sbc.w	r5, r3, r9
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	f04f 0300 	mov.w	r3, #0
 8005702:	00eb      	lsls	r3, r5, #3
 8005704:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005708:	00e2      	lsls	r2, r4, #3
 800570a:	4614      	mov	r4, r2
 800570c:	461d      	mov	r5, r3
 800570e:	eb14 030a 	adds.w	r3, r4, sl
 8005712:	603b      	str	r3, [r7, #0]
 8005714:	eb45 030b 	adc.w	r3, r5, fp
 8005718:	607b      	str	r3, [r7, #4]
 800571a:	f04f 0200 	mov.w	r2, #0
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005726:	4629      	mov	r1, r5
 8005728:	028b      	lsls	r3, r1, #10
 800572a:	4621      	mov	r1, r4
 800572c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005730:	4621      	mov	r1, r4
 8005732:	028a      	lsls	r2, r1, #10
 8005734:	4610      	mov	r0, r2
 8005736:	4619      	mov	r1, r3
 8005738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800573a:	2200      	movs	r2, #0
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	60fa      	str	r2, [r7, #12]
 8005740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005744:	f7fa fd60 	bl	8000208 <__aeabi_uldivmod>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4613      	mov	r3, r2
 800574e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005750:	4b0b      	ldr	r3, [pc, #44]	@ (8005780 <HAL_RCC_GetSysClockFreq+0x180>)
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	0c1b      	lsrs	r3, r3, #16
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	3301      	adds	r3, #1
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005760:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005764:	fbb2 f3f3 	udiv	r3, r2, r3
 8005768:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800576a:	e002      	b.n	8005772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800576c:	4b05      	ldr	r3, [pc, #20]	@ (8005784 <HAL_RCC_GetSysClockFreq+0x184>)
 800576e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005774:	4618      	mov	r0, r3
 8005776:	3740      	adds	r7, #64	@ 0x40
 8005778:	46bd      	mov	sp, r7
 800577a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800577e:	bf00      	nop
 8005780:	40023800 	.word	0x40023800
 8005784:	00f42400 	.word	0x00f42400
 8005788:	017d7840 	.word	0x017d7840

0800578c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005790:	4b03      	ldr	r3, [pc, #12]	@ (80057a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005792:	681b      	ldr	r3, [r3, #0]
}
 8005794:	4618      	mov	r0, r3
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000000 	.word	0x20000000

080057a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057a8:	f7ff fff0 	bl	800578c <HAL_RCC_GetHCLKFreq>
 80057ac:	4602      	mov	r2, r0
 80057ae:	4b05      	ldr	r3, [pc, #20]	@ (80057c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	0a9b      	lsrs	r3, r3, #10
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	4903      	ldr	r1, [pc, #12]	@ (80057c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ba:	5ccb      	ldrb	r3, [r1, r3]
 80057bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40023800 	.word	0x40023800
 80057c8:	08008bfc 	.word	0x08008bfc

080057cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057d0:	f7ff ffdc 	bl	800578c <HAL_RCC_GetHCLKFreq>
 80057d4:	4602      	mov	r2, r0
 80057d6:	4b05      	ldr	r3, [pc, #20]	@ (80057ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	0b5b      	lsrs	r3, r3, #13
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	4903      	ldr	r1, [pc, #12]	@ (80057f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057e2:	5ccb      	ldrb	r3, [r1, r3]
 80057e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40023800 	.word	0x40023800
 80057f0:	08008bfc 	.word	0x08008bfc

080057f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005808:	2300      	movs	r3, #0
 800580a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800580c:	2300      	movs	r3, #0
 800580e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d012      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800581c:	4b69      	ldr	r3, [pc, #420]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	4a68      	ldr	r2, [pc, #416]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005822:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005826:	6093      	str	r3, [r2, #8]
 8005828:	4b66      	ldr	r3, [pc, #408]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005830:	4964      	ldr	r1, [pc, #400]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005832:	4313      	orrs	r3, r2
 8005834:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800583e:	2301      	movs	r3, #1
 8005840:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d017      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800584e:	4b5d      	ldr	r3, [pc, #372]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005854:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585c:	4959      	ldr	r1, [pc, #356]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005868:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800586c:	d101      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800586e:	2301      	movs	r3, #1
 8005870:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800587a:	2301      	movs	r3, #1
 800587c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d017      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800588a:	4b4e      	ldr	r3, [pc, #312]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005890:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005898:	494a      	ldr	r1, [pc, #296]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058a8:	d101      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80058aa:	2301      	movs	r3, #1
 80058ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80058b6:	2301      	movs	r3, #1
 80058b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80058c6:	2301      	movs	r3, #1
 80058c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 808b 	beq.w	80059ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058d8:	4b3a      	ldr	r3, [pc, #232]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058dc:	4a39      	ldr	r2, [pc, #228]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80058e4:	4b37      	ldr	r3, [pc, #220]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058f0:	4b35      	ldr	r3, [pc, #212]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a34      	ldr	r2, [pc, #208]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058fc:	f7fd f870 	bl	80029e0 <HAL_GetTick>
 8005900:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005904:	f7fd f86c 	bl	80029e0 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b64      	cmp	r3, #100	@ 0x64
 8005910:	d901      	bls.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e357      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005916:	4b2c      	ldr	r3, [pc, #176]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0f0      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005922:	4b28      	ldr	r3, [pc, #160]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800592a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d035      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	429a      	cmp	r2, r3
 800593e:	d02e      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005940:	4b20      	ldr	r3, [pc, #128]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005944:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005948:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800594a:	4b1e      	ldr	r3, [pc, #120]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800594c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594e:	4a1d      	ldr	r2, [pc, #116]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005954:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005956:	4b1b      	ldr	r3, [pc, #108]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800595a:	4a1a      	ldr	r2, [pc, #104]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800595c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005960:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005962:	4a18      	ldr	r2, [pc, #96]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005968:	4b16      	ldr	r3, [pc, #88]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b01      	cmp	r3, #1
 8005972:	d114      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005974:	f7fd f834 	bl	80029e0 <HAL_GetTick>
 8005978:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597a:	e00a      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800597c:	f7fd f830 	bl	80029e0 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598a:	4293      	cmp	r3, r2
 800598c:	d901      	bls.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e319      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005992:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0ee      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059aa:	d111      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80059ac:	4b05      	ldr	r3, [pc, #20]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80059b8:	4b04      	ldr	r3, [pc, #16]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059ba:	400b      	ands	r3, r1
 80059bc:	4901      	ldr	r1, [pc, #4]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	608b      	str	r3, [r1, #8]
 80059c2:	e00b      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80059c4:	40023800 	.word	0x40023800
 80059c8:	40007000 	.word	0x40007000
 80059cc:	0ffffcff 	.word	0x0ffffcff
 80059d0:	4baa      	ldr	r3, [pc, #680]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4aa9      	ldr	r2, [pc, #676]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059d6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80059da:	6093      	str	r3, [r2, #8]
 80059dc:	4ba7      	ldr	r3, [pc, #668]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e8:	49a4      	ldr	r1, [pc, #656]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d010      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059fa:	4ba0      	ldr	r3, [pc, #640]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a00:	4a9e      	ldr	r2, [pc, #632]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005a0a:	4b9c      	ldr	r3, [pc, #624]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a14:	4999      	ldr	r1, [pc, #612]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00a      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a28:	4b94      	ldr	r3, [pc, #592]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a36:	4991      	ldr	r1, [pc, #580]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a4a:	4b8c      	ldr	r3, [pc, #560]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a58:	4988      	ldr	r1, [pc, #544]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00a      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a6c:	4b83      	ldr	r3, [pc, #524]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a7a:	4980      	ldr	r1, [pc, #512]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a8e:	4b7b      	ldr	r3, [pc, #492]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a9c:	4977      	ldr	r1, [pc, #476]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ab0:	4b72      	ldr	r3, [pc, #456]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab6:	f023 0203 	bic.w	r2, r3, #3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005abe:	496f      	ldr	r1, [pc, #444]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ad2:	4b6a      	ldr	r3, [pc, #424]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad8:	f023 020c 	bic.w	r2, r3, #12
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ae0:	4966      	ldr	r1, [pc, #408]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00a      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005af4:	4b61      	ldr	r3, [pc, #388]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005afa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b02:	495e      	ldr	r1, [pc, #376]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b16:	4b59      	ldr	r3, [pc, #356]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b1c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b24:	4955      	ldr	r1, [pc, #340]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00a      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b38:	4b50      	ldr	r3, [pc, #320]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b46:	494d      	ldr	r1, [pc, #308]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b5a:	4b48      	ldr	r3, [pc, #288]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b68:	4944      	ldr	r1, [pc, #272]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005b7c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b8a:	493c      	ldr	r1, [pc, #240]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005b9e:	4b37      	ldr	r3, [pc, #220]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bac:	4933      	ldr	r1, [pc, #204]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bce:	492b      	ldr	r1, [pc, #172]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d011      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005be2:	4b26      	ldr	r3, [pc, #152]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bf0:	4922      	ldr	r1, [pc, #136]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c00:	d101      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005c02:	2301      	movs	r3, #1
 8005c04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005c12:	2301      	movs	r3, #1
 8005c14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c22:	4b16      	ldr	r3, [pc, #88]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c28:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c30:	4912      	ldr	r1, [pc, #72]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00b      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c44:	4b0d      	ldr	r3, [pc, #52]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c54:	4909      	ldr	r1, [pc, #36]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d006      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 80d9 	beq.w	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c70:	4b02      	ldr	r3, [pc, #8]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a01      	ldr	r2, [pc, #4]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c7a:	e001      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c82:	f7fc fead 	bl	80029e0 <HAL_GetTick>
 8005c86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c88:	e008      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c8a:	f7fc fea9 	bl	80029e0 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b64      	cmp	r3, #100	@ 0x64
 8005c96:	d901      	bls.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e194      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1f0      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d021      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d11d      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005cbc:	4b64      	ldr	r3, [pc, #400]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cc2:	0c1b      	lsrs	r3, r3, #16
 8005cc4:	f003 0303 	and.w	r3, r3, #3
 8005cc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005cca:	4b61      	ldr	r3, [pc, #388]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cd0:	0e1b      	lsrs	r3, r3, #24
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	019a      	lsls	r2, r3, #6
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	041b      	lsls	r3, r3, #16
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	061b      	lsls	r3, r3, #24
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	071b      	lsls	r3, r3, #28
 8005cf0:	4957      	ldr	r1, [pc, #348]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d0c:	d00a      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d02e      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d22:	d129      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d24:	4b4a      	ldr	r3, [pc, #296]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d2a:	0c1b      	lsrs	r3, r3, #16
 8005d2c:	f003 0303 	and.w	r3, r3, #3
 8005d30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d32:	4b47      	ldr	r3, [pc, #284]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d38:	0f1b      	lsrs	r3, r3, #28
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	019a      	lsls	r2, r3, #6
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	041b      	lsls	r3, r3, #16
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	061b      	lsls	r3, r3, #24
 8005d52:	431a      	orrs	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	071b      	lsls	r3, r3, #28
 8005d58:	493d      	ldr	r1, [pc, #244]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d60:	4b3b      	ldr	r3, [pc, #236]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d66:	f023 021f 	bic.w	r2, r3, #31
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	4937      	ldr	r1, [pc, #220]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01d      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d84:	4b32      	ldr	r3, [pc, #200]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d8a:	0e1b      	lsrs	r3, r3, #24
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d92:	4b2f      	ldr	r3, [pc, #188]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d98:	0f1b      	lsrs	r3, r3, #28
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	019a      	lsls	r2, r3, #6
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	431a      	orrs	r2, r3
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	061b      	lsls	r3, r3, #24
 8005db2:	431a      	orrs	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	071b      	lsls	r3, r3, #28
 8005db8:	4925      	ldr	r1, [pc, #148]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d011      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	019a      	lsls	r2, r3, #6
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	041b      	lsls	r3, r3, #16
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	061b      	lsls	r3, r3, #24
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	071b      	lsls	r3, r3, #28
 8005de8:	4919      	ldr	r1, [pc, #100]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005df0:	4b17      	ldr	r3, [pc, #92]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a16      	ldr	r2, [pc, #88]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005df6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfc:	f7fc fdf0 	bl	80029e0 <HAL_GetTick>
 8005e00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e02:	e008      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e04:	f7fc fdec 	bl	80029e0 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b64      	cmp	r3, #100	@ 0x64
 8005e10:	d901      	bls.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e0d7      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e16:	4b0e      	ldr	r3, [pc, #56]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0f0      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	f040 80cd 	bne.w	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e2a:	4b09      	ldr	r3, [pc, #36]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a08      	ldr	r2, [pc, #32]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e36:	f7fc fdd3 	bl	80029e0 <HAL_GetTick>
 8005e3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e3c:	e00a      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e3e:	f7fc fdcf 	bl	80029e0 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b64      	cmp	r3, #100	@ 0x64
 8005e4a:	d903      	bls.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e0ba      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005e50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e54:	4b5e      	ldr	r3, [pc, #376]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e60:	d0ed      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d009      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d02e      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d12a      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e8a:	4b51      	ldr	r3, [pc, #324]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e90:	0c1b      	lsrs	r3, r3, #16
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e98:	4b4d      	ldr	r3, [pc, #308]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9e:	0f1b      	lsrs	r3, r3, #28
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	019a      	lsls	r2, r3, #6
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	041b      	lsls	r3, r3, #16
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	061b      	lsls	r3, r3, #24
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	071b      	lsls	r3, r3, #28
 8005ebe:	4944      	ldr	r1, [pc, #272]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ec6:	4b42      	ldr	r3, [pc, #264]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ecc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	493d      	ldr	r1, [pc, #244]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d022      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ef0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ef4:	d11d      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ef6:	4b36      	ldr	r3, [pc, #216]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efc:	0e1b      	lsrs	r3, r3, #24
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f04:	4b32      	ldr	r3, [pc, #200]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f0a:	0f1b      	lsrs	r3, r3, #28
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	019a      	lsls	r2, r3, #6
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	041b      	lsls	r3, r3, #16
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	061b      	lsls	r3, r3, #24
 8005f24:	431a      	orrs	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	071b      	lsls	r3, r3, #28
 8005f2a:	4929      	ldr	r1, [pc, #164]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d028      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f3e:	4b24      	ldr	r3, [pc, #144]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f44:	0e1b      	lsrs	r3, r3, #24
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f4c:	4b20      	ldr	r3, [pc, #128]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f52:	0c1b      	lsrs	r3, r3, #16
 8005f54:	f003 0303 	and.w	r3, r3, #3
 8005f58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	019a      	lsls	r2, r3, #6
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	041b      	lsls	r3, r3, #16
 8005f64:	431a      	orrs	r2, r3
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	061b      	lsls	r3, r3, #24
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	071b      	lsls	r3, r3, #28
 8005f72:	4917      	ldr	r1, [pc, #92]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f7a:	4b15      	ldr	r3, [pc, #84]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f88:	4911      	ldr	r1, [pc, #68]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f90:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a0e      	ldr	r2, [pc, #56]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f9c:	f7fc fd20 	bl	80029e0 <HAL_GetTick>
 8005fa0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005fa4:	f7fc fd1c 	bl	80029e0 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b64      	cmp	r3, #100	@ 0x64
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e007      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fb6:	4b06      	ldr	r3, [pc, #24]	@ (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fc2:	d1ef      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3720      	adds	r7, #32
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40023800 	.word	0x40023800

08005fd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ff2:	f040 808d 	bne.w	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005ff6:	4b93      	ldr	r3, [pc, #588]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ffc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006004:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800600c:	d07c      	beq.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006014:	d87b      	bhi.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d004      	beq.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006022:	d039      	beq.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006024:	e073      	b.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006026:	4b87      	ldr	r3, [pc, #540]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d108      	bne.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006032:	4b84      	ldr	r3, [pc, #528]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800603a:	4a83      	ldr	r2, [pc, #524]	@ (8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800603c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	e007      	b.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006044:	4b7f      	ldr	r3, [pc, #508]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800604c:	4a7f      	ldr	r2, [pc, #508]	@ (800624c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800604e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006052:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006054:	4b7b      	ldr	r3, [pc, #492]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605a:	0e1b      	lsrs	r3, r3, #24
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006062:	4b78      	ldr	r3, [pc, #480]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006068:	099b      	lsrs	r3, r3, #6
 800606a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	fb03 f202 	mul.w	r2, r3, r2
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	fbb2 f3f3 	udiv	r3, r2, r3
 800607a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800607c:	4b71      	ldr	r3, [pc, #452]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800607e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006082:	0a1b      	lsrs	r3, r3, #8
 8006084:	f003 031f 	and.w	r3, r3, #31
 8006088:	3301      	adds	r3, #1
 800608a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	fbb2 f3f3 	udiv	r3, r2, r3
 8006094:	617b      	str	r3, [r7, #20]
        break;
 8006096:	e03b      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006098:	4b6a      	ldr	r3, [pc, #424]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d108      	bne.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80060a4:	4b67      	ldr	r3, [pc, #412]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060ac:	4a66      	ldr	r2, [pc, #408]	@ (8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80060ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	e007      	b.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80060b6:	4b63      	ldr	r3, [pc, #396]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060be:	4a63      	ldr	r2, [pc, #396]	@ (800624c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80060c6:	4b5f      	ldr	r3, [pc, #380]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060cc:	0e1b      	lsrs	r3, r3, #24
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80060d4:	4b5b      	ldr	r3, [pc, #364]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060da:	099b      	lsrs	r3, r3, #6
 80060dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	fb03 f202 	mul.w	r2, r3, r2
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ec:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80060ee:	4b55      	ldr	r3, [pc, #340]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060f4:	f003 031f 	and.w	r3, r3, #31
 80060f8:	3301      	adds	r3, #1
 80060fa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	fbb2 f3f3 	udiv	r3, r2, r3
 8006104:	617b      	str	r3, [r7, #20]
        break;
 8006106:	e003      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006108:	4b51      	ldr	r3, [pc, #324]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800610a:	617b      	str	r3, [r7, #20]
        break;
 800610c:	e000      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800610e:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006116:	f040 808d 	bne.w	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800611a:	4b4a      	ldr	r3, [pc, #296]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800611c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006120:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006128:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006130:	d07c      	beq.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006138:	d87b      	bhi.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d004      	beq.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006146:	d039      	beq.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006148:	e073      	b.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800614a:	4b3e      	ldr	r3, [pc, #248]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d108      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006156:	4b3b      	ldr	r3, [pc, #236]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800615e:	4a3a      	ldr	r2, [pc, #232]	@ (8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006160:	fbb2 f3f3 	udiv	r3, r2, r3
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	e007      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006168:	4b36      	ldr	r3, [pc, #216]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006170:	4a36      	ldr	r2, [pc, #216]	@ (800624c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006172:	fbb2 f3f3 	udiv	r3, r2, r3
 8006176:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006178:	4b32      	ldr	r3, [pc, #200]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800617a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800617e:	0e1b      	lsrs	r3, r3, #24
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006186:	4b2f      	ldr	r3, [pc, #188]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800618c:	099b      	lsrs	r3, r3, #6
 800618e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	fb03 f202 	mul.w	r2, r3, r2
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	fbb2 f3f3 	udiv	r3, r2, r3
 800619e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80061a0:	4b28      	ldr	r3, [pc, #160]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061a6:	0a1b      	lsrs	r3, r3, #8
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	3301      	adds	r3, #1
 80061ae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b8:	617b      	str	r3, [r7, #20]
        break;
 80061ba:	e03b      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80061bc:	4b21      	ldr	r3, [pc, #132]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d108      	bne.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80061c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80061d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	e007      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80061da:	4b1a      	ldr	r3, [pc, #104]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061e2:	4a1a      	ldr	r2, [pc, #104]	@ (800624c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80061e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80061ea:	4b16      	ldr	r3, [pc, #88]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061f0:	0e1b      	lsrs	r3, r3, #24
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80061f8:	4b12      	ldr	r3, [pc, #72]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061fe:	099b      	lsrs	r3, r3, #6
 8006200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	fb03 f202 	mul.w	r2, r3, r2
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006212:	4b0c      	ldr	r3, [pc, #48]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006218:	f003 031f 	and.w	r3, r3, #31
 800621c:	3301      	adds	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	fbb2 f3f3 	udiv	r3, r2, r3
 8006228:	617b      	str	r3, [r7, #20]
        break;
 800622a:	e003      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800622c:	4b08      	ldr	r3, [pc, #32]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800622e:	617b      	str	r3, [r7, #20]
        break;
 8006230:	e000      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8006232:	bf00      	nop
      }
    }
  }

  return frequency;
 8006234:	697b      	ldr	r3, [r7, #20]
}
 8006236:	4618      	mov	r0, r3
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40023800 	.word	0x40023800
 8006248:	00f42400 	.word	0x00f42400
 800624c:	017d7840 	.word	0x017d7840
 8006250:	00bb8000 	.word	0x00bb8000

08006254 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e156      	b.n	8006520 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7fb f996 	bl	80015b8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fa4f 	bl	8006738 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d00c      	beq.n	80062bc <HAL_SAI_Init+0x68>
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d80d      	bhi.n	80062c2 <HAL_SAI_Init+0x6e>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_SAI_Init+0x5c>
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d003      	beq.n	80062b6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80062ae:	e008      	b.n	80062c2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61fb      	str	r3, [r7, #28]
      break;
 80062b4:	e006      	b.n	80062c4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80062b6:	2310      	movs	r3, #16
 80062b8:	61fb      	str	r3, [r7, #28]
      break;
 80062ba:	e003      	b.n	80062c4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80062bc:	2320      	movs	r3, #32
 80062be:	61fb      	str	r3, [r7, #28]
      break;
 80062c0:	e000      	b.n	80062c4 <HAL_SAI_Init+0x70>
      break;
 80062c2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	2b03      	cmp	r3, #3
 80062ca:	d81e      	bhi.n	800630a <HAL_SAI_Init+0xb6>
 80062cc:	a201      	add	r2, pc, #4	@ (adr r2, 80062d4 <HAL_SAI_Init+0x80>)
 80062ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d2:	bf00      	nop
 80062d4:	080062e5 	.word	0x080062e5
 80062d8:	080062eb 	.word	0x080062eb
 80062dc:	080062f3 	.word	0x080062f3
 80062e0:	080062fb 	.word	0x080062fb
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
    }
    break;
 80062e8:	e010      	b.n	800630c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80062ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062ee:	617b      	str	r3, [r7, #20]
    }
    break;
 80062f0:	e00c      	b.n	800630c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80062f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80062f6:	617b      	str	r3, [r7, #20]
    }
    break;
 80062f8:	e008      	b.n	800630c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80062fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80062fe:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	61fb      	str	r3, [r7, #28]
    }
    break;
 8006308:	e000      	b.n	800630c <HAL_SAI_Init+0xb8>
    default:
      break;
 800630a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a85      	ldr	r2, [pc, #532]	@ (8006528 <HAL_SAI_Init+0x2d4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <HAL_SAI_Init+0xcc>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a84      	ldr	r2, [pc, #528]	@ (800652c <HAL_SAI_Init+0x2d8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d103      	bne.n	8006328 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006320:	4a83      	ldr	r2, [pc, #524]	@ (8006530 <HAL_SAI_Init+0x2dc>)
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	e002      	b.n	800632e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006328:	4a82      	ldr	r2, [pc, #520]	@ (8006534 <HAL_SAI_Init+0x2e0>)
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d04c      	beq.n	80063d0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a7a      	ldr	r2, [pc, #488]	@ (8006528 <HAL_SAI_Init+0x2d4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d004      	beq.n	800634e <HAL_SAI_Init+0xfa>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a78      	ldr	r2, [pc, #480]	@ (800652c <HAL_SAI_Init+0x2d8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d104      	bne.n	8006358 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800634e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006352:	f7ff fe3f 	bl	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006356:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a76      	ldr	r2, [pc, #472]	@ (8006538 <HAL_SAI_Init+0x2e4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <HAL_SAI_Init+0x118>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a75      	ldr	r2, [pc, #468]	@ (800653c <HAL_SAI_Init+0x2e8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d104      	bne.n	8006376 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800636c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006370:	f7ff fe30 	bl	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006374:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	461a      	mov	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	025b      	lsls	r3, r3, #9
 8006388:	fbb2 f3f3 	udiv	r3, r2, r3
 800638c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4a6b      	ldr	r2, [pc, #428]	@ (8006540 <HAL_SAI_Init+0x2ec>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	08da      	lsrs	r2, r3, #3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800639c:	68f9      	ldr	r1, [r7, #12]
 800639e:	4b68      	ldr	r3, [pc, #416]	@ (8006540 <HAL_SAI_Init+0x2ec>)
 80063a0:	fba3 2301 	umull	r2, r3, r3, r1
 80063a4:	08da      	lsrs	r2, r3, #3
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	1aca      	subs	r2, r1, r3
 80063b0:	2a08      	cmp	r2, #8
 80063b2:	d904      	bls.n	80063be <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d104      	bne.n	80063d0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	085a      	lsrs	r2, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <HAL_SAI_Init+0x18c>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d109      	bne.n	80063f4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_SAI_Init+0x198>
 80063e8:	2300      	movs	r3, #0
 80063ea:	e001      	b.n	80063f0 <HAL_SAI_Init+0x19c>
 80063ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	e008      	b.n	8006406 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d102      	bne.n	8006402 <HAL_SAI_Init+0x1ae>
 80063fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006400:	e000      	b.n	8006404 <HAL_SAI_Init+0x1b0>
 8006402:	2300      	movs	r3, #0
 8006404:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6819      	ldr	r1, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4b4c      	ldr	r3, [pc, #304]	@ (8006544 <HAL_SAI_Init+0x2f0>)
 8006412:	400b      	ands	r3, r1
 8006414:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6819      	ldr	r1, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006424:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800642a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006430:	431a      	orrs	r2, r3
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800643e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800644a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	051b      	lsls	r3, r3, #20
 8006452:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6859      	ldr	r1, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	4b38      	ldr	r3, [pc, #224]	@ (8006548 <HAL_SAI_Init+0x2f4>)
 8006468:	400b      	ands	r3, r1
 800646a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6859      	ldr	r1, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647a:	431a      	orrs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6899      	ldr	r1, [r3, #8]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	4b2d      	ldr	r3, [pc, #180]	@ (800654c <HAL_SAI_Init+0x2f8>)
 8006496:	400b      	ands	r3, r1
 8006498:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6899      	ldr	r1, [r3, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80064aa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80064b0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80064b6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064bc:	3b01      	subs	r3, #1
 80064be:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80064c0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68d9      	ldr	r1, [r3, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80064d8:	400b      	ands	r3, r1
 80064da:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68d9      	ldr	r1, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ea:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f0:	041b      	lsls	r3, r3, #16
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f8:	3b01      	subs	r3, #1
 80064fa:	021b      	lsls	r3, r3, #8
 80064fc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3720      	adds	r7, #32
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40015804 	.word	0x40015804
 800652c:	40015824 	.word	0x40015824
 8006530:	40015800 	.word	0x40015800
 8006534:	40015c00 	.word	0x40015c00
 8006538:	40015c04 	.word	0x40015c04
 800653c:	40015c24 	.word	0x40015c24
 8006540:	cccccccd 	.word	0xcccccccd
 8006544:	ff05c010 	.word	0xff05c010
 8006548:	ffff1ff0 	.word	0xffff1ff0
 800654c:	fff88000 	.word	0xfff88000

08006550 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800655e:	f7fc fa3f 	bl	80029e0 <HAL_GetTick>
 8006562:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <HAL_SAI_Transmit_DMA+0x20>
 800656a:	88fb      	ldrh	r3, [r7, #6]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e093      	b.n	800669c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	f040 808c 	bne.w	800669a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_SAI_Transmit_DMA+0x40>
 800658c:	2302      	movs	r3, #2
 800658e:	e085      	b.n	800669c <HAL_SAI_Transmit_DMA+0x14c>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	88fa      	ldrh	r2, [r7, #6]
 80065a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	88fa      	ldrh	r2, [r7, #6]
 80065aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2212      	movs	r2, #18
 80065ba:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065c2:	4a38      	ldr	r2, [pc, #224]	@ (80066a4 <HAL_SAI_Transmit_DMA+0x154>)
 80065c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065ca:	4a37      	ldr	r2, [pc, #220]	@ (80066a8 <HAL_SAI_Transmit_DMA+0x158>)
 80065cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065d2:	4a36      	ldr	r2, [pc, #216]	@ (80066ac <HAL_SAI_Transmit_DMA+0x15c>)
 80065d4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065da:	2200      	movs	r2, #0
 80065dc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065e6:	4619      	mov	r1, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	331c      	adds	r3, #28
 80065ee:	461a      	mov	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80065f6:	f7fc fc41 	bl	8002e7c <HAL_DMA_Start_IT>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e047      	b.n	800669c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800660c:	2100      	movs	r1, #0
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 f85c 	bl	80066cc <SAI_InterruptFlag>
 8006614:	4601      	mov	r1, r0
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006632:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006634:	e015      	b.n	8006662 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8006636:	f7fc f9d3 	bl	80029e0 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006644:	d90d      	bls.n	8006662 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800664c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e01c      	b.n	800669c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0e2      	beq.n	8006636 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d107      	bne.n	800668e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800668c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	e000      	b.n	800669c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800669a:	2302      	movs	r3, #2
  }
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	08006809 	.word	0x08006809
 80066a8:	080067a9 	.word	0x080067a9
 80066ac:	08006825 	.word	0x08006825

080066b0 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  return hsai->State;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80066be:	b2db      	uxtb	r3, r3
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d103      	bne.n	80066e8 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f043 0308 	orr.w	r3, r3, #8
 80066e6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d10b      	bne.n	8006708 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d003      	beq.n	8006700 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d103      	bne.n	8006708 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f043 0310 	orr.w	r3, r3, #16
 8006706:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b03      	cmp	r3, #3
 800670e:	d003      	beq.n	8006718 <SAI_InterruptFlag+0x4c>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b02      	cmp	r3, #2
 8006716:	d104      	bne.n	8006722 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	e003      	b.n	800672a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f043 0304 	orr.w	r3, r3, #4
 8006728:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800672a:	68fb      	ldr	r3, [r7, #12]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006740:	4b17      	ldr	r3, [pc, #92]	@ (80067a0 <SAI_Disable+0x68>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a17      	ldr	r2, [pc, #92]	@ (80067a4 <SAI_Disable+0x6c>)
 8006746:	fba2 2303 	umull	r2, r3, r2, r3
 800674a:	0b1b      	lsrs	r3, r3, #12
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006762:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	1e5a      	subs	r2, r3, #1
 8006768:	60fa      	str	r2, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10a      	bne.n	8006784 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006774:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	72fb      	strb	r3, [r7, #11]
      break;
 8006782:	e006      	b.n	8006792 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e8      	bne.n	8006764 <SAI_Disable+0x2c>

  return status;
 8006792:	7afb      	ldrb	r3, [r7, #11]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	20000000 	.word	0x20000000
 80067a4:	95cbec1b 	.word	0x95cbec1b

080067a8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067be:	d01c      	beq.n	80067fa <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80067d6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80067d8:	2100      	movs	r1, #0
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff ff76 	bl	80066cc <SAI_InterruptFlag>
 80067e0:	4603      	mov	r3, r0
 80067e2:	43d9      	mvns	r1, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	400a      	ands	r2, r1
 80067f0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7fb f9b7 	bl	8001b6e <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006814:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f7fb f9b3 	bl	8001b82 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800681c:	bf00      	nop
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006830:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006838:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006848:	2b01      	cmp	r3, #1
 800684a:	d004      	beq.n	8006856 <SAI_DMAError+0x32>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006852:	2b01      	cmp	r3, #1
 8006854:	d112      	bne.n	800687c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006864:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff ff66 	bl	8006738 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7fb f98b 	bl	8001b98 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006882:	bf00      	nop
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b082      	sub	sp, #8
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e025      	b.n	80068ea <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fa fe76 	bl	80015a4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f000 ffe0 	bl	8007890 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	461a      	mov	r2, r3
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	f001 f834 	bl	8007948 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b086      	sub	sp, #24
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006904:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	2b02      	cmp	r3, #2
 800690a:	d101      	bne.n	8006910 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800690c:	2302      	movs	r3, #2
 800690e:	e021      	b.n	8006954 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d002      	beq.n	800691c <HAL_SDRAM_SendCommand+0x2a>
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	2b05      	cmp	r3, #5
 800691a:	d118      	bne.n	800694e <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	4618      	mov	r0, r3
 800692e:	f001 f875 	bl	8007a1c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b02      	cmp	r3, #2
 8006938:	d104      	bne.n	8006944 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2205      	movs	r2, #5
 800693e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006942:	e006      	b.n	8006952 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800694c:	e001      	b.n	8006952 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d101      	bne.n	8006976 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006972:	2302      	movs	r3, #2
 8006974:	e016      	b.n	80069a4 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b01      	cmp	r3, #1
 8006980:	d10f      	bne.n	80069a2 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2202      	movs	r2, #2
 8006986:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	4618      	mov	r0, r3
 8006992:	f001 f867 	bl	8007a64 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	e000      	b.n	80069a4 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e049      	b.n	8006a52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fa fcb4 	bl	8001340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	3304      	adds	r3, #4
 80069e8:	4619      	mov	r1, r3
 80069ea:	4610      	mov	r0, r2
 80069ec:	f000 f900 	bl	8006bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_TIM_ConfigClockSource+0x1c>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e0b4      	b.n	8006be2 <HAL_TIM_ConfigClockSource+0x186>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	4b56      	ldr	r3, [pc, #344]	@ (8006bec <HAL_TIM_ConfigClockSource+0x190>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ab0:	d03e      	beq.n	8006b30 <HAL_TIM_ConfigClockSource+0xd4>
 8006ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ab6:	f200 8087 	bhi.w	8006bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006abe:	f000 8086 	beq.w	8006bce <HAL_TIM_ConfigClockSource+0x172>
 8006ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ac6:	d87f      	bhi.n	8006bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac8:	2b70      	cmp	r3, #112	@ 0x70
 8006aca:	d01a      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0xa6>
 8006acc:	2b70      	cmp	r3, #112	@ 0x70
 8006ace:	d87b      	bhi.n	8006bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad0:	2b60      	cmp	r3, #96	@ 0x60
 8006ad2:	d050      	beq.n	8006b76 <HAL_TIM_ConfigClockSource+0x11a>
 8006ad4:	2b60      	cmp	r3, #96	@ 0x60
 8006ad6:	d877      	bhi.n	8006bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad8:	2b50      	cmp	r3, #80	@ 0x50
 8006ada:	d03c      	beq.n	8006b56 <HAL_TIM_ConfigClockSource+0xfa>
 8006adc:	2b50      	cmp	r3, #80	@ 0x50
 8006ade:	d873      	bhi.n	8006bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae0:	2b40      	cmp	r3, #64	@ 0x40
 8006ae2:	d058      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0x13a>
 8006ae4:	2b40      	cmp	r3, #64	@ 0x40
 8006ae6:	d86f      	bhi.n	8006bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae8:	2b30      	cmp	r3, #48	@ 0x30
 8006aea:	d064      	beq.n	8006bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8006aec:	2b30      	cmp	r3, #48	@ 0x30
 8006aee:	d86b      	bhi.n	8006bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d060      	beq.n	8006bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8006af4:	2b20      	cmp	r3, #32
 8006af6:	d867      	bhi.n	8006bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d05c      	beq.n	8006bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8006afc:	2b10      	cmp	r3, #16
 8006afe:	d05a      	beq.n	8006bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8006b00:	e062      	b.n	8006bc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b12:	f000 f993 	bl	8006e3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	609a      	str	r2, [r3, #8]
      break;
 8006b2e:	e04f      	b.n	8006bd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b40:	f000 f97c 	bl	8006e3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689a      	ldr	r2, [r3, #8]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b52:	609a      	str	r2, [r3, #8]
      break;
 8006b54:	e03c      	b.n	8006bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b62:	461a      	mov	r2, r3
 8006b64:	f000 f8f0 	bl	8006d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2150      	movs	r1, #80	@ 0x50
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 f949 	bl	8006e06 <TIM_ITRx_SetConfig>
      break;
 8006b74:	e02c      	b.n	8006bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b82:	461a      	mov	r2, r3
 8006b84:	f000 f90f 	bl	8006da6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2160      	movs	r1, #96	@ 0x60
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 f939 	bl	8006e06 <TIM_ITRx_SetConfig>
      break;
 8006b94:	e01c      	b.n	8006bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f000 f8d0 	bl	8006d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2140      	movs	r1, #64	@ 0x40
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 f929 	bl	8006e06 <TIM_ITRx_SetConfig>
      break;
 8006bb4:	e00c      	b.n	8006bd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	f000 f920 	bl	8006e06 <TIM_ITRx_SetConfig>
      break;
 8006bc6:	e003      	b.n	8006bd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	73fb      	strb	r3, [r7, #15]
      break;
 8006bcc:	e000      	b.n	8006bd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	fffeff88 	.word	0xfffeff88

08006bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a46      	ldr	r2, [pc, #280]	@ (8006d1c <TIM_Base_SetConfig+0x12c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d013      	beq.n	8006c30 <TIM_Base_SetConfig+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c0e:	d00f      	beq.n	8006c30 <TIM_Base_SetConfig+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a43      	ldr	r2, [pc, #268]	@ (8006d20 <TIM_Base_SetConfig+0x130>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d00b      	beq.n	8006c30 <TIM_Base_SetConfig+0x40>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a42      	ldr	r2, [pc, #264]	@ (8006d24 <TIM_Base_SetConfig+0x134>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d007      	beq.n	8006c30 <TIM_Base_SetConfig+0x40>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a41      	ldr	r2, [pc, #260]	@ (8006d28 <TIM_Base_SetConfig+0x138>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d003      	beq.n	8006c30 <TIM_Base_SetConfig+0x40>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a40      	ldr	r2, [pc, #256]	@ (8006d2c <TIM_Base_SetConfig+0x13c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d108      	bne.n	8006c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a35      	ldr	r2, [pc, #212]	@ (8006d1c <TIM_Base_SetConfig+0x12c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d02b      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c50:	d027      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a32      	ldr	r2, [pc, #200]	@ (8006d20 <TIM_Base_SetConfig+0x130>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d023      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a31      	ldr	r2, [pc, #196]	@ (8006d24 <TIM_Base_SetConfig+0x134>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d01f      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a30      	ldr	r2, [pc, #192]	@ (8006d28 <TIM_Base_SetConfig+0x138>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d01b      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a2f      	ldr	r2, [pc, #188]	@ (8006d2c <TIM_Base_SetConfig+0x13c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d017      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a2e      	ldr	r2, [pc, #184]	@ (8006d30 <TIM_Base_SetConfig+0x140>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d013      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8006d34 <TIM_Base_SetConfig+0x144>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00f      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a2c      	ldr	r2, [pc, #176]	@ (8006d38 <TIM_Base_SetConfig+0x148>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00b      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8006d3c <TIM_Base_SetConfig+0x14c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d007      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a2a      	ldr	r2, [pc, #168]	@ (8006d40 <TIM_Base_SetConfig+0x150>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d003      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a29      	ldr	r2, [pc, #164]	@ (8006d44 <TIM_Base_SetConfig+0x154>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d108      	bne.n	8006cb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a10      	ldr	r2, [pc, #64]	@ (8006d1c <TIM_Base_SetConfig+0x12c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d003      	beq.n	8006ce8 <TIM_Base_SetConfig+0xf8>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a12      	ldr	r2, [pc, #72]	@ (8006d2c <TIM_Base_SetConfig+0x13c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d103      	bne.n	8006cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	691a      	ldr	r2, [r3, #16]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d105      	bne.n	8006d0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f023 0201 	bic.w	r2, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	611a      	str	r2, [r3, #16]
  }
}
 8006d0e:	bf00      	nop
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40010000 	.word	0x40010000
 8006d20:	40000400 	.word	0x40000400
 8006d24:	40000800 	.word	0x40000800
 8006d28:	40000c00 	.word	0x40000c00
 8006d2c:	40010400 	.word	0x40010400
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40014400 	.word	0x40014400
 8006d38:	40014800 	.word	0x40014800
 8006d3c:	40001800 	.word	0x40001800
 8006d40:	40001c00 	.word	0x40001c00
 8006d44:	40002000 	.word	0x40002000

08006d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	f023 0201 	bic.w	r2, r3, #1
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f023 030a 	bic.w	r3, r3, #10
 8006d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b087      	sub	sp, #28
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	f023 0210 	bic.w	r2, r3, #16
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	031b      	lsls	r3, r3, #12
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006de2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	011b      	lsls	r3, r3, #4
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	621a      	str	r2, [r3, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b085      	sub	sp, #20
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	f043 0307 	orr.w	r3, r3, #7
 8006e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	609a      	str	r2, [r3, #8]
}
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	021a      	lsls	r2, r3, #8
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	609a      	str	r2, [r3, #8]
}
 8006e70:	bf00      	nop
 8006e72:	371c      	adds	r7, #28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d101      	bne.n	8006e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e90:	2302      	movs	r3, #2
 8006e92:	e06d      	b.n	8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a30      	ldr	r2, [pc, #192]	@ (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d004      	beq.n	8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d108      	bne.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ece:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ee0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a20      	ldr	r2, [pc, #128]	@ (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d022      	beq.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f06:	d01d      	beq.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d018      	beq.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a1c      	ldr	r2, [pc, #112]	@ (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d013      	beq.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a1a      	ldr	r2, [pc, #104]	@ (8006f8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00e      	beq.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a15      	ldr	r2, [pc, #84]	@ (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d009      	beq.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a16      	ldr	r2, [pc, #88]	@ (8006f90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d004      	beq.n	8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a15      	ldr	r2, [pc, #84]	@ (8006f94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d10c      	bne.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	40010000 	.word	0x40010000
 8006f80:	40010400 	.word	0x40010400
 8006f84:	40000400 	.word	0x40000400
 8006f88:	40000800 	.word	0x40000800
 8006f8c:	40000c00 	.word	0x40000c00
 8006f90:	40014000 	.word	0x40014000
 8006f94:	40001800 	.word	0x40001800

08006f98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e040      	b.n	800702c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fa f9e0 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2224      	movs	r2, #36	@ 0x24
 8006fc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0201 	bic.w	r2, r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fa8c 	bl	80074fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f825 	bl	8007034 <UART_SetConfig>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d101      	bne.n	8006ff4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e01b      	b.n	800702c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fb0b 	bl	8007640 <UART_CheckIdleState>
 800702a:	4603      	mov	r3, r0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	431a      	orrs	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	431a      	orrs	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	4ba6      	ldr	r3, [pc, #664]	@ (80072f8 <UART_SetConfig+0x2c4>)
 8007060:	4013      	ands	r3, r2
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	6812      	ldr	r2, [r2, #0]
 8007066:	6979      	ldr	r1, [r7, #20]
 8007068:	430b      	orrs	r3, r1
 800706a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a94      	ldr	r2, [pc, #592]	@ (80072fc <UART_SetConfig+0x2c8>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d120      	bne.n	80070f2 <UART_SetConfig+0xbe>
 80070b0:	4b93      	ldr	r3, [pc, #588]	@ (8007300 <UART_SetConfig+0x2cc>)
 80070b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070b6:	f003 0303 	and.w	r3, r3, #3
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d816      	bhi.n	80070ec <UART_SetConfig+0xb8>
 80070be:	a201      	add	r2, pc, #4	@ (adr r2, 80070c4 <UART_SetConfig+0x90>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	080070d5 	.word	0x080070d5
 80070c8:	080070e1 	.word	0x080070e1
 80070cc:	080070db 	.word	0x080070db
 80070d0:	080070e7 	.word	0x080070e7
 80070d4:	2301      	movs	r3, #1
 80070d6:	77fb      	strb	r3, [r7, #31]
 80070d8:	e150      	b.n	800737c <UART_SetConfig+0x348>
 80070da:	2302      	movs	r3, #2
 80070dc:	77fb      	strb	r3, [r7, #31]
 80070de:	e14d      	b.n	800737c <UART_SetConfig+0x348>
 80070e0:	2304      	movs	r3, #4
 80070e2:	77fb      	strb	r3, [r7, #31]
 80070e4:	e14a      	b.n	800737c <UART_SetConfig+0x348>
 80070e6:	2308      	movs	r3, #8
 80070e8:	77fb      	strb	r3, [r7, #31]
 80070ea:	e147      	b.n	800737c <UART_SetConfig+0x348>
 80070ec:	2310      	movs	r3, #16
 80070ee:	77fb      	strb	r3, [r7, #31]
 80070f0:	e144      	b.n	800737c <UART_SetConfig+0x348>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a83      	ldr	r2, [pc, #524]	@ (8007304 <UART_SetConfig+0x2d0>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d132      	bne.n	8007162 <UART_SetConfig+0x12e>
 80070fc:	4b80      	ldr	r3, [pc, #512]	@ (8007300 <UART_SetConfig+0x2cc>)
 80070fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007102:	f003 030c 	and.w	r3, r3, #12
 8007106:	2b0c      	cmp	r3, #12
 8007108:	d828      	bhi.n	800715c <UART_SetConfig+0x128>
 800710a:	a201      	add	r2, pc, #4	@ (adr r2, 8007110 <UART_SetConfig+0xdc>)
 800710c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007110:	08007145 	.word	0x08007145
 8007114:	0800715d 	.word	0x0800715d
 8007118:	0800715d 	.word	0x0800715d
 800711c:	0800715d 	.word	0x0800715d
 8007120:	08007151 	.word	0x08007151
 8007124:	0800715d 	.word	0x0800715d
 8007128:	0800715d 	.word	0x0800715d
 800712c:	0800715d 	.word	0x0800715d
 8007130:	0800714b 	.word	0x0800714b
 8007134:	0800715d 	.word	0x0800715d
 8007138:	0800715d 	.word	0x0800715d
 800713c:	0800715d 	.word	0x0800715d
 8007140:	08007157 	.word	0x08007157
 8007144:	2300      	movs	r3, #0
 8007146:	77fb      	strb	r3, [r7, #31]
 8007148:	e118      	b.n	800737c <UART_SetConfig+0x348>
 800714a:	2302      	movs	r3, #2
 800714c:	77fb      	strb	r3, [r7, #31]
 800714e:	e115      	b.n	800737c <UART_SetConfig+0x348>
 8007150:	2304      	movs	r3, #4
 8007152:	77fb      	strb	r3, [r7, #31]
 8007154:	e112      	b.n	800737c <UART_SetConfig+0x348>
 8007156:	2308      	movs	r3, #8
 8007158:	77fb      	strb	r3, [r7, #31]
 800715a:	e10f      	b.n	800737c <UART_SetConfig+0x348>
 800715c:	2310      	movs	r3, #16
 800715e:	77fb      	strb	r3, [r7, #31]
 8007160:	e10c      	b.n	800737c <UART_SetConfig+0x348>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a68      	ldr	r2, [pc, #416]	@ (8007308 <UART_SetConfig+0x2d4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d120      	bne.n	80071ae <UART_SetConfig+0x17a>
 800716c:	4b64      	ldr	r3, [pc, #400]	@ (8007300 <UART_SetConfig+0x2cc>)
 800716e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007172:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007176:	2b30      	cmp	r3, #48	@ 0x30
 8007178:	d013      	beq.n	80071a2 <UART_SetConfig+0x16e>
 800717a:	2b30      	cmp	r3, #48	@ 0x30
 800717c:	d814      	bhi.n	80071a8 <UART_SetConfig+0x174>
 800717e:	2b20      	cmp	r3, #32
 8007180:	d009      	beq.n	8007196 <UART_SetConfig+0x162>
 8007182:	2b20      	cmp	r3, #32
 8007184:	d810      	bhi.n	80071a8 <UART_SetConfig+0x174>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <UART_SetConfig+0x15c>
 800718a:	2b10      	cmp	r3, #16
 800718c:	d006      	beq.n	800719c <UART_SetConfig+0x168>
 800718e:	e00b      	b.n	80071a8 <UART_SetConfig+0x174>
 8007190:	2300      	movs	r3, #0
 8007192:	77fb      	strb	r3, [r7, #31]
 8007194:	e0f2      	b.n	800737c <UART_SetConfig+0x348>
 8007196:	2302      	movs	r3, #2
 8007198:	77fb      	strb	r3, [r7, #31]
 800719a:	e0ef      	b.n	800737c <UART_SetConfig+0x348>
 800719c:	2304      	movs	r3, #4
 800719e:	77fb      	strb	r3, [r7, #31]
 80071a0:	e0ec      	b.n	800737c <UART_SetConfig+0x348>
 80071a2:	2308      	movs	r3, #8
 80071a4:	77fb      	strb	r3, [r7, #31]
 80071a6:	e0e9      	b.n	800737c <UART_SetConfig+0x348>
 80071a8:	2310      	movs	r3, #16
 80071aa:	77fb      	strb	r3, [r7, #31]
 80071ac:	e0e6      	b.n	800737c <UART_SetConfig+0x348>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a56      	ldr	r2, [pc, #344]	@ (800730c <UART_SetConfig+0x2d8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d120      	bne.n	80071fa <UART_SetConfig+0x1c6>
 80071b8:	4b51      	ldr	r3, [pc, #324]	@ (8007300 <UART_SetConfig+0x2cc>)
 80071ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80071c4:	d013      	beq.n	80071ee <UART_SetConfig+0x1ba>
 80071c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80071c8:	d814      	bhi.n	80071f4 <UART_SetConfig+0x1c0>
 80071ca:	2b80      	cmp	r3, #128	@ 0x80
 80071cc:	d009      	beq.n	80071e2 <UART_SetConfig+0x1ae>
 80071ce:	2b80      	cmp	r3, #128	@ 0x80
 80071d0:	d810      	bhi.n	80071f4 <UART_SetConfig+0x1c0>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <UART_SetConfig+0x1a8>
 80071d6:	2b40      	cmp	r3, #64	@ 0x40
 80071d8:	d006      	beq.n	80071e8 <UART_SetConfig+0x1b4>
 80071da:	e00b      	b.n	80071f4 <UART_SetConfig+0x1c0>
 80071dc:	2300      	movs	r3, #0
 80071de:	77fb      	strb	r3, [r7, #31]
 80071e0:	e0cc      	b.n	800737c <UART_SetConfig+0x348>
 80071e2:	2302      	movs	r3, #2
 80071e4:	77fb      	strb	r3, [r7, #31]
 80071e6:	e0c9      	b.n	800737c <UART_SetConfig+0x348>
 80071e8:	2304      	movs	r3, #4
 80071ea:	77fb      	strb	r3, [r7, #31]
 80071ec:	e0c6      	b.n	800737c <UART_SetConfig+0x348>
 80071ee:	2308      	movs	r3, #8
 80071f0:	77fb      	strb	r3, [r7, #31]
 80071f2:	e0c3      	b.n	800737c <UART_SetConfig+0x348>
 80071f4:	2310      	movs	r3, #16
 80071f6:	77fb      	strb	r3, [r7, #31]
 80071f8:	e0c0      	b.n	800737c <UART_SetConfig+0x348>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a44      	ldr	r2, [pc, #272]	@ (8007310 <UART_SetConfig+0x2dc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d125      	bne.n	8007250 <UART_SetConfig+0x21c>
 8007204:	4b3e      	ldr	r3, [pc, #248]	@ (8007300 <UART_SetConfig+0x2cc>)
 8007206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800720a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800720e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007212:	d017      	beq.n	8007244 <UART_SetConfig+0x210>
 8007214:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007218:	d817      	bhi.n	800724a <UART_SetConfig+0x216>
 800721a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800721e:	d00b      	beq.n	8007238 <UART_SetConfig+0x204>
 8007220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007224:	d811      	bhi.n	800724a <UART_SetConfig+0x216>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <UART_SetConfig+0x1fe>
 800722a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800722e:	d006      	beq.n	800723e <UART_SetConfig+0x20a>
 8007230:	e00b      	b.n	800724a <UART_SetConfig+0x216>
 8007232:	2300      	movs	r3, #0
 8007234:	77fb      	strb	r3, [r7, #31]
 8007236:	e0a1      	b.n	800737c <UART_SetConfig+0x348>
 8007238:	2302      	movs	r3, #2
 800723a:	77fb      	strb	r3, [r7, #31]
 800723c:	e09e      	b.n	800737c <UART_SetConfig+0x348>
 800723e:	2304      	movs	r3, #4
 8007240:	77fb      	strb	r3, [r7, #31]
 8007242:	e09b      	b.n	800737c <UART_SetConfig+0x348>
 8007244:	2308      	movs	r3, #8
 8007246:	77fb      	strb	r3, [r7, #31]
 8007248:	e098      	b.n	800737c <UART_SetConfig+0x348>
 800724a:	2310      	movs	r3, #16
 800724c:	77fb      	strb	r3, [r7, #31]
 800724e:	e095      	b.n	800737c <UART_SetConfig+0x348>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a2f      	ldr	r2, [pc, #188]	@ (8007314 <UART_SetConfig+0x2e0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d125      	bne.n	80072a6 <UART_SetConfig+0x272>
 800725a:	4b29      	ldr	r3, [pc, #164]	@ (8007300 <UART_SetConfig+0x2cc>)
 800725c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007260:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007264:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007268:	d017      	beq.n	800729a <UART_SetConfig+0x266>
 800726a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800726e:	d817      	bhi.n	80072a0 <UART_SetConfig+0x26c>
 8007270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007274:	d00b      	beq.n	800728e <UART_SetConfig+0x25a>
 8007276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800727a:	d811      	bhi.n	80072a0 <UART_SetConfig+0x26c>
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <UART_SetConfig+0x254>
 8007280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007284:	d006      	beq.n	8007294 <UART_SetConfig+0x260>
 8007286:	e00b      	b.n	80072a0 <UART_SetConfig+0x26c>
 8007288:	2301      	movs	r3, #1
 800728a:	77fb      	strb	r3, [r7, #31]
 800728c:	e076      	b.n	800737c <UART_SetConfig+0x348>
 800728e:	2302      	movs	r3, #2
 8007290:	77fb      	strb	r3, [r7, #31]
 8007292:	e073      	b.n	800737c <UART_SetConfig+0x348>
 8007294:	2304      	movs	r3, #4
 8007296:	77fb      	strb	r3, [r7, #31]
 8007298:	e070      	b.n	800737c <UART_SetConfig+0x348>
 800729a:	2308      	movs	r3, #8
 800729c:	77fb      	strb	r3, [r7, #31]
 800729e:	e06d      	b.n	800737c <UART_SetConfig+0x348>
 80072a0:	2310      	movs	r3, #16
 80072a2:	77fb      	strb	r3, [r7, #31]
 80072a4:	e06a      	b.n	800737c <UART_SetConfig+0x348>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007318 <UART_SetConfig+0x2e4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d138      	bne.n	8007322 <UART_SetConfig+0x2ee>
 80072b0:	4b13      	ldr	r3, [pc, #76]	@ (8007300 <UART_SetConfig+0x2cc>)
 80072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80072ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072be:	d017      	beq.n	80072f0 <UART_SetConfig+0x2bc>
 80072c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072c4:	d82a      	bhi.n	800731c <UART_SetConfig+0x2e8>
 80072c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ca:	d00b      	beq.n	80072e4 <UART_SetConfig+0x2b0>
 80072cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072d0:	d824      	bhi.n	800731c <UART_SetConfig+0x2e8>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <UART_SetConfig+0x2aa>
 80072d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072da:	d006      	beq.n	80072ea <UART_SetConfig+0x2b6>
 80072dc:	e01e      	b.n	800731c <UART_SetConfig+0x2e8>
 80072de:	2300      	movs	r3, #0
 80072e0:	77fb      	strb	r3, [r7, #31]
 80072e2:	e04b      	b.n	800737c <UART_SetConfig+0x348>
 80072e4:	2302      	movs	r3, #2
 80072e6:	77fb      	strb	r3, [r7, #31]
 80072e8:	e048      	b.n	800737c <UART_SetConfig+0x348>
 80072ea:	2304      	movs	r3, #4
 80072ec:	77fb      	strb	r3, [r7, #31]
 80072ee:	e045      	b.n	800737c <UART_SetConfig+0x348>
 80072f0:	2308      	movs	r3, #8
 80072f2:	77fb      	strb	r3, [r7, #31]
 80072f4:	e042      	b.n	800737c <UART_SetConfig+0x348>
 80072f6:	bf00      	nop
 80072f8:	efff69f3 	.word	0xefff69f3
 80072fc:	40011000 	.word	0x40011000
 8007300:	40023800 	.word	0x40023800
 8007304:	40004400 	.word	0x40004400
 8007308:	40004800 	.word	0x40004800
 800730c:	40004c00 	.word	0x40004c00
 8007310:	40005000 	.word	0x40005000
 8007314:	40011400 	.word	0x40011400
 8007318:	40007800 	.word	0x40007800
 800731c:	2310      	movs	r3, #16
 800731e:	77fb      	strb	r3, [r7, #31]
 8007320:	e02c      	b.n	800737c <UART_SetConfig+0x348>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a72      	ldr	r2, [pc, #456]	@ (80074f0 <UART_SetConfig+0x4bc>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d125      	bne.n	8007378 <UART_SetConfig+0x344>
 800732c:	4b71      	ldr	r3, [pc, #452]	@ (80074f4 <UART_SetConfig+0x4c0>)
 800732e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007332:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007336:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800733a:	d017      	beq.n	800736c <UART_SetConfig+0x338>
 800733c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007340:	d817      	bhi.n	8007372 <UART_SetConfig+0x33e>
 8007342:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007346:	d00b      	beq.n	8007360 <UART_SetConfig+0x32c>
 8007348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800734c:	d811      	bhi.n	8007372 <UART_SetConfig+0x33e>
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <UART_SetConfig+0x326>
 8007352:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007356:	d006      	beq.n	8007366 <UART_SetConfig+0x332>
 8007358:	e00b      	b.n	8007372 <UART_SetConfig+0x33e>
 800735a:	2300      	movs	r3, #0
 800735c:	77fb      	strb	r3, [r7, #31]
 800735e:	e00d      	b.n	800737c <UART_SetConfig+0x348>
 8007360:	2302      	movs	r3, #2
 8007362:	77fb      	strb	r3, [r7, #31]
 8007364:	e00a      	b.n	800737c <UART_SetConfig+0x348>
 8007366:	2304      	movs	r3, #4
 8007368:	77fb      	strb	r3, [r7, #31]
 800736a:	e007      	b.n	800737c <UART_SetConfig+0x348>
 800736c:	2308      	movs	r3, #8
 800736e:	77fb      	strb	r3, [r7, #31]
 8007370:	e004      	b.n	800737c <UART_SetConfig+0x348>
 8007372:	2310      	movs	r3, #16
 8007374:	77fb      	strb	r3, [r7, #31]
 8007376:	e001      	b.n	800737c <UART_SetConfig+0x348>
 8007378:	2310      	movs	r3, #16
 800737a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007384:	d15b      	bne.n	800743e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007386:	7ffb      	ldrb	r3, [r7, #31]
 8007388:	2b08      	cmp	r3, #8
 800738a:	d828      	bhi.n	80073de <UART_SetConfig+0x3aa>
 800738c:	a201      	add	r2, pc, #4	@ (adr r2, 8007394 <UART_SetConfig+0x360>)
 800738e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007392:	bf00      	nop
 8007394:	080073b9 	.word	0x080073b9
 8007398:	080073c1 	.word	0x080073c1
 800739c:	080073c9 	.word	0x080073c9
 80073a0:	080073df 	.word	0x080073df
 80073a4:	080073cf 	.word	0x080073cf
 80073a8:	080073df 	.word	0x080073df
 80073ac:	080073df 	.word	0x080073df
 80073b0:	080073df 	.word	0x080073df
 80073b4:	080073d7 	.word	0x080073d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b8:	f7fe f9f4 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
 80073bc:	61b8      	str	r0, [r7, #24]
        break;
 80073be:	e013      	b.n	80073e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073c0:	f7fe fa04 	bl	80057cc <HAL_RCC_GetPCLK2Freq>
 80073c4:	61b8      	str	r0, [r7, #24]
        break;
 80073c6:	e00f      	b.n	80073e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073c8:	4b4b      	ldr	r3, [pc, #300]	@ (80074f8 <UART_SetConfig+0x4c4>)
 80073ca:	61bb      	str	r3, [r7, #24]
        break;
 80073cc:	e00c      	b.n	80073e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ce:	f7fe f917 	bl	8005600 <HAL_RCC_GetSysClockFreq>
 80073d2:	61b8      	str	r0, [r7, #24]
        break;
 80073d4:	e008      	b.n	80073e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073da:	61bb      	str	r3, [r7, #24]
        break;
 80073dc:	e004      	b.n	80073e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	77bb      	strb	r3, [r7, #30]
        break;
 80073e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d074      	beq.n	80074d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	005a      	lsls	r2, r3, #1
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	441a      	add	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007402:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	2b0f      	cmp	r3, #15
 8007408:	d916      	bls.n	8007438 <UART_SetConfig+0x404>
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007410:	d212      	bcs.n	8007438 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	b29b      	uxth	r3, r3
 8007416:	f023 030f 	bic.w	r3, r3, #15
 800741a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	b29b      	uxth	r3, r3
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	b29a      	uxth	r2, r3
 8007428:	89fb      	ldrh	r3, [r7, #14]
 800742a:	4313      	orrs	r3, r2
 800742c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	89fa      	ldrh	r2, [r7, #14]
 8007434:	60da      	str	r2, [r3, #12]
 8007436:	e04f      	b.n	80074d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	77bb      	strb	r3, [r7, #30]
 800743c:	e04c      	b.n	80074d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800743e:	7ffb      	ldrb	r3, [r7, #31]
 8007440:	2b08      	cmp	r3, #8
 8007442:	d828      	bhi.n	8007496 <UART_SetConfig+0x462>
 8007444:	a201      	add	r2, pc, #4	@ (adr r2, 800744c <UART_SetConfig+0x418>)
 8007446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744a:	bf00      	nop
 800744c:	08007471 	.word	0x08007471
 8007450:	08007479 	.word	0x08007479
 8007454:	08007481 	.word	0x08007481
 8007458:	08007497 	.word	0x08007497
 800745c:	08007487 	.word	0x08007487
 8007460:	08007497 	.word	0x08007497
 8007464:	08007497 	.word	0x08007497
 8007468:	08007497 	.word	0x08007497
 800746c:	0800748f 	.word	0x0800748f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007470:	f7fe f998 	bl	80057a4 <HAL_RCC_GetPCLK1Freq>
 8007474:	61b8      	str	r0, [r7, #24]
        break;
 8007476:	e013      	b.n	80074a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007478:	f7fe f9a8 	bl	80057cc <HAL_RCC_GetPCLK2Freq>
 800747c:	61b8      	str	r0, [r7, #24]
        break;
 800747e:	e00f      	b.n	80074a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007480:	4b1d      	ldr	r3, [pc, #116]	@ (80074f8 <UART_SetConfig+0x4c4>)
 8007482:	61bb      	str	r3, [r7, #24]
        break;
 8007484:	e00c      	b.n	80074a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007486:	f7fe f8bb 	bl	8005600 <HAL_RCC_GetSysClockFreq>
 800748a:	61b8      	str	r0, [r7, #24]
        break;
 800748c:	e008      	b.n	80074a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800748e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007492:	61bb      	str	r3, [r7, #24]
        break;
 8007494:	e004      	b.n	80074a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	77bb      	strb	r3, [r7, #30]
        break;
 800749e:	bf00      	nop
    }

    if (pclk != 0U)
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d018      	beq.n	80074d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	085a      	lsrs	r2, r3, #1
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	441a      	add	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	2b0f      	cmp	r3, #15
 80074be:	d909      	bls.n	80074d4 <UART_SetConfig+0x4a0>
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074c6:	d205      	bcs.n	80074d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	60da      	str	r2, [r3, #12]
 80074d2:	e001      	b.n	80074d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80074e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3720      	adds	r7, #32
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	40007c00 	.word	0x40007c00
 80074f4:	40023800 	.word	0x40023800
 80074f8:	00f42400 	.word	0x00f42400

080074fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007590:	f003 0310 	and.w	r3, r3, #16
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01a      	beq.n	8007612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075fa:	d10a      	bne.n	8007612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	605a      	str	r2, [r3, #4]
  }
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08c      	sub	sp, #48	@ 0x30
 8007644:	af02      	add	r7, sp, #8
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007650:	f7fb f9c6 	bl	80029e0 <HAL_GetTick>
 8007654:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b08      	cmp	r3, #8
 8007662:	d12e      	bne.n	80076c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007664:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766c:	2200      	movs	r2, #0
 800766e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f83b 	bl	80076ee <UART_WaitOnFlagUntilTimeout>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d021      	beq.n	80076c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	60fb      	str	r3, [r7, #12]
   return(result);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007692:	623b      	str	r3, [r7, #32]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	61fb      	str	r3, [r7, #28]
 800769e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	69b9      	ldr	r1, [r7, #24]
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	617b      	str	r3, [r7, #20]
   return(result);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e6      	bne.n	800767e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e011      	b.n	80076e6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3728      	adds	r7, #40	@ 0x28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	603b      	str	r3, [r7, #0]
 80076fa:	4613      	mov	r3, r2
 80076fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076fe:	e04f      	b.n	80077a0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007706:	d04b      	beq.n	80077a0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007708:	f7fb f96a 	bl	80029e0 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	429a      	cmp	r2, r3
 8007716:	d302      	bcc.n	800771e <UART_WaitOnFlagUntilTimeout+0x30>
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e04e      	b.n	80077c0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d037      	beq.n	80077a0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b80      	cmp	r3, #128	@ 0x80
 8007734:	d034      	beq.n	80077a0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b40      	cmp	r3, #64	@ 0x40
 800773a:	d031      	beq.n	80077a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b08      	cmp	r3, #8
 8007748:	d110      	bne.n	800776c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2208      	movs	r2, #8
 8007750:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 f838 	bl	80077c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2208      	movs	r2, #8
 800775c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e029      	b.n	80077c0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007776:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800777a:	d111      	bne.n	80077a0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007784:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f81e 	bl	80077c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2220      	movs	r2, #32
 8007790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e00f      	b.n	80077c0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	69da      	ldr	r2, [r3, #28]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	4013      	ands	r3, r2
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	bf0c      	ite	eq
 80077b0:	2301      	moveq	r3, #1
 80077b2:	2300      	movne	r3, #0
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	461a      	mov	r2, r3
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d0a0      	beq.n	8007700 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b095      	sub	sp, #84	@ 0x54
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80077f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e6      	bne.n	80077d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3308      	adds	r3, #8
 8007808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	61fb      	str	r3, [r7, #28]
   return(result);
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f023 0301 	bic.w	r3, r3, #1
 8007818:	64bb      	str	r3, [r7, #72]	@ 0x48
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007822:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007824:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e5      	bne.n	8007802 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800783a:	2b01      	cmp	r3, #1
 800783c:	d118      	bne.n	8007870 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	60bb      	str	r3, [r7, #8]
   return(result);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f023 0310 	bic.w	r3, r3, #16
 8007852:	647b      	str	r3, [r7, #68]	@ 0x44
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	6979      	ldr	r1, [r7, #20]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	613b      	str	r3, [r7, #16]
   return(result);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e6      	bne.n	800783e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007884:	bf00      	nop
 8007886:	3754      	adds	r7, #84	@ 0x54
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d121      	bne.n	80078e6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	4b27      	ldr	r3, [pc, #156]	@ (8007944 <FMC_SDRAM_Init+0xb4>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	6851      	ldr	r1, [r2, #4]
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	6892      	ldr	r2, [r2, #8]
 80078b2:	4311      	orrs	r1, r2
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	68d2      	ldr	r2, [r2, #12]
 80078b8:	4311      	orrs	r1, r2
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	6912      	ldr	r2, [r2, #16]
 80078be:	4311      	orrs	r1, r2
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	6952      	ldr	r2, [r2, #20]
 80078c4:	4311      	orrs	r1, r2
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	6992      	ldr	r2, [r2, #24]
 80078ca:	4311      	orrs	r1, r2
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	69d2      	ldr	r2, [r2, #28]
 80078d0:	4311      	orrs	r1, r2
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	6a12      	ldr	r2, [r2, #32]
 80078d6:	4311      	orrs	r1, r2
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80078dc:	430a      	orrs	r2, r1
 80078de:	431a      	orrs	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	e026      	b.n	8007934 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	69d9      	ldr	r1, [r3, #28]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	4319      	orrs	r1, r3
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fc:	430b      	orrs	r3, r1
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	4b0e      	ldr	r3, [pc, #56]	@ (8007944 <FMC_SDRAM_Init+0xb4>)
 800790a:	4013      	ands	r3, r2
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	6851      	ldr	r1, [r2, #4]
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	6892      	ldr	r2, [r2, #8]
 8007914:	4311      	orrs	r1, r2
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	68d2      	ldr	r2, [r2, #12]
 800791a:	4311      	orrs	r1, r2
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	6912      	ldr	r2, [r2, #16]
 8007920:	4311      	orrs	r1, r2
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	6952      	ldr	r2, [r2, #20]
 8007926:	4311      	orrs	r1, r2
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	6992      	ldr	r2, [r2, #24]
 800792c:	430a      	orrs	r2, r1
 800792e:	431a      	orrs	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	ffff8000 	.word	0xffff8000

08007948 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d128      	bne.n	80079ac <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	1e59      	subs	r1, r3, #1
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	3b01      	subs	r3, #1
 800796e:	011b      	lsls	r3, r3, #4
 8007970:	4319      	orrs	r1, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	3b01      	subs	r3, #1
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	4319      	orrs	r1, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	3b01      	subs	r3, #1
 8007982:	031b      	lsls	r3, r3, #12
 8007984:	4319      	orrs	r1, r3
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	3b01      	subs	r3, #1
 800798c:	041b      	lsls	r3, r3, #16
 800798e:	4319      	orrs	r1, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	3b01      	subs	r3, #1
 8007996:	051b      	lsls	r3, r3, #20
 8007998:	4319      	orrs	r1, r3
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	3b01      	subs	r3, #1
 80079a0:	061b      	lsls	r3, r3, #24
 80079a2:	430b      	orrs	r3, r1
 80079a4:	431a      	orrs	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	609a      	str	r2, [r3, #8]
 80079aa:	e02d      	b.n	8007a08 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	4b19      	ldr	r3, [pc, #100]	@ (8007a18 <FMC_SDRAM_Timing_Init+0xd0>)
 80079b2:	4013      	ands	r3, r2
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	68d2      	ldr	r2, [r2, #12]
 80079b8:	3a01      	subs	r2, #1
 80079ba:	0311      	lsls	r1, r2, #12
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	6952      	ldr	r2, [r2, #20]
 80079c0:	3a01      	subs	r2, #1
 80079c2:	0512      	lsls	r2, r2, #20
 80079c4:	430a      	orrs	r2, r1
 80079c6:	431a      	orrs	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	1e59      	subs	r1, r3, #1
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	3b01      	subs	r3, #1
 80079e0:	011b      	lsls	r3, r3, #4
 80079e2:	4319      	orrs	r1, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	4319      	orrs	r1, r3
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	3b01      	subs	r3, #1
 80079f4:	041b      	lsls	r3, r3, #16
 80079f6:	4319      	orrs	r1, r3
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	061b      	lsls	r3, r3, #24
 8007a00:	430b      	orrs	r3, r1
 8007a02:	431a      	orrs	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	ff0f0fff 	.word	0xff0f0fff

08007a1c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a60 <FMC_SDRAM_SendCommand+0x44>)
 8007a2e:	4013      	ands	r3, r2
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	6811      	ldr	r1, [r2, #0]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	6852      	ldr	r2, [r2, #4]
 8007a38:	4311      	orrs	r1, r2
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	6892      	ldr	r2, [r2, #8]
 8007a3e:	3a01      	subs	r2, #1
 8007a40:	0152      	lsls	r2, r2, #5
 8007a42:	4311      	orrs	r1, r2
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	68d2      	ldr	r2, [r2, #12]
 8007a48:	0252      	lsls	r2, r2, #9
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	431a      	orrs	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	ffc00000 	.word	0xffc00000

08007a64 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	695a      	ldr	r2, [r3, #20]
 8007a72:	4b07      	ldr	r3, [pc, #28]	@ (8007a90 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	0052      	lsls	r2, r2, #1
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	ffffc001 	.word	0xffffc001

08007a94 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b088      	sub	sp, #32
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	607b      	str	r3, [r7, #4]
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	81fb      	strh	r3, [r7, #14]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	81bb      	strh	r3, [r7, #12]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8007aac:	89bb      	ldrh	r3, [r7, #12]
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8007ab2:	89bb      	ldrh	r3, [r7, #12]
 8007ab4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007ab8:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8007abe:	f7fa f817 	bl	8001af0 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8007ac2:	89fb      	ldrh	r3, [r7, #14]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2203      	movs	r2, #3
 8007ac8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8007acc:	4618      	mov	r0, r3
 8007ace:	f001 f80f 	bl	8008af0 <CODEC_IO_Write>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	4413      	add	r3, r2
 8007ada:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8007adc:	89fb      	ldrh	r3, [r7, #14]
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f640 0117 	movw	r1, #2071	@ 0x817
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 f802 	bl	8008af0 <CODEC_IO_Write>
 8007aec:	4603      	mov	r3, r0
 8007aee:	461a      	mov	r2, r3
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	4413      	add	r3, r2
 8007af4:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8007af6:	89fb      	ldrh	r3, [r7, #14]
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2200      	movs	r2, #0
 8007afc:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 fff5 	bl	8008af0 <CODEC_IO_Write>
 8007b06:	4603      	mov	r3, r0
 8007b08:	461a      	mov	r2, r3
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8007b10:	89fb      	ldrh	r3, [r7, #14]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	226c      	movs	r2, #108	@ 0x6c
 8007b16:	2139      	movs	r1, #57	@ 0x39
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 ffe9 	bl	8008af0 <CODEC_IO_Write>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	461a      	mov	r2, r3
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	4413      	add	r3, r2
 8007b26:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8007b28:	8afb      	ldrh	r3, [r7, #22]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00c      	beq.n	8007b48 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8007b2e:	89fb      	ldrh	r3, [r7, #14]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2213      	movs	r2, #19
 8007b34:	2101      	movs	r1, #1
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 ffda 	bl	8008af0 <CODEC_IO_Write>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	461a      	mov	r2, r3
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	4413      	add	r3, r2
 8007b44:	61fb      	str	r3, [r7, #28]
 8007b46:	e00b      	b.n	8007b60 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8007b48:	89fb      	ldrh	r3, [r7, #14]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2203      	movs	r2, #3
 8007b4e:	2101      	movs	r1, #1
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 ffcd 	bl	8008af0 <CODEC_IO_Write>
 8007b56:	4603      	mov	r3, r0
 8007b58:	461a      	mov	r2, r3
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8007b60:	2032      	movs	r0, #50	@ 0x32
 8007b62:	f7f9 fff9 	bl	8001b58 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8007b66:	8b3b      	ldrh	r3, [r7, #24]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 815f 	beq.w	8007e2c <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8007b6e:	4bae      	ldr	r3, [pc, #696]	@ (8007e28 <wm8994_Init+0x394>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8007b74:	8b3b      	ldrh	r3, [r7, #24]
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	f000 808c 	beq.w	8007c94 <wm8994_Init+0x200>
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	f300 8111 	bgt.w	8007da4 <wm8994_Init+0x310>
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d002      	beq.n	8007b8c <wm8994_Init+0xf8>
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d042      	beq.n	8007c10 <wm8994_Init+0x17c>
 8007b8a:	e10b      	b.n	8007da4 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8007b8c:	89fb      	ldrh	r3, [r7, #14]
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8007b94:	2105      	movs	r1, #5
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 ffaa 	bl	8008af0 <CODEC_IO_Write>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8007ba6:	89fb      	ldrh	r3, [r7, #14]
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2200      	movs	r2, #0
 8007bac:	f240 6101 	movw	r1, #1537	@ 0x601
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 ff9d 	bl	8008af0 <CODEC_IO_Write>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	461a      	mov	r2, r3
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8007bc0:	89fb      	ldrh	r3, [r7, #14]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f240 6102 	movw	r1, #1538	@ 0x602
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 ff90 	bl	8008af0 <CODEC_IO_Write>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8007bda:	89fb      	ldrh	r3, [r7, #14]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2202      	movs	r2, #2
 8007be0:	f240 6104 	movw	r1, #1540	@ 0x604
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 ff83 	bl	8008af0 <CODEC_IO_Write>
 8007bea:	4603      	mov	r3, r0
 8007bec:	461a      	mov	r2, r3
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8007bf4:	89fb      	ldrh	r3, [r7, #14]
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	f240 6105 	movw	r1, #1541	@ 0x605
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 ff76 	bl	8008af0 <CODEC_IO_Write>
 8007c04:	4603      	mov	r3, r0
 8007c06:	461a      	mov	r2, r3
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	61fb      	str	r3, [r7, #28]
      break;
 8007c0e:	e110      	b.n	8007e32 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8007c10:	89fb      	ldrh	r3, [r7, #14]
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	f240 3203 	movw	r2, #771	@ 0x303
 8007c18:	2105      	movs	r1, #5
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 ff68 	bl	8008af0 <CODEC_IO_Write>
 8007c20:	4603      	mov	r3, r0
 8007c22:	461a      	mov	r2, r3
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	4413      	add	r3, r2
 8007c28:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8007c2a:	89fb      	ldrh	r3, [r7, #14]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f240 6101 	movw	r1, #1537	@ 0x601
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 ff5b 	bl	8008af0 <CODEC_IO_Write>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	4413      	add	r3, r2
 8007c42:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8007c44:	89fb      	ldrh	r3, [r7, #14]
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f240 6102 	movw	r1, #1538	@ 0x602
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 ff4e 	bl	8008af0 <CODEC_IO_Write>
 8007c54:	4603      	mov	r3, r0
 8007c56:	461a      	mov	r2, r3
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8007c5e:	89fb      	ldrh	r3, [r7, #14]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2200      	movs	r2, #0
 8007c64:	f240 6104 	movw	r1, #1540	@ 0x604
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 ff41 	bl	8008af0 <CODEC_IO_Write>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	461a      	mov	r2, r3
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	4413      	add	r3, r2
 8007c76:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8007c78:	89fb      	ldrh	r3, [r7, #14]
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f240 6105 	movw	r1, #1541	@ 0x605
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 ff34 	bl	8008af0 <CODEC_IO_Write>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	4413      	add	r3, r2
 8007c90:	61fb      	str	r3, [r7, #28]
      break;
 8007c92:	e0ce      	b.n	8007e32 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8007c94:	8afb      	ldrh	r3, [r7, #22]
 8007c96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c9a:	d141      	bne.n	8007d20 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8007c9c:	89fb      	ldrh	r3, [r7, #14]
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8007ca4:	2105      	movs	r1, #5
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 ff22 	bl	8008af0 <CODEC_IO_Write>
 8007cac:	4603      	mov	r3, r0
 8007cae:	461a      	mov	r2, r3
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8007cb6:	89fb      	ldrh	r3, [r7, #14]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2203      	movs	r2, #3
 8007cbc:	f240 6101 	movw	r1, #1537	@ 0x601
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 ff15 	bl	8008af0 <CODEC_IO_Write>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	461a      	mov	r2, r3
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	4413      	add	r3, r2
 8007cce:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8007cd0:	89fb      	ldrh	r3, [r7, #14]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2203      	movs	r2, #3
 8007cd6:	f240 6102 	movw	r1, #1538	@ 0x602
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 ff08 	bl	8008af0 <CODEC_IO_Write>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8007cea:	89fb      	ldrh	r3, [r7, #14]
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2203      	movs	r2, #3
 8007cf0:	f240 6104 	movw	r1, #1540	@ 0x604
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fefb 	bl	8008af0 <CODEC_IO_Write>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	4413      	add	r3, r2
 8007d02:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8007d04:	89fb      	ldrh	r3, [r7, #14]
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2203      	movs	r2, #3
 8007d0a:	f240 6105 	movw	r1, #1541	@ 0x605
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 feee 	bl	8008af0 <CODEC_IO_Write>
 8007d14:	4603      	mov	r3, r0
 8007d16:	461a      	mov	r2, r3
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8007d1e:	e088      	b.n	8007e32 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8007d20:	89fb      	ldrh	r3, [r7, #14]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8007d28:	2105      	movs	r1, #5
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 fee0 	bl	8008af0 <CODEC_IO_Write>
 8007d30:	4603      	mov	r3, r0
 8007d32:	461a      	mov	r2, r3
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	4413      	add	r3, r2
 8007d38:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8007d3a:	89fb      	ldrh	r3, [r7, #14]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f240 6101 	movw	r1, #1537	@ 0x601
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 fed3 	bl	8008af0 <CODEC_IO_Write>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	4413      	add	r3, r2
 8007d52:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8007d54:	89fb      	ldrh	r3, [r7, #14]
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f240 6102 	movw	r1, #1538	@ 0x602
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 fec6 	bl	8008af0 <CODEC_IO_Write>
 8007d64:	4603      	mov	r3, r0
 8007d66:	461a      	mov	r2, r3
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8007d6e:	89fb      	ldrh	r3, [r7, #14]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2202      	movs	r2, #2
 8007d74:	f240 6104 	movw	r1, #1540	@ 0x604
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 feb9 	bl	8008af0 <CODEC_IO_Write>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	461a      	mov	r2, r3
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	4413      	add	r3, r2
 8007d86:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8007d88:	89fb      	ldrh	r3, [r7, #14]
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	f240 6105 	movw	r1, #1541	@ 0x605
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 feac 	bl	8008af0 <CODEC_IO_Write>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	4413      	add	r3, r2
 8007da0:	61fb      	str	r3, [r7, #28]
      break;
 8007da2:	e046      	b.n	8007e32 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8007da4:	89fb      	ldrh	r3, [r7, #14]
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	f240 3203 	movw	r2, #771	@ 0x303
 8007dac:	2105      	movs	r1, #5
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 fe9e 	bl	8008af0 <CODEC_IO_Write>
 8007db4:	4603      	mov	r3, r0
 8007db6:	461a      	mov	r2, r3
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	4413      	add	r3, r2
 8007dbc:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8007dbe:	89fb      	ldrh	r3, [r7, #14]
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f240 6101 	movw	r1, #1537	@ 0x601
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 fe91 	bl	8008af0 <CODEC_IO_Write>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8007dd8:	89fb      	ldrh	r3, [r7, #14]
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f240 6102 	movw	r1, #1538	@ 0x602
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 fe84 	bl	8008af0 <CODEC_IO_Write>
 8007de8:	4603      	mov	r3, r0
 8007dea:	461a      	mov	r2, r3
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	4413      	add	r3, r2
 8007df0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8007df2:	89fb      	ldrh	r3, [r7, #14]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2200      	movs	r2, #0
 8007df8:	f240 6104 	movw	r1, #1540	@ 0x604
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 fe77 	bl	8008af0 <CODEC_IO_Write>
 8007e02:	4603      	mov	r3, r0
 8007e04:	461a      	mov	r2, r3
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	4413      	add	r3, r2
 8007e0a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8007e0c:	89fb      	ldrh	r3, [r7, #14]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2200      	movs	r2, #0
 8007e12:	f240 6105 	movw	r1, #1541	@ 0x605
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 fe6a 	bl	8008af0 <CODEC_IO_Write>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	461a      	mov	r2, r3
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	4413      	add	r3, r2
 8007e24:	61fb      	str	r3, [r7, #28]
      break;
 8007e26:	e004      	b.n	8007e32 <wm8994_Init+0x39e>
 8007e28:	200013f4 	.word	0x200013f4
    }
  }
  else
  {
    outputEnabled = 0;
 8007e2c:	4b99      	ldr	r3, [pc, #612]	@ (8008094 <wm8994_Init+0x600>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8007e32:	8afb      	ldrh	r3, [r7, #22]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 81ab 	beq.w	8008190 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8007e3a:	4b97      	ldr	r3, [pc, #604]	@ (8008098 <wm8994_Init+0x604>)
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8007e40:	8afb      	ldrh	r3, [r7, #22]
 8007e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e46:	f000 8129 	beq.w	800809c <wm8994_Init+0x608>
 8007e4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e4e:	f300 819b 	bgt.w	8008188 <wm8994_Init+0x6f4>
 8007e52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e56:	d05a      	beq.n	8007f0e <wm8994_Init+0x47a>
 8007e58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e5c:	f300 8194 	bgt.w	8008188 <wm8994_Init+0x6f4>
 8007e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e64:	f000 80c6 	beq.w	8007ff4 <wm8994_Init+0x560>
 8007e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e6c:	f040 818c 	bne.w	8008188 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8007e70:	89fb      	ldrh	r3, [r7, #14]
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8007e78:	2104      	movs	r1, #4
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 fe38 	bl	8008af0 <CODEC_IO_Write>
 8007e80:	4603      	mov	r3, r0
 8007e82:	461a      	mov	r2, r3
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	4413      	add	r3, r2
 8007e88:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8007e8a:	89fb      	ldrh	r3, [r7, #14]
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	22db      	movs	r2, #219	@ 0xdb
 8007e90:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fe2b 	bl	8008af0 <CODEC_IO_Write>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8007ea4:	89fb      	ldrh	r3, [r7, #14]
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8007eac:	2102      	movs	r1, #2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fe1e 	bl	8008af0 <CODEC_IO_Write>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	4413      	add	r3, r2
 8007ebc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8007ebe:	89fb      	ldrh	r3, [r7, #14]
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 fe11 	bl	8008af0 <CODEC_IO_Write>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8007ed8:	89fb      	ldrh	r3, [r7, #14]
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2202      	movs	r2, #2
 8007ede:	f240 6109 	movw	r1, #1545	@ 0x609
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 fe04 	bl	8008af0 <CODEC_IO_Write>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	461a      	mov	r2, r3
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	4413      	add	r3, r2
 8007ef0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8007ef2:	89fb      	ldrh	r3, [r7, #14]
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	220e      	movs	r2, #14
 8007ef8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fdf7 	bl	8008af0 <CODEC_IO_Write>
 8007f02:	4603      	mov	r3, r0
 8007f04:	461a      	mov	r2, r3
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	4413      	add	r3, r2
 8007f0a:	61fb      	str	r3, [r7, #28]
      break;
 8007f0c:	e143      	b.n	8008196 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8007f0e:	89fb      	ldrh	r3, [r7, #14]
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2211      	movs	r2, #17
 8007f14:	2128      	movs	r1, #40	@ 0x28
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fdea 	bl	8008af0 <CODEC_IO_Write>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	461a      	mov	r2, r3
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	4413      	add	r3, r2
 8007f24:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8007f26:	89fb      	ldrh	r3, [r7, #14]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2235      	movs	r2, #53	@ 0x35
 8007f2c:	2129      	movs	r1, #41	@ 0x29
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fdde 	bl	8008af0 <CODEC_IO_Write>
 8007f34:	4603      	mov	r3, r0
 8007f36:	461a      	mov	r2, r3
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8007f3e:	89fb      	ldrh	r3, [r7, #14]
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2235      	movs	r2, #53	@ 0x35
 8007f44:	212a      	movs	r1, #42	@ 0x2a
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fdd2 	bl	8008af0 <CODEC_IO_Write>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	461a      	mov	r2, r3
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	4413      	add	r3, r2
 8007f54:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8007f56:	89fb      	ldrh	r3, [r7, #14]
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	f240 3203 	movw	r2, #771	@ 0x303
 8007f5e:	2104      	movs	r1, #4
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fdc5 	bl	8008af0 <CODEC_IO_Write>
 8007f66:	4603      	mov	r3, r0
 8007f68:	461a      	mov	r2, r3
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8007f70:	89fb      	ldrh	r3, [r7, #14]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	22db      	movs	r2, #219	@ 0xdb
 8007f76:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 fdb8 	bl	8008af0 <CODEC_IO_Write>
 8007f80:	4603      	mov	r3, r0
 8007f82:	461a      	mov	r2, r3
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	4413      	add	r3, r2
 8007f88:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8007f8a:	89fb      	ldrh	r3, [r7, #14]
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	f246 3250 	movw	r2, #25424	@ 0x6350
 8007f92:	2102      	movs	r1, #2
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 fdab 	bl	8008af0 <CODEC_IO_Write>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8007fa4:	89fb      	ldrh	r3, [r7, #14]
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2202      	movs	r2, #2
 8007faa:	f240 6106 	movw	r1, #1542	@ 0x606
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 fd9e 	bl	8008af0 <CODEC_IO_Write>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	4413      	add	r3, r2
 8007fbc:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8007fbe:	89fb      	ldrh	r3, [r7, #14]
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	f240 6107 	movw	r1, #1543	@ 0x607
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 fd91 	bl	8008af0 <CODEC_IO_Write>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8007fd8:	89fb      	ldrh	r3, [r7, #14]
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	220d      	movs	r2, #13
 8007fde:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 fd84 	bl	8008af0 <CODEC_IO_Write>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	461a      	mov	r2, r3
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	4413      	add	r3, r2
 8007ff0:	61fb      	str	r3, [r7, #28]
      break;
 8007ff2:	e0d0      	b.n	8008196 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8007ff4:	89fb      	ldrh	r3, [r7, #14]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8007ffc:	2104      	movs	r1, #4
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fd76 	bl	8008af0 <CODEC_IO_Write>
 8008004:	4603      	mov	r3, r0
 8008006:	461a      	mov	r2, r3
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	4413      	add	r3, r2
 800800c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800800e:	89fb      	ldrh	r3, [r7, #14]
 8008010:	b2db      	uxtb	r3, r3
 8008012:	22db      	movs	r2, #219	@ 0xdb
 8008014:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fd69 	bl	8008af0 <CODEC_IO_Write>
 800801e:	4603      	mov	r3, r0
 8008020:	461a      	mov	r2, r3
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	4413      	add	r3, r2
 8008026:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8008028:	89fb      	ldrh	r3, [r7, #14]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	f246 3250 	movw	r2, #25424	@ 0x6350
 8008030:	2102      	movs	r1, #2
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fd5c 	bl	8008af0 <CODEC_IO_Write>
 8008038:	4603      	mov	r3, r0
 800803a:	461a      	mov	r2, r3
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	4413      	add	r3, r2
 8008040:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8008042:	89fb      	ldrh	r3, [r7, #14]
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2202      	movs	r2, #2
 8008048:	f240 6106 	movw	r1, #1542	@ 0x606
 800804c:	4618      	mov	r0, r3
 800804e:	f000 fd4f 	bl	8008af0 <CODEC_IO_Write>
 8008052:	4603      	mov	r3, r0
 8008054:	461a      	mov	r2, r3
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	4413      	add	r3, r2
 800805a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800805c:	89fb      	ldrh	r3, [r7, #14]
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2202      	movs	r2, #2
 8008062:	f240 6107 	movw	r1, #1543	@ 0x607
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fd42 	bl	8008af0 <CODEC_IO_Write>
 800806c:	4603      	mov	r3, r0
 800806e:	461a      	mov	r2, r3
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	4413      	add	r3, r2
 8008074:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8008076:	89fb      	ldrh	r3, [r7, #14]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	220d      	movs	r2, #13
 800807c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8008080:	4618      	mov	r0, r3
 8008082:	f000 fd35 	bl	8008af0 <CODEC_IO_Write>
 8008086:	4603      	mov	r3, r0
 8008088:	461a      	mov	r2, r3
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	4413      	add	r3, r2
 800808e:	61fb      	str	r3, [r7, #28]
      break; 
 8008090:	e081      	b.n	8008196 <wm8994_Init+0x702>
 8008092:	bf00      	nop
 8008094:	200013f4 	.word	0x200013f4
 8008098:	200013f8 	.word	0x200013f8
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 800809c:	89fb      	ldrh	r3, [r7, #14]
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80080a4:	2104      	movs	r1, #4
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fd22 	bl	8008af0 <CODEC_IO_Write>
 80080ac:	4603      	mov	r3, r0
 80080ae:	461a      	mov	r2, r3
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	4413      	add	r3, r2
 80080b4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80080b6:	89fb      	ldrh	r3, [r7, #14]
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	22db      	movs	r2, #219	@ 0xdb
 80080bc:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 fd15 	bl	8008af0 <CODEC_IO_Write>
 80080c6:	4603      	mov	r3, r0
 80080c8:	461a      	mov	r2, r3
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	4413      	add	r3, r2
 80080ce:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80080d0:	89fb      	ldrh	r3, [r7, #14]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	22db      	movs	r2, #219	@ 0xdb
 80080d6:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fd08 	bl	8008af0 <CODEC_IO_Write>
 80080e0:	4603      	mov	r3, r0
 80080e2:	461a      	mov	r2, r3
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	4413      	add	r3, r2
 80080e8:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80080ea:	89fb      	ldrh	r3, [r7, #14]
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80080f2:	2102      	movs	r1, #2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fcfb 	bl	8008af0 <CODEC_IO_Write>
 80080fa:	4603      	mov	r3, r0
 80080fc:	461a      	mov	r2, r3
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	4413      	add	r3, r2
 8008102:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8008104:	89fb      	ldrh	r3, [r7, #14]
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2202      	movs	r2, #2
 800810a:	f240 6106 	movw	r1, #1542	@ 0x606
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fcee 	bl	8008af0 <CODEC_IO_Write>
 8008114:	4603      	mov	r3, r0
 8008116:	461a      	mov	r2, r3
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	4413      	add	r3, r2
 800811c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800811e:	89fb      	ldrh	r3, [r7, #14]
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2202      	movs	r2, #2
 8008124:	f240 6107 	movw	r1, #1543	@ 0x607
 8008128:	4618      	mov	r0, r3
 800812a:	f000 fce1 	bl	8008af0 <CODEC_IO_Write>
 800812e:	4603      	mov	r3, r0
 8008130:	461a      	mov	r2, r3
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	4413      	add	r3, r2
 8008136:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8008138:	89fb      	ldrh	r3, [r7, #14]
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2202      	movs	r2, #2
 800813e:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8008142:	4618      	mov	r0, r3
 8008144:	f000 fcd4 	bl	8008af0 <CODEC_IO_Write>
 8008148:	4603      	mov	r3, r0
 800814a:	461a      	mov	r2, r3
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	4413      	add	r3, r2
 8008150:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8008152:	89fb      	ldrh	r3, [r7, #14]
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2202      	movs	r2, #2
 8008158:	f240 6109 	movw	r1, #1545	@ 0x609
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fcc7 	bl	8008af0 <CODEC_IO_Write>
 8008162:	4603      	mov	r3, r0
 8008164:	461a      	mov	r2, r3
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	4413      	add	r3, r2
 800816a:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800816c:	89fb      	ldrh	r3, [r7, #14]
 800816e:	b2db      	uxtb	r3, r3
 8008170:	220d      	movs	r2, #13
 8008172:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fcba 	bl	8008af0 <CODEC_IO_Write>
 800817c:	4603      	mov	r3, r0
 800817e:	461a      	mov	r2, r3
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	4413      	add	r3, r2
 8008184:	61fb      	str	r3, [r7, #28]
      break;    
 8008186:	e006      	b.n	8008196 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	3301      	adds	r3, #1
 800818c:	61fb      	str	r3, [r7, #28]
      break;
 800818e:	e002      	b.n	8008196 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8008190:	4ba4      	ldr	r3, [pc, #656]	@ (8008424 <wm8994_Init+0x990>)
 8008192:	2200      	movs	r2, #0
 8008194:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4aa3      	ldr	r2, [pc, #652]	@ (8008428 <wm8994_Init+0x994>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d079      	beq.n	8008292 <wm8994_Init+0x7fe>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4aa1      	ldr	r2, [pc, #644]	@ (8008428 <wm8994_Init+0x994>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	f200 80ad 	bhi.w	8008302 <wm8994_Init+0x86e>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d061      	beq.n	8008276 <wm8994_Init+0x7e2>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80081b8:	4293      	cmp	r3, r2
 80081ba:	f200 80a2 	bhi.w	8008302 <wm8994_Init+0x86e>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80081c4:	4293      	cmp	r3, r2
 80081c6:	f000 808e 	beq.w	80082e6 <wm8994_Init+0x852>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80081d0:	4293      	cmp	r3, r2
 80081d2:	f200 8096 	bhi.w	8008302 <wm8994_Init+0x86e>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80081dc:	d03d      	beq.n	800825a <wm8994_Init+0x7c6>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80081e4:	f200 808d 	bhi.w	8008302 <wm8994_Init+0x86e>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f245 6222 	movw	r2, #22050	@ 0x5622
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d06b      	beq.n	80082ca <wm8994_Init+0x836>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f245 6222 	movw	r2, #22050	@ 0x5622
 80081f8:	4293      	cmp	r3, r2
 80081fa:	f200 8082 	bhi.w	8008302 <wm8994_Init+0x86e>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8008204:	d01b      	beq.n	800823e <wm8994_Init+0x7aa>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800820c:	d879      	bhi.n	8008302 <wm8994_Init+0x86e>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8008214:	d005      	beq.n	8008222 <wm8994_Init+0x78e>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800821c:	4293      	cmp	r3, r2
 800821e:	d046      	beq.n	80082ae <wm8994_Init+0x81a>
 8008220:	e06f      	b.n	8008302 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8008222:	89fb      	ldrh	r3, [r7, #14]
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2203      	movs	r2, #3
 8008228:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800822c:	4618      	mov	r0, r3
 800822e:	f000 fc5f 	bl	8008af0 <CODEC_IO_Write>
 8008232:	4603      	mov	r3, r0
 8008234:	461a      	mov	r2, r3
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	4413      	add	r3, r2
 800823a:	61fb      	str	r3, [r7, #28]
    break;
 800823c:	e06f      	b.n	800831e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800823e:	89fb      	ldrh	r3, [r7, #14]
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2233      	movs	r2, #51	@ 0x33
 8008244:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008248:	4618      	mov	r0, r3
 800824a:	f000 fc51 	bl	8008af0 <CODEC_IO_Write>
 800824e:	4603      	mov	r3, r0
 8008250:	461a      	mov	r2, r3
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	4413      	add	r3, r2
 8008256:	61fb      	str	r3, [r7, #28]
    break;
 8008258:	e061      	b.n	800831e <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800825a:	89fb      	ldrh	r3, [r7, #14]
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2263      	movs	r2, #99	@ 0x63
 8008260:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008264:	4618      	mov	r0, r3
 8008266:	f000 fc43 	bl	8008af0 <CODEC_IO_Write>
 800826a:	4603      	mov	r3, r0
 800826c:	461a      	mov	r2, r3
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	4413      	add	r3, r2
 8008272:	61fb      	str	r3, [r7, #28]
    break;
 8008274:	e053      	b.n	800831e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8008276:	89fb      	ldrh	r3, [r7, #14]
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2283      	movs	r2, #131	@ 0x83
 800827c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fc35 	bl	8008af0 <CODEC_IO_Write>
 8008286:	4603      	mov	r3, r0
 8008288:	461a      	mov	r2, r3
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	4413      	add	r3, r2
 800828e:	61fb      	str	r3, [r7, #28]
    break;
 8008290:	e045      	b.n	800831e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8008292:	89fb      	ldrh	r3, [r7, #14]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	22a3      	movs	r2, #163	@ 0xa3
 8008298:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800829c:	4618      	mov	r0, r3
 800829e:	f000 fc27 	bl	8008af0 <CODEC_IO_Write>
 80082a2:	4603      	mov	r3, r0
 80082a4:	461a      	mov	r2, r3
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	4413      	add	r3, r2
 80082aa:	61fb      	str	r3, [r7, #28]
    break;
 80082ac:	e037      	b.n	800831e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80082ae:	89fb      	ldrh	r3, [r7, #14]
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2213      	movs	r2, #19
 80082b4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 fc19 	bl	8008af0 <CODEC_IO_Write>
 80082be:	4603      	mov	r3, r0
 80082c0:	461a      	mov	r2, r3
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	61fb      	str	r3, [r7, #28]
    break;
 80082c8:	e029      	b.n	800831e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80082ca:	89fb      	ldrh	r3, [r7, #14]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2243      	movs	r2, #67	@ 0x43
 80082d0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fc0b 	bl	8008af0 <CODEC_IO_Write>
 80082da:	4603      	mov	r3, r0
 80082dc:	461a      	mov	r2, r3
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	4413      	add	r3, r2
 80082e2:	61fb      	str	r3, [r7, #28]
    break;
 80082e4:	e01b      	b.n	800831e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80082e6:	89fb      	ldrh	r3, [r7, #14]
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2273      	movs	r2, #115	@ 0x73
 80082ec:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 fbfd 	bl	8008af0 <CODEC_IO_Write>
 80082f6:	4603      	mov	r3, r0
 80082f8:	461a      	mov	r2, r3
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	4413      	add	r3, r2
 80082fe:	61fb      	str	r3, [r7, #28]
    break; 
 8008300:	e00d      	b.n	800831e <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8008302:	89fb      	ldrh	r3, [r7, #14]
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2283      	movs	r2, #131	@ 0x83
 8008308:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fbef 	bl	8008af0 <CODEC_IO_Write>
 8008312:	4603      	mov	r3, r0
 8008314:	461a      	mov	r2, r3
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	4413      	add	r3, r2
 800831a:	61fb      	str	r3, [r7, #28]
    break; 
 800831c:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800831e:	8afb      	ldrh	r3, [r7, #22]
 8008320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008324:	d10e      	bne.n	8008344 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8008326:	89fb      	ldrh	r3, [r7, #14]
 8008328:	b2db      	uxtb	r3, r3
 800832a:	f244 0218 	movw	r2, #16408	@ 0x4018
 800832e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fbdc 	bl	8008af0 <CODEC_IO_Write>
 8008338:	4603      	mov	r3, r0
 800833a:	461a      	mov	r2, r3
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	4413      	add	r3, r2
 8008340:	61fb      	str	r3, [r7, #28]
 8008342:	e00d      	b.n	8008360 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8008344:	89fb      	ldrh	r3, [r7, #14]
 8008346:	b2db      	uxtb	r3, r3
 8008348:	f244 0210 	movw	r2, #16400	@ 0x4010
 800834c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8008350:	4618      	mov	r0, r3
 8008352:	f000 fbcd 	bl	8008af0 <CODEC_IO_Write>
 8008356:	4603      	mov	r3, r0
 8008358:	461a      	mov	r2, r3
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	4413      	add	r3, r2
 800835e:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8008360:	89fb      	ldrh	r3, [r7, #14]
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2200      	movs	r2, #0
 8008366:	f240 3102 	movw	r1, #770	@ 0x302
 800836a:	4618      	mov	r0, r3
 800836c:	f000 fbc0 	bl	8008af0 <CODEC_IO_Write>
 8008370:	4603      	mov	r3, r0
 8008372:	461a      	mov	r2, r3
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	4413      	add	r3, r2
 8008378:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800837a:	89fb      	ldrh	r3, [r7, #14]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	220a      	movs	r2, #10
 8008380:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8008384:	4618      	mov	r0, r3
 8008386:	f000 fbb3 	bl	8008af0 <CODEC_IO_Write>
 800838a:	4603      	mov	r3, r0
 800838c:	461a      	mov	r2, r3
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	4413      	add	r3, r2
 8008392:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8008394:	89fb      	ldrh	r3, [r7, #14]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2201      	movs	r2, #1
 800839a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fba6 	bl	8008af0 <CODEC_IO_Write>
 80083a4:	4603      	mov	r3, r0
 80083a6:	461a      	mov	r2, r3
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	4413      	add	r3, r2
 80083ac:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80083ae:	8b3b      	ldrh	r3, [r7, #24]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 817b 	beq.w	80086ac <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80083b6:	8b3b      	ldrh	r3, [r7, #24]
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d157      	bne.n	800846c <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80083bc:	89fb      	ldrh	r3, [r7, #14]
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083c4:	212d      	movs	r1, #45	@ 0x2d
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fb92 	bl	8008af0 <CODEC_IO_Write>
 80083cc:	4603      	mov	r3, r0
 80083ce:	461a      	mov	r2, r3
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	4413      	add	r3, r2
 80083d4:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 80083d6:	89fb      	ldrh	r3, [r7, #14]
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083de:	212e      	movs	r1, #46	@ 0x2e
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 fb85 	bl	8008af0 <CODEC_IO_Write>
 80083e6:	4603      	mov	r3, r0
 80083e8:	461a      	mov	r2, r3
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	4413      	add	r3, r2
 80083ee:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 80083f0:	4b0e      	ldr	r3, [pc, #56]	@ (800842c <wm8994_Init+0x998>)
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01b      	beq.n	8008430 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80083f8:	89fb      	ldrh	r3, [r7, #14]
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8008400:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fb73 	bl	8008af0 <CODEC_IO_Write>
 800840a:	4603      	mov	r3, r0
 800840c:	461a      	mov	r2, r3
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	4413      	add	r3, r2
 8008412:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8008414:	4b05      	ldr	r3, [pc, #20]	@ (800842c <wm8994_Init+0x998>)
 8008416:	2200      	movs	r2, #0
 8008418:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800841a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800841e:	f7f9 fb9b 	bl	8001b58 <AUDIO_IO_Delay>
 8008422:	e016      	b.n	8008452 <wm8994_Init+0x9be>
 8008424:	200013f8 	.word	0x200013f8
 8008428:	00017700 	.word	0x00017700
 800842c:	20000015 	.word	0x20000015
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8008430:	89fb      	ldrh	r3, [r7, #14]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	f248 1208 	movw	r2, #33032	@ 0x8108
 8008438:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fb57 	bl	8008af0 <CODEC_IO_Write>
 8008442:	4603      	mov	r3, r0
 8008444:	461a      	mov	r2, r3
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	4413      	add	r3, r2
 800844a:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 800844c:	2032      	movs	r0, #50	@ 0x32
 800844e:	f7f9 fb83 	bl	8001b58 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8008452:	89fb      	ldrh	r3, [r7, #14]
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2200      	movs	r2, #0
 8008458:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fb47 	bl	8008af0 <CODEC_IO_Write>
 8008462:	4603      	mov	r3, r0
 8008464:	461a      	mov	r2, r3
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	4413      	add	r3, r2
 800846a:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 800846c:	89fb      	ldrh	r3, [r7, #14]
 800846e:	b2db      	uxtb	r3, r3
 8008470:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8008474:	2103      	movs	r1, #3
 8008476:	4618      	mov	r0, r3
 8008478:	f000 fb3a 	bl	8008af0 <CODEC_IO_Write>
 800847c:	4603      	mov	r3, r0
 800847e:	461a      	mov	r2, r3
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	4413      	add	r3, r2
 8008484:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8008486:	89fb      	ldrh	r3, [r7, #14]
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2200      	movs	r2, #0
 800848c:	2122      	movs	r1, #34	@ 0x22
 800848e:	4618      	mov	r0, r3
 8008490:	f000 fb2e 	bl	8008af0 <CODEC_IO_Write>
 8008494:	4603      	mov	r3, r0
 8008496:	461a      	mov	r2, r3
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	4413      	add	r3, r2
 800849c:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800849e:	89fb      	ldrh	r3, [r7, #14]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2200      	movs	r2, #0
 80084a4:	2123      	movs	r1, #35	@ 0x23
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 fb22 	bl	8008af0 <CODEC_IO_Write>
 80084ac:	4603      	mov	r3, r0
 80084ae:	461a      	mov	r2, r3
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	4413      	add	r3, r2
 80084b4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80084b6:	89fb      	ldrh	r3, [r7, #14]
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80084be:	2136      	movs	r1, #54	@ 0x36
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 fb15 	bl	8008af0 <CODEC_IO_Write>
 80084c6:	4603      	mov	r3, r0
 80084c8:	461a      	mov	r2, r3
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	4413      	add	r3, r2
 80084ce:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80084d0:	89fb      	ldrh	r3, [r7, #14]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	f243 0203 	movw	r2, #12291	@ 0x3003
 80084d8:	2101      	movs	r1, #1
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 fb08 	bl	8008af0 <CODEC_IO_Write>
 80084e0:	4603      	mov	r3, r0
 80084e2:	461a      	mov	r2, r3
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	4413      	add	r3, r2
 80084e8:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80084ea:	8afb      	ldrh	r3, [r7, #22]
 80084ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084f0:	d10d      	bne.n	800850e <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80084f2:	89fb      	ldrh	r3, [r7, #14]
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	f240 2205 	movw	r2, #517	@ 0x205
 80084fa:	2151      	movs	r1, #81	@ 0x51
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 faf7 	bl	8008af0 <CODEC_IO_Write>
 8008502:	4603      	mov	r3, r0
 8008504:	461a      	mov	r2, r3
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	61fb      	str	r3, [r7, #28]
 800850c:	e00b      	b.n	8008526 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 800850e:	89fb      	ldrh	r3, [r7, #14]
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2205      	movs	r2, #5
 8008514:	2151      	movs	r1, #81	@ 0x51
 8008516:	4618      	mov	r0, r3
 8008518:	f000 faea 	bl	8008af0 <CODEC_IO_Write>
 800851c:	4603      	mov	r3, r0
 800851e:	461a      	mov	r2, r3
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	4413      	add	r3, r2
 8008524:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8008526:	8b7b      	ldrh	r3, [r7, #26]
 8008528:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 800852c:	f043 0303 	orr.w	r3, r3, #3
 8008530:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8008532:	89fb      	ldrh	r3, [r7, #14]
 8008534:	b2db      	uxtb	r3, r3
 8008536:	8b7a      	ldrh	r2, [r7, #26]
 8008538:	2101      	movs	r1, #1
 800853a:	4618      	mov	r0, r3
 800853c:	f000 fad8 	bl	8008af0 <CODEC_IO_Write>
 8008540:	4603      	mov	r3, r0
 8008542:	461a      	mov	r2, r3
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	4413      	add	r3, r2
 8008548:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 800854a:	89fb      	ldrh	r3, [r7, #14]
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2222      	movs	r2, #34	@ 0x22
 8008550:	2160      	movs	r1, #96	@ 0x60
 8008552:	4618      	mov	r0, r3
 8008554:	f000 facc 	bl	8008af0 <CODEC_IO_Write>
 8008558:	4603      	mov	r3, r0
 800855a:	461a      	mov	r2, r3
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	4413      	add	r3, r2
 8008560:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8008562:	89fb      	ldrh	r3, [r7, #14]
 8008564:	b2db      	uxtb	r3, r3
 8008566:	f649 7225 	movw	r2, #40741	@ 0x9f25
 800856a:	214c      	movs	r1, #76	@ 0x4c
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fabf 	bl	8008af0 <CODEC_IO_Write>
 8008572:	4603      	mov	r3, r0
 8008574:	461a      	mov	r2, r3
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	4413      	add	r3, r2
 800857a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 800857c:	200f      	movs	r0, #15
 800857e:	f7f9 faeb 	bl	8001b58 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8008582:	89fb      	ldrh	r3, [r7, #14]
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2201      	movs	r2, #1
 8008588:	212d      	movs	r1, #45	@ 0x2d
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fab0 	bl	8008af0 <CODEC_IO_Write>
 8008590:	4603      	mov	r3, r0
 8008592:	461a      	mov	r2, r3
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	4413      	add	r3, r2
 8008598:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800859a:	89fb      	ldrh	r3, [r7, #14]
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2201      	movs	r2, #1
 80085a0:	212e      	movs	r1, #46	@ 0x2e
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 faa4 	bl	8008af0 <CODEC_IO_Write>
 80085a8:	4603      	mov	r3, r0
 80085aa:	461a      	mov	r2, r3
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	4413      	add	r3, r2
 80085b0:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80085b2:	89fb      	ldrh	r3, [r7, #14]
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	f44f 724c 	mov.w	r2, #816	@ 0x330
 80085ba:	2103      	movs	r1, #3
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 fa97 	bl	8008af0 <CODEC_IO_Write>
 80085c2:	4603      	mov	r3, r0
 80085c4:	461a      	mov	r2, r3
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	4413      	add	r3, r2
 80085ca:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 80085cc:	89fb      	ldrh	r3, [r7, #14]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2233      	movs	r2, #51	@ 0x33
 80085d2:	2154      	movs	r1, #84	@ 0x54
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fa8b 	bl	8008af0 <CODEC_IO_Write>
 80085da:	4603      	mov	r3, r0
 80085dc:	461a      	mov	r2, r3
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	4413      	add	r3, r2
 80085e2:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 80085e4:	f240 1001 	movw	r0, #257	@ 0x101
 80085e8:	f7f9 fab6 	bl	8001b58 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80085ec:	89fb      	ldrh	r3, [r7, #14]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	22ee      	movs	r2, #238	@ 0xee
 80085f2:	2160      	movs	r1, #96	@ 0x60
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 fa7b 	bl	8008af0 <CODEC_IO_Write>
 80085fa:	4603      	mov	r3, r0
 80085fc:	461a      	mov	r2, r3
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	4413      	add	r3, r2
 8008602:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8008604:	89fb      	ldrh	r3, [r7, #14]
 8008606:	b2db      	uxtb	r3, r3
 8008608:	22c0      	movs	r2, #192	@ 0xc0
 800860a:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fa6e 	bl	8008af0 <CODEC_IO_Write>
 8008614:	4603      	mov	r3, r0
 8008616:	461a      	mov	r2, r3
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	4413      	add	r3, r2
 800861c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800861e:	89fb      	ldrh	r3, [r7, #14]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	22c0      	movs	r2, #192	@ 0xc0
 8008624:	f240 6111 	movw	r1, #1553	@ 0x611
 8008628:	4618      	mov	r0, r3
 800862a:	f000 fa61 	bl	8008af0 <CODEC_IO_Write>
 800862e:	4603      	mov	r3, r0
 8008630:	461a      	mov	r2, r3
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4413      	add	r3, r2
 8008636:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8008638:	89fb      	ldrh	r3, [r7, #14]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2210      	movs	r2, #16
 800863e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8008642:	4618      	mov	r0, r3
 8008644:	f000 fa54 	bl	8008af0 <CODEC_IO_Write>
 8008648:	4603      	mov	r3, r0
 800864a:	461a      	mov	r2, r3
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	4413      	add	r3, r2
 8008650:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8008652:	89fb      	ldrh	r3, [r7, #14]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	22c0      	movs	r2, #192	@ 0xc0
 8008658:	f240 6112 	movw	r1, #1554	@ 0x612
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fa47 	bl	8008af0 <CODEC_IO_Write>
 8008662:	4603      	mov	r3, r0
 8008664:	461a      	mov	r2, r3
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	4413      	add	r3, r2
 800866a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 800866c:	89fb      	ldrh	r3, [r7, #14]
 800866e:	b2db      	uxtb	r3, r3
 8008670:	22c0      	movs	r2, #192	@ 0xc0
 8008672:	f240 6113 	movw	r1, #1555	@ 0x613
 8008676:	4618      	mov	r0, r3
 8008678:	f000 fa3a 	bl	8008af0 <CODEC_IO_Write>
 800867c:	4603      	mov	r3, r0
 800867e:	461a      	mov	r2, r3
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	4413      	add	r3, r2
 8008684:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8008686:	89fb      	ldrh	r3, [r7, #14]
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2210      	movs	r2, #16
 800868c:	f240 4122 	movw	r1, #1058	@ 0x422
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fa2d 	bl	8008af0 <CODEC_IO_Write>
 8008696:	4603      	mov	r3, r0
 8008698:	461a      	mov	r2, r3
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	4413      	add	r3, r2
 800869e:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80086a0:	7afa      	ldrb	r2, [r7, #11]
 80086a2:	89fb      	ldrh	r3, [r7, #14]
 80086a4:	4611      	mov	r1, r2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 f8b0 	bl	800880c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80086ac:	8afb      	ldrh	r3, [r7, #22]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 80a6 	beq.w	8008800 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80086b4:	8afb      	ldrh	r3, [r7, #22]
 80086b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ba:	d003      	beq.n	80086c4 <wm8994_Init+0xc30>
 80086bc:	8afb      	ldrh	r3, [r7, #22]
 80086be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086c2:	d12b      	bne.n	800871c <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80086c4:	8b7b      	ldrh	r3, [r7, #26]
 80086c6:	f043 0313 	orr.w	r3, r3, #19
 80086ca:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80086cc:	89fb      	ldrh	r3, [r7, #14]
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	8b7a      	ldrh	r2, [r7, #26]
 80086d2:	2101      	movs	r1, #1
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 fa0b 	bl	8008af0 <CODEC_IO_Write>
 80086da:	4603      	mov	r3, r0
 80086dc:	461a      	mov	r2, r3
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	4413      	add	r3, r2
 80086e2:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80086e4:	89fb      	ldrh	r3, [r7, #14]
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2202      	movs	r2, #2
 80086ea:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 f9fe 	bl	8008af0 <CODEC_IO_Write>
 80086f4:	4603      	mov	r3, r0
 80086f6:	461a      	mov	r2, r3
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	4413      	add	r3, r2
 80086fc:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80086fe:	89fb      	ldrh	r3, [r7, #14]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8008706:	f240 4111 	movw	r1, #1041	@ 0x411
 800870a:	4618      	mov	r0, r3
 800870c:	f000 f9f0 	bl	8008af0 <CODEC_IO_Write>
 8008710:	4603      	mov	r3, r0
 8008712:	461a      	mov	r2, r3
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	4413      	add	r3, r2
 8008718:	61fb      	str	r3, [r7, #28]
 800871a:	e06b      	b.n	80087f4 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800871c:	8afb      	ldrh	r3, [r7, #22]
 800871e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008722:	d139      	bne.n	8008798 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8008724:	8b7b      	ldrh	r3, [r7, #26]
 8008726:	f043 0313 	orr.w	r3, r3, #19
 800872a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800872c:	89fb      	ldrh	r3, [r7, #14]
 800872e:	b2db      	uxtb	r3, r3
 8008730:	8b7a      	ldrh	r2, [r7, #26]
 8008732:	2101      	movs	r1, #1
 8008734:	4618      	mov	r0, r3
 8008736:	f000 f9db 	bl	8008af0 <CODEC_IO_Write>
 800873a:	4603      	mov	r3, r0
 800873c:	461a      	mov	r2, r3
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	4413      	add	r3, r2
 8008742:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8008744:	89fb      	ldrh	r3, [r7, #14]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2202      	movs	r2, #2
 800874a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f9ce 	bl	8008af0 <CODEC_IO_Write>
 8008754:	4603      	mov	r3, r0
 8008756:	461a      	mov	r2, r3
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	4413      	add	r3, r2
 800875c:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800875e:	89fb      	ldrh	r3, [r7, #14]
 8008760:	b2db      	uxtb	r3, r3
 8008762:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8008766:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800876a:	4618      	mov	r0, r3
 800876c:	f000 f9c0 	bl	8008af0 <CODEC_IO_Write>
 8008770:	4603      	mov	r3, r0
 8008772:	461a      	mov	r2, r3
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	4413      	add	r3, r2
 8008778:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800877a:	89fb      	ldrh	r3, [r7, #14]
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8008782:	f240 4111 	movw	r1, #1041	@ 0x411
 8008786:	4618      	mov	r0, r3
 8008788:	f000 f9b2 	bl	8008af0 <CODEC_IO_Write>
 800878c:	4603      	mov	r3, r0
 800878e:	461a      	mov	r2, r3
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	4413      	add	r3, r2
 8008794:	61fb      	str	r3, [r7, #28]
 8008796:	e02d      	b.n	80087f4 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8008798:	8afb      	ldrh	r3, [r7, #22]
 800879a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800879e:	d003      	beq.n	80087a8 <wm8994_Init+0xd14>
 80087a0:	8afb      	ldrh	r3, [r7, #22]
 80087a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a6:	d125      	bne.n	80087f4 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80087a8:	89fb      	ldrh	r3, [r7, #14]
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	220b      	movs	r2, #11
 80087ae:	2118      	movs	r1, #24
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 f99d 	bl	8008af0 <CODEC_IO_Write>
 80087b6:	4603      	mov	r3, r0
 80087b8:	461a      	mov	r2, r3
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	4413      	add	r3, r2
 80087be:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 80087c0:	89fb      	ldrh	r3, [r7, #14]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	220b      	movs	r2, #11
 80087c6:	211a      	movs	r1, #26
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 f991 	bl	8008af0 <CODEC_IO_Write>
 80087ce:	4603      	mov	r3, r0
 80087d0:	461a      	mov	r2, r3
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	4413      	add	r3, r2
 80087d6:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80087d8:	89fb      	ldrh	r3, [r7, #14]
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80087e0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 f983 	bl	8008af0 <CODEC_IO_Write>
 80087ea:	4603      	mov	r3, r0
 80087ec:	461a      	mov	r2, r3
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	4413      	add	r3, r2
 80087f2:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80087f4:	7afa      	ldrb	r2, [r7, #11]
 80087f6:	89fb      	ldrh	r3, [r7, #14]
 80087f8:	4611      	mov	r1, r2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 f806 	bl	800880c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8008800:	69fb      	ldr	r3, [r7, #28]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3720      	adds	r7, #32
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop

0800880c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	4603      	mov	r3, r0
 8008814:	460a      	mov	r2, r1
 8008816:	80fb      	strh	r3, [r7, #6]
 8008818:	4613      	mov	r3, r2
 800881a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8008820:	797b      	ldrb	r3, [r7, #5]
 8008822:	2b64      	cmp	r3, #100	@ 0x64
 8008824:	d80b      	bhi.n	800883e <wm8994_SetVolume+0x32>
 8008826:	797a      	ldrb	r2, [r7, #5]
 8008828:	4613      	mov	r3, r2
 800882a:	019b      	lsls	r3, r3, #6
 800882c:	1a9b      	subs	r3, r3, r2
 800882e:	4a86      	ldr	r2, [pc, #536]	@ (8008a48 <wm8994_SetVolume+0x23c>)
 8008830:	fb82 1203 	smull	r1, r2, r2, r3
 8008834:	1152      	asrs	r2, r2, #5
 8008836:	17db      	asrs	r3, r3, #31
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	b2db      	uxtb	r3, r3
 800883c:	e000      	b.n	8008840 <wm8994_SetVolume+0x34>
 800883e:	2364      	movs	r3, #100	@ 0x64
 8008840:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8008842:	4b82      	ldr	r3, [pc, #520]	@ (8008a4c <wm8994_SetVolume+0x240>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 809b 	beq.w	8008982 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 800884c:	7afb      	ldrb	r3, [r7, #11]
 800884e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008850:	d93d      	bls.n	80088ce <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8008852:	88fb      	ldrh	r3, [r7, #6]
 8008854:	2100      	movs	r1, #0
 8008856:	4618      	mov	r0, r3
 8008858:	f000 f8fc 	bl	8008a54 <wm8994_SetMute>
 800885c:	4602      	mov	r2, r0
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	4413      	add	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8008864:	88fb      	ldrh	r3, [r7, #6]
 8008866:	b2db      	uxtb	r3, r3
 8008868:	f240 127f 	movw	r2, #383	@ 0x17f
 800886c:	211c      	movs	r1, #28
 800886e:	4618      	mov	r0, r3
 8008870:	f000 f93e 	bl	8008af0 <CODEC_IO_Write>
 8008874:	4603      	mov	r3, r0
 8008876:	461a      	mov	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4413      	add	r3, r2
 800887c:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 800887e:	88fb      	ldrh	r3, [r7, #6]
 8008880:	b2db      	uxtb	r3, r3
 8008882:	f240 127f 	movw	r2, #383	@ 0x17f
 8008886:	211d      	movs	r1, #29
 8008888:	4618      	mov	r0, r3
 800888a:	f000 f931 	bl	8008af0 <CODEC_IO_Write>
 800888e:	4603      	mov	r3, r0
 8008890:	461a      	mov	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4413      	add	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8008898:	88fb      	ldrh	r3, [r7, #6]
 800889a:	b2db      	uxtb	r3, r3
 800889c:	f240 127f 	movw	r2, #383	@ 0x17f
 80088a0:	2126      	movs	r1, #38	@ 0x26
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 f924 	bl	8008af0 <CODEC_IO_Write>
 80088a8:	4603      	mov	r3, r0
 80088aa:	461a      	mov	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80088b2:	88fb      	ldrh	r3, [r7, #6]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	f240 127f 	movw	r2, #383	@ 0x17f
 80088ba:	2127      	movs	r1, #39	@ 0x27
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 f917 	bl	8008af0 <CODEC_IO_Write>
 80088c2:	4603      	mov	r3, r0
 80088c4:	461a      	mov	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	4413      	add	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	e059      	b.n	8008982 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80088ce:	797b      	ldrb	r3, [r7, #5]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d109      	bne.n	80088e8 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80088d4:	88fb      	ldrh	r3, [r7, #6]
 80088d6:	2101      	movs	r1, #1
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 f8bb 	bl	8008a54 <wm8994_SetMute>
 80088de:	4602      	mov	r2, r0
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	60fb      	str	r3, [r7, #12]
 80088e6:	e04c      	b.n	8008982 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80088e8:	88fb      	ldrh	r3, [r7, #6]
 80088ea:	2100      	movs	r1, #0
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 f8b1 	bl	8008a54 <wm8994_SetMute>
 80088f2:	4602      	mov	r2, r0
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4413      	add	r3, r2
 80088f8:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80088fa:	88fb      	ldrh	r3, [r7, #6]
 80088fc:	b2d8      	uxtb	r0, r3
 80088fe:	7afb      	ldrb	r3, [r7, #11]
 8008900:	b21b      	sxth	r3, r3
 8008902:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8008906:	b21b      	sxth	r3, r3
 8008908:	b29b      	uxth	r3, r3
 800890a:	461a      	mov	r2, r3
 800890c:	211c      	movs	r1, #28
 800890e:	f000 f8ef 	bl	8008af0 <CODEC_IO_Write>
 8008912:	4603      	mov	r3, r0
 8008914:	461a      	mov	r2, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	4413      	add	r3, r2
 800891a:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	b2d8      	uxtb	r0, r3
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	b21b      	sxth	r3, r3
 8008924:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8008928:	b21b      	sxth	r3, r3
 800892a:	b29b      	uxth	r3, r3
 800892c:	461a      	mov	r2, r3
 800892e:	211d      	movs	r1, #29
 8008930:	f000 f8de 	bl	8008af0 <CODEC_IO_Write>
 8008934:	4603      	mov	r3, r0
 8008936:	461a      	mov	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	4413      	add	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800893e:	88fb      	ldrh	r3, [r7, #6]
 8008940:	b2d8      	uxtb	r0, r3
 8008942:	7afb      	ldrb	r3, [r7, #11]
 8008944:	b21b      	sxth	r3, r3
 8008946:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800894a:	b21b      	sxth	r3, r3
 800894c:	b29b      	uxth	r3, r3
 800894e:	461a      	mov	r2, r3
 8008950:	2126      	movs	r1, #38	@ 0x26
 8008952:	f000 f8cd 	bl	8008af0 <CODEC_IO_Write>
 8008956:	4603      	mov	r3, r0
 8008958:	461a      	mov	r2, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	4413      	add	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8008960:	88fb      	ldrh	r3, [r7, #6]
 8008962:	b2d8      	uxtb	r0, r3
 8008964:	7afb      	ldrb	r3, [r7, #11]
 8008966:	b21b      	sxth	r3, r3
 8008968:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800896c:	b21b      	sxth	r3, r3
 800896e:	b29b      	uxth	r3, r3
 8008970:	461a      	mov	r2, r3
 8008972:	2127      	movs	r1, #39	@ 0x27
 8008974:	f000 f8bc 	bl	8008af0 <CODEC_IO_Write>
 8008978:	4603      	mov	r3, r0
 800897a:	461a      	mov	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4413      	add	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8008982:	4b33      	ldr	r3, [pc, #204]	@ (8008a50 <wm8994_SetVolume+0x244>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d059      	beq.n	8008a3e <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800898a:	797b      	ldrb	r3, [r7, #5]
 800898c:	2b63      	cmp	r3, #99	@ 0x63
 800898e:	d80c      	bhi.n	80089aa <wm8994_SetVolume+0x19e>
 8008990:	797a      	ldrb	r2, [r7, #5]
 8008992:	4613      	mov	r3, r2
 8008994:	011b      	lsls	r3, r3, #4
 8008996:	1a9b      	subs	r3, r3, r2
 8008998:	011b      	lsls	r3, r3, #4
 800899a:	4a2b      	ldr	r2, [pc, #172]	@ (8008a48 <wm8994_SetVolume+0x23c>)
 800899c:	fb82 1203 	smull	r1, r2, r2, r3
 80089a0:	1152      	asrs	r2, r2, #5
 80089a2:	17db      	asrs	r3, r3, #31
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	e000      	b.n	80089ac <wm8994_SetVolume+0x1a0>
 80089aa:	23ef      	movs	r3, #239	@ 0xef
 80089ac:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80089ae:	88fb      	ldrh	r3, [r7, #6]
 80089b0:	b2d8      	uxtb	r0, r3
 80089b2:	7afb      	ldrb	r3, [r7, #11]
 80089b4:	b21b      	sxth	r3, r3
 80089b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089ba:	b21b      	sxth	r3, r3
 80089bc:	b29b      	uxth	r3, r3
 80089be:	461a      	mov	r2, r3
 80089c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80089c4:	f000 f894 	bl	8008af0 <CODEC_IO_Write>
 80089c8:	4603      	mov	r3, r0
 80089ca:	461a      	mov	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80089d2:	88fb      	ldrh	r3, [r7, #6]
 80089d4:	b2d8      	uxtb	r0, r3
 80089d6:	7afb      	ldrb	r3, [r7, #11]
 80089d8:	b21b      	sxth	r3, r3
 80089da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089de:	b21b      	sxth	r3, r3
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	461a      	mov	r2, r3
 80089e4:	f240 4101 	movw	r1, #1025	@ 0x401
 80089e8:	f000 f882 	bl	8008af0 <CODEC_IO_Write>
 80089ec:	4603      	mov	r3, r0
 80089ee:	461a      	mov	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	4413      	add	r3, r2
 80089f4:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80089f6:	88fb      	ldrh	r3, [r7, #6]
 80089f8:	b2d8      	uxtb	r0, r3
 80089fa:	7afb      	ldrb	r3, [r7, #11]
 80089fc:	b21b      	sxth	r3, r3
 80089fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a02:	b21b      	sxth	r3, r3
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	461a      	mov	r2, r3
 8008a08:	f240 4104 	movw	r1, #1028	@ 0x404
 8008a0c:	f000 f870 	bl	8008af0 <CODEC_IO_Write>
 8008a10:	4603      	mov	r3, r0
 8008a12:	461a      	mov	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4413      	add	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8008a1a:	88fb      	ldrh	r3, [r7, #6]
 8008a1c:	b2d8      	uxtb	r0, r3
 8008a1e:	7afb      	ldrb	r3, [r7, #11]
 8008a20:	b21b      	sxth	r3, r3
 8008a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a26:	b21b      	sxth	r3, r3
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f240 4105 	movw	r1, #1029	@ 0x405
 8008a30:	f000 f85e 	bl	8008af0 <CODEC_IO_Write>
 8008a34:	4603      	mov	r3, r0
 8008a36:	461a      	mov	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	51eb851f 	.word	0x51eb851f
 8008a4c:	200013f4 	.word	0x200013f4
 8008a50:	200013f8 	.word	0x200013f8

08008a54 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	6039      	str	r1, [r7, #0]
 8008a5e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8008a64:	4b21      	ldr	r3, [pc, #132]	@ (8008aec <wm8994_SetMute+0x98>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d039      	beq.n	8008ae0 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d11c      	bne.n	8008aac <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8008a72:	88fb      	ldrh	r3, [r7, #6]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a7a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 f836 	bl	8008af0 <CODEC_IO_Write>
 8008a84:	4603      	mov	r3, r0
 8008a86:	461a      	mov	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8008a8e:	88fb      	ldrh	r3, [r7, #6]
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a96:	f240 4122 	movw	r1, #1058	@ 0x422
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 f828 	bl	8008af0 <CODEC_IO_Write>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]
 8008aaa:	e019      	b.n	8008ae0 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8008aac:	88fb      	ldrh	r3, [r7, #6]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2210      	movs	r2, #16
 8008ab2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 f81a 	bl	8008af0 <CODEC_IO_Write>
 8008abc:	4603      	mov	r3, r0
 8008abe:	461a      	mov	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8008ac6:	88fb      	ldrh	r3, [r7, #6]
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2210      	movs	r2, #16
 8008acc:	f240 4122 	movw	r1, #1058	@ 0x422
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 f80d 	bl	8008af0 <CODEC_IO_Write>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	461a      	mov	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4413      	add	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	200013f4 	.word	0x200013f4

08008af0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	4603      	mov	r3, r0
 8008af8:	71fb      	strb	r3, [r7, #7]
 8008afa:	460b      	mov	r3, r1
 8008afc:	80bb      	strh	r3, [r7, #4]
 8008afe:	4613      	mov	r3, r2
 8008b00:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8008b06:	887a      	ldrh	r2, [r7, #2]
 8008b08:	88b9      	ldrh	r1, [r7, #4]
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7f8 fff9 	bl	8001b04 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	b2db      	uxtb	r3, r3
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <memset>:
 8008b1e:	4402      	add	r2, r0
 8008b20:	4603      	mov	r3, r0
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d100      	bne.n	8008b28 <memset+0xa>
 8008b26:	4770      	bx	lr
 8008b28:	f803 1b01 	strb.w	r1, [r3], #1
 8008b2c:	e7f9      	b.n	8008b22 <memset+0x4>
	...

08008b30 <__libc_init_array>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	4d0d      	ldr	r5, [pc, #52]	@ (8008b68 <__libc_init_array+0x38>)
 8008b34:	4c0d      	ldr	r4, [pc, #52]	@ (8008b6c <__libc_init_array+0x3c>)
 8008b36:	1b64      	subs	r4, r4, r5
 8008b38:	10a4      	asrs	r4, r4, #2
 8008b3a:	2600      	movs	r6, #0
 8008b3c:	42a6      	cmp	r6, r4
 8008b3e:	d109      	bne.n	8008b54 <__libc_init_array+0x24>
 8008b40:	4d0b      	ldr	r5, [pc, #44]	@ (8008b70 <__libc_init_array+0x40>)
 8008b42:	4c0c      	ldr	r4, [pc, #48]	@ (8008b74 <__libc_init_array+0x44>)
 8008b44:	f000 f826 	bl	8008b94 <_init>
 8008b48:	1b64      	subs	r4, r4, r5
 8008b4a:	10a4      	asrs	r4, r4, #2
 8008b4c:	2600      	movs	r6, #0
 8008b4e:	42a6      	cmp	r6, r4
 8008b50:	d105      	bne.n	8008b5e <__libc_init_array+0x2e>
 8008b52:	bd70      	pop	{r4, r5, r6, pc}
 8008b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b58:	4798      	blx	r3
 8008b5a:	3601      	adds	r6, #1
 8008b5c:	e7ee      	b.n	8008b3c <__libc_init_array+0xc>
 8008b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b62:	4798      	blx	r3
 8008b64:	3601      	adds	r6, #1
 8008b66:	e7f2      	b.n	8008b4e <__libc_init_array+0x1e>
 8008b68:	0800a6cc 	.word	0x0800a6cc
 8008b6c:	0800a6cc 	.word	0x0800a6cc
 8008b70:	0800a6cc 	.word	0x0800a6cc
 8008b74:	0800a6d0 	.word	0x0800a6d0

08008b78 <memcpy>:
 8008b78:	440a      	add	r2, r1
 8008b7a:	4291      	cmp	r1, r2
 8008b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b80:	d100      	bne.n	8008b84 <memcpy+0xc>
 8008b82:	4770      	bx	lr
 8008b84:	b510      	push	{r4, lr}
 8008b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b8e:	4291      	cmp	r1, r2
 8008b90:	d1f9      	bne.n	8008b86 <memcpy+0xe>
 8008b92:	bd10      	pop	{r4, pc}

08008b94 <_init>:
 8008b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b96:	bf00      	nop
 8008b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9a:	bc08      	pop	{r3}
 8008b9c:	469e      	mov	lr, r3
 8008b9e:	4770      	bx	lr

08008ba0 <_fini>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	bf00      	nop
 8008ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba6:	bc08      	pop	{r3}
 8008ba8:	469e      	mov	lr, r3
 8008baa:	4770      	bx	lr
