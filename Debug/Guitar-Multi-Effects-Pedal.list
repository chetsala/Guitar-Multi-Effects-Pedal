
Guitar-Multi-Effects-Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c5c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b40  08008e24  08008e24  00009e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a964  0800a964  0000c018  2**0
                  CONTENTS
  4 .ARM          00000008  0800a964  0800a964  0000b964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a96c  0800a96c  0000c018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a96c  0800a96c  0000b96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a970  0800a970  0000b970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  0800a974  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018ec  20000018  0800a98c  0000c018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001904  0800a98c  0000c904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000206f1  00000000  00000000  0000c048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004041  00000000  00000000  0002c739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c50  00000000  00000000  00030780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001622  00000000  00000000  000323d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005598  00000000  00000000  000339f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d94  00000000  00000000  00038f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001023a7  00000000  00000000  0005cd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f0c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007890  00000000  00000000  0015f108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00166998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008e0c 	.word	0x08008e0c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	08008e0c 	.word	0x08008e0c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <Display_Init>:




void Display_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
    // Initialize the display hardware
    BSP_LCD_Init();
 80004fc:	f001 fbde 	bl	8001cbc <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000500:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8000504:	2000      	movs	r0, #0
 8000506:	f001 fc71 	bl	8001dec <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(0);
 800050a:	2000      	movs	r0, #0
 800050c:	f001 fcce 	bl	8001eac <BSP_LCD_SelectLayer>

    // Clear the display with a default color
    BSP_LCD_Clear(LCD_COLOR_WHITE); // Clear the LCD display
 8000510:	f04f 30ff 	mov.w	r0, #4294967295
 8000514:	f001 fd26 	bl	8001f64 <BSP_LCD_Clear>
    BSP_LCD_DisplayOn();
 8000518:	f001 fea0 	bl	800225c <BSP_LCD_DisplayOn>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800051c:	f04f 30ff 	mov.w	r0, #4294967295
 8000520:	f001 fcec 	bl	8001efc <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000524:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000528:	f001 fcd0 	bl	8001ecc <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24); //set the font of the text
 800052c:	4802      	ldr	r0, [pc, #8]	@ (8000538 <Display_Init+0x40>)
 800052e:	f001 fcff 	bl	8001f30 <BSP_LCD_SetFont>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000004 	.word	0x20000004

0800053c <Display_Draw_Text>:


void Display_Draw_Text(const char *text, uint16_t x, uint16_t y)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	807b      	strh	r3, [r7, #2]
 8000548:	4613      	mov	r3, r2
 800054a:	803b      	strh	r3, [r7, #0]

    BSP_LCD_DisplayStringAt(x, y, (uint8_t *)text, CENTER_MODE);
 800054c:	8839      	ldrh	r1, [r7, #0]
 800054e:	8878      	ldrh	r0, [r7, #2]
 8000550:	2301      	movs	r3, #1
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	f001 fd72 	bl	800203c <BSP_LCD_DisplayStringAt>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f002 fa48 	bl	80029f8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f87a 	bl	8000660 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800056c:	f000 f8e8 	bl	8000740 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 fbd4 	bl	8000d1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000574:	f000 fb5e 	bl	8000c34 <MX_DMA_Init>
  MX_SAI2_Init();
 8000578:	f000 fa30 	bl	80009dc <MX_SAI2_Init>
  MX_USART1_UART_Init();
 800057c:	f000 fb2a 	bl	8000bd4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000580:	f000 fad4 	bl	8000b2c <MX_TIM1_Init>
  MX_DMA2D_Init();
 8000584:	f000 f906 	bl	8000794 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8000588:	f000 f976 	bl	8000878 <MX_LTDC_Init>
  MX_FMC_Init();
 800058c:	f000 fb78 	bl	8000c80 <MX_FMC_Init>
  MX_I2C3_Init();
 8000590:	f000 f932 	bl	80007f8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  Display_Init();
 8000594:	f7ff ffb0 	bl	80004f8 <Display_Init>




  wm8994_Reset(AUDIO_I2C_ADDRESS);
 8000598:	2034      	movs	r0, #52	@ 0x34
 800059a:	f008 fbd3 	bl	8008d44 <wm8994_Reset>

  if (wm8994_Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_HEADPHONE , 80, SAI_AUDIO_FREQUENCY_48K) == 0){
 800059e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80005a2:	2250      	movs	r2, #80	@ 0x50
 80005a4:	f240 3102 	movw	r1, #770	@ 0x302
 80005a8:	2034      	movs	r0, #52	@ 0x34
 80005aa:	f007 fb9d 	bl	8007ce8 <wm8994_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d105      	bne.n	80005c0 <main+0x60>
	  Display_Draw_Text("Codec Initialized", 0, 20);
 80005b4:	2214      	movs	r2, #20
 80005b6:	2100      	movs	r1, #0
 80005b8:	4820      	ldr	r0, [pc, #128]	@ (800063c <main+0xdc>)
 80005ba:	f7ff ffbf 	bl	800053c <Display_Draw_Text>
 80005be:	e004      	b.n	80005ca <main+0x6a>
  } else {
	  Display_Draw_Text("Codec Initialized", 0, 20);
 80005c0:	2214      	movs	r2, #20
 80005c2:	2100      	movs	r1, #0
 80005c4:	481d      	ldr	r0, [pc, #116]	@ (800063c <main+0xdc>)
 80005c6:	f7ff ffb9 	bl	800053c <Display_Draw_Text>
  }


  if (BSP_AUDIO_OUT_Play(output_buffer, BUFFER_SIZE / 4) == AUDIO_OK) {
 80005ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ce:	481c      	ldr	r0, [pc, #112]	@ (8000640 <main+0xe0>)
 80005d0:	f001 fab8 	bl	8001b44 <BSP_AUDIO_OUT_Play>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d105      	bne.n	80005e6 <main+0x86>
	  Display_Draw_Text("Codec is playing", 0, 40);
 80005da:	2228      	movs	r2, #40	@ 0x28
 80005dc:	2100      	movs	r1, #0
 80005de:	4819      	ldr	r0, [pc, #100]	@ (8000644 <main+0xe4>)
 80005e0:	f7ff ffac 	bl	800053c <Display_Draw_Text>
 80005e4:	e004      	b.n	80005f0 <main+0x90>
  	}else {
  	  Display_Draw_Text("Codec not playing", 0, 40);
 80005e6:	2228      	movs	r2, #40	@ 0x28
 80005e8:	2100      	movs	r1, #0
 80005ea:	4817      	ldr	r0, [pc, #92]	@ (8000648 <main+0xe8>)
 80005ec:	f7ff ffa6 	bl	800053c <Display_Draw_Text>
    }


  if ( BSP_AUDIO_IN_Record(*input_buffer, BUFFER_SIZE / 4) == AUDIO_OK) {
 80005f0:	4b16      	ldr	r3, [pc, #88]	@ (800064c <main+0xec>)
 80005f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fb1c 	bl	8001c38 <BSP_AUDIO_IN_Record>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d105      	bne.n	8000612 <main+0xb2>
	  Display_Draw_Text("Codec is recording", 0, 60);
 8000606:	223c      	movs	r2, #60	@ 0x3c
 8000608:	2100      	movs	r1, #0
 800060a:	4811      	ldr	r0, [pc, #68]	@ (8000650 <main+0xf0>)
 800060c:	f7ff ff96 	bl	800053c <Display_Draw_Text>
 8000610:	e004      	b.n	800061c <main+0xbc>
  	}else {
  	  Display_Draw_Text("Codec is not recording", 0, 60);
 8000612:	223c      	movs	r2, #60	@ 0x3c
 8000614:	2100      	movs	r1, #0
 8000616:	480f      	ldr	r0, [pc, #60]	@ (8000654 <main+0xf4>)
 8000618:	f7ff ff90 	bl	800053c <Display_Draw_Text>




  // Start audio input (SAI Receive) and output (SAI Transmit) using DMA
  HAL_SAI_Receive_DMA(&hsai_In, (uint8_t *)input_buffer, BUFFER_SIZE);
 800061c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000620:	490a      	ldr	r1, [pc, #40]	@ (800064c <main+0xec>)
 8000622:	480d      	ldr	r0, [pc, #52]	@ (8000658 <main+0xf8>)
 8000624:	f006 f8a2 	bl	800676c <HAL_SAI_Receive_DMA>
  HAL_SAI_Transmit_DMA(&hsai_Out, (uint8_t *)output_buffer, BUFFER_SIZE);
 8000628:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800062c:	4904      	ldr	r1, [pc, #16]	@ (8000640 <main+0xe0>)
 800062e:	480b      	ldr	r0, [pc, #44]	@ (800065c <main+0xfc>)
 8000630:	f005 ffec 	bl	800660c <HAL_SAI_Transmit_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Audio_Process();
 8000634:	f000 fc02 	bl	8000e3c <Audio_Process>
 8000638:	e7fc      	b.n	8000634 <main+0xd4>
 800063a:	bf00      	nop
 800063c:	08008e24 	.word	0x08008e24
 8000640:	20000d48 	.word	0x20000d48
 8000644:	08008e38 	.word	0x08008e38
 8000648:	08008e4c 	.word	0x08008e4c
 800064c:	20000548 	.word	0x20000548
 8000650:	08008e60 	.word	0x08008e60
 8000654:	08008e74 	.word	0x08008e74
 8000658:	200000b8 	.word	0x200000b8
 800065c:	20000034 	.word	0x20000034

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	@ 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	@ 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f008 fb9f 	bl	8008db2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000684:	f004 fc2a 	bl	8004edc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	4b2b      	ldr	r3, [pc, #172]	@ (8000738 <SystemClock_Config+0xd8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a2a      	ldr	r2, [pc, #168]	@ (8000738 <SystemClock_Config+0xd8>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <SystemClock_Config+0xd8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	4b26      	ldr	r3, [pc, #152]	@ (800073c <SystemClock_Config+0xdc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a25      	ldr	r2, [pc, #148]	@ (800073c <SystemClock_Config+0xdc>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b23      	ldr	r3, [pc, #140]	@ (800073c <SystemClock_Config+0xdc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006cc:	2319      	movs	r3, #25
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80006d0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80006d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 fc5a 	bl	8004f9c <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006ee:	f000 fbc5 	bl	8000e7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f2:	f004 fc03 	bl	8004efc <HAL_PWREx_EnableOverDrive>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006fc:	f000 fbbe 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2106      	movs	r1, #6
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fee0 	bl	80054e4 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800072a:	f000 fba7 	bl	8000e7c <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	@ 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b0a2      	sub	sp, #136	@ 0x88
 8000744:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2284      	movs	r2, #132	@ 0x84
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f008 fb30 	bl	8008db2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2;
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <PeriphCommonClock_Config+0x50>)
 8000754:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000756:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800075a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800075c:	2305      	movs	r3, #5
 800075e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800076c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000770:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000772:	2300      	movs	r3, #0
 8000774:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4618      	mov	r0, r3
 800077a:	f005 f899 	bl	80058b0 <HAL_RCCEx_PeriphCLKConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8000784:	f000 fb7a 	bl	8000e7c <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3788      	adds	r7, #136	@ 0x88
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	00100008 	.word	0x00100008

08000794 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000798:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_DMA2D_Init+0x5c>)
 800079a:	4a16      	ldr	r2, [pc, #88]	@ (80007f4 <MX_DMA2D_Init+0x60>)
 800079c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_DMA2D_Init+0x5c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007a4:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_DMA2D_Init+0x5c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_DMA2D_Init+0x5c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_DMA2D_Init+0x5c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_DMA2D_Init+0x5c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_DMA2D_Init+0x5c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_DMA2D_Init+0x5c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007c8:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <MX_DMA2D_Init+0x5c>)
 80007ca:	f002 fe7f 	bl	80034cc <HAL_DMA2D_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007d4:	f000 fb52 	bl	8000e7c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007d8:	2101      	movs	r1, #1
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_DMA2D_Init+0x5c>)
 80007dc:	f002 ffd4 	bl	8003788 <HAL_DMA2D_ConfigLayer>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007e6:	f000 fb49 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000013c 	.word	0x2000013c
 80007f4:	4002b000 	.word	0x4002b000

080007f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_I2C3_Init+0x74>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <MX_I2C3_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_I2C3_Init+0x74>)
 8000804:	4a1b      	ldr	r2, [pc, #108]	@ (8000874 <MX_I2C3_Init+0x7c>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_I2C3_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_I2C3_Init+0x74>)
 8000810:	2201      	movs	r2, #1
 8000812:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_I2C3_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_I2C3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_I2C3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_I2C3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_I2C3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000832:	480e      	ldr	r0, [pc, #56]	@ (800086c <MX_I2C3_Init+0x74>)
 8000834:	f003 fba8 	bl	8003f88 <HAL_I2C_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800083e:	f000 fb1d 	bl	8000e7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4809      	ldr	r0, [pc, #36]	@ (800086c <MX_I2C3_Init+0x74>)
 8000846:	f003 fffb 	bl	8004840 <HAL_I2CEx_ConfigAnalogFilter>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000850:	f000 fb14 	bl	8000e7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000854:	2100      	movs	r1, #0
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_I2C3_Init+0x74>)
 8000858:	f004 f83d 	bl	80048d6 <HAL_I2CEx_ConfigDigitalFilter>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 fb0b 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000017c 	.word	0x2000017c
 8000870:	40005c00 	.word	0x40005c00
 8000874:	00c0eaff 	.word	0x00c0eaff

08000878 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b09a      	sub	sp, #104	@ 0x68
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800087e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000882:	2234      	movs	r2, #52	@ 0x34
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f008 fa93 	bl	8008db2 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800088c:	463b      	mov	r3, r7
 800088e:	2234      	movs	r2, #52	@ 0x34
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f008 fa8d 	bl	8008db2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000898:	4b4e      	ldr	r3, [pc, #312]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 800089a:	4a4f      	ldr	r2, [pc, #316]	@ (80009d8 <MX_LTDC_Init+0x160>)
 800089c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800089e:	4b4d      	ldr	r3, [pc, #308]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008a4:	4b4b      	ldr	r3, [pc, #300]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008aa:	4b4a      	ldr	r3, [pc, #296]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008b0:	4b48      	ldr	r3, [pc, #288]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80008b6:	4b47      	ldr	r3, [pc, #284]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80008bc:	4b45      	ldr	r3, [pc, #276]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80008be:	2203      	movs	r2, #3
 80008c0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80008c2:	4b44      	ldr	r3, [pc, #272]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80008c4:	220e      	movs	r2, #14
 80008c6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80008c8:	4b42      	ldr	r3, [pc, #264]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80008ca:	2205      	movs	r2, #5
 80008cc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80008ce:	4b41      	ldr	r3, [pc, #260]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80008d0:	f240 228e 	movw	r2, #654	@ 0x28e
 80008d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80008d6:	4b3f      	ldr	r3, [pc, #252]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80008d8:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80008dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80008de:	4b3d      	ldr	r3, [pc, #244]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80008e0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80008e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80008e6:	4b3b      	ldr	r3, [pc, #236]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80008e8:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80008ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008ee:	4b39      	ldr	r3, [pc, #228]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008f6:	4b37      	ldr	r3, [pc, #220]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008fe:	4b35      	ldr	r3, [pc, #212]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000906:	4833      	ldr	r0, [pc, #204]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 8000908:	f004 f832 	bl	8004970 <HAL_LTDC_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000912:	f000 fab3 	bl	8000e7c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000926:	2300      	movs	r3, #0
 8000928:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000936:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000938:	2305      	movs	r3, #5
 800093a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800095a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800095e:	2200      	movs	r2, #0
 8000960:	4619      	mov	r1, r3
 8000962:	481c      	ldr	r0, [pc, #112]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 8000964:	f004 f8d4 	bl	8004b10 <HAL_LTDC_ConfigLayer>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800096e:	f000 fa85 	bl	8000e7c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800098e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000992:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000994:	2305      	movs	r3, #5
 8000996:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	2201      	movs	r2, #1
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_LTDC_Init+0x15c>)
 80009be:	f004 f8a7 	bl	8004b10 <HAL_LTDC_ConfigLayer>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80009c8:	f000 fa58 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3768      	adds	r7, #104	@ 0x68
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200001d0 	.word	0x200001d0
 80009d8:	40016800 	.word	0x40016800

080009dc <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80009e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 80009e2:	4a4e      	ldr	r2, [pc, #312]	@ (8000b1c <MX_SAI2_Init+0x140>)
 80009e4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80009e6:	4b4c      	ldr	r3, [pc, #304]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80009ec:	4b4a      	ldr	r3, [pc, #296]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80009f2:	4b49      	ldr	r3, [pc, #292]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 80009f4:	2240      	movs	r2, #64	@ 0x40
 80009f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80009f8:	4b47      	ldr	r3, [pc, #284]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80009fe:	4b46      	ldr	r3, [pc, #280]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000a04:	4b44      	ldr	r3, [pc, #272]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000a0a:	4b43      	ldr	r3, [pc, #268]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000a10:	4b41      	ldr	r3, [pc, #260]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a16:	4b40      	ldr	r3, [pc, #256]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000a1c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a1e:	4a40      	ldr	r2, [pc, #256]	@ (8000b20 <MX_SAI2_Init+0x144>)
 8000a20:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a22:	4b3d      	ldr	r3, [pc, #244]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a28:	4b3b      	ldr	r3, [pc, #236]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000a34:	4b38      	ldr	r3, [pc, #224]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000a3a:	4b37      	ldr	r3, [pc, #220]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a3c:	2208      	movs	r2, #8
 8000a3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000a40:	4b35      	ldr	r3, [pc, #212]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000a46:	4b34      	ldr	r3, [pc, #208]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000a4c:	4b32      	ldr	r3, [pc, #200]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000a52:	4b31      	ldr	r3, [pc, #196]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000a58:	4b2f      	ldr	r3, [pc, #188]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000a64:	4b2c      	ldr	r3, [pc, #176]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000a70:	4829      	ldr	r0, [pc, #164]	@ (8000b18 <MX_SAI2_Init+0x13c>)
 8000a72:	f005 fc4d 	bl	8006310 <HAL_SAI_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000a7c:	f000 f9fe 	bl	8000e7c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000a80:	4b28      	ldr	r3, [pc, #160]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000a82:	4a29      	ldr	r2, [pc, #164]	@ (8000b28 <MX_SAI2_Init+0x14c>)
 8000a84:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000a86:	4b27      	ldr	r3, [pc, #156]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000a8c:	4b25      	ldr	r3, [pc, #148]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000a8e:	2203      	movs	r2, #3
 8000a90:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000a92:	4b24      	ldr	r3, [pc, #144]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000a94:	2240      	movs	r2, #64	@ 0x40
 8000a96:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000a98:	4b22      	ldr	r3, [pc, #136]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000abc:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000ace:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000ad0:	2208      	movs	r2, #8
 8000ad2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ada:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000b04:	4807      	ldr	r0, [pc, #28]	@ (8000b24 <MX_SAI2_Init+0x148>)
 8000b06:	f005 fc03 	bl	8006310 <HAL_SAI_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000b10:	f000 f9b4 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000278 	.word	0x20000278
 8000b1c:	40015c04 	.word	0x40015c04
 8000b20:	0002ee00 	.word	0x0002ee00
 8000b24:	200002fc 	.word	0x200002fc
 8000b28:	40015c24 	.word	0x40015c24

08000b2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b4a:	4b20      	ldr	r3, [pc, #128]	@ (8000bcc <MX_TIM1_Init+0xa0>)
 8000b4c:	4a20      	ldr	r2, [pc, #128]	@ (8000bd0 <MX_TIM1_Init+0xa4>)
 8000b4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b50:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <MX_TIM1_Init+0xa0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b56:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <MX_TIM1_Init+0xa0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <MX_TIM1_Init+0xa0>)
 8000b5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <MX_TIM1_Init+0xa0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <MX_TIM1_Init+0xa0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b70:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <MX_TIM1_Init+0xa0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b76:	4815      	ldr	r0, [pc, #84]	@ (8000bcc <MX_TIM1_Init+0xa0>)
 8000b78:	f006 f842 	bl	8006c00 <HAL_TIM_Base_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b82:	f000 f97b 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4619      	mov	r1, r3
 8000b92:	480e      	ldr	r0, [pc, #56]	@ (8000bcc <MX_TIM1_Init+0xa0>)
 8000b94:	f006 f88c 	bl	8006cb0 <HAL_TIM_ConfigClockSource>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b9e:	f000 f96d 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <MX_TIM1_Init+0xa0>)
 8000bb4:	f006 fa8c 	bl	80070d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bbe:	f000 f95d 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	3720      	adds	r7, #32
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000440 	.word	0x20000440
 8000bd0:	40010000 	.word	0x40010000

08000bd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bda:	4a15      	ldr	r2, [pc, #84]	@ (8000c30 <MX_USART1_UART_Init+0x5c>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000be0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c18:	f006 fae8 	bl	80071ec <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c22:	f000 f92b 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000048c 	.word	0x2000048c
 8000c30:	40011000 	.word	0x40011000

08000c34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <MX_DMA_Init+0x48>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c7c <MX_DMA_Init+0x48>)
 8000c40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <MX_DMA_Init+0x48>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	203c      	movs	r0, #60	@ 0x3c
 8000c58:	f002 f82b 	bl	8002cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000c5c:	203c      	movs	r0, #60	@ 0x3c
 8000c5e:	f002 f844 	bl	8002cea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2045      	movs	r0, #69	@ 0x45
 8000c68:	f002 f823 	bl	8002cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c6c:	2045      	movs	r0, #69	@ 0x45
 8000c6e:	f002 f83c 	bl	8002cea <HAL_NVIC_EnableIRQ>

}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800

08000c80 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	615a      	str	r2, [r3, #20]
 8000c96:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <MX_FMC_Init+0x94>)
 8000c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000d18 <MX_FMC_Init+0x98>)
 8000c9c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <MX_FMC_Init+0x94>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <MX_FMC_Init+0x94>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <MX_FMC_Init+0x94>)
 8000cac:	2208      	movs	r2, #8
 8000cae:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <MX_FMC_Init+0x94>)
 8000cb2:	2210      	movs	r2, #16
 8000cb4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <MX_FMC_Init+0x94>)
 8000cb8:	2240      	movs	r2, #64	@ 0x40
 8000cba:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <MX_FMC_Init+0x94>)
 8000cbe:	2280      	movs	r2, #128	@ 0x80
 8000cc0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_FMC_Init+0x94>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <MX_FMC_Init+0x94>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <MX_FMC_Init+0x94>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <MX_FMC_Init+0x94>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000cda:	2310      	movs	r3, #16
 8000cdc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000cde:	2310      	movs	r3, #16
 8000ce0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000cea:	2310      	movs	r3, #16
 8000cec:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000cee:	2310      	movs	r3, #16
 8000cf0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <MX_FMC_Init+0x94>)
 8000cfc:	f005 feef 	bl	8006ade <HAL_SDRAM_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000d06:	f000 f8b9 	bl	8000e7c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000514 	.word	0x20000514
 8000d18:	a0000140 	.word	0xa0000140

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b08d      	sub	sp, #52	@ 0x34
 8000d20:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d22:	4b45      	ldr	r3, [pc, #276]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a44      	ldr	r2, [pc, #272]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b42      	ldr	r3, [pc, #264]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b3c      	ldr	r3, [pc, #240]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b39      	ldr	r3, [pc, #228]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a38      	ldr	r2, [pc, #224]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b36      	ldr	r3, [pc, #216]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6a:	4b33      	ldr	r3, [pc, #204]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a32      	ldr	r2, [pc, #200]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b30      	ldr	r3, [pc, #192]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d7e:	623b      	str	r3, [r7, #32]
 8000d80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d82:	4b2d      	ldr	r3, [pc, #180]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a2c      	ldr	r2, [pc, #176]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9a:	4b27      	ldr	r3, [pc, #156]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a26      	ldr	r2, [pc, #152]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b24      	ldr	r3, [pc, #144]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	61bb      	str	r3, [r7, #24]
 8000db0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b21      	ldr	r3, [pc, #132]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a20      	ldr	r2, [pc, #128]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dca:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a1a      	ldr	r2, [pc, #104]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a14      	ldr	r2, [pc, #80]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000de8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000e00:	f043 0320 	orr.w	r3, r3, #32
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f003 0320 	and.w	r3, r3, #32
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a08      	ldr	r2, [pc, #32]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <MX_GPIO_Init+0x11c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e2a:	bf00      	nop
 8000e2c:	3734      	adds	r7, #52	@ 0x34
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800

08000e3c <Audio_Process>:

/* USER CODE BEGIN 4 */

void Audio_Process(void) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0

    // Example: Copy input buffer to output buffer for basic loopback
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	e00a      	b.n	8000e5e <Audio_Process+0x22>
        output_buffer[i] = input_buffer[i];
 8000e48:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <Audio_Process+0x38>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000e50:	4a09      	ldr	r2, [pc, #36]	@ (8000e78 <Audio_Process+0x3c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e64:	dbf0      	blt.n	8000e48 <Audio_Process+0xc>
    }


}
 8000e66:	bf00      	nop
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	20000548 	.word	0x20000548
 8000e78:	20000d48 	.word	0x20000d48

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <Error_Handler+0x8>

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <HAL_MspInit+0x44>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	4a0e      	ldr	r2, [pc, #56]	@ (8000ecc <HAL_MspInit+0x44>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <HAL_MspInit+0x44>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <HAL_MspInit+0x44>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <HAL_MspInit+0x44>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_MspInit+0x44>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <HAL_DMA2D_MspInit+0x38>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d10b      	bne.n	8000efa <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <HAL_DMA2D_MspInit+0x3c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a09      	ldr	r2, [pc, #36]	@ (8000f0c <HAL_DMA2D_MspInit+0x3c>)
 8000ee8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <HAL_DMA2D_MspInit+0x3c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	4002b000 	.word	0x4002b000
 8000f0c:	40023800 	.word	0x40023800

08000f10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0ac      	sub	sp, #176	@ 0xb0
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0318 	add.w	r3, r7, #24
 8000f2c:	2284      	movs	r2, #132	@ 0x84
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f007 ff3e 	bl	8008db2 <memset>
  if(hi2c->Instance==I2C3)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a33      	ldr	r2, [pc, #204]	@ (8001008 <HAL_I2C_MspInit+0xf8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d15e      	bne.n	8000ffe <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000f40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f44:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 fcad 	bl	80058b0 <HAL_RCCEx_PeriphCLKConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000f5c:	f7ff ff8e 	bl	8000e7c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f60:	4b2a      	ldr	r3, [pc, #168]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f64:	4a29      	ldr	r2, [pc, #164]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6c:	4b27      	ldr	r3, [pc, #156]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f78:	4b24      	ldr	r3, [pc, #144]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	4a23      	ldr	r2, [pc, #140]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f84:	4b21      	ldr	r3, [pc, #132]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PH7     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f98:	2312      	movs	r3, #18
 8000f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000faa:	2304      	movs	r3, #4
 8000fac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4816      	ldr	r0, [pc, #88]	@ (8001010 <HAL_I2C_MspInit+0x100>)
 8000fb8:	f002 fd14 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc2:	2312      	movs	r3, #18
 8000fc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fda:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <HAL_I2C_MspInit+0x104>)
 8000fe2:	f002 fcff 	bl	80039e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	4a08      	ldr	r2, [pc, #32]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000fec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <HAL_I2C_MspInit+0xfc>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000ffe:	bf00      	nop
 8001000:	37b0      	adds	r7, #176	@ 0xb0
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40005c00 	.word	0x40005c00
 800100c:	40023800 	.word	0x40023800
 8001010:	40020800 	.word	0x40020800
 8001014:	40021c00 	.word	0x40021c00

08001018 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <HAL_I2C_MspDeInit+0x38>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d10e      	bne.n	8001048 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <HAL_I2C_MspDeInit+0x3c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a09      	ldr	r2, [pc, #36]	@ (8001054 <HAL_I2C_MspDeInit+0x3c>)
 8001030:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PH7     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001036:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800103a:	4807      	ldr	r0, [pc, #28]	@ (8001058 <HAL_I2C_MspDeInit+0x40>)
 800103c:	f002 fe7e 	bl	8003d3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8001040:	2180      	movs	r1, #128	@ 0x80
 8001042:	4806      	ldr	r0, [pc, #24]	@ (800105c <HAL_I2C_MspDeInit+0x44>)
 8001044:	f002 fe7a 	bl	8003d3c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40005c00 	.word	0x40005c00
 8001054:	40023800 	.word	0x40023800
 8001058:	40020800 	.word	0x40020800
 800105c:	40021c00 	.word	0x40021c00

08001060 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b092      	sub	sp, #72	@ 0x48
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a99      	ldr	r2, [pc, #612]	@ (80012e4 <HAL_LTDC_MspInit+0x284>)
 800107e:	4293      	cmp	r3, r2
 8001080:	f040 812b 	bne.w	80012da <HAL_LTDC_MspInit+0x27a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001084:	4b98      	ldr	r3, [pc, #608]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 8001086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001088:	4a97      	ldr	r2, [pc, #604]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 800108a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800108e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001090:	4b95      	ldr	r3, [pc, #596]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 8001092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001094:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001098:	633b      	str	r3, [r7, #48]	@ 0x30
 800109a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800109c:	4b92      	ldr	r3, [pc, #584]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	4a91      	ldr	r2, [pc, #580]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 80010a2:	f043 0310 	orr.w	r3, r3, #16
 80010a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a8:	4b8f      	ldr	r3, [pc, #572]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b4:	4b8c      	ldr	r3, [pc, #560]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b8:	4a8b      	ldr	r2, [pc, #556]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c0:	4b89      	ldr	r3, [pc, #548]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010cc:	4b86      	ldr	r3, [pc, #536]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d0:	4a85      	ldr	r2, [pc, #532]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 80010d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d8:	4b83      	ldr	r3, [pc, #524]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010e4:	4b80      	ldr	r3, [pc, #512]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e8:	4a7f      	ldr	r2, [pc, #508]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 80010ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f0:	4b7d      	ldr	r3, [pc, #500]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010f8:	623b      	str	r3, [r7, #32]
 80010fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fc:	4b7a      	ldr	r3, [pc, #488]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001100:	4a79      	ldr	r2, [pc, #484]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	6313      	str	r3, [r2, #48]	@ 0x30
 8001108:	4b77      	ldr	r3, [pc, #476]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001114:	4b74      	ldr	r3, [pc, #464]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001118:	4a73      	ldr	r2, [pc, #460]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001120:	4b71      	ldr	r3, [pc, #452]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
 800112a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	4b6e      	ldr	r3, [pc, #440]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	4a6d      	ldr	r2, [pc, #436]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6313      	str	r3, [r2, #48]	@ 0x30
 8001138:	4b6b      	ldr	r3, [pc, #428]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001144:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	4a67      	ldr	r2, [pc, #412]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 800114a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800114e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001150:	4b65      	ldr	r3, [pc, #404]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800115c:	4b62      	ldr	r3, [pc, #392]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001160:	4a61      	ldr	r2, [pc, #388]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 8001162:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001166:	6313      	str	r3, [r2, #48]	@ 0x30
 8001168:	4b5f      	ldr	r3, [pc, #380]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001174:	4b5c      	ldr	r3, [pc, #368]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001178:	4a5b      	ldr	r2, [pc, #364]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 800117a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800117e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001180:	4b59      	ldr	r3, [pc, #356]	@ (80012e8 <HAL_LTDC_MspInit+0x288>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
    PI14     ------> LTDC_CLK
    PH3     ------> LTDC_R1
    PG6     ------> LTDC_R7
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800118c:	2370      	movs	r3, #112	@ 0x70
 800118e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800119c:	230e      	movs	r3, #14
 800119e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011a4:	4619      	mov	r1, r3
 80011a6:	4851      	ldr	r0, [pc, #324]	@ (80012ec <HAL_LTDC_MspInit+0x28c>)
 80011a8:	f002 fc1c 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011b0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011be:	230e      	movs	r3, #14
 80011c0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011c6:	4619      	mov	r1, r3
 80011c8:	4849      	ldr	r0, [pc, #292]	@ (80012f0 <HAL_LTDC_MspInit+0x290>)
 80011ca:	f002 fc0b 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_6;
 80011ce:	f44f 5321 	mov.w	r3, #10304	@ 0x2840
 80011d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011e0:	230e      	movs	r3, #14
 80011e2:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011e8:	4619      	mov	r1, r3
 80011ea:	4842      	ldr	r0, [pc, #264]	@ (80012f4 <HAL_LTDC_MspInit+0x294>)
 80011ec:	f002 fbfa 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001202:	230e      	movs	r3, #14
 8001204:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001206:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800120a:	4619      	mov	r1, r3
 800120c:	483a      	ldr	r0, [pc, #232]	@ (80012f8 <HAL_LTDC_MspInit+0x298>)
 800120e:	f002 fbe9 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8001212:	2348      	movs	r3, #72	@ 0x48
 8001214:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001222:	230e      	movs	r3, #14
 8001224:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800122a:	4619      	mov	r1, r3
 800122c:	4833      	ldr	r0, [pc, #204]	@ (80012fc <HAL_LTDC_MspInit+0x29c>)
 800122e:	f002 fbd9 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001236:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001244:	230e      	movs	r3, #14
 8001246:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800124c:	4619      	mov	r1, r3
 800124e:	482c      	ldr	r0, [pc, #176]	@ (8001300 <HAL_LTDC_MspInit+0x2a0>)
 8001250:	f002 fbc8 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8;
 8001254:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001258:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001266:	230e      	movs	r3, #14
 8001268:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800126e:	4619      	mov	r1, r3
 8001270:	4824      	ldr	r0, [pc, #144]	@ (8001304 <HAL_LTDC_MspInit+0x2a4>)
 8001272:	f002 fbb7 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_9
 8001276:	f244 6313 	movw	r3, #17939	@ 0x4613
 800127a:	637b      	str	r3, [r7, #52]	@ 0x34
                          |GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001288:	230e      	movs	r3, #14
 800128a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800128c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001290:	4619      	mov	r1, r3
 8001292:	481d      	ldr	r0, [pc, #116]	@ (8001308 <HAL_LTDC_MspInit+0x2a8>)
 8001294:	f002 fba6 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_4;
 8001298:	2390      	movs	r3, #144	@ 0x90
 800129a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012a8:	230e      	movs	r3, #14
 80012aa:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012b0:	4619      	mov	r1, r3
 80012b2:	4816      	ldr	r0, [pc, #88]	@ (800130c <HAL_LTDC_MspInit+0x2ac>)
 80012b4:	f002 fb96 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 80012b8:	f24e 2308 	movw	r3, #57864	@ 0xe208
 80012bc:	637b      	str	r3, [r7, #52]	@ 0x34
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012ca:	230e      	movs	r3, #14
 80012cc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012d2:	4619      	mov	r1, r3
 80012d4:	480e      	ldr	r0, [pc, #56]	@ (8001310 <HAL_LTDC_MspInit+0x2b0>)
 80012d6:	f002 fb85 	bl	80039e4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80012da:	bf00      	nop
 80012dc:	3748      	adds	r7, #72	@ 0x48
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40016800 	.word	0x40016800
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40022400 	.word	0x40022400
 80012fc:	40020c00 	.word	0x40020c00
 8001300:	40020800 	.word	0x40020800
 8001304:	40020000 	.word	0x40020000
 8001308:	40022000 	.word	0x40022000
 800130c:	40022800 	.word	0x40022800
 8001310:	40021c00 	.word	0x40021c00

08001314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <HAL_TIM_Base_MspInit+0x38>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d10b      	bne.n	800133e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_TIM_Base_MspInit+0x3c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	4a09      	ldr	r2, [pc, #36]	@ (8001350 <HAL_TIM_Base_MspInit+0x3c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6453      	str	r3, [r2, #68]	@ 0x44
 8001332:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <HAL_TIM_Base_MspInit+0x3c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40010000 	.word	0x40010000
 8001350:	40023800 	.word	0x40023800

08001354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0ac      	sub	sp, #176	@ 0xb0
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	f107 0318 	add.w	r3, r7, #24
 8001370:	2284      	movs	r2, #132	@ 0x84
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f007 fd1c 	bl	8008db2 <memset>
  if(huart->Instance==USART1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a32      	ldr	r2, [pc, #200]	@ (8001448 <HAL_UART_MspInit+0xf4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d15c      	bne.n	800143e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001384:	2340      	movs	r3, #64	@ 0x40
 8001386:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001388:	2300      	movs	r3, #0
 800138a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138c:	f107 0318 	add.w	r3, r7, #24
 8001390:	4618      	mov	r0, r3
 8001392:	f004 fa8d 	bl	80058b0 <HAL_RCCEx_PeriphCLKConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800139c:	f7ff fd6e 	bl	8000e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a0:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <HAL_UART_MspInit+0xf8>)
 80013a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a4:	4a29      	ldr	r2, [pc, #164]	@ (800144c <HAL_UART_MspInit+0xf8>)
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ac:	4b27      	ldr	r3, [pc, #156]	@ (800144c <HAL_UART_MspInit+0xf8>)
 80013ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4b24      	ldr	r3, [pc, #144]	@ (800144c <HAL_UART_MspInit+0xf8>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013bc:	4a23      	ldr	r2, [pc, #140]	@ (800144c <HAL_UART_MspInit+0xf8>)
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c4:	4b21      	ldr	r3, [pc, #132]	@ (800144c <HAL_UART_MspInit+0xf8>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <HAL_UART_MspInit+0xf8>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d4:	4a1d      	ldr	r2, [pc, #116]	@ (800144c <HAL_UART_MspInit+0xf8>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6313      	str	r3, [r2, #48]	@ 0x30
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <HAL_UART_MspInit+0xf8>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001400:	2307      	movs	r3, #7
 8001402:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800140a:	4619      	mov	r1, r3
 800140c:	4810      	ldr	r0, [pc, #64]	@ (8001450 <HAL_UART_MspInit+0xfc>)
 800140e:	f002 fae9 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001412:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001416:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800142c:	2307      	movs	r3, #7
 800142e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001436:	4619      	mov	r1, r3
 8001438:	4806      	ldr	r0, [pc, #24]	@ (8001454 <HAL_UART_MspInit+0x100>)
 800143a:	f002 fad3 	bl	80039e4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800143e:	bf00      	nop
 8001440:	37b0      	adds	r7, #176	@ 0xb0
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40011000 	.word	0x40011000
 800144c:	40023800 	.word	0x40023800
 8001450:	40020400 	.word	0x40020400
 8001454:	40020000 	.word	0x40020000

08001458 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800146c:	4b3a      	ldr	r3, [pc, #232]	@ (8001558 <HAL_FMC_MspInit+0x100>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d16d      	bne.n	8001550 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001474:	4b38      	ldr	r3, [pc, #224]	@ (8001558 <HAL_FMC_MspInit+0x100>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800147a:	4b38      	ldr	r3, [pc, #224]	@ (800155c <HAL_FMC_MspInit+0x104>)
 800147c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800147e:	4a37      	ldr	r2, [pc, #220]	@ (800155c <HAL_FMC_MspInit+0x104>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6393      	str	r3, [r2, #56]	@ 0x38
 8001486:	4b35      	ldr	r3, [pc, #212]	@ (800155c <HAL_FMC_MspInit+0x104>)
 8001488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2
 8001492:	f248 1337 	movw	r3, #33079	@ 0x8137
 8001496:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014a4:	230c      	movs	r3, #12
 80014a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	482c      	ldr	r0, [pc, #176]	@ (8001560 <HAL_FMC_MspInit+0x108>)
 80014ae:	f002 fa99 	bl	80039e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80014b2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80014b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014c4:	230c      	movs	r3, #12
 80014c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	4619      	mov	r1, r3
 80014cc:	4825      	ldr	r0, [pc, #148]	@ (8001564 <HAL_FMC_MspInit+0x10c>)
 80014ce:	f002 fa89 	bl	80039e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80014d2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80014d6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e4:	230c      	movs	r3, #12
 80014e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	481e      	ldr	r0, [pc, #120]	@ (8001568 <HAL_FMC_MspInit+0x110>)
 80014ee:	f002 fa79 	bl	80039e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_2;
 80014f2:	2324      	movs	r3, #36	@ 0x24
 80014f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001502:	230c      	movs	r3, #12
 8001504:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4818      	ldr	r0, [pc, #96]	@ (800156c <HAL_FMC_MspInit+0x114>)
 800150c:	f002 fa6a 	bl	80039e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001510:	2304      	movs	r3, #4
 8001512:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001520:	230c      	movs	r3, #12
 8001522:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4619      	mov	r1, r3
 8001528:	4811      	ldr	r0, [pc, #68]	@ (8001570 <HAL_FMC_MspInit+0x118>)
 800152a:	f002 fa5b 	bl	80039e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 800152e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001532:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001540:	230c      	movs	r3, #12
 8001542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4619      	mov	r1, r3
 8001548:	480a      	ldr	r0, [pc, #40]	@ (8001574 <HAL_FMC_MspInit+0x11c>)
 800154a:	f002 fa4b 	bl	80039e4 <HAL_GPIO_Init>
 800154e:	e000      	b.n	8001552 <HAL_FMC_MspInit+0xfa>
    return;
 8001550:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20001548 	.word	0x20001548
 800155c:	40023800 	.word	0x40023800
 8001560:	40021800 	.word	0x40021800
 8001564:	40020c00 	.word	0x40020c00
 8001568:	40021400 	.word	0x40021400
 800156c:	40021c00 	.word	0x40021c00
 8001570:	40020800 	.word	0x40020800
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001580:	f7ff ff6a 	bl	8001458 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	@ 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a6a      	ldr	r2, [pc, #424]	@ (8001744 <HAL_SAI_MspInit+0x1b8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d16a      	bne.n	8001674 <HAL_SAI_MspInit+0xe8>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800159e:	4b6a      	ldr	r3, [pc, #424]	@ (8001748 <HAL_SAI_MspInit+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10b      	bne.n	80015be <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80015a6:	4b69      	ldr	r3, [pc, #420]	@ (800174c <HAL_SAI_MspInit+0x1c0>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	4a68      	ldr	r2, [pc, #416]	@ (800174c <HAL_SAI_MspInit+0x1c0>)
 80015ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b2:	4b66      	ldr	r3, [pc, #408]	@ (800174c <HAL_SAI_MspInit+0x1c0>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80015be:	4b62      	ldr	r3, [pc, #392]	@ (8001748 <HAL_SAI_MspInit+0x1bc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a60      	ldr	r2, [pc, #384]	@ (8001748 <HAL_SAI_MspInit+0x1bc>)
 80015c6:	6013      	str	r3, [r2, #0]
    PE0     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015c8:	2301      	movs	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80015d8:	230a      	movs	r3, #10
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	485b      	ldr	r0, [pc, #364]	@ (8001750 <HAL_SAI_MspInit+0x1c4>)
 80015e4:	f002 f9fe 	bl	80039e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_6;
 80015e8:	23e0      	movs	r3, #224	@ 0xe0
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80015f8:	230a      	movs	r3, #10
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4854      	ldr	r0, [pc, #336]	@ (8001754 <HAL_SAI_MspInit+0x1c8>)
 8001604:	f002 f9ee 	bl	80039e4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8001608:	4b53      	ldr	r3, [pc, #332]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 800160a:	4a54      	ldr	r2, [pc, #336]	@ (800175c <HAL_SAI_MspInit+0x1d0>)
 800160c:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 800160e:	4b52      	ldr	r3, [pc, #328]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 8001610:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001614:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001616:	4b50      	ldr	r3, [pc, #320]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 8001618:	2240      	movs	r2, #64	@ 0x40
 800161a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800161c:	4b4e      	ldr	r3, [pc, #312]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8001622:	4b4d      	ldr	r3, [pc, #308]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 8001624:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001628:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800162a:	4b4b      	ldr	r3, [pc, #300]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001630:	4b49      	ldr	r3, [pc, #292]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8001636:	4b48      	ldr	r3, [pc, #288]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 8001638:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800163c:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 800163e:	4b46      	ldr	r3, [pc, #280]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 8001640:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001644:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001646:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800164c:	4842      	ldr	r0, [pc, #264]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 800164e:	f001 fb67 	bl	8002d20 <HAL_DMA_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_SAI_MspInit+0xd0>
    {
      Error_Handler();
 8001658:	f7ff fc10 	bl	8000e7c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a3e      	ldr	r2, [pc, #248]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 8001660:	671a      	str	r2, [r3, #112]	@ 0x70
 8001662:	4a3d      	ldr	r2, [pc, #244]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a3b      	ldr	r2, [pc, #236]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 800166c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800166e:	4a3a      	ldr	r2, [pc, #232]	@ (8001758 <HAL_SAI_MspInit+0x1cc>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a39      	ldr	r2, [pc, #228]	@ (8001760 <HAL_SAI_MspInit+0x1d4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d15d      	bne.n	800173a <HAL_SAI_MspInit+0x1ae>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800167e:	4b32      	ldr	r3, [pc, #200]	@ (8001748 <HAL_SAI_MspInit+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10b      	bne.n	800169e <HAL_SAI_MspInit+0x112>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001686:	4b31      	ldr	r3, [pc, #196]	@ (800174c <HAL_SAI_MspInit+0x1c0>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	4a30      	ldr	r2, [pc, #192]	@ (800174c <HAL_SAI_MspInit+0x1c0>)
 800168c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001690:	6453      	str	r3, [r2, #68]	@ 0x44
 8001692:	4b2e      	ldr	r3, [pc, #184]	@ (800174c <HAL_SAI_MspInit+0x1c0>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800169e:	4b2a      	ldr	r3, [pc, #168]	@ (8001748 <HAL_SAI_MspInit+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	4a28      	ldr	r2, [pc, #160]	@ (8001748 <HAL_SAI_MspInit+0x1bc>)
 80016a6:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80016ba:	230a      	movs	r3, #10
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4827      	ldr	r0, [pc, #156]	@ (8001764 <HAL_SAI_MspInit+0x1d8>)
 80016c6:	f002 f98d 	bl	80039e4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream6;
 80016ca:	4b27      	ldr	r3, [pc, #156]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 80016cc:	4a27      	ldr	r2, [pc, #156]	@ (800176c <HAL_SAI_MspInit+0x1e0>)
 80016ce:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 80016d2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80016d6:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d8:	4b23      	ldr	r3, [pc, #140]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80016de:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80016e4:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 80016e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ea:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 80016ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016f2:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 80016f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016fa:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 80016fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001702:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8001704:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 8001706:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800170a:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001712:	4815      	ldr	r0, [pc, #84]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 8001714:	f001 fb04 	bl	8002d20 <HAL_DMA_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_SAI_MspInit+0x196>
    {
      Error_Handler();
 800171e:	f7ff fbad 	bl	8000e7c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a10      	ldr	r2, [pc, #64]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 8001726:	671a      	str	r2, [r3, #112]	@ 0x70
 8001728:	4a0f      	ldr	r2, [pc, #60]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a0d      	ldr	r2, [pc, #52]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 8001732:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001734:	4a0c      	ldr	r2, [pc, #48]	@ (8001768 <HAL_SAI_MspInit+0x1dc>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	@ 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40015c04 	.word	0x40015c04
 8001748:	2000154c 	.word	0x2000154c
 800174c:	40023800 	.word	0x40023800
 8001750:	40021000 	.word	0x40021000
 8001754:	40022000 	.word	0x40022000
 8001758:	20000380 	.word	0x20000380
 800175c:	40026470 	.word	0x40026470
 8001760:	40015c24 	.word	0x40015c24
 8001764:	40021800 	.word	0x40021800
 8001768:	200003e0 	.word	0x200003e0
 800176c:	400264a0 	.word	0x400264a0

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <NMI_Handler+0x4>

08001778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <HardFault_Handler+0x4>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <MemManage_Handler+0x4>

08001788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <BusFault_Handler+0x4>

08001790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <UsageFault_Handler+0x4>

08001798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c6:	f001 f955 	bl	8002a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <DMA2_Stream4_IRQHandler+0x10>)
 80017d6:	f001 fc0f 	bl	8002ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000380 	.word	0x20000380

080017e4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <DMA2_Stream6_IRQHandler+0x10>)
 80017ea:	f001 fc05 	bl	8002ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200003e0 	.word	0x200003e0

080017f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <SystemInit+0x20>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001802:	4a05      	ldr	r2, [pc, #20]	@ (8001818 <SystemInit+0x20>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800181c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001854 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001820:	f7ff ffea 	bl	80017f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001824:	480c      	ldr	r0, [pc, #48]	@ (8001858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001826:	490d      	ldr	r1, [pc, #52]	@ (800185c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001828:	4a0d      	ldr	r2, [pc, #52]	@ (8001860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800182c:	e002      	b.n	8001834 <LoopCopyDataInit>

0800182e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001832:	3304      	adds	r3, #4

08001834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001838:	d3f9      	bcc.n	800182e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183a:	4a0a      	ldr	r2, [pc, #40]	@ (8001864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800183c:	4c0a      	ldr	r4, [pc, #40]	@ (8001868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001840:	e001      	b.n	8001846 <LoopFillZerobss>

08001842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001844:	3204      	adds	r2, #4

08001846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001848:	d3fb      	bcc.n	8001842 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800184a:	f007 fabb 	bl	8008dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184e:	f7fe fe87 	bl	8000560 <main>
  bx  lr    
 8001852:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001854:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800185c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001860:	0800a974 	.word	0x0800a974
  ldr r2, =_sbss
 8001864:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001868:	20001904 	.word	0x20001904

0800186c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800186c:	e7fe      	b.n	800186c <ADC_IRQHandler>
	...

08001870 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	@ 0x30
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a51      	ldr	r2, [pc, #324]	@ (80019c0 <I2Cx_MspInit+0x150>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d14d      	bne.n	800191c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001880:	4b50      	ldr	r3, [pc, #320]	@ (80019c4 <I2Cx_MspInit+0x154>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001884:	4a4f      	ldr	r2, [pc, #316]	@ (80019c4 <I2Cx_MspInit+0x154>)
 8001886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800188a:	6313      	str	r3, [r2, #48]	@ 0x30
 800188c:	4b4d      	ldr	r3, [pc, #308]	@ (80019c4 <I2Cx_MspInit+0x154>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001898:	2380      	movs	r3, #128	@ 0x80
 800189a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800189c:	2312      	movs	r3, #18
 800189e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80018a4:	2302      	movs	r3, #2
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80018a8:	2304      	movs	r3, #4
 80018aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	4845      	ldr	r0, [pc, #276]	@ (80019c8 <I2Cx_MspInit+0x158>)
 80018b4:	f002 f896 	bl	80039e4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80018b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	4840      	ldr	r0, [pc, #256]	@ (80019c8 <I2Cx_MspInit+0x158>)
 80018c6:	f002 f88d 	bl	80039e4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80018ca:	4b3e      	ldr	r3, [pc, #248]	@ (80019c4 <I2Cx_MspInit+0x154>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	4a3d      	ldr	r2, [pc, #244]	@ (80019c4 <I2Cx_MspInit+0x154>)
 80018d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d6:	4b3b      	ldr	r3, [pc, #236]	@ (80019c4 <I2Cx_MspInit+0x154>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80018e2:	4b38      	ldr	r3, [pc, #224]	@ (80019c4 <I2Cx_MspInit+0x154>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4a37      	ldr	r2, [pc, #220]	@ (80019c4 <I2Cx_MspInit+0x154>)
 80018e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018ec:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80018ee:	4b35      	ldr	r3, [pc, #212]	@ (80019c4 <I2Cx_MspInit+0x154>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a34      	ldr	r2, [pc, #208]	@ (80019c4 <I2Cx_MspInit+0x154>)
 80018f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80018f8:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	210f      	movs	r1, #15
 80018fe:	2048      	movs	r0, #72	@ 0x48
 8001900:	f001 f9d7 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001904:	2048      	movs	r0, #72	@ 0x48
 8001906:	f001 f9f0 	bl	8002cea <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	210f      	movs	r1, #15
 800190e:	2049      	movs	r0, #73	@ 0x49
 8001910:	f001 f9cf 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001914:	2049      	movs	r0, #73	@ 0x49
 8001916:	f001 f9e8 	bl	8002cea <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800191a:	e04d      	b.n	80019b8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800191c:	4b29      	ldr	r3, [pc, #164]	@ (80019c4 <I2Cx_MspInit+0x154>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001920:	4a28      	ldr	r2, [pc, #160]	@ (80019c4 <I2Cx_MspInit+0x154>)
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	6313      	str	r3, [r2, #48]	@ 0x30
 8001928:	4b26      	ldr	r3, [pc, #152]	@ (80019c4 <I2Cx_MspInit+0x154>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001934:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001938:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800193a:	2312      	movs	r3, #18
 800193c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001942:	2302      	movs	r3, #2
 8001944:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001946:	2304      	movs	r3, #4
 8001948:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4619      	mov	r1, r3
 8001950:	481e      	ldr	r0, [pc, #120]	@ (80019cc <I2Cx_MspInit+0x15c>)
 8001952:	f002 f847 	bl	80039e4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001956:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800195a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	481a      	ldr	r0, [pc, #104]	@ (80019cc <I2Cx_MspInit+0x15c>)
 8001964:	f002 f83e 	bl	80039e4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001968:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <I2Cx_MspInit+0x154>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196c:	4a15      	ldr	r2, [pc, #84]	@ (80019c4 <I2Cx_MspInit+0x154>)
 800196e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001972:	6413      	str	r3, [r2, #64]	@ 0x40
 8001974:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <I2Cx_MspInit+0x154>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001980:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <I2Cx_MspInit+0x154>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4a0f      	ldr	r2, [pc, #60]	@ (80019c4 <I2Cx_MspInit+0x154>)
 8001986:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800198a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800198c:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <I2Cx_MspInit+0x154>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4a0c      	ldr	r2, [pc, #48]	@ (80019c4 <I2Cx_MspInit+0x154>)
 8001992:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001996:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	210f      	movs	r1, #15
 800199c:	201f      	movs	r0, #31
 800199e:	f001 f988 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80019a2:	201f      	movs	r0, #31
 80019a4:	f001 f9a1 	bl	8002cea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	210f      	movs	r1, #15
 80019ac:	2020      	movs	r0, #32
 80019ae:	f001 f980 	bl	8002cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80019b2:	2020      	movs	r0, #32
 80019b4:	f001 f999 	bl	8002cea <HAL_NVIC_EnableIRQ>
}
 80019b8:	bf00      	nop
 80019ba:	3730      	adds	r7, #48	@ 0x30
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20001550 	.word	0x20001550
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40021c00 	.word	0x40021c00
 80019cc:	40020400 	.word	0x40020400

080019d0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f002 fcb5 	bl	8004348 <HAL_I2C_GetState>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d125      	bne.n	8001a30 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <I2Cx_Init+0x68>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d103      	bne.n	80019f4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a13      	ldr	r2, [pc, #76]	@ (8001a3c <I2Cx_Init+0x6c>)
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e002      	b.n	80019fa <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a12      	ldr	r2, [pc, #72]	@ (8001a40 <I2Cx_Init+0x70>)
 80019f8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a11      	ldr	r2, [pc, #68]	@ (8001a44 <I2Cx_Init+0x74>)
 80019fe:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff23 	bl	8001870 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f002 faac 	bl	8003f88 <HAL_I2C_Init>
  }
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20001550 	.word	0x20001550
 8001a3c:	40005c00 	.word	0x40005c00
 8001a40:	40005400 	.word	0x40005400
 8001a44:	40912732 	.word	0x40912732

08001a48 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	@ 0x28
 8001a4c:	af04      	add	r7, sp, #16
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	4608      	mov	r0, r1
 8001a52:	4611      	mov	r1, r2
 8001a54:	461a      	mov	r2, r3
 8001a56:	4603      	mov	r3, r0
 8001a58:	72fb      	strb	r3, [r7, #11]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	813b      	strh	r3, [r7, #8]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a66:	7afb      	ldrb	r3, [r7, #11]
 8001a68:	b299      	uxth	r1, r3
 8001a6a:	88f8      	ldrh	r0, [r7, #6]
 8001a6c:	893a      	ldrh	r2, [r7, #8]
 8001a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f002 fb4e 	bl	8004120 <HAL_I2C_Mem_Write>
 8001a84:	4603      	mov	r3, r0
 8001a86:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001a88:	7dfb      	ldrb	r3, [r7, #23]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d004      	beq.n	8001a98 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001a8e:	7afb      	ldrb	r3, [r7, #11]
 8001a90:	4619      	mov	r1, r3
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 f805 	bl	8001aa2 <I2Cx_Error>
  }
  return status;
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f002 fb06 	bl	80040c0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff8b 	bl	80019d0 <I2Cx_Init>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <AUDIO_IO_Init+0x10>)
 8001aca:	f7ff ff81 	bl	80019d0 <I2Cx_Init>
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20001550 	.word	0x20001550

08001ad8 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	80bb      	strh	r3, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8001aee:	89fb      	ldrh	r3, [r7, #14]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001af6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	887b      	ldrh	r3, [r7, #2]
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001b0a:	88ba      	ldrh	r2, [r7, #4]
 8001b0c:	79f9      	ldrb	r1, [r7, #7]
 8001b0e:	2302      	movs	r3, #2
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	1cbb      	adds	r3, r7, #2
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2302      	movs	r3, #2
 8001b18:	4803      	ldr	r0, [pc, #12]	@ (8001b28 <AUDIO_IO_Write+0x50>)
 8001b1a:	f7ff ff95 	bl	8001a48 <I2Cx_WriteMultiple>
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20001550 	.word	0x20001550

08001b2c <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 ffbd 	bl	8002ab4 <HAL_Delay>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <BSP_AUDIO_OUT_Play+0x4c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	b292      	uxth	r2, r2
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	2034      	movs	r0, #52	@ 0x34
 8001b5c:	4798      	blx	r3
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e00f      	b.n	8001b88 <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b6e:	d203      	bcs.n	8001b78 <BSP_AUDIO_OUT_Play+0x34>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	085b      	lsrs	r3, r3, #1
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	e001      	b.n	8001b7c <BSP_AUDIO_OUT_Play+0x38>
 8001b78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4804      	ldr	r0, [pc, #16]	@ (8001b94 <BSP_AUDIO_OUT_Play+0x50>)
 8001b82:	f004 fd43 	bl	800660c <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 8001b86:	2300      	movs	r3, #0
  }
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	200015a4 	.word	0x200015a4
 8001b94:	200015a8 	.word	0x200015a8

08001b98 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8001ba0:	f000 f834 	bl	8001c0c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8001bb4:	f000 f831 	bl	8001c1a <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8001bc8:	480e      	ldr	r0, [pc, #56]	@ (8001c04 <HAL_SAI_ErrorCallback+0x44>)
 8001bca:	f004 fe5d 	bl	8006888 <HAL_SAI_GetState>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8001bd2:	480d      	ldr	r0, [pc, #52]	@ (8001c08 <HAL_SAI_ErrorCallback+0x48>)
 8001bd4:	f004 fe58 	bl	8006888 <HAL_SAI_GetState>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d002      	beq.n	8001be8 <HAL_SAI_ErrorCallback+0x28>
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	2b12      	cmp	r3, #18
 8001be6:	d101      	bne.n	8001bec <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001be8:	f000 f81e 	bl	8001c28 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8001bec:	7bbb      	ldrb	r3, [r7, #14]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d002      	beq.n	8001bf8 <HAL_SAI_ErrorCallback+0x38>
 8001bf2:	7bbb      	ldrb	r3, [r7, #14]
 8001bf4:	2b22      	cmp	r3, #34	@ 0x22
 8001bf6:	d101      	bne.n	8001bfc <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8001bf8:	f000 f858 	bl	8001cac <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200015a8 	.word	0x200015a8
 8001c08:	2000162c 	.word	0x2000162c

08001c0c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
/**
  * @brief  Manages the DMA full Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <BSP_AUDIO_IN_Record+0x2c>)
 8001c50:	f004 fd8c 	bl	800676c <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	b2db      	uxtb	r3, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000162c 	.word	0x2000162c

08001c68 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001c70:	f000 f80e 	bl	8001c90 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001c84:	f000 f80b 	bl	8001c9e <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001cc0:	4b31      	ldr	r3, [pc, #196]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001cc2:	2228      	movs	r2, #40	@ 0x28
 8001cc4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001cc6:	4b30      	ldr	r3, [pc, #192]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001cc8:	2209      	movs	r2, #9
 8001cca:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001cce:	2235      	movs	r2, #53	@ 0x35
 8001cd0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001cd4:	220b      	movs	r2, #11
 8001cd6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001cda:	f240 121b 	movw	r2, #283	@ 0x11b
 8001cde:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001ce0:	4b29      	ldr	r3, [pc, #164]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001ce2:	f240 2215 	movw	r2, #533	@ 0x215
 8001ce6:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001ce8:	4b27      	ldr	r3, [pc, #156]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001cea:	f240 121d 	movw	r2, #285	@ 0x11d
 8001cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001cf0:	4b25      	ldr	r3, [pc, #148]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001cf2:	f240 2235 	movw	r2, #565	@ 0x235
 8001cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4823      	ldr	r0, [pc, #140]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001cfc:	f000 fba6 	bl	800244c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001d00:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001d02:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001d06:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001d08:	4b1f      	ldr	r3, [pc, #124]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001d0a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8001d0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001d20:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001d28:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001d2e:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	@ (8001d8c <BSP_LCD_Init+0xd0>)
 8001d44:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001d46:	4810      	ldr	r0, [pc, #64]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001d48:	f002 ff20 	bl	8004b8c <HAL_LTDC_GetState>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d103      	bne.n	8001d5a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001d52:	2100      	movs	r1, #0
 8001d54:	480c      	ldr	r0, [pc, #48]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001d56:	f000 fa9f 	bl	8002298 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8001d5a:	480b      	ldr	r0, [pc, #44]	@ (8001d88 <BSP_LCD_Init+0xcc>)
 8001d5c:	f002 fe08 	bl	8004970 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001d60:	2201      	movs	r2, #1
 8001d62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d66:	480a      	ldr	r0, [pc, #40]	@ (8001d90 <BSP_LCD_Init+0xd4>)
 8001d68:	f002 f8f4 	bl	8003f54 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2108      	movs	r1, #8
 8001d70:	4808      	ldr	r0, [pc, #32]	@ (8001d94 <BSP_LCD_Init+0xd8>)
 8001d72:	f002 f8ef 	bl	8003f54 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001d76:	f000 fc89 	bl	800268c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001d7a:	4807      	ldr	r0, [pc, #28]	@ (8001d98 <BSP_LCD_Init+0xdc>)
 8001d7c:	f000 f8d8 	bl	8001f30 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200016b0 	.word	0x200016b0
 8001d8c:	40016800 	.word	0x40016800
 8001d90:	40022000 	.word	0x40022000
 8001d94:	40022800 	.word	0x40022800
 8001d98:	20000004 	.word	0x20000004

08001d9c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001da0:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <BSP_LCD_GetXSize+0x20>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a06      	ldr	r2, [pc, #24]	@ (8001dc0 <BSP_LCD_GetXSize+0x24>)
 8001da6:	2134      	movs	r1, #52	@ 0x34
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	3360      	adds	r3, #96	@ 0x60
 8001db0:	681b      	ldr	r3, [r3, #0]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	20001798 	.word	0x20001798
 8001dc0:	200016b0 	.word	0x200016b0

08001dc4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <BSP_LCD_GetYSize+0x20>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a06      	ldr	r2, [pc, #24]	@ (8001de8 <BSP_LCD_GetYSize+0x24>)
 8001dce:	2134      	movs	r1, #52	@ 0x34
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3364      	adds	r3, #100	@ 0x64
 8001dd8:	681b      	ldr	r3, [r3, #0]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	20001798 	.word	0x20001798
 8001de8:	200016b0 	.word	0x200016b0

08001dec <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b090      	sub	sp, #64	@ 0x40
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001dfc:	f7ff ffce 	bl	8001d9c <BSP_LCD_GetXSize>
 8001e00:	4603      	mov	r3, r0
 8001e02:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001e08:	f7ff ffdc 	bl	8001dc4 <BSP_LCD_GetYSize>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8001e18:	23ff      	movs	r3, #255	@ 0xff
 8001e1a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001e32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001e38:	2307      	movs	r3, #7
 8001e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001e3c:	f7ff ffae 	bl	8001d9c <BSP_LCD_GetXSize>
 8001e40:	4603      	mov	r3, r0
 8001e42:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001e44:	f7ff ffbe 	bl	8001dc4 <BSP_LCD_GetYSize>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001e4c:	88fa      	ldrh	r2, [r7, #6]
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	4619      	mov	r1, r3
 8001e54:	4812      	ldr	r0, [pc, #72]	@ (8001ea0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8001e56:	f002 fe5b 	bl	8004b10 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001e5a:	88fa      	ldrh	r2, [r7, #6]
 8001e5c:	4911      	ldr	r1, [pc, #68]	@ (8001ea4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	3304      	adds	r3, #4
 8001e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001e70:	88fa      	ldrh	r2, [r7, #6]
 8001e72:	490c      	ldr	r1, [pc, #48]	@ (8001ea4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3308      	adds	r3, #8
 8001e80:	4a09      	ldr	r2, [pc, #36]	@ (8001ea8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001e82:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001e84:	88fa      	ldrh	r2, [r7, #6]
 8001e86:	4907      	ldr	r1, [pc, #28]	@ (8001ea4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8001e96:	601a      	str	r2, [r3, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	3740      	adds	r7, #64	@ 0x40
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200016b0 	.word	0x200016b0
 8001ea4:	2000179c 	.word	0x2000179c
 8001ea8:	20000004 	.word	0x20000004

08001eac <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001eb4:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <BSP_LCD_SelectLayer+0x1c>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
} 
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20001798 	.word	0x20001798

08001ecc <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001ed4:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <BSP_LCD_SetTextColor+0x28>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4907      	ldr	r1, [pc, #28]	@ (8001ef8 <BSP_LCD_SetTextColor+0x2c>)
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	601a      	str	r2, [r3, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	20001798 	.word	0x20001798
 8001ef8:	2000179c 	.word	0x2000179c

08001efc <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <BSP_LCD_SetBackColor+0x2c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4908      	ldr	r1, [pc, #32]	@ (8001f2c <BSP_LCD_SetBackColor+0x30>)
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	3304      	adds	r3, #4
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20001798 	.word	0x20001798
 8001f2c:	2000179c 	.word	0x2000179c

08001f30 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001f38:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <BSP_LCD_SetFont+0x2c>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4908      	ldr	r1, [pc, #32]	@ (8001f60 <BSP_LCD_SetFont+0x30>)
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	3308      	adds	r3, #8
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	601a      	str	r2, [r3, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20001798 	.word	0x20001798
 8001f60:	2000179c 	.word	0x2000179c

08001f64 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fac <BSP_LCD_Clear+0x48>)
 8001f6e:	681c      	ldr	r4, [r3, #0]
 8001f70:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <BSP_LCD_Clear+0x48>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb0 <BSP_LCD_Clear+0x4c>)
 8001f76:	2134      	movs	r1, #52	@ 0x34
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	335c      	adds	r3, #92	@ 0x5c
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	461e      	mov	r6, r3
 8001f84:	f7ff ff0a 	bl	8001d9c <BSP_LCD_GetXSize>
 8001f88:	4605      	mov	r5, r0
 8001f8a:	f7ff ff1b 	bl	8001dc4 <BSP_LCD_GetYSize>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2300      	movs	r3, #0
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	462a      	mov	r2, r5
 8001f9c:	4631      	mov	r1, r6
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f000 fb28 	bl	80025f4 <LL_FillBuffer>
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fac:	20001798 	.word	0x20001798
 8001fb0:	200016b0 	.word	0x200016b0

08001fb4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	80bb      	strh	r3, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <BSP_LCD_DisplayChar+0x80>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	491b      	ldr	r1, [pc, #108]	@ (8002038 <BSP_LCD_DisplayChar+0x84>)
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3308      	adds	r3, #8
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6819      	ldr	r1, [r3, #0]
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001fe2:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <BSP_LCD_DisplayChar+0x80>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4c14      	ldr	r4, [pc, #80]	@ (8002038 <BSP_LCD_DisplayChar+0x84>)
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4423      	add	r3, r4
 8001ff2:	3308      	adds	r3, #8
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001ff8:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <BSP_LCD_DisplayChar+0x80>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4c0d      	ldr	r4, [pc, #52]	@ (8002038 <BSP_LCD_DisplayChar+0x84>)
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4423      	add	r3, r4
 800200c:	3308      	adds	r3, #8
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	889b      	ldrh	r3, [r3, #4]
 8002012:	3307      	adds	r3, #7
 8002014:	2b00      	cmp	r3, #0
 8002016:	da00      	bge.n	800201a <BSP_LCD_DisplayChar+0x66>
 8002018:	3307      	adds	r3, #7
 800201a:	10db      	asrs	r3, r3, #3
 800201c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002020:	18ca      	adds	r2, r1, r3
 8002022:	88b9      	ldrh	r1, [r7, #4]
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fa2c 	bl	8002484 <DrawChar>
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bd90      	pop	{r4, r7, pc}
 8002034:	20001798 	.word	0x20001798
 8002038:	2000179c 	.word	0x2000179c

0800203c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800203c:	b5b0      	push	{r4, r5, r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0
 8002042:	60ba      	str	r2, [r7, #8]
 8002044:	461a      	mov	r2, r3
 8002046:	4603      	mov	r3, r0
 8002048:	81fb      	strh	r3, [r7, #14]
 800204a:	460b      	mov	r3, r1
 800204c:	81bb      	strh	r3, [r7, #12]
 800204e:	4613      	mov	r3, r2
 8002050:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002052:	2301      	movs	r3, #1
 8002054:	83fb      	strh	r3, [r7, #30]
 8002056:	2300      	movs	r3, #0
 8002058:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002066:	e002      	b.n	800206e <BSP_LCD_DisplayStringAt+0x32>
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	3301      	adds	r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	617a      	str	r2, [r7, #20]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f6      	bne.n	8002068 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800207a:	f7ff fe8f 	bl	8001d9c <BSP_LCD_GetXSize>
 800207e:	4601      	mov	r1, r0
 8002080:	4b50      	ldr	r3, [pc, #320]	@ (80021c4 <BSP_LCD_DisplayStringAt+0x188>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4850      	ldr	r0, [pc, #320]	@ (80021c8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4403      	add	r3, r0
 8002090:	3308      	adds	r3, #8
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	889b      	ldrh	r3, [r3, #4]
 8002096:	fbb1 f3f3 	udiv	r3, r1, r3
 800209a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d01c      	beq.n	80020dc <BSP_LCD_DisplayStringAt+0xa0>
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	dc33      	bgt.n	800210e <BSP_LCD_DisplayStringAt+0xd2>
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d002      	beq.n	80020b0 <BSP_LCD_DisplayStringAt+0x74>
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d019      	beq.n	80020e2 <BSP_LCD_DisplayStringAt+0xa6>
 80020ae:	e02e      	b.n	800210e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	1ad1      	subs	r1, r2, r3
 80020b6:	4b43      	ldr	r3, [pc, #268]	@ (80021c4 <BSP_LCD_DisplayStringAt+0x188>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4843      	ldr	r0, [pc, #268]	@ (80021c8 <BSP_LCD_DisplayStringAt+0x18c>)
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4403      	add	r3, r0
 80020c6:	3308      	adds	r3, #8
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	889b      	ldrh	r3, [r3, #4]
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	89fb      	ldrh	r3, [r7, #14]
 80020d6:	4413      	add	r3, r2
 80020d8:	83fb      	strh	r3, [r7, #30]
      break;
 80020da:	e01b      	b.n	8002114 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80020dc:	89fb      	ldrh	r3, [r7, #14]
 80020de:	83fb      	strh	r3, [r7, #30]
      break;
 80020e0:	e018      	b.n	8002114 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	b299      	uxth	r1, r3
 80020ea:	4b36      	ldr	r3, [pc, #216]	@ (80021c4 <BSP_LCD_DisplayStringAt+0x188>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4836      	ldr	r0, [pc, #216]	@ (80021c8 <BSP_LCD_DisplayStringAt+0x18c>)
 80020f0:	4613      	mov	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4403      	add	r3, r0
 80020fa:	3308      	adds	r3, #8
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	889b      	ldrh	r3, [r3, #4]
 8002100:	fb11 f303 	smulbb	r3, r1, r3
 8002104:	b29a      	uxth	r2, r3
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	83fb      	strh	r3, [r7, #30]
      break;
 800210c:	e002      	b.n	8002114 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800210e:	89fb      	ldrh	r3, [r7, #14]
 8002110:	83fb      	strh	r3, [r7, #30]
      break;
 8002112:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002114:	8bfb      	ldrh	r3, [r7, #30]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <BSP_LCD_DisplayStringAt+0xe6>
 800211a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800211e:	2b00      	cmp	r3, #0
 8002120:	da1d      	bge.n	800215e <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002126:	e01a      	b.n	800215e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	89b9      	ldrh	r1, [r7, #12]
 800212e:	8bfb      	ldrh	r3, [r7, #30]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff3f 	bl	8001fb4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002136:	4b23      	ldr	r3, [pc, #140]	@ (80021c4 <BSP_LCD_DisplayStringAt+0x188>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4923      	ldr	r1, [pc, #140]	@ (80021c8 <BSP_LCD_DisplayStringAt+0x18c>)
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	3308      	adds	r3, #8
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	889a      	ldrh	r2, [r3, #4]
 800214c:	8bfb      	ldrh	r3, [r7, #30]
 800214e:	4413      	add	r3, r2
 8002150:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3301      	adds	r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
    i++;
 8002158:	8bbb      	ldrh	r3, [r7, #28]
 800215a:	3301      	adds	r3, #1
 800215c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	bf14      	ite	ne
 8002166:	2301      	movne	r3, #1
 8002168:	2300      	moveq	r3, #0
 800216a:	b2dc      	uxtb	r4, r3
 800216c:	f7ff fe16 	bl	8001d9c <BSP_LCD_GetXSize>
 8002170:	8bb9      	ldrh	r1, [r7, #28]
 8002172:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <BSP_LCD_DisplayStringAt+0x188>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4d14      	ldr	r5, [pc, #80]	@ (80021c8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	442b      	add	r3, r5
 8002182:	3308      	adds	r3, #8
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	889b      	ldrh	r3, [r3, #4]
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	1ac3      	subs	r3, r0, r3
 800218e:	b299      	uxth	r1, r3
 8002190:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <BSP_LCD_DisplayStringAt+0x188>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	480c      	ldr	r0, [pc, #48]	@ (80021c8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002196:	4613      	mov	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4403      	add	r3, r0
 80021a0:	3308      	adds	r3, #8
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	889b      	ldrh	r3, [r3, #4]
 80021a6:	4299      	cmp	r1, r3
 80021a8:	bf2c      	ite	cs
 80021aa:	2301      	movcs	r3, #1
 80021ac:	2300      	movcc	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4023      	ands	r3, r4
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1b7      	bne.n	8002128 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3720      	adds	r7, #32
 80021be:	46bd      	mov	sp, r7
 80021c0:	bdb0      	pop	{r4, r5, r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20001798 	.word	0x20001798
 80021c8:	2000179c 	.word	0x2000179c

080021cc <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	603a      	str	r2, [r7, #0]
 80021d6:	80fb      	strh	r3, [r7, #6]
 80021d8:	460b      	mov	r3, r1
 80021da:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80021dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002254 <BSP_LCD_DrawPixel+0x88>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002258 <BSP_LCD_DrawPixel+0x8c>)
 80021e2:	2134      	movs	r1, #52	@ 0x34
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	3348      	adds	r3, #72	@ 0x48
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d116      	bne.n	8002220 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80021f2:	4b18      	ldr	r3, [pc, #96]	@ (8002254 <BSP_LCD_DrawPixel+0x88>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a18      	ldr	r2, [pc, #96]	@ (8002258 <BSP_LCD_DrawPixel+0x8c>)
 80021f8:	2134      	movs	r1, #52	@ 0x34
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	335c      	adds	r3, #92	@ 0x5c
 8002202:	681c      	ldr	r4, [r3, #0]
 8002204:	88bd      	ldrh	r5, [r7, #4]
 8002206:	f7ff fdc9 	bl	8001d9c <BSP_LCD_GetXSize>
 800220a:	4603      	mov	r3, r0
 800220c:	fb03 f205 	mul.w	r2, r3, r5
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	4413      	add	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4423      	add	r3, r4
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	b292      	uxth	r2, r2
 800221c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800221e:	e015      	b.n	800224c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002220:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <BSP_LCD_DrawPixel+0x88>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0c      	ldr	r2, [pc, #48]	@ (8002258 <BSP_LCD_DrawPixel+0x8c>)
 8002226:	2134      	movs	r1, #52	@ 0x34
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	335c      	adds	r3, #92	@ 0x5c
 8002230:	681c      	ldr	r4, [r3, #0]
 8002232:	88bd      	ldrh	r5, [r7, #4]
 8002234:	f7ff fdb2 	bl	8001d9c <BSP_LCD_GetXSize>
 8002238:	4603      	mov	r3, r0
 800223a:	fb03 f205 	mul.w	r2, r3, r5
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4423      	add	r3, r4
 8002246:	461a      	mov	r2, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6013      	str	r3, [r2, #0]
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bdb0      	pop	{r4, r5, r7, pc}
 8002254:	20001798 	.word	0x20001798
 8002258:	200016b0 	.word	0x200016b0

0800225c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002260:	4b0a      	ldr	r3, [pc, #40]	@ (800228c <BSP_LCD_DisplayOn+0x30>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	4b09      	ldr	r3, [pc, #36]	@ (800228c <BSP_LCD_DisplayOn+0x30>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002270:	2201      	movs	r2, #1
 8002272:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002276:	4806      	ldr	r0, [pc, #24]	@ (8002290 <BSP_LCD_DisplayOn+0x34>)
 8002278:	f001 fe6c 	bl	8003f54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800227c:	2201      	movs	r2, #1
 800227e:	2108      	movs	r1, #8
 8002280:	4804      	ldr	r0, [pc, #16]	@ (8002294 <BSP_LCD_DisplayOn+0x38>)
 8002282:	f001 fe67 	bl	8003f54 <HAL_GPIO_WritePin>
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200016b0 	.word	0x200016b0
 8002290:	40022000 	.word	0x40022000
 8002294:	40022800 	.word	0x40022800

08002298 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b090      	sub	sp, #64	@ 0x40
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80022a2:	4b64      	ldr	r3, [pc, #400]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a6:	4a63      	ldr	r2, [pc, #396]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 80022a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80022ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ae:	4b61      	ldr	r3, [pc, #388]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80022ba:	4b5e      	ldr	r3, [pc, #376]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4a5d      	ldr	r2, [pc, #372]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 80022c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022d2:	4b58      	ldr	r3, [pc, #352]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	4a57      	ldr	r2, [pc, #348]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 80022d8:	f043 0310 	orr.w	r3, r3, #16
 80022dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022de:	4b55      	ldr	r3, [pc, #340]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	623b      	str	r3, [r7, #32]
 80022e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022ea:	4b52      	ldr	r3, [pc, #328]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	4a51      	ldr	r2, [pc, #324]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 80022f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f6:	4b4f      	ldr	r3, [pc, #316]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022fe:	61fb      	str	r3, [r7, #28]
 8002300:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002302:	4b4c      	ldr	r3, [pc, #304]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	4a4b      	ldr	r2, [pc, #300]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 8002308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800230c:	6313      	str	r3, [r2, #48]	@ 0x30
 800230e:	4b49      	ldr	r3, [pc, #292]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800231a:	4b46      	ldr	r3, [pc, #280]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a45      	ldr	r2, [pc, #276]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 8002320:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b43      	ldr	r3, [pc, #268]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002332:	4b40      	ldr	r3, [pc, #256]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	4a3f      	ldr	r2, [pc, #252]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 8002338:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800233c:	6313      	str	r3, [r2, #48]	@ 0x30
 800233e:	4b3d      	ldr	r3, [pc, #244]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800234a:	4b3a      	ldr	r3, [pc, #232]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	4a39      	ldr	r2, [pc, #228]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 8002350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002354:	6313      	str	r3, [r2, #48]	@ 0x30
 8002356:	4b37      	ldr	r3, [pc, #220]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002362:	4b34      	ldr	r3, [pc, #208]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a33      	ldr	r2, [pc, #204]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 8002368:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b31      	ldr	r3, [pc, #196]	@ (8002434 <BSP_LCD_MspInit+0x19c>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800237a:	2310      	movs	r3, #16
 800237c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002386:	2302      	movs	r3, #2
 8002388:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800238a:	230e      	movs	r3, #14
 800238c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800238e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002392:	4619      	mov	r1, r3
 8002394:	4828      	ldr	r0, [pc, #160]	@ (8002438 <BSP_LCD_MspInit+0x1a0>)
 8002396:	f001 fb25 	bl	80039e4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800239a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800239e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80023a4:	2309      	movs	r3, #9
 80023a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80023a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023ac:	4619      	mov	r1, r3
 80023ae:	4823      	ldr	r0, [pc, #140]	@ (800243c <BSP_LCD_MspInit+0x1a4>)
 80023b0:	f001 fb18 	bl	80039e4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80023b4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80023b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80023be:	230e      	movs	r3, #14
 80023c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80023c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023c6:	4619      	mov	r1, r3
 80023c8:	481d      	ldr	r0, [pc, #116]	@ (8002440 <BSP_LCD_MspInit+0x1a8>)
 80023ca:	f001 fb0b 	bl	80039e4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80023ce:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80023d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023d4:	2302      	movs	r3, #2
 80023d6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80023d8:	230e      	movs	r3, #14
 80023da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80023dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023e0:	4619      	mov	r1, r3
 80023e2:	4818      	ldr	r0, [pc, #96]	@ (8002444 <BSP_LCD_MspInit+0x1ac>)
 80023e4:	f001 fafe 	bl	80039e4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80023e8:	23f7      	movs	r3, #247	@ 0xf7
 80023ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80023f0:	230e      	movs	r3, #14
 80023f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80023f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023f8:	4619      	mov	r1, r3
 80023fa:	4813      	ldr	r0, [pc, #76]	@ (8002448 <BSP_LCD_MspInit+0x1b0>)
 80023fc:	f001 faf2 	bl	80039e4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002400:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002406:	2301      	movs	r3, #1
 8002408:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800240a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800240e:	4619      	mov	r1, r3
 8002410:	480b      	ldr	r0, [pc, #44]	@ (8002440 <BSP_LCD_MspInit+0x1a8>)
 8002412:	f001 fae7 	bl	80039e4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002416:	2308      	movs	r3, #8
 8002418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800241a:	2301      	movs	r3, #1
 800241c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800241e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002422:	4619      	mov	r1, r3
 8002424:	4808      	ldr	r0, [pc, #32]	@ (8002448 <BSP_LCD_MspInit+0x1b0>)
 8002426:	f001 fadd 	bl	80039e4 <HAL_GPIO_Init>
}
 800242a:	bf00      	nop
 800242c:	3740      	adds	r7, #64	@ 0x40
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	40021000 	.word	0x40021000
 800243c:	40021800 	.word	0x40021800
 8002440:	40022000 	.word	0x40022000
 8002444:	40022400 	.word	0x40022400
 8002448:	40022800 	.word	0x40022800

0800244c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002456:	4b0a      	ldr	r3, [pc, #40]	@ (8002480 <BSP_LCD_ClockConfig+0x34>)
 8002458:	2208      	movs	r2, #8
 800245a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800245c:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <BSP_LCD_ClockConfig+0x34>)
 800245e:	22c0      	movs	r2, #192	@ 0xc0
 8002460:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002462:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <BSP_LCD_ClockConfig+0x34>)
 8002464:	2205      	movs	r2, #5
 8002466:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <BSP_LCD_ClockConfig+0x34>)
 800246a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800246e:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002470:	4803      	ldr	r0, [pc, #12]	@ (8002480 <BSP_LCD_ClockConfig+0x34>)
 8002472:	f003 fa1d 	bl	80058b0 <HAL_RCCEx_PeriphCLKConfig>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200017b4 	.word	0x200017b4

08002484 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	603a      	str	r2, [r7, #0]
 800248e:	80fb      	strh	r3, [r7, #6]
 8002490:	460b      	mov	r3, r1
 8002492:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800249c:	4b53      	ldr	r3, [pc, #332]	@ (80025ec <DrawChar+0x168>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4953      	ldr	r1, [pc, #332]	@ (80025f0 <DrawChar+0x16c>)
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	3308      	adds	r3, #8
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	88db      	ldrh	r3, [r3, #6]
 80024b2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80024b4:	4b4d      	ldr	r3, [pc, #308]	@ (80025ec <DrawChar+0x168>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	494d      	ldr	r1, [pc, #308]	@ (80025f0 <DrawChar+0x16c>)
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3308      	adds	r3, #8
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	889b      	ldrh	r3, [r3, #4]
 80024ca:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80024cc:	8a3b      	ldrh	r3, [r7, #16]
 80024ce:	3307      	adds	r3, #7
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	da00      	bge.n	80024d6 <DrawChar+0x52>
 80024d4:	3307      	adds	r3, #7
 80024d6:	10db      	asrs	r3, r3, #3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	8a3b      	ldrh	r3, [r7, #16]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	e076      	b.n	80025da <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80024ec:	8a3b      	ldrh	r3, [r7, #16]
 80024ee:	3307      	adds	r3, #7
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	da00      	bge.n	80024f6 <DrawChar+0x72>
 80024f4:	3307      	adds	r3, #7
 80024f6:	10db      	asrs	r3, r3, #3
 80024f8:	461a      	mov	r2, r3
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fb02 f303 	mul.w	r3, r2, r3
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	4413      	add	r3, r2
 8002504:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8002506:	8a3b      	ldrh	r3, [r7, #16]
 8002508:	3307      	adds	r3, #7
 800250a:	2b00      	cmp	r3, #0
 800250c:	da00      	bge.n	8002510 <DrawChar+0x8c>
 800250e:	3307      	adds	r3, #7
 8002510:	10db      	asrs	r3, r3, #3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d002      	beq.n	800251c <DrawChar+0x98>
 8002516:	2b02      	cmp	r3, #2
 8002518:	d004      	beq.n	8002524 <DrawChar+0xa0>
 800251a:	e00c      	b.n	8002536 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	617b      	str	r3, [r7, #20]
      break;
 8002522:	e016      	b.n	8002552 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	3201      	adds	r2, #1
 800252e:	7812      	ldrb	r2, [r2, #0]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]
      break;
 8002534:	e00d      	b.n	8002552 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	041a      	lsls	r2, r3, #16
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	3301      	adds	r3, #1
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	4313      	orrs	r3, r2
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	3202      	adds	r2, #2
 800254a:	7812      	ldrb	r2, [r2, #0]
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
      break;
 8002550:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	e036      	b.n	80025c6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002558:	8a3a      	ldrh	r2, [r7, #16]
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	1ad2      	subs	r2, r2, r3
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	4413      	add	r3, r2
 8002562:	3b01      	subs	r3, #1
 8002564:	2201      	movs	r2, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	461a      	mov	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d012      	beq.n	800259a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	b29a      	uxth	r2, r3
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	4413      	add	r3, r2
 800257c:	b298      	uxth	r0, r3
 800257e:	4b1b      	ldr	r3, [pc, #108]	@ (80025ec <DrawChar+0x168>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	491b      	ldr	r1, [pc, #108]	@ (80025f0 <DrawChar+0x16c>)
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	88bb      	ldrh	r3, [r7, #4]
 8002592:	4619      	mov	r1, r3
 8002594:	f7ff fe1a 	bl	80021cc <BSP_LCD_DrawPixel>
 8002598:	e012      	b.n	80025c0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	b29a      	uxth	r2, r3
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	4413      	add	r3, r2
 80025a2:	b298      	uxth	r0, r3
 80025a4:	4b11      	ldr	r3, [pc, #68]	@ (80025ec <DrawChar+0x168>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4911      	ldr	r1, [pc, #68]	@ (80025f0 <DrawChar+0x16c>)
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	3304      	adds	r3, #4
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	88bb      	ldrh	r3, [r7, #4]
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7ff fe06 	bl	80021cc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	3301      	adds	r3, #1
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	8a3b      	ldrh	r3, [r7, #16]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d3c4      	bcc.n	8002558 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80025ce:	88bb      	ldrh	r3, [r7, #4]
 80025d0:	3301      	adds	r3, #1
 80025d2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	3301      	adds	r3, #1
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	8a7b      	ldrh	r3, [r7, #18]
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d384      	bcc.n	80024ec <DrawChar+0x68>
  }
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	3720      	adds	r7, #32
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20001798 	.word	0x20001798
 80025f0:	2000179c 	.word	0x2000179c

080025f4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002602:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <LL_FillBuffer+0x88>)
 8002604:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002608:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <LL_FillBuffer+0x8c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1d      	ldr	r2, [pc, #116]	@ (8002684 <LL_FillBuffer+0x90>)
 8002610:	2134      	movs	r1, #52	@ 0x34
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	3348      	adds	r3, #72	@ 0x48
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d103      	bne.n	8002628 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002620:	4b16      	ldr	r3, [pc, #88]	@ (800267c <LL_FillBuffer+0x88>)
 8002622:	2202      	movs	r2, #2
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	e002      	b.n	800262e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002628:	4b14      	ldr	r3, [pc, #80]	@ (800267c <LL_FillBuffer+0x88>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800262e:	4a13      	ldr	r2, [pc, #76]	@ (800267c <LL_FillBuffer+0x88>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002634:	4b11      	ldr	r3, [pc, #68]	@ (800267c <LL_FillBuffer+0x88>)
 8002636:	4a14      	ldr	r2, [pc, #80]	@ (8002688 <LL_FillBuffer+0x94>)
 8002638:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800263a:	4810      	ldr	r0, [pc, #64]	@ (800267c <LL_FillBuffer+0x88>)
 800263c:	f000 ff46 	bl	80034cc <HAL_DMA2D_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d115      	bne.n	8002672 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002646:	68f9      	ldr	r1, [r7, #12]
 8002648:	480c      	ldr	r0, [pc, #48]	@ (800267c <LL_FillBuffer+0x88>)
 800264a:	f001 f89d 	bl	8003788 <HAL_DMA2D_ConfigLayer>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10e      	bne.n	8002672 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69f9      	ldr	r1, [r7, #28]
 800265e:	4807      	ldr	r0, [pc, #28]	@ (800267c <LL_FillBuffer+0x88>)
 8002660:	f000 ff7e 	bl	8003560 <HAL_DMA2D_Start>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d103      	bne.n	8002672 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800266a:	210a      	movs	r1, #10
 800266c:	4803      	ldr	r0, [pc, #12]	@ (800267c <LL_FillBuffer+0x88>)
 800266e:	f000 ffa2 	bl	80035b6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20001758 	.word	0x20001758
 8002680:	20001798 	.word	0x20001798
 8002684:	200016b0 	.word	0x200016b0
 8002688:	4002b000 	.word	0x4002b000

0800268c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002690:	4b29      	ldr	r3, [pc, #164]	@ (8002738 <BSP_SDRAM_Init+0xac>)
 8002692:	4a2a      	ldr	r2, [pc, #168]	@ (800273c <BSP_SDRAM_Init+0xb0>)
 8002694:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002696:	4b2a      	ldr	r3, [pc, #168]	@ (8002740 <BSP_SDRAM_Init+0xb4>)
 8002698:	2202      	movs	r2, #2
 800269a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800269c:	4b28      	ldr	r3, [pc, #160]	@ (8002740 <BSP_SDRAM_Init+0xb4>)
 800269e:	2207      	movs	r2, #7
 80026a0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80026a2:	4b27      	ldr	r3, [pc, #156]	@ (8002740 <BSP_SDRAM_Init+0xb4>)
 80026a4:	2204      	movs	r2, #4
 80026a6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80026a8:	4b25      	ldr	r3, [pc, #148]	@ (8002740 <BSP_SDRAM_Init+0xb4>)
 80026aa:	2207      	movs	r2, #7
 80026ac:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80026ae:	4b24      	ldr	r3, [pc, #144]	@ (8002740 <BSP_SDRAM_Init+0xb4>)
 80026b0:	2202      	movs	r2, #2
 80026b2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80026b4:	4b22      	ldr	r3, [pc, #136]	@ (8002740 <BSP_SDRAM_Init+0xb4>)
 80026b6:	2202      	movs	r2, #2
 80026b8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80026ba:	4b21      	ldr	r3, [pc, #132]	@ (8002740 <BSP_SDRAM_Init+0xb4>)
 80026bc:	2202      	movs	r2, #2
 80026be:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80026c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002738 <BSP_SDRAM_Init+0xac>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80026c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002738 <BSP_SDRAM_Init+0xac>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80026cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <BSP_SDRAM_Init+0xac>)
 80026ce:	2204      	movs	r2, #4
 80026d0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80026d2:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <BSP_SDRAM_Init+0xac>)
 80026d4:	2210      	movs	r2, #16
 80026d6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80026d8:	4b17      	ldr	r3, [pc, #92]	@ (8002738 <BSP_SDRAM_Init+0xac>)
 80026da:	2240      	movs	r2, #64	@ 0x40
 80026dc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80026de:	4b16      	ldr	r3, [pc, #88]	@ (8002738 <BSP_SDRAM_Init+0xac>)
 80026e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026e4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80026e6:	4b14      	ldr	r3, [pc, #80]	@ (8002738 <BSP_SDRAM_Init+0xac>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80026ec:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <BSP_SDRAM_Init+0xac>)
 80026ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026f2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80026f4:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <BSP_SDRAM_Init+0xac>)
 80026f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026fa:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80026fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <BSP_SDRAM_Init+0xac>)
 80026fe:	2200      	movs	r2, #0
 8002700:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002702:	2100      	movs	r1, #0
 8002704:	480c      	ldr	r0, [pc, #48]	@ (8002738 <BSP_SDRAM_Init+0xac>)
 8002706:	f000 f87f 	bl	8002808 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800270a:	490d      	ldr	r1, [pc, #52]	@ (8002740 <BSP_SDRAM_Init+0xb4>)
 800270c:	480a      	ldr	r0, [pc, #40]	@ (8002738 <BSP_SDRAM_Init+0xac>)
 800270e:	f004 f9e6 	bl	8006ade <HAL_SDRAM_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002718:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <BSP_SDRAM_Init+0xb8>)
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	e002      	b.n	8002726 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002720:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <BSP_SDRAM_Init+0xb8>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002726:	f240 6003 	movw	r0, #1539	@ 0x603
 800272a:	f000 f80d 	bl	8002748 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800272e:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <BSP_SDRAM_Init+0xb8>)
 8002730:	781b      	ldrb	r3, [r3, #0]
}
 8002732:	4618      	mov	r0, r3
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20001838 	.word	0x20001838
 800273c:	a0000140 	.word	0xa0000140
 8002740:	2000186c 	.word	0x2000186c
 8002744:	2000000c 	.word	0x2000000c

08002748 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002754:	4b2a      	ldr	r3, [pc, #168]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800275a:	4b29      	ldr	r3, [pc, #164]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800275c:	2210      	movs	r2, #16
 800275e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002760:	4b27      	ldr	r3, [pc, #156]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002762:	2201      	movs	r2, #1
 8002764:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002766:	4b26      	ldr	r3, [pc, #152]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002768:	2200      	movs	r2, #0
 800276a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800276c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002770:	4923      	ldr	r1, [pc, #140]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002772:	4824      	ldr	r0, [pc, #144]	@ (8002804 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002774:	f004 f9e7 	bl	8006b46 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002778:	2001      	movs	r0, #1
 800277a:	f000 f99b 	bl	8002ab4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800277e:	4b20      	ldr	r3, [pc, #128]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002780:	2202      	movs	r2, #2
 8002782:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002784:	4b1e      	ldr	r3, [pc, #120]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002786:	2210      	movs	r2, #16
 8002788:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800278a:	4b1d      	ldr	r3, [pc, #116]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800278c:	2201      	movs	r2, #1
 800278e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002790:	4b1b      	ldr	r3, [pc, #108]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002796:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800279a:	4919      	ldr	r1, [pc, #100]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800279c:	4819      	ldr	r0, [pc, #100]	@ (8002804 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800279e:	f004 f9d2 	bl	8006b46 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80027a2:	4b17      	ldr	r3, [pc, #92]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027a4:	2203      	movs	r2, #3
 80027a6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80027a8:	4b15      	ldr	r3, [pc, #84]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027aa:	2210      	movs	r2, #16
 80027ac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80027ae:	4b14      	ldr	r3, [pc, #80]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027b0:	2208      	movs	r2, #8
 80027b2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80027b4:	4b12      	ldr	r3, [pc, #72]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80027ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027be:	4910      	ldr	r1, [pc, #64]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027c0:	4810      	ldr	r0, [pc, #64]	@ (8002804 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80027c2:	f004 f9c0 	bl	8006b46 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80027c6:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80027ca:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027ce:	2204      	movs	r2, #4
 80027d0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027d4:	2210      	movs	r2, #16
 80027d6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80027d8:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027da:	2201      	movs	r2, #1
 80027dc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4a07      	ldr	r2, [pc, #28]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027e2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80027e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027e8:	4905      	ldr	r1, [pc, #20]	@ (8002800 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027ea:	4806      	ldr	r0, [pc, #24]	@ (8002804 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80027ec:	f004 f9ab 	bl	8006b46 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4804      	ldr	r0, [pc, #16]	@ (8002804 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80027f4:	f004 f9dc 	bl	8006bb0 <HAL_SDRAM_ProgramRefreshRate>
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20001888 	.word	0x20001888
 8002804:	20001838 	.word	0x20001838

08002808 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002808:	b580      	push	{r7, lr}
 800280a:	b090      	sub	sp, #64	@ 0x40
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002812:	4b70      	ldr	r3, [pc, #448]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002816:	4a6f      	ldr	r2, [pc, #444]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6393      	str	r3, [r2, #56]	@ 0x38
 800281e:	4b6d      	ldr	r3, [pc, #436]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800282a:	4b6a      	ldr	r3, [pc, #424]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	4a69      	ldr	r2, [pc, #420]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002830:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002834:	6313      	str	r3, [r2, #48]	@ 0x30
 8002836:	4b67      	ldr	r3, [pc, #412]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002842:	4b64      	ldr	r3, [pc, #400]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	4a63      	ldr	r2, [pc, #396]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002848:	f043 0304 	orr.w	r3, r3, #4
 800284c:	6313      	str	r3, [r2, #48]	@ 0x30
 800284e:	4b61      	ldr	r3, [pc, #388]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	623b      	str	r3, [r7, #32]
 8002858:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800285a:	4b5e      	ldr	r3, [pc, #376]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	4a5d      	ldr	r2, [pc, #372]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002860:	f043 0308 	orr.w	r3, r3, #8
 8002864:	6313      	str	r3, [r2, #48]	@ 0x30
 8002866:	4b5b      	ldr	r3, [pc, #364]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002872:	4b58      	ldr	r3, [pc, #352]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	4a57      	ldr	r2, [pc, #348]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002878:	f043 0310 	orr.w	r3, r3, #16
 800287c:	6313      	str	r3, [r2, #48]	@ 0x30
 800287e:	4b55      	ldr	r3, [pc, #340]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800288a:	4b52      	ldr	r3, [pc, #328]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	4a51      	ldr	r2, [pc, #324]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002890:	f043 0320 	orr.w	r3, r3, #32
 8002894:	6313      	str	r3, [r2, #48]	@ 0x30
 8002896:	4b4f      	ldr	r3, [pc, #316]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028a2:	4b4c      	ldr	r3, [pc, #304]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	4a4b      	ldr	r2, [pc, #300]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 80028a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ae:	4b49      	ldr	r3, [pc, #292]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028ba:	4b46      	ldr	r3, [pc, #280]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	4a45      	ldr	r2, [pc, #276]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 80028c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c6:	4b43      	ldr	r3, [pc, #268]	@ (80029d4 <BSP_SDRAM_MspInit+0x1cc>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80028d6:	2301      	movs	r3, #1
 80028d8:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80028da:	2302      	movs	r3, #2
 80028dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80028de:	230c      	movs	r3, #12
 80028e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80028e2:	2308      	movs	r3, #8
 80028e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80028e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028ea:	4619      	mov	r1, r3
 80028ec:	483a      	ldr	r0, [pc, #232]	@ (80029d8 <BSP_SDRAM_MspInit+0x1d0>)
 80028ee:	f001 f879 	bl	80039e4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80028f2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80028f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80028f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028fc:	4619      	mov	r1, r3
 80028fe:	4837      	ldr	r0, [pc, #220]	@ (80029dc <BSP_SDRAM_MspInit+0x1d4>)
 8002900:	f001 f870 	bl	80039e4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002904:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002908:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800290a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800290e:	4619      	mov	r1, r3
 8002910:	4833      	ldr	r0, [pc, #204]	@ (80029e0 <BSP_SDRAM_MspInit+0x1d8>)
 8002912:	f001 f867 	bl	80039e4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002916:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800291c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002920:	4619      	mov	r1, r3
 8002922:	4830      	ldr	r0, [pc, #192]	@ (80029e4 <BSP_SDRAM_MspInit+0x1dc>)
 8002924:	f001 f85e 	bl	80039e4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002928:	f248 1333 	movw	r3, #33075	@ 0x8133
 800292c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800292e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002932:	4619      	mov	r1, r3
 8002934:	482c      	ldr	r0, [pc, #176]	@ (80029e8 <BSP_SDRAM_MspInit+0x1e0>)
 8002936:	f001 f855 	bl	80039e4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800293a:	2328      	movs	r3, #40	@ 0x28
 800293c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800293e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002942:	4619      	mov	r1, r3
 8002944:	4829      	ldr	r0, [pc, #164]	@ (80029ec <BSP_SDRAM_MspInit+0x1e4>)
 8002946:	f001 f84d 	bl	80039e4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800294a:	4b29      	ldr	r3, [pc, #164]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 800294c:	2200      	movs	r2, #0
 800294e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002950:	4b27      	ldr	r3, [pc, #156]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 8002952:	2280      	movs	r2, #128	@ 0x80
 8002954:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002956:	4b26      	ldr	r3, [pc, #152]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 8002958:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800295c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800295e:	4b24      	ldr	r3, [pc, #144]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 8002960:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002964:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002966:	4b22      	ldr	r3, [pc, #136]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 8002968:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800296c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800296e:	4b20      	ldr	r3, [pc, #128]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 8002970:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002974:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002976:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 8002978:	2200      	movs	r2, #0
 800297a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800297c:	4b1c      	ldr	r3, [pc, #112]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 800297e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002982:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002984:	4b1a      	ldr	r3, [pc, #104]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 8002986:	2200      	movs	r2, #0
 8002988:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800298a:	4b19      	ldr	r3, [pc, #100]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 800298c:	2203      	movs	r2, #3
 800298e:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002990:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 8002992:	2200      	movs	r2, #0
 8002994:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002996:	4b16      	ldr	r3, [pc, #88]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800299c:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 800299e:	4a15      	ldr	r2, [pc, #84]	@ (80029f4 <BSP_SDRAM_MspInit+0x1ec>)
 80029a0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a12      	ldr	r2, [pc, #72]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 80029a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80029a8:	4a11      	ldr	r2, [pc, #68]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80029ae:	4810      	ldr	r0, [pc, #64]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 80029b0:	f000 fa64 	bl	8002e7c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80029b4:	480e      	ldr	r0, [pc, #56]	@ (80029f0 <BSP_SDRAM_MspInit+0x1e8>)
 80029b6:	f000 f9b3 	bl	8002d20 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	210f      	movs	r1, #15
 80029be:	2038      	movs	r0, #56	@ 0x38
 80029c0:	f000 f977 	bl	8002cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80029c4:	2038      	movs	r0, #56	@ 0x38
 80029c6:	f000 f990 	bl	8002cea <HAL_NVIC_EnableIRQ>
}
 80029ca:	bf00      	nop
 80029cc:	3740      	adds	r7, #64	@ 0x40
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40021400 	.word	0x40021400
 80029e8:	40021800 	.word	0x40021800
 80029ec:	40021c00 	.word	0x40021c00
 80029f0:	20001898 	.word	0x20001898
 80029f4:	40026410 	.word	0x40026410

080029f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029fc:	2003      	movs	r0, #3
 80029fe:	f000 f94d 	bl	8002c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a02:	2000      	movs	r0, #0
 8002a04:	f000 f806 	bl	8002a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a08:	f7fe fa3e 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a1c:	4b12      	ldr	r3, [pc, #72]	@ (8002a68 <HAL_InitTick+0x54>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <HAL_InitTick+0x58>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f967 	bl	8002d06 <HAL_SYSTICK_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00e      	b.n	8002a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d80a      	bhi.n	8002a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f000 f92f 	bl	8002cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a54:	4a06      	ldr	r2, [pc, #24]	@ (8002a70 <HAL_InitTick+0x5c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000014 	.word	0x20000014
 8002a70:	20000010 	.word	0x20000010

08002a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a78:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <HAL_IncTick+0x20>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <HAL_IncTick+0x24>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a04      	ldr	r2, [pc, #16]	@ (8002a98 <HAL_IncTick+0x24>)
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000014 	.word	0x20000014
 8002a98:	200018f8 	.word	0x200018f8

08002a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <HAL_GetTick+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	200018f8 	.word	0x200018f8

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff ffee 	bl	8002a9c <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d005      	beq.n	8002ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <HAL_Delay+0x44>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ada:	bf00      	nop
 8002adc:	f7ff ffde 	bl	8002a9c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8f7      	bhi.n	8002adc <HAL_Delay+0x28>
  {
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000014 	.word	0x20000014

08002afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <__NVIC_SetPriorityGrouping+0x40>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b24:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2a:	4a04      	ldr	r2, [pc, #16]	@ (8002b3c <__NVIC_SetPriorityGrouping+0x40>)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	60d3      	str	r3, [r2, #12]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00
 8002b40:	05fa0000 	.word	0x05fa0000

08002b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b48:	4b04      	ldr	r3, [pc, #16]	@ (8002b5c <__NVIC_GetPriorityGrouping+0x18>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	0a1b      	lsrs	r3, r3, #8
 8002b4e:	f003 0307 	and.w	r3, r3, #7
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	db0b      	blt.n	8002b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4907      	ldr	r1, [pc, #28]	@ (8002b98 <__NVIC_EnableIRQ+0x38>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	2001      	movs	r0, #1
 8002b82:	fa00 f202 	lsl.w	r2, r0, r2
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	e000e100 	.word	0xe000e100

08002b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db0a      	blt.n	8002bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	490c      	ldr	r1, [pc, #48]	@ (8002be8 <__NVIC_SetPriority+0x4c>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc4:	e00a      	b.n	8002bdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4908      	ldr	r1, [pc, #32]	@ (8002bec <__NVIC_SetPriority+0x50>)
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	3b04      	subs	r3, #4
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	440b      	add	r3, r1
 8002bda:	761a      	strb	r2, [r3, #24]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000e100 	.word	0xe000e100
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	@ 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f1c3 0307 	rsb	r3, r3, #7
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	bf28      	it	cs
 8002c0e:	2304      	movcs	r3, #4
 8002c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3304      	adds	r3, #4
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d902      	bls.n	8002c20 <NVIC_EncodePriority+0x30>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3b03      	subs	r3, #3
 8002c1e:	e000      	b.n	8002c22 <NVIC_EncodePriority+0x32>
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	401a      	ands	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c38:	f04f 31ff 	mov.w	r1, #4294967295
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	43d9      	mvns	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	4313      	orrs	r3, r2
         );
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3724      	adds	r7, #36	@ 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c68:	d301      	bcc.n	8002c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e00f      	b.n	8002c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c98 <SysTick_Config+0x40>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c76:	210f      	movs	r1, #15
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	f7ff ff8e 	bl	8002b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c80:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <SysTick_Config+0x40>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c86:	4b04      	ldr	r3, [pc, #16]	@ (8002c98 <SysTick_Config+0x40>)
 8002c88:	2207      	movs	r2, #7
 8002c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	e000e010 	.word	0xe000e010

08002c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff ff29 	bl	8002afc <__NVIC_SetPriorityGrouping>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b086      	sub	sp, #24
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	4603      	mov	r3, r0
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc4:	f7ff ff3e 	bl	8002b44 <__NVIC_GetPriorityGrouping>
 8002cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	6978      	ldr	r0, [r7, #20]
 8002cd0:	f7ff ff8e 	bl	8002bf0 <NVIC_EncodePriority>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff5d 	bl	8002b9c <__NVIC_SetPriority>
}
 8002ce2:	bf00      	nop
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff31 	bl	8002b60 <__NVIC_EnableIRQ>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff ffa2 	bl	8002c58 <SysTick_Config>
 8002d14:	4603      	mov	r3, r0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d2c:	f7ff feb6 	bl	8002a9c <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e099      	b.n	8002e70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d5c:	e00f      	b.n	8002d7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d5e:	f7ff fe9d 	bl	8002a9c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	d908      	bls.n	8002d7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2203      	movs	r2, #3
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e078      	b.n	8002e70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e8      	bne.n	8002d5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4b38      	ldr	r3, [pc, #224]	@ (8002e78 <HAL_DMA_Init+0x158>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002daa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d107      	bne.n	8002de8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	4313      	orrs	r3, r2
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f023 0307 	bic.w	r3, r3, #7
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d117      	bne.n	8002e42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00e      	beq.n	8002e42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fad5 	bl	80033d4 <DMA_CheckFifoParam>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2240      	movs	r2, #64	@ 0x40
 8002e34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e016      	b.n	8002e70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fa8c 	bl	8003368 <DMA_CalcBaseAndBitshift>
 8002e50:	4603      	mov	r3, r0
 8002e52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e58:	223f      	movs	r2, #63	@ 0x3f
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	f010803f 	.word	0xf010803f

08002e7c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e050      	b.n	8002f30 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d101      	bne.n	8002e9e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e048      	b.n	8002f30 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2221      	movs	r2, #33	@ 0x21
 8002edc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fa42 	bl	8003368 <DMA_CalcBaseAndBitshift>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eec:	223f      	movs	r2, #63	@ 0x3f
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_DMA_Start_IT+0x26>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e048      	b.n	8002ff0 <HAL_DMA_Start_IT+0xb8>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d137      	bne.n	8002fe2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2202      	movs	r2, #2
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f9c0 	bl	800330c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f90:	223f      	movs	r2, #63	@ 0x3f
 8002f92:	409a      	lsls	r2, r3
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0216 	orr.w	r2, r2, #22
 8002fa6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fb6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0208 	orr.w	r2, r2, #8
 8002fce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e005      	b.n	8002fee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fea:	2302      	movs	r3, #2
 8002fec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003004:	4b8e      	ldr	r3, [pc, #568]	@ (8003240 <HAL_DMA_IRQHandler+0x248>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a8e      	ldr	r2, [pc, #568]	@ (8003244 <HAL_DMA_IRQHandler+0x24c>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0a9b      	lsrs	r3, r3, #10
 8003010:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003016:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003022:	2208      	movs	r2, #8
 8003024:	409a      	lsls	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01a      	beq.n	8003064 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d013      	beq.n	8003064 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0204 	bic.w	r2, r2, #4
 800304a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003050:	2208      	movs	r2, #8
 8003052:	409a      	lsls	r2, r3
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003068:	2201      	movs	r2, #1
 800306a:	409a      	lsls	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d012      	beq.n	800309a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00b      	beq.n	800309a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003086:	2201      	movs	r2, #1
 8003088:	409a      	lsls	r2, r3
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003092:	f043 0202 	orr.w	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309e:	2204      	movs	r2, #4
 80030a0:	409a      	lsls	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d012      	beq.n	80030d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030bc:	2204      	movs	r2, #4
 80030be:	409a      	lsls	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c8:	f043 0204 	orr.w	r2, r3, #4
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	2210      	movs	r2, #16
 80030d6:	409a      	lsls	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d043      	beq.n	8003168 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d03c      	beq.n	8003168 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f2:	2210      	movs	r2, #16
 80030f4:	409a      	lsls	r2, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d018      	beq.n	800313a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d108      	bne.n	8003128 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d024      	beq.n	8003168 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4798      	blx	r3
 8003126:	e01f      	b.n	8003168 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01b      	beq.n	8003168 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	4798      	blx	r3
 8003138:	e016      	b.n	8003168 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d107      	bne.n	8003158 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0208 	bic.w	r2, r2, #8
 8003156:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316c:	2220      	movs	r2, #32
 800316e:	409a      	lsls	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 808f 	beq.w	8003298 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8087 	beq.w	8003298 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318e:	2220      	movs	r2, #32
 8003190:	409a      	lsls	r2, r3
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b05      	cmp	r3, #5
 80031a0:	d136      	bne.n	8003210 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0216 	bic.w	r2, r2, #22
 80031b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695a      	ldr	r2, [r3, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_DMA_IRQHandler+0x1da>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0208 	bic.w	r2, r2, #8
 80031e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e6:	223f      	movs	r2, #63	@ 0x3f
 80031e8:	409a      	lsls	r2, r3
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003202:	2b00      	cmp	r3, #0
 8003204:	d07e      	beq.n	8003304 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	4798      	blx	r3
        }
        return;
 800320e:	e079      	b.n	8003304 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d01d      	beq.n	800325a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10d      	bne.n	8003248 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003230:	2b00      	cmp	r3, #0
 8003232:	d031      	beq.n	8003298 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	4798      	blx	r3
 800323c:	e02c      	b.n	8003298 <HAL_DMA_IRQHandler+0x2a0>
 800323e:	bf00      	nop
 8003240:	20000000 	.word	0x20000000
 8003244:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d023      	beq.n	8003298 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4798      	blx	r3
 8003258:	e01e      	b.n	8003298 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10f      	bne.n	8003288 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0210 	bic.w	r2, r2, #16
 8003276:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329c:	2b00      	cmp	r3, #0
 800329e:	d032      	beq.n	8003306 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d022      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2205      	movs	r2, #5
 80032b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0201 	bic.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	3301      	adds	r3, #1
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d307      	bcc.n	80032e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f2      	bne.n	80032c4 <HAL_DMA_IRQHandler+0x2cc>
 80032de:	e000      	b.n	80032e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	4798      	blx	r3
 8003302:	e000      	b.n	8003306 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003304:	bf00      	nop
    }
  }
}
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003328:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b40      	cmp	r3, #64	@ 0x40
 8003338:	d108      	bne.n	800334c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800334a:	e007      	b.n	800335c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	60da      	str	r2, [r3, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	3b10      	subs	r3, #16
 8003378:	4a13      	ldr	r2, [pc, #76]	@ (80033c8 <DMA_CalcBaseAndBitshift+0x60>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003382:	4a12      	ldr	r2, [pc, #72]	@ (80033cc <DMA_CalcBaseAndBitshift+0x64>)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b03      	cmp	r3, #3
 8003394:	d908      	bls.n	80033a8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <DMA_CalcBaseAndBitshift+0x68>)
 800339e:	4013      	ands	r3, r2
 80033a0:	1d1a      	adds	r2, r3, #4
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80033a6:	e006      	b.n	80033b6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b08      	ldr	r3, [pc, #32]	@ (80033d0 <DMA_CalcBaseAndBitshift+0x68>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	aaaaaaab 	.word	0xaaaaaaab
 80033cc:	0800a95c 	.word	0x0800a95c
 80033d0:	fffffc00 	.word	0xfffffc00

080033d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d11f      	bne.n	800342e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d856      	bhi.n	80034a2 <DMA_CheckFifoParam+0xce>
 80033f4:	a201      	add	r2, pc, #4	@ (adr r2, 80033fc <DMA_CheckFifoParam+0x28>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	0800341f 	.word	0x0800341f
 8003404:	0800340d 	.word	0x0800340d
 8003408:	080034a3 	.word	0x080034a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003410:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d046      	beq.n	80034a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800341c:	e043      	b.n	80034a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003422:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003426:	d140      	bne.n	80034aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800342c:	e03d      	b.n	80034aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003436:	d121      	bne.n	800347c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b03      	cmp	r3, #3
 800343c:	d837      	bhi.n	80034ae <DMA_CheckFifoParam+0xda>
 800343e:	a201      	add	r2, pc, #4	@ (adr r2, 8003444 <DMA_CheckFifoParam+0x70>)
 8003440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003444:	08003455 	.word	0x08003455
 8003448:	0800345b 	.word	0x0800345b
 800344c:	08003455 	.word	0x08003455
 8003450:	0800346d 	.word	0x0800346d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
      break;
 8003458:	e030      	b.n	80034bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d025      	beq.n	80034b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800346a:	e022      	b.n	80034b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003470:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003474:	d11f      	bne.n	80034b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800347a:	e01c      	b.n	80034b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d903      	bls.n	800348a <DMA_CheckFifoParam+0xb6>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d003      	beq.n	8003490 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003488:	e018      	b.n	80034bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
      break;
 800348e:	e015      	b.n	80034bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003494:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00e      	beq.n	80034ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
      break;
 80034a0:	e00b      	b.n	80034ba <DMA_CheckFifoParam+0xe6>
      break;
 80034a2:	bf00      	nop
 80034a4:	e00a      	b.n	80034bc <DMA_CheckFifoParam+0xe8>
      break;
 80034a6:	bf00      	nop
 80034a8:	e008      	b.n	80034bc <DMA_CheckFifoParam+0xe8>
      break;
 80034aa:	bf00      	nop
 80034ac:	e006      	b.n	80034bc <DMA_CheckFifoParam+0xe8>
      break;
 80034ae:	bf00      	nop
 80034b0:	e004      	b.n	80034bc <DMA_CheckFifoParam+0xe8>
      break;
 80034b2:	bf00      	nop
 80034b4:	e002      	b.n	80034bc <DMA_CheckFifoParam+0xe8>
      break;   
 80034b6:	bf00      	nop
 80034b8:	e000      	b.n	80034bc <DMA_CheckFifoParam+0xe8>
      break;
 80034ba:	bf00      	nop
    }
  } 
  
  return status; 
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop

080034cc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e039      	b.n	8003552 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fd fcec 	bl	8000ed0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800351c:	f023 0107 	bic.w	r1, r3, #7
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003532:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <HAL_DMA2D_Init+0x90>)
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68d1      	ldr	r1, [r2, #12]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	430b      	orrs	r3, r1
 8003540:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	ffffc000 	.word	0xffffc000

08003560 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_DMA2D_Start+0x1c>
 8003578:	2302      	movs	r3, #2
 800357a:	e018      	b.n	80035ae <HAL_DMA2D_Start+0x4e>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f988 	bl	80038ac <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d056      	beq.n	8003680 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80035d2:	f7ff fa63 	bl	8002a9c <HAL_GetTick>
 80035d6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80035d8:	e04b      	b.n	8003672 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fa:	f043 0202 	orr.w	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003610:	f043 0201 	orr.w	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2221      	movs	r2, #33	@ 0x21
 800361e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2204      	movs	r2, #4
 8003624:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0a5      	b.n	8003780 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d01a      	beq.n	8003672 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800363c:	f7ff fa2e 	bl	8002a9c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d302      	bcc.n	8003652 <HAL_DMA2D_PollForTransfer+0x9c>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10f      	bne.n	8003672 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003656:	f043 0220 	orr.w	r2, r3, #32
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2203      	movs	r2, #3
 8003662:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e086      	b.n	8003780 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0ac      	beq.n	80035da <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d061      	beq.n	8003766 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80036a2:	f7ff f9fb 	bl	8002a9c <HAL_GetTick>
 80036a6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80036a8:	e056      	b.n	8003758 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d02e      	beq.n	800371a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ca:	f043 0204 	orr.w	r2, r3, #4
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e0:	f043 0202 	orr.w	r2, r3, #2
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f6:	f043 0201 	orr.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2229      	movs	r2, #41	@ 0x29
 8003704:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2204      	movs	r2, #4
 800370a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e032      	b.n	8003780 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d01a      	beq.n	8003758 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003722:	f7ff f9bb 	bl	8002a9c <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d302      	bcc.n	8003738 <HAL_DMA2D_PollForTransfer+0x182>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10f      	bne.n	8003758 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373c:	f043 0220 	orr.w	r2, r3, #32
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2203      	movs	r2, #3
 8003748:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e013      	b.n	8003780 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0a1      	beq.n	80036aa <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2212      	movs	r2, #18
 800376c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_DMA2D_ConfigLayer+0x20>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e079      	b.n	800389c <HAL_DMA2D_ConfigLayer+0x114>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	3318      	adds	r3, #24
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	041b      	lsls	r3, r3, #16
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80037d2:	4b35      	ldr	r3, [pc, #212]	@ (80038a8 <HAL_DMA2D_ConfigLayer+0x120>)
 80037d4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b0a      	cmp	r3, #10
 80037dc:	d003      	beq.n	80037e6 <HAL_DMA2D_ConfigLayer+0x5e>
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b09      	cmp	r3, #9
 80037e4:	d107      	bne.n	80037f6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	e005      	b.n	8003802 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	061b      	lsls	r3, r3, #24
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d120      	bne.n	800384a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	43db      	mvns	r3, r3
 8003812:	ea02 0103 	and.w	r1, r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	430a      	orrs	r2, r1
 800381e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b0a      	cmp	r3, #10
 8003830:	d003      	beq.n	800383a <HAL_DMA2D_ConfigLayer+0xb2>
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b09      	cmp	r3, #9
 8003838:	d127      	bne.n	800388a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003846:	629a      	str	r2, [r3, #40]	@ 0x28
 8003848:	e01f      	b.n	800388a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	43db      	mvns	r3, r3
 8003854:	ea02 0103 	and.w	r1, r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	430a      	orrs	r2, r1
 8003860:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b0a      	cmp	r3, #10
 8003872:	d003      	beq.n	800387c <HAL_DMA2D_ConfigLayer+0xf4>
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b09      	cmp	r3, #9
 800387a:	d106      	bne.n	800388a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003888:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	ff03000f 	.word	0xff03000f

080038ac <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b08b      	sub	sp, #44	@ 0x2c
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c0:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	041a      	lsls	r2, r3, #16
 80038c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ca:	431a      	orrs	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038e4:	d174      	bne.n	80039d0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80038ec:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80038f4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80038fc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d108      	bne.n	800391e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	431a      	orrs	r2, r3
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	4313      	orrs	r3, r2
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24
 800391c:	e053      	b.n	80039c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d106      	bne.n	8003934 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4313      	orrs	r3, r2
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	627b      	str	r3, [r7, #36]	@ 0x24
 8003932:	e048      	b.n	80039c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d111      	bne.n	8003960 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	0cdb      	lsrs	r3, r3, #19
 8003940:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	0a9b      	lsrs	r3, r3, #10
 8003946:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	08db      	lsrs	r3, r3, #3
 800394c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	02db      	lsls	r3, r3, #11
 8003956:	4313      	orrs	r3, r2
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
 800395e:	e032      	b.n	80039c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d117      	bne.n	8003998 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	0fdb      	lsrs	r3, r3, #31
 800396c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	0cdb      	lsrs	r3, r3, #19
 8003972:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	0adb      	lsrs	r3, r3, #11
 8003978:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	08db      	lsrs	r3, r3, #3
 800397e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	029b      	lsls	r3, r3, #10
 8003988:	431a      	orrs	r2, r3
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	03db      	lsls	r3, r3, #15
 800398e:	4313      	orrs	r3, r2
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	627b      	str	r3, [r7, #36]	@ 0x24
 8003996:	e016      	b.n	80039c6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	0f1b      	lsrs	r3, r3, #28
 800399c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	0d1b      	lsrs	r3, r3, #20
 80039a2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	0b1b      	lsrs	r3, r3, #12
 80039a8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	011a      	lsls	r2, r3, #4
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	431a      	orrs	r2, r3
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	031b      	lsls	r3, r3, #12
 80039be:	4313      	orrs	r3, r2
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039cc:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80039ce:	e003      	b.n	80039d8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	60da      	str	r2, [r3, #12]
}
 80039d8:	bf00      	nop
 80039da:	372c      	adds	r7, #44	@ 0x2c
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	@ 0x24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	e175      	b.n	8003cf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a04:	2201      	movs	r2, #1
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	f040 8164 	bne.w	8003cea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d005      	beq.n	8003a3a <HAL_GPIO_Init+0x56>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d130      	bne.n	8003a9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	2203      	movs	r2, #3
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a70:	2201      	movs	r2, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 0201 	and.w	r2, r3, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d017      	beq.n	8003ad8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d123      	bne.n	8003b2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	08da      	lsrs	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3208      	adds	r2, #8
 8003aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	220f      	movs	r2, #15
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	08da      	lsrs	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3208      	adds	r2, #8
 8003b26:	69b9      	ldr	r1, [r7, #24]
 8003b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	2203      	movs	r2, #3
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0203 	and.w	r2, r3, #3
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80be 	beq.w	8003cea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6e:	4b66      	ldr	r3, [pc, #408]	@ (8003d08 <HAL_GPIO_Init+0x324>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	4a65      	ldr	r2, [pc, #404]	@ (8003d08 <HAL_GPIO_Init+0x324>)
 8003b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b7a:	4b63      	ldr	r3, [pc, #396]	@ (8003d08 <HAL_GPIO_Init+0x324>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003b86:	4a61      	ldr	r2, [pc, #388]	@ (8003d0c <HAL_GPIO_Init+0x328>)
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	089b      	lsrs	r3, r3, #2
 8003b8c:	3302      	adds	r3, #2
 8003b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	220f      	movs	r2, #15
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a58      	ldr	r2, [pc, #352]	@ (8003d10 <HAL_GPIO_Init+0x32c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d037      	beq.n	8003c22 <HAL_GPIO_Init+0x23e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a57      	ldr	r2, [pc, #348]	@ (8003d14 <HAL_GPIO_Init+0x330>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d031      	beq.n	8003c1e <HAL_GPIO_Init+0x23a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a56      	ldr	r2, [pc, #344]	@ (8003d18 <HAL_GPIO_Init+0x334>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d02b      	beq.n	8003c1a <HAL_GPIO_Init+0x236>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a55      	ldr	r2, [pc, #340]	@ (8003d1c <HAL_GPIO_Init+0x338>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d025      	beq.n	8003c16 <HAL_GPIO_Init+0x232>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a54      	ldr	r2, [pc, #336]	@ (8003d20 <HAL_GPIO_Init+0x33c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01f      	beq.n	8003c12 <HAL_GPIO_Init+0x22e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a53      	ldr	r2, [pc, #332]	@ (8003d24 <HAL_GPIO_Init+0x340>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d019      	beq.n	8003c0e <HAL_GPIO_Init+0x22a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a52      	ldr	r2, [pc, #328]	@ (8003d28 <HAL_GPIO_Init+0x344>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <HAL_GPIO_Init+0x226>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a51      	ldr	r2, [pc, #324]	@ (8003d2c <HAL_GPIO_Init+0x348>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00d      	beq.n	8003c06 <HAL_GPIO_Init+0x222>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a50      	ldr	r2, [pc, #320]	@ (8003d30 <HAL_GPIO_Init+0x34c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <HAL_GPIO_Init+0x21e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4f      	ldr	r2, [pc, #316]	@ (8003d34 <HAL_GPIO_Init+0x350>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d101      	bne.n	8003bfe <HAL_GPIO_Init+0x21a>
 8003bfa:	2309      	movs	r3, #9
 8003bfc:	e012      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003bfe:	230a      	movs	r3, #10
 8003c00:	e010      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c02:	2308      	movs	r3, #8
 8003c04:	e00e      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c06:	2307      	movs	r3, #7
 8003c08:	e00c      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c0a:	2306      	movs	r3, #6
 8003c0c:	e00a      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c0e:	2305      	movs	r3, #5
 8003c10:	e008      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c12:	2304      	movs	r3, #4
 8003c14:	e006      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c16:	2303      	movs	r3, #3
 8003c18:	e004      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e002      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c22:	2300      	movs	r3, #0
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	f002 0203 	and.w	r2, r2, #3
 8003c2a:	0092      	lsls	r2, r2, #2
 8003c2c:	4093      	lsls	r3, r2
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c34:	4935      	ldr	r1, [pc, #212]	@ (8003d0c <HAL_GPIO_Init+0x328>)
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	089b      	lsrs	r3, r3, #2
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c42:	4b3d      	ldr	r3, [pc, #244]	@ (8003d38 <HAL_GPIO_Init+0x354>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c66:	4a34      	ldr	r2, [pc, #208]	@ (8003d38 <HAL_GPIO_Init+0x354>)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c6c:	4b32      	ldr	r3, [pc, #200]	@ (8003d38 <HAL_GPIO_Init+0x354>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c90:	4a29      	ldr	r2, [pc, #164]	@ (8003d38 <HAL_GPIO_Init+0x354>)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c96:	4b28      	ldr	r3, [pc, #160]	@ (8003d38 <HAL_GPIO_Init+0x354>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cba:	4a1f      	ldr	r2, [pc, #124]	@ (8003d38 <HAL_GPIO_Init+0x354>)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d38 <HAL_GPIO_Init+0x354>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ce4:	4a14      	ldr	r2, [pc, #80]	@ (8003d38 <HAL_GPIO_Init+0x354>)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3301      	adds	r3, #1
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2b0f      	cmp	r3, #15
 8003cf4:	f67f ae86 	bls.w	8003a04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	3724      	adds	r7, #36	@ 0x24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40013800 	.word	0x40013800
 8003d10:	40020000 	.word	0x40020000
 8003d14:	40020400 	.word	0x40020400
 8003d18:	40020800 	.word	0x40020800
 8003d1c:	40020c00 	.word	0x40020c00
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40021400 	.word	0x40021400
 8003d28:	40021800 	.word	0x40021800
 8003d2c:	40021c00 	.word	0x40021c00
 8003d30:	40022000 	.word	0x40022000
 8003d34:	40022400 	.word	0x40022400
 8003d38:	40013c00 	.word	0x40013c00

08003d3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	e0d9      	b.n	8003f0c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d58:	2201      	movs	r2, #1
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	f040 80c9 	bne.w	8003f06 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003d74:	4a6b      	ldr	r2, [pc, #428]	@ (8003f24 <HAL_GPIO_DeInit+0x1e8>)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d80:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	4013      	ands	r3, r2
 8003d94:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a63      	ldr	r2, [pc, #396]	@ (8003f28 <HAL_GPIO_DeInit+0x1ec>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d037      	beq.n	8003e0e <HAL_GPIO_DeInit+0xd2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a62      	ldr	r2, [pc, #392]	@ (8003f2c <HAL_GPIO_DeInit+0x1f0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d031      	beq.n	8003e0a <HAL_GPIO_DeInit+0xce>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a61      	ldr	r2, [pc, #388]	@ (8003f30 <HAL_GPIO_DeInit+0x1f4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d02b      	beq.n	8003e06 <HAL_GPIO_DeInit+0xca>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a60      	ldr	r2, [pc, #384]	@ (8003f34 <HAL_GPIO_DeInit+0x1f8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d025      	beq.n	8003e02 <HAL_GPIO_DeInit+0xc6>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a5f      	ldr	r2, [pc, #380]	@ (8003f38 <HAL_GPIO_DeInit+0x1fc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01f      	beq.n	8003dfe <HAL_GPIO_DeInit+0xc2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a5e      	ldr	r2, [pc, #376]	@ (8003f3c <HAL_GPIO_DeInit+0x200>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d019      	beq.n	8003dfa <HAL_GPIO_DeInit+0xbe>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a5d      	ldr	r2, [pc, #372]	@ (8003f40 <HAL_GPIO_DeInit+0x204>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <HAL_GPIO_DeInit+0xba>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a5c      	ldr	r2, [pc, #368]	@ (8003f44 <HAL_GPIO_DeInit+0x208>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00d      	beq.n	8003df2 <HAL_GPIO_DeInit+0xb6>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a5b      	ldr	r2, [pc, #364]	@ (8003f48 <HAL_GPIO_DeInit+0x20c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d007      	beq.n	8003dee <HAL_GPIO_DeInit+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a5a      	ldr	r2, [pc, #360]	@ (8003f4c <HAL_GPIO_DeInit+0x210>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <HAL_GPIO_DeInit+0xae>
 8003de6:	2309      	movs	r3, #9
 8003de8:	e012      	b.n	8003e10 <HAL_GPIO_DeInit+0xd4>
 8003dea:	230a      	movs	r3, #10
 8003dec:	e010      	b.n	8003e10 <HAL_GPIO_DeInit+0xd4>
 8003dee:	2308      	movs	r3, #8
 8003df0:	e00e      	b.n	8003e10 <HAL_GPIO_DeInit+0xd4>
 8003df2:	2307      	movs	r3, #7
 8003df4:	e00c      	b.n	8003e10 <HAL_GPIO_DeInit+0xd4>
 8003df6:	2306      	movs	r3, #6
 8003df8:	e00a      	b.n	8003e10 <HAL_GPIO_DeInit+0xd4>
 8003dfa:	2305      	movs	r3, #5
 8003dfc:	e008      	b.n	8003e10 <HAL_GPIO_DeInit+0xd4>
 8003dfe:	2304      	movs	r3, #4
 8003e00:	e006      	b.n	8003e10 <HAL_GPIO_DeInit+0xd4>
 8003e02:	2303      	movs	r3, #3
 8003e04:	e004      	b.n	8003e10 <HAL_GPIO_DeInit+0xd4>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e002      	b.n	8003e10 <HAL_GPIO_DeInit+0xd4>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <HAL_GPIO_DeInit+0xd4>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	f002 0203 	and.w	r2, r2, #3
 8003e16:	0092      	lsls	r2, r2, #2
 8003e18:	4093      	lsls	r3, r2
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d132      	bne.n	8003e86 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003e20:	4b4b      	ldr	r3, [pc, #300]	@ (8003f50 <HAL_GPIO_DeInit+0x214>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	4949      	ldr	r1, [pc, #292]	@ (8003f50 <HAL_GPIO_DeInit+0x214>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003e2e:	4b48      	ldr	r3, [pc, #288]	@ (8003f50 <HAL_GPIO_DeInit+0x214>)
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	4946      	ldr	r1, [pc, #280]	@ (8003f50 <HAL_GPIO_DeInit+0x214>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003e3c:	4b44      	ldr	r3, [pc, #272]	@ (8003f50 <HAL_GPIO_DeInit+0x214>)
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	4942      	ldr	r1, [pc, #264]	@ (8003f50 <HAL_GPIO_DeInit+0x214>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003e4a:	4b41      	ldr	r3, [pc, #260]	@ (8003f50 <HAL_GPIO_DeInit+0x214>)
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	43db      	mvns	r3, r3
 8003e52:	493f      	ldr	r1, [pc, #252]	@ (8003f50 <HAL_GPIO_DeInit+0x214>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	220f      	movs	r2, #15
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003e68:	4a2e      	ldr	r2, [pc, #184]	@ (8003f24 <HAL_GPIO_DeInit+0x1e8>)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	089b      	lsrs	r3, r3, #2
 8003e6e:	3302      	adds	r3, #2
 8003e70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	482a      	ldr	r0, [pc, #168]	@ (8003f24 <HAL_GPIO_DeInit+0x1e8>)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	089b      	lsrs	r3, r3, #2
 8003e7e:	400a      	ands	r2, r1
 8003e80:	3302      	adds	r3, #2
 8003e82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	2103      	movs	r1, #3
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	401a      	ands	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	08da      	lsrs	r2, r3, #3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3208      	adds	r2, #8
 8003ea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	220f      	movs	r2, #15
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	08d2      	lsrs	r2, r2, #3
 8003ebc:	4019      	ands	r1, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3208      	adds	r2, #8
 8003ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	2103      	movs	r1, #3
 8003ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	401a      	ands	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	2103      	movs	r1, #3
 8003efa:	fa01 f303 	lsl.w	r3, r1, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	401a      	ands	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2b0f      	cmp	r3, #15
 8003f10:	f67f af22 	bls.w	8003d58 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003f14:	bf00      	nop
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40013800 	.word	0x40013800
 8003f28:	40020000 	.word	0x40020000
 8003f2c:	40020400 	.word	0x40020400
 8003f30:	40020800 	.word	0x40020800
 8003f34:	40020c00 	.word	0x40020c00
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40021400 	.word	0x40021400
 8003f40:	40021800 	.word	0x40021800
 8003f44:	40021c00 	.word	0x40021c00
 8003f48:	40022000 	.word	0x40022000
 8003f4c:	40022400 	.word	0x40022400
 8003f50:	40013c00 	.word	0x40013c00

08003f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	807b      	strh	r3, [r7, #2]
 8003f60:	4613      	mov	r3, r2
 8003f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f64:	787b      	ldrb	r3, [r7, #1]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f6a:	887a      	ldrh	r2, [r7, #2]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003f70:	e003      	b.n	8003f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f72:	887b      	ldrh	r3, [r7, #2]
 8003f74:	041a      	lsls	r2, r3, #16
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	619a      	str	r2, [r3, #24]
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e08b      	b.n	80040b2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fc ffae 	bl	8000f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	@ 0x24
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fe8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d107      	bne.n	8004002 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	e006      	b.n	8004010 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800400e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d108      	bne.n	800402a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	e007      	b.n	800403a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004038:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4b1d      	ldr	r3, [pc, #116]	@ (80040bc <HAL_I2C_Init+0x134>)
 8004046:	430b      	orrs	r3, r1
 8004048:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004058:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69d9      	ldr	r1, [r3, #28]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1a      	ldr	r2, [r3, #32]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	02008000 	.word	0x02008000

080040c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e021      	b.n	8004116 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2224      	movs	r2, #36	@ 0x24
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fc ff94 	bl	8001018 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	4608      	mov	r0, r1
 800412a:	4611      	mov	r1, r2
 800412c:	461a      	mov	r2, r3
 800412e:	4603      	mov	r3, r0
 8004130:	817b      	strh	r3, [r7, #10]
 8004132:	460b      	mov	r3, r1
 8004134:	813b      	strh	r3, [r7, #8]
 8004136:	4613      	mov	r3, r2
 8004138:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b20      	cmp	r3, #32
 8004144:	f040 80f9 	bne.w	800433a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_I2C_Mem_Write+0x34>
 800414e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800415a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0ed      	b.n	800433c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_I2C_Mem_Write+0x4e>
 800416a:	2302      	movs	r3, #2
 800416c:	e0e6      	b.n	800433c <HAL_I2C_Mem_Write+0x21c>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004176:	f7fe fc91 	bl	8002a9c <HAL_GetTick>
 800417a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	2319      	movs	r3, #25
 8004182:	2201      	movs	r2, #1
 8004184:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f963 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0d1      	b.n	800433c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2221      	movs	r2, #33	@ 0x21
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2240      	movs	r2, #64	@ 0x40
 80041a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a3a      	ldr	r2, [r7, #32]
 80041b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041c0:	88f8      	ldrh	r0, [r7, #6]
 80041c2:	893a      	ldrh	r2, [r7, #8]
 80041c4:	8979      	ldrh	r1, [r7, #10]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	9301      	str	r3, [sp, #4]
 80041ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	4603      	mov	r3, r0
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f8c7 	bl	8004364 <I2C_RequestMemoryWrite>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0a9      	b.n	800433c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2bff      	cmp	r3, #255	@ 0xff
 80041f0:	d90e      	bls.n	8004210 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	22ff      	movs	r2, #255	@ 0xff
 80041f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	8979      	ldrh	r1, [r7, #10]
 8004200:	2300      	movs	r3, #0
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fae7 	bl	80047dc <I2C_TransferConfig>
 800420e:	e00f      	b.n	8004230 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421e:	b2da      	uxtb	r2, r3
 8004220:	8979      	ldrh	r1, [r7, #10]
 8004222:	2300      	movs	r3, #0
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fad6 	bl	80047dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f966 	bl	8004506 <I2C_WaitOnTXISFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e07b      	b.n	800433c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d034      	beq.n	80042e8 <HAL_I2C_Mem_Write+0x1c8>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004282:	2b00      	cmp	r3, #0
 8004284:	d130      	bne.n	80042e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428c:	2200      	movs	r2, #0
 800428e:	2180      	movs	r1, #128	@ 0x80
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f8df 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e04d      	b.n	800433c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2bff      	cmp	r3, #255	@ 0xff
 80042a8:	d90e      	bls.n	80042c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	22ff      	movs	r2, #255	@ 0xff
 80042ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	8979      	ldrh	r1, [r7, #10]
 80042b8:	2300      	movs	r3, #0
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fa8b 	bl	80047dc <I2C_TransferConfig>
 80042c6:	e00f      	b.n	80042e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	8979      	ldrh	r1, [r7, #10]
 80042da:	2300      	movs	r3, #0
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 fa7a 	bl	80047dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d19e      	bne.n	8004230 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f94c 	bl	8004594 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e01a      	b.n	800433c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2220      	movs	r2, #32
 800430c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6859      	ldr	r1, [r3, #4]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b0a      	ldr	r3, [pc, #40]	@ (8004344 <HAL_I2C_Mem_Write+0x224>)
 800431a:	400b      	ands	r3, r1
 800431c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	e000      	b.n	800433c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800433a:	2302      	movs	r3, #2
  }
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	fe00e800 	.word	0xfe00e800

08004348 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004356:	b2db      	uxtb	r3, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	4608      	mov	r0, r1
 800436e:	4611      	mov	r1, r2
 8004370:	461a      	mov	r2, r3
 8004372:	4603      	mov	r3, r0
 8004374:	817b      	strh	r3, [r7, #10]
 8004376:	460b      	mov	r3, r1
 8004378:	813b      	strh	r3, [r7, #8]
 800437a:	4613      	mov	r3, r2
 800437c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	8979      	ldrh	r1, [r7, #10]
 8004384:	4b20      	ldr	r3, [pc, #128]	@ (8004408 <I2C_RequestMemoryWrite+0xa4>)
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 fa25 	bl	80047dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	69b9      	ldr	r1, [r7, #24]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f8b5 	bl	8004506 <I2C_WaitOnTXISFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e02c      	b.n	8004400 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043a6:	88fb      	ldrh	r3, [r7, #6]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d105      	bne.n	80043b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043ac:	893b      	ldrh	r3, [r7, #8]
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80043b6:	e015      	b.n	80043e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043b8:	893b      	ldrh	r3, [r7, #8]
 80043ba:	0a1b      	lsrs	r3, r3, #8
 80043bc:	b29b      	uxth	r3, r3
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	69b9      	ldr	r1, [r7, #24]
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f89b 	bl	8004506 <I2C_WaitOnTXISFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e012      	b.n	8004400 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043da:	893b      	ldrh	r3, [r7, #8]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2200      	movs	r2, #0
 80043ec:	2180      	movs	r1, #128	@ 0x80
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f830 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	80002000 	.word	0x80002000

0800440c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b02      	cmp	r3, #2
 8004420:	d103      	bne.n	800442a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2200      	movs	r2, #0
 8004428:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b01      	cmp	r3, #1
 8004436:	d007      	beq.n	8004448 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699a      	ldr	r2, [r3, #24]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	619a      	str	r2, [r3, #24]
  }
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	4613      	mov	r3, r2
 8004462:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004464:	e03b      	b.n	80044de <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	6839      	ldr	r1, [r7, #0]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f8d6 	bl	800461c <I2C_IsErrorOccurred>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e041      	b.n	80044fe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d02d      	beq.n	80044de <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004482:	f7fe fb0b 	bl	8002a9c <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d302      	bcc.n	8004498 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d122      	bne.n	80044de <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4013      	ands	r3, r2
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d113      	bne.n	80044de <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ba:	f043 0220 	orr.w	r2, r3, #32
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e00f      	b.n	80044fe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4013      	ands	r3, r2
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	bf0c      	ite	eq
 80044ee:	2301      	moveq	r3, #1
 80044f0:	2300      	movne	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d0b4      	beq.n	8004466 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004512:	e033      	b.n	800457c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f87f 	bl	800461c <I2C_IsErrorOccurred>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e031      	b.n	800458c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452e:	d025      	beq.n	800457c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004530:	f7fe fab4 	bl	8002a9c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	429a      	cmp	r2, r3
 800453e:	d302      	bcc.n	8004546 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d11a      	bne.n	800457c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b02      	cmp	r3, #2
 8004552:	d013      	beq.n	800457c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004558:	f043 0220 	orr.w	r2, r3, #32
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e007      	b.n	800458c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b02      	cmp	r3, #2
 8004588:	d1c4      	bne.n	8004514 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045a0:	e02f      	b.n	8004602 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f838 	bl	800461c <I2C_IsErrorOccurred>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e02d      	b.n	8004612 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b6:	f7fe fa71 	bl	8002a9c <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d302      	bcc.n	80045cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d11a      	bne.n	8004602 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d013      	beq.n	8004602 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045de:	f043 0220 	orr.w	r2, r3, #32
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e007      	b.n	8004612 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b20      	cmp	r3, #32
 800460e:	d1c8      	bne.n	80045a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08a      	sub	sp, #40	@ 0x28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b00      	cmp	r3, #0
 8004646:	d068      	beq.n	800471a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2210      	movs	r2, #16
 800464e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004650:	e049      	b.n	80046e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004658:	d045      	beq.n	80046e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800465a:	f7fe fa1f 	bl	8002a9c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	429a      	cmp	r2, r3
 8004668:	d302      	bcc.n	8004670 <I2C_IsErrorOccurred+0x54>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d13a      	bne.n	80046e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800467a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004682:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800468e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004692:	d121      	bne.n	80046d8 <I2C_IsErrorOccurred+0xbc>
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800469a:	d01d      	beq.n	80046d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d01a      	beq.n	80046d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046b2:	f7fe f9f3 	bl	8002a9c <HAL_GetTick>
 80046b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046b8:	e00e      	b.n	80046d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046ba:	f7fe f9ef 	bl	8002a9c <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b19      	cmp	r3, #25
 80046c6:	d907      	bls.n	80046d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	f043 0320 	orr.w	r3, r3, #32
 80046ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80046d6:	e006      	b.n	80046e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d1e9      	bne.n	80046ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f003 0320 	and.w	r3, r3, #32
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d003      	beq.n	80046fc <I2C_IsErrorOccurred+0xe0>
 80046f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0aa      	beq.n	8004652 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004700:	2b00      	cmp	r3, #0
 8004702:	d103      	bne.n	800470c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2220      	movs	r2, #32
 800470a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	f043 0304 	orr.w	r3, r3, #4
 8004712:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800473c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	f043 0308 	orr.w	r3, r3, #8
 8004754:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800475e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00b      	beq.n	8004788 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	f043 0302 	orr.w	r3, r3, #2
 8004776:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004780:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01c      	beq.n	80047ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7ff fe3b 	bl	800440c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	4b0d      	ldr	r3, [pc, #52]	@ (80047d8 <I2C_IsErrorOccurred+0x1bc>)
 80047a2:	400b      	ands	r3, r1
 80047a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80047ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3728      	adds	r7, #40	@ 0x28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	fe00e800 	.word	0xfe00e800

080047dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	607b      	str	r3, [r7, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	817b      	strh	r3, [r7, #10]
 80047ea:	4613      	mov	r3, r2
 80047ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ee:	897b      	ldrh	r3, [r7, #10]
 80047f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047f4:	7a7b      	ldrb	r3, [r7, #9]
 80047f6:	041b      	lsls	r3, r3, #16
 80047f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	4313      	orrs	r3, r2
 8004806:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800480a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	0d5b      	lsrs	r3, r3, #21
 8004816:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800481a:	4b08      	ldr	r3, [pc, #32]	@ (800483c <I2C_TransferConfig+0x60>)
 800481c:	430b      	orrs	r3, r1
 800481e:	43db      	mvns	r3, r3
 8004820:	ea02 0103 	and.w	r1, r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	03ff63ff 	.word	0x03ff63ff

08004840 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b20      	cmp	r3, #32
 8004854:	d138      	bne.n	80048c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004860:	2302      	movs	r3, #2
 8004862:	e032      	b.n	80048ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	@ 0x24
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004892:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6819      	ldr	r1, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e000      	b.n	80048ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b085      	sub	sp, #20
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d139      	bne.n	8004960 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e033      	b.n	8004962 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2224      	movs	r2, #36	@ 0x24
 8004906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004928:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e000      	b.n	8004962 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004960:	2302      	movs	r3, #2
  }
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0bf      	b.n	8004b02 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc fb62 	bl	8001060 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80049b2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6999      	ldr	r1, [r3, #24]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049c8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6899      	ldr	r1, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b4a      	ldr	r3, [pc, #296]	@ (8004b0c <HAL_LTDC_Init+0x19c>)
 80049e4:	400b      	ands	r3, r1
 80049e6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	041b      	lsls	r3, r3, #16
 80049ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6899      	ldr	r1, [r3, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68d9      	ldr	r1, [r3, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b3e      	ldr	r3, [pc, #248]	@ (8004b0c <HAL_LTDC_Init+0x19c>)
 8004a12:	400b      	ands	r3, r1
 8004a14:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68d9      	ldr	r1, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1a      	ldr	r2, [r3, #32]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6919      	ldr	r1, [r3, #16]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b33      	ldr	r3, [pc, #204]	@ (8004b0c <HAL_LTDC_Init+0x19c>)
 8004a40:	400b      	ands	r3, r1
 8004a42:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a48:	041b      	lsls	r3, r3, #16
 8004a4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6919      	ldr	r1, [r3, #16]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6959      	ldr	r1, [r3, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4b27      	ldr	r3, [pc, #156]	@ (8004b0c <HAL_LTDC_Init+0x19c>)
 8004a6e:	400b      	ands	r3, r1
 8004a70:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a76:	041b      	lsls	r3, r3, #16
 8004a78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6959      	ldr	r1, [r3, #20]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0206 	orr.w	r2, r2, #6
 8004ade:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	f000f800 	.word	0xf000f800

08004b10 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b10:	b5b0      	push	{r4, r5, r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_LTDC_ConfigLayer+0x1a>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e02c      	b.n	8004b84 <HAL_LTDC_ConfigLayer+0x74>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2134      	movs	r1, #52	@ 0x34
 8004b40:	fb01 f303 	mul.w	r3, r1, r3
 8004b44:	4413      	add	r3, r2
 8004b46:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	461d      	mov	r5, r3
 8004b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f81f 	bl	8004ba8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bdb0      	pop	{r4, r5, r7, pc}

08004b8c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004b9a:	b2db      	uxtb	r3, r3
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b089      	sub	sp, #36	@ 0x24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	0c1b      	lsrs	r3, r3, #16
 8004bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc4:	4413      	add	r3, r2
 8004bc6:	041b      	lsls	r3, r3, #16
 8004bc8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	01db      	lsls	r3, r3, #7
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3384      	adds	r3, #132	@ 0x84
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	4611      	mov	r1, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	01d2      	lsls	r2, r2, #7
 8004be4:	440a      	add	r2, r1
 8004be6:	3284      	adds	r2, #132	@ 0x84
 8004be8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004bec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004bfe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c00:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4619      	mov	r1, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	01db      	lsls	r3, r3, #7
 8004c0c:	440b      	add	r3, r1
 8004c0e:	3384      	adds	r3, #132	@ 0x84
 8004c10:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c16:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c26:	4413      	add	r3, r2
 8004c28:	041b      	lsls	r3, r3, #16
 8004c2a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	01db      	lsls	r3, r3, #7
 8004c36:	4413      	add	r3, r2
 8004c38:	3384      	adds	r3, #132	@ 0x84
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	4611      	mov	r1, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	01d2      	lsls	r2, r2, #7
 8004c46:	440a      	add	r2, r1
 8004c48:	3284      	adds	r2, #132	@ 0x84
 8004c4a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004c4e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c5e:	4413      	add	r3, r2
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4619      	mov	r1, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	01db      	lsls	r3, r3, #7
 8004c6c:	440b      	add	r3, r1
 8004c6e:	3384      	adds	r3, #132	@ 0x84
 8004c70:	4619      	mov	r1, r3
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	01db      	lsls	r3, r3, #7
 8004c82:	4413      	add	r3, r2
 8004c84:	3384      	adds	r3, #132	@ 0x84
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	6812      	ldr	r2, [r2, #0]
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	01d2      	lsls	r2, r2, #7
 8004c92:	440a      	add	r2, r1
 8004c94:	3284      	adds	r2, #132	@ 0x84
 8004c96:	f023 0307 	bic.w	r3, r3, #7
 8004c9a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	01db      	lsls	r3, r3, #7
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3384      	adds	r3, #132	@ 0x84
 8004caa:	461a      	mov	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004cb8:	021b      	lsls	r3, r3, #8
 8004cba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004cc2:	041b      	lsls	r3, r3, #16
 8004cc4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	061b      	lsls	r3, r3, #24
 8004ccc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	01db      	lsls	r3, r3, #7
 8004cd8:	4413      	add	r3, r2
 8004cda:	3384      	adds	r3, #132	@ 0x84
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	01db      	lsls	r3, r3, #7
 8004ce8:	4413      	add	r3, r2
 8004cea:	3384      	adds	r3, #132	@ 0x84
 8004cec:	461a      	mov	r2, r3
 8004cee:	2300      	movs	r3, #0
 8004cf0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	431a      	orrs	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4619      	mov	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	01db      	lsls	r3, r3, #7
 8004d0c:	440b      	add	r3, r1
 8004d0e:	3384      	adds	r3, #132	@ 0x84
 8004d10:	4619      	mov	r1, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	01db      	lsls	r3, r3, #7
 8004d22:	4413      	add	r3, r2
 8004d24:	3384      	adds	r3, #132	@ 0x84
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	01d2      	lsls	r2, r2, #7
 8004d32:	440a      	add	r2, r1
 8004d34:	3284      	adds	r2, #132	@ 0x84
 8004d36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d3a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	01db      	lsls	r3, r3, #7
 8004d46:	4413      	add	r3, r2
 8004d48:	3384      	adds	r3, #132	@ 0x84
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	01db      	lsls	r3, r3, #7
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3384      	adds	r3, #132	@ 0x84
 8004d60:	69da      	ldr	r2, [r3, #28]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4619      	mov	r1, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	01db      	lsls	r3, r3, #7
 8004d6c:	440b      	add	r3, r1
 8004d6e:	3384      	adds	r3, #132	@ 0x84
 8004d70:	4619      	mov	r1, r3
 8004d72:	4b58      	ldr	r3, [pc, #352]	@ (8004ed4 <LTDC_SetConfig+0x32c>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	68f9      	ldr	r1, [r7, #12]
 8004d82:	6809      	ldr	r1, [r1, #0]
 8004d84:	4608      	mov	r0, r1
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	01c9      	lsls	r1, r1, #7
 8004d8a:	4401      	add	r1, r0
 8004d8c:	3184      	adds	r1, #132	@ 0x84
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	01db      	lsls	r3, r3, #7
 8004d9c:	4413      	add	r3, r2
 8004d9e:	3384      	adds	r3, #132	@ 0x84
 8004da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	01db      	lsls	r3, r3, #7
 8004dac:	4413      	add	r3, r2
 8004dae:	3384      	adds	r3, #132	@ 0x84
 8004db0:	461a      	mov	r2, r3
 8004db2:	2300      	movs	r3, #0
 8004db4:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	01db      	lsls	r3, r3, #7
 8004dc0:	4413      	add	r3, r2
 8004dc2:	3384      	adds	r3, #132	@ 0x84
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	61fb      	str	r3, [r7, #28]
 8004dd8:	e01b      	b.n	8004e12 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d102      	bne.n	8004de8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004de2:	2303      	movs	r3, #3
 8004de4:	61fb      	str	r3, [r7, #28]
 8004de6:	e014      	b.n	8004e12 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d00b      	beq.n	8004e08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d007      	beq.n	8004e08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d003      	beq.n	8004e08 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e04:	2b07      	cmp	r3, #7
 8004e06:	d102      	bne.n	8004e0e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	e001      	b.n	8004e12 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	01db      	lsls	r3, r3, #7
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3384      	adds	r3, #132	@ 0x84
 8004e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	4611      	mov	r1, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	01d2      	lsls	r2, r2, #7
 8004e2c:	440a      	add	r2, r1
 8004e2e:	3284      	adds	r2, #132	@ 0x84
 8004e30:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004e34:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	fb02 f303 	mul.w	r3, r2, r3
 8004e40:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6859      	ldr	r1, [r3, #4]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	1acb      	subs	r3, r1, r3
 8004e4c:	69f9      	ldr	r1, [r7, #28]
 8004e4e:	fb01 f303 	mul.w	r3, r1, r3
 8004e52:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004e54:	68f9      	ldr	r1, [r7, #12]
 8004e56:	6809      	ldr	r1, [r1, #0]
 8004e58:	4608      	mov	r0, r1
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	01c9      	lsls	r1, r1, #7
 8004e5e:	4401      	add	r1, r0
 8004e60:	3184      	adds	r1, #132	@ 0x84
 8004e62:	4313      	orrs	r3, r2
 8004e64:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	01db      	lsls	r3, r3, #7
 8004e70:	4413      	add	r3, r2
 8004e72:	3384      	adds	r3, #132	@ 0x84
 8004e74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	01db      	lsls	r3, r3, #7
 8004e80:	440b      	add	r3, r1
 8004e82:	3384      	adds	r3, #132	@ 0x84
 8004e84:	4619      	mov	r1, r3
 8004e86:	4b14      	ldr	r3, [pc, #80]	@ (8004ed8 <LTDC_SetConfig+0x330>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	01db      	lsls	r3, r3, #7
 8004e96:	4413      	add	r3, r2
 8004e98:	3384      	adds	r3, #132	@ 0x84
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	01db      	lsls	r3, r3, #7
 8004eac:	4413      	add	r3, r2
 8004eae:	3384      	adds	r3, #132	@ 0x84
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	01d2      	lsls	r2, r2, #7
 8004ebc:	440a      	add	r2, r1
 8004ebe:	3284      	adds	r2, #132	@ 0x84
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	6013      	str	r3, [r2, #0]
}
 8004ec6:	bf00      	nop
 8004ec8:	3724      	adds	r7, #36	@ 0x24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	fffff8f8 	.word	0xfffff8f8
 8004ed8:	fffff800 	.word	0xfffff800

08004edc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ee0:	4b05      	ldr	r3, [pc, #20]	@ (8004ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a04      	ldr	r2, [pc, #16]	@ (8004ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eea:	6013      	str	r3, [r2, #0]
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40007000 	.word	0x40007000

08004efc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f06:	4b23      	ldr	r3, [pc, #140]	@ (8004f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	4a22      	ldr	r2, [pc, #136]	@ (8004f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f12:	4b20      	ldr	r3, [pc, #128]	@ (8004f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1d      	ldr	r2, [pc, #116]	@ (8004f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f2a:	f7fd fdb7 	bl	8002a9c <HAL_GetTick>
 8004f2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f30:	e009      	b.n	8004f46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f32:	f7fd fdb3 	bl	8002a9c <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f40:	d901      	bls.n	8004f46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e022      	b.n	8004f8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f46:	4b14      	ldr	r3, [pc, #80]	@ (8004f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f52:	d1ee      	bne.n	8004f32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f54:	4b10      	ldr	r3, [pc, #64]	@ (8004f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a0f      	ldr	r2, [pc, #60]	@ (8004f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f60:	f7fd fd9c 	bl	8002a9c <HAL_GetTick>
 8004f64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f66:	e009      	b.n	8004f7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f68:	f7fd fd98 	bl	8002a9c <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f76:	d901      	bls.n	8004f7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e007      	b.n	8004f8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f7c:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f88:	d1ee      	bne.n	8004f68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40023800 	.word	0x40023800
 8004f98:	40007000 	.word	0x40007000

08004f9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e291      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8087 	beq.w	80050ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fc0:	4b96      	ldr	r3, [pc, #600]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 030c 	and.w	r3, r3, #12
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d00c      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fcc:	4b93      	ldr	r3, [pc, #588]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 030c 	and.w	r3, r3, #12
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d112      	bne.n	8004ffe <HAL_RCC_OscConfig+0x62>
 8004fd8:	4b90      	ldr	r3, [pc, #576]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fe0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fe4:	d10b      	bne.n	8004ffe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d06c      	beq.n	80050cc <HAL_RCC_OscConfig+0x130>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d168      	bne.n	80050cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e26b      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005006:	d106      	bne.n	8005016 <HAL_RCC_OscConfig+0x7a>
 8005008:	4b84      	ldr	r3, [pc, #528]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a83      	ldr	r2, [pc, #524]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 800500e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	e02e      	b.n	8005074 <HAL_RCC_OscConfig+0xd8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10c      	bne.n	8005038 <HAL_RCC_OscConfig+0x9c>
 800501e:	4b7f      	ldr	r3, [pc, #508]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a7e      	ldr	r2, [pc, #504]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	4b7c      	ldr	r3, [pc, #496]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a7b      	ldr	r2, [pc, #492]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005030:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	e01d      	b.n	8005074 <HAL_RCC_OscConfig+0xd8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005040:	d10c      	bne.n	800505c <HAL_RCC_OscConfig+0xc0>
 8005042:	4b76      	ldr	r3, [pc, #472]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a75      	ldr	r2, [pc, #468]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4b73      	ldr	r3, [pc, #460]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a72      	ldr	r2, [pc, #456]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e00b      	b.n	8005074 <HAL_RCC_OscConfig+0xd8>
 800505c:	4b6f      	ldr	r3, [pc, #444]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a6e      	ldr	r2, [pc, #440]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	4b6c      	ldr	r3, [pc, #432]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a6b      	ldr	r2, [pc, #428]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 800506e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d013      	beq.n	80050a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507c:	f7fd fd0e 	bl	8002a9c <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005084:	f7fd fd0a 	bl	8002a9c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b64      	cmp	r3, #100	@ 0x64
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e21f      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005096:	4b61      	ldr	r3, [pc, #388]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <HAL_RCC_OscConfig+0xe8>
 80050a2:	e014      	b.n	80050ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fd fcfa 	bl	8002a9c <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ac:	f7fd fcf6 	bl	8002a9c <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b64      	cmp	r3, #100	@ 0x64
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e20b      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050be:	4b57      	ldr	r3, [pc, #348]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f0      	bne.n	80050ac <HAL_RCC_OscConfig+0x110>
 80050ca:	e000      	b.n	80050ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d069      	beq.n	80051ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050da:	4b50      	ldr	r3, [pc, #320]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050e6:	4b4d      	ldr	r3, [pc, #308]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 030c 	and.w	r3, r3, #12
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d11c      	bne.n	800512c <HAL_RCC_OscConfig+0x190>
 80050f2:	4b4a      	ldr	r3, [pc, #296]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d116      	bne.n	800512c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fe:	4b47      	ldr	r3, [pc, #284]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_RCC_OscConfig+0x17a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d001      	beq.n	8005116 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e1df      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005116:	4b41      	ldr	r3, [pc, #260]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	493d      	ldr	r1, [pc, #244]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512a:	e040      	b.n	80051ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d023      	beq.n	800517c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005134:	4b39      	ldr	r3, [pc, #228]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a38      	ldr	r2, [pc, #224]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005140:	f7fd fcac 	bl	8002a9c <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005148:	f7fd fca8 	bl	8002a9c <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e1bd      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515a:	4b30      	ldr	r3, [pc, #192]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0f0      	beq.n	8005148 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005166:	4b2d      	ldr	r3, [pc, #180]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	4929      	ldr	r1, [pc, #164]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005176:	4313      	orrs	r3, r2
 8005178:	600b      	str	r3, [r1, #0]
 800517a:	e018      	b.n	80051ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800517c:	4b27      	ldr	r3, [pc, #156]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a26      	ldr	r2, [pc, #152]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 8005182:	f023 0301 	bic.w	r3, r3, #1
 8005186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fd fc88 	bl	8002a9c <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005190:	f7fd fc84 	bl	8002a9c <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e199      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051a2:	4b1e      	ldr	r3, [pc, #120]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f0      	bne.n	8005190 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d038      	beq.n	800522c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d019      	beq.n	80051f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051c2:	4b16      	ldr	r3, [pc, #88]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 80051c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c6:	4a15      	ldr	r2, [pc, #84]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ce:	f7fd fc65 	bl	8002a9c <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051d6:	f7fd fc61 	bl	8002a9c <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e176      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051e8:	4b0c      	ldr	r3, [pc, #48]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 80051ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0f0      	beq.n	80051d6 <HAL_RCC_OscConfig+0x23a>
 80051f4:	e01a      	b.n	800522c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051f6:	4b09      	ldr	r3, [pc, #36]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 80051f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fa:	4a08      	ldr	r2, [pc, #32]	@ (800521c <HAL_RCC_OscConfig+0x280>)
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005202:	f7fd fc4b 	bl	8002a9c <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005208:	e00a      	b.n	8005220 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800520a:	f7fd fc47 	bl	8002a9c <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d903      	bls.n	8005220 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e15c      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
 800521c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005220:	4b91      	ldr	r3, [pc, #580]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 8005222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1ee      	bne.n	800520a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80a4 	beq.w	8005382 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523a:	4b8b      	ldr	r3, [pc, #556]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10d      	bne.n	8005262 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005246:	4b88      	ldr	r3, [pc, #544]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524a:	4a87      	ldr	r2, [pc, #540]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 800524c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005250:	6413      	str	r3, [r2, #64]	@ 0x40
 8005252:	4b85      	ldr	r3, [pc, #532]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800525a:	60bb      	str	r3, [r7, #8]
 800525c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525e:	2301      	movs	r3, #1
 8005260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005262:	4b82      	ldr	r3, [pc, #520]	@ (800546c <HAL_RCC_OscConfig+0x4d0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d118      	bne.n	80052a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800526e:	4b7f      	ldr	r3, [pc, #508]	@ (800546c <HAL_RCC_OscConfig+0x4d0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a7e      	ldr	r2, [pc, #504]	@ (800546c <HAL_RCC_OscConfig+0x4d0>)
 8005274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800527a:	f7fd fc0f 	bl	8002a9c <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005282:	f7fd fc0b 	bl	8002a9c <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b64      	cmp	r3, #100	@ 0x64
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e120      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005294:	4b75      	ldr	r3, [pc, #468]	@ (800546c <HAL_RCC_OscConfig+0x4d0>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d106      	bne.n	80052b6 <HAL_RCC_OscConfig+0x31a>
 80052a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ac:	4a6e      	ldr	r2, [pc, #440]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052b4:	e02d      	b.n	8005312 <HAL_RCC_OscConfig+0x376>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10c      	bne.n	80052d8 <HAL_RCC_OscConfig+0x33c>
 80052be:	4b6a      	ldr	r3, [pc, #424]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80052c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c2:	4a69      	ldr	r2, [pc, #420]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ca:	4b67      	ldr	r3, [pc, #412]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ce:	4a66      	ldr	r2, [pc, #408]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80052d6:	e01c      	b.n	8005312 <HAL_RCC_OscConfig+0x376>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2b05      	cmp	r3, #5
 80052de:	d10c      	bne.n	80052fa <HAL_RCC_OscConfig+0x35e>
 80052e0:	4b61      	ldr	r3, [pc, #388]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80052e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e4:	4a60      	ldr	r2, [pc, #384]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80052e6:	f043 0304 	orr.w	r3, r3, #4
 80052ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ec:	4b5e      	ldr	r3, [pc, #376]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80052ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f8:	e00b      	b.n	8005312 <HAL_RCC_OscConfig+0x376>
 80052fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80052fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fe:	4a5a      	ldr	r2, [pc, #360]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 8005300:	f023 0301 	bic.w	r3, r3, #1
 8005304:	6713      	str	r3, [r2, #112]	@ 0x70
 8005306:	4b58      	ldr	r3, [pc, #352]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 8005308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530a:	4a57      	ldr	r2, [pc, #348]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 800530c:	f023 0304 	bic.w	r3, r3, #4
 8005310:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d015      	beq.n	8005346 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531a:	f7fd fbbf 	bl	8002a9c <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005320:	e00a      	b.n	8005338 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005322:	f7fd fbbb 	bl	8002a9c <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005330:	4293      	cmp	r3, r2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e0ce      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005338:	4b4b      	ldr	r3, [pc, #300]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 800533a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0ee      	beq.n	8005322 <HAL_RCC_OscConfig+0x386>
 8005344:	e014      	b.n	8005370 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005346:	f7fd fba9 	bl	8002a9c <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800534c:	e00a      	b.n	8005364 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534e:	f7fd fba5 	bl	8002a9c <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535c:	4293      	cmp	r3, r2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e0b8      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005364:	4b40      	ldr	r3, [pc, #256]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 8005366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1ee      	bne.n	800534e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005370:	7dfb      	ldrb	r3, [r7, #23]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d105      	bne.n	8005382 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005376:	4b3c      	ldr	r3, [pc, #240]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537a:	4a3b      	ldr	r2, [pc, #236]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 800537c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005380:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 80a4 	beq.w	80054d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800538c:	4b36      	ldr	r3, [pc, #216]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 030c 	and.w	r3, r3, #12
 8005394:	2b08      	cmp	r3, #8
 8005396:	d06b      	beq.n	8005470 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d149      	bne.n	8005434 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a0:	4b31      	ldr	r3, [pc, #196]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a30      	ldr	r2, [pc, #192]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80053a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fd fb76 	bl	8002a9c <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b4:	f7fd fb72 	bl	8002a9c <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e087      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c6:	4b28      	ldr	r3, [pc, #160]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69da      	ldr	r2, [r3, #28]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e0:	019b      	lsls	r3, r3, #6
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e8:	085b      	lsrs	r3, r3, #1
 80053ea:	3b01      	subs	r3, #1
 80053ec:	041b      	lsls	r3, r3, #16
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f4:	061b      	lsls	r3, r3, #24
 80053f6:	4313      	orrs	r3, r2
 80053f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 80053fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80053fe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005400:	4b19      	ldr	r3, [pc, #100]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a18      	ldr	r2, [pc, #96]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 8005406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800540a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fd fb46 	bl	8002a9c <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005414:	f7fd fb42 	bl	8002a9c <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e057      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005426:	4b10      	ldr	r3, [pc, #64]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0x478>
 8005432:	e04f      	b.n	80054d4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005434:	4b0c      	ldr	r3, [pc, #48]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a0b      	ldr	r2, [pc, #44]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 800543a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800543e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fd fb2c 	bl	8002a9c <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005448:	f7fd fb28 	bl	8002a9c <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e03d      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545a:	4b03      	ldr	r3, [pc, #12]	@ (8005468 <HAL_RCC_OscConfig+0x4cc>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x4ac>
 8005466:	e035      	b.n	80054d4 <HAL_RCC_OscConfig+0x538>
 8005468:	40023800 	.word	0x40023800
 800546c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005470:	4b1b      	ldr	r3, [pc, #108]	@ (80054e0 <HAL_RCC_OscConfig+0x544>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d028      	beq.n	80054d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005488:	429a      	cmp	r2, r3
 800548a:	d121      	bne.n	80054d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005496:	429a      	cmp	r2, r3
 8005498:	d11a      	bne.n	80054d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054a0:	4013      	ands	r3, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d111      	bne.n	80054d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	3b01      	subs	r3, #1
 80054ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054bc:	429a      	cmp	r2, r3
 80054be:	d107      	bne.n	80054d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d001      	beq.n	80054d4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40023800 	.word	0x40023800

080054e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0d0      	b.n	800569e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054fc:	4b6a      	ldr	r3, [pc, #424]	@ (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d910      	bls.n	800552c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800550a:	4b67      	ldr	r3, [pc, #412]	@ (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f023 020f 	bic.w	r2, r3, #15
 8005512:	4965      	ldr	r1, [pc, #404]	@ (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	4313      	orrs	r3, r2
 8005518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800551a:	4b63      	ldr	r3, [pc, #396]	@ (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d001      	beq.n	800552c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e0b8      	b.n	800569e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d020      	beq.n	800557a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005544:	4b59      	ldr	r3, [pc, #356]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	4a58      	ldr	r2, [pc, #352]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 800554a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800554e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800555c:	4b53      	ldr	r3, [pc, #332]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4a52      	ldr	r2, [pc, #328]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 8005562:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005566:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005568:	4b50      	ldr	r3, [pc, #320]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	494d      	ldr	r1, [pc, #308]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 8005576:	4313      	orrs	r3, r2
 8005578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d040      	beq.n	8005608 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d107      	bne.n	800559e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558e:	4b47      	ldr	r3, [pc, #284]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d115      	bne.n	80055c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e07f      	b.n	800569e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d107      	bne.n	80055b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055a6:	4b41      	ldr	r3, [pc, #260]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d109      	bne.n	80055c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e073      	b.n	800569e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b6:	4b3d      	ldr	r3, [pc, #244]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e06b      	b.n	800569e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055c6:	4b39      	ldr	r3, [pc, #228]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f023 0203 	bic.w	r2, r3, #3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	4936      	ldr	r1, [pc, #216]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055d8:	f7fd fa60 	bl	8002a9c <HAL_GetTick>
 80055dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055de:	e00a      	b.n	80055f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e0:	f7fd fa5c 	bl	8002a9c <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e053      	b.n	800569e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f6:	4b2d      	ldr	r3, [pc, #180]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 020c 	and.w	r2, r3, #12
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	429a      	cmp	r2, r3
 8005606:	d1eb      	bne.n	80055e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005608:	4b27      	ldr	r3, [pc, #156]	@ (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	683a      	ldr	r2, [r7, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d210      	bcs.n	8005638 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005616:	4b24      	ldr	r3, [pc, #144]	@ (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f023 020f 	bic.w	r2, r3, #15
 800561e:	4922      	ldr	r1, [pc, #136]	@ (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	4313      	orrs	r3, r2
 8005624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005626:	4b20      	ldr	r3, [pc, #128]	@ (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d001      	beq.n	8005638 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e032      	b.n	800569e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d008      	beq.n	8005656 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005644:	4b19      	ldr	r3, [pc, #100]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4916      	ldr	r1, [pc, #88]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 8005652:	4313      	orrs	r3, r2
 8005654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005662:	4b12      	ldr	r3, [pc, #72]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	490e      	ldr	r1, [pc, #56]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 8005672:	4313      	orrs	r3, r2
 8005674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005676:	f000 f821 	bl	80056bc <HAL_RCC_GetSysClockFreq>
 800567a:	4602      	mov	r2, r0
 800567c:	4b0b      	ldr	r3, [pc, #44]	@ (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	490a      	ldr	r1, [pc, #40]	@ (80056b0 <HAL_RCC_ClockConfig+0x1cc>)
 8005688:	5ccb      	ldrb	r3, [r1, r3]
 800568a:	fa22 f303 	lsr.w	r3, r2, r3
 800568e:	4a09      	ldr	r2, [pc, #36]	@ (80056b4 <HAL_RCC_ClockConfig+0x1d0>)
 8005690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005692:	4b09      	ldr	r3, [pc, #36]	@ (80056b8 <HAL_RCC_ClockConfig+0x1d4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f7fd f9bc 	bl	8002a14 <HAL_InitTick>

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40023c00 	.word	0x40023c00
 80056ac:	40023800 	.word	0x40023800
 80056b0:	08008e8c 	.word	0x08008e8c
 80056b4:	20000000 	.word	0x20000000
 80056b8:	20000010 	.word	0x20000010

080056bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056c0:	b090      	sub	sp, #64	@ 0x40
 80056c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80056c8:	2300      	movs	r3, #0
 80056ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056cc:	2300      	movs	r3, #0
 80056ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056d4:	4b59      	ldr	r3, [pc, #356]	@ (800583c <HAL_RCC_GetSysClockFreq+0x180>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 030c 	and.w	r3, r3, #12
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d00d      	beq.n	80056fc <HAL_RCC_GetSysClockFreq+0x40>
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	f200 80a1 	bhi.w	8005828 <HAL_RCC_GetSysClockFreq+0x16c>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_RCC_GetSysClockFreq+0x34>
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d003      	beq.n	80056f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80056ee:	e09b      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056f0:	4b53      	ldr	r3, [pc, #332]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x184>)
 80056f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056f4:	e09b      	b.n	800582e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056f6:	4b53      	ldr	r3, [pc, #332]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x188>)
 80056f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056fa:	e098      	b.n	800582e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056fc:	4b4f      	ldr	r3, [pc, #316]	@ (800583c <HAL_RCC_GetSysClockFreq+0x180>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005704:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005706:	4b4d      	ldr	r3, [pc, #308]	@ (800583c <HAL_RCC_GetSysClockFreq+0x180>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d028      	beq.n	8005764 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005712:	4b4a      	ldr	r3, [pc, #296]	@ (800583c <HAL_RCC_GetSysClockFreq+0x180>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	099b      	lsrs	r3, r3, #6
 8005718:	2200      	movs	r2, #0
 800571a:	623b      	str	r3, [r7, #32]
 800571c:	627a      	str	r2, [r7, #36]	@ 0x24
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005724:	2100      	movs	r1, #0
 8005726:	4b47      	ldr	r3, [pc, #284]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x188>)
 8005728:	fb03 f201 	mul.w	r2, r3, r1
 800572c:	2300      	movs	r3, #0
 800572e:	fb00 f303 	mul.w	r3, r0, r3
 8005732:	4413      	add	r3, r2
 8005734:	4a43      	ldr	r2, [pc, #268]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x188>)
 8005736:	fba0 1202 	umull	r1, r2, r0, r2
 800573a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800573c:	460a      	mov	r2, r1
 800573e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005742:	4413      	add	r3, r2
 8005744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005748:	2200      	movs	r2, #0
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	61fa      	str	r2, [r7, #28]
 800574e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005752:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005756:	f7fa fd57 	bl	8000208 <__aeabi_uldivmod>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4613      	mov	r3, r2
 8005760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005762:	e053      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005764:	4b35      	ldr	r3, [pc, #212]	@ (800583c <HAL_RCC_GetSysClockFreq+0x180>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	099b      	lsrs	r3, r3, #6
 800576a:	2200      	movs	r2, #0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	617a      	str	r2, [r7, #20]
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005776:	f04f 0b00 	mov.w	fp, #0
 800577a:	4652      	mov	r2, sl
 800577c:	465b      	mov	r3, fp
 800577e:	f04f 0000 	mov.w	r0, #0
 8005782:	f04f 0100 	mov.w	r1, #0
 8005786:	0159      	lsls	r1, r3, #5
 8005788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800578c:	0150      	lsls	r0, r2, #5
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	ebb2 080a 	subs.w	r8, r2, sl
 8005796:	eb63 090b 	sbc.w	r9, r3, fp
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057ae:	ebb2 0408 	subs.w	r4, r2, r8
 80057b2:	eb63 0509 	sbc.w	r5, r3, r9
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	00eb      	lsls	r3, r5, #3
 80057c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057c4:	00e2      	lsls	r2, r4, #3
 80057c6:	4614      	mov	r4, r2
 80057c8:	461d      	mov	r5, r3
 80057ca:	eb14 030a 	adds.w	r3, r4, sl
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	eb45 030b 	adc.w	r3, r5, fp
 80057d4:	607b      	str	r3, [r7, #4]
 80057d6:	f04f 0200 	mov.w	r2, #0
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057e2:	4629      	mov	r1, r5
 80057e4:	028b      	lsls	r3, r1, #10
 80057e6:	4621      	mov	r1, r4
 80057e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057ec:	4621      	mov	r1, r4
 80057ee:	028a      	lsls	r2, r1, #10
 80057f0:	4610      	mov	r0, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f6:	2200      	movs	r2, #0
 80057f8:	60bb      	str	r3, [r7, #8]
 80057fa:	60fa      	str	r2, [r7, #12]
 80057fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005800:	f7fa fd02 	bl	8000208 <__aeabi_uldivmod>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4613      	mov	r3, r2
 800580a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800580c:	4b0b      	ldr	r3, [pc, #44]	@ (800583c <HAL_RCC_GetSysClockFreq+0x180>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	0c1b      	lsrs	r3, r3, #16
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	3301      	adds	r3, #1
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800581c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800581e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005820:	fbb2 f3f3 	udiv	r3, r2, r3
 8005824:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005826:	e002      	b.n	800582e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005828:	4b05      	ldr	r3, [pc, #20]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x184>)
 800582a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800582c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005830:	4618      	mov	r0, r3
 8005832:	3740      	adds	r7, #64	@ 0x40
 8005834:	46bd      	mov	sp, r7
 8005836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800583a:	bf00      	nop
 800583c:	40023800 	.word	0x40023800
 8005840:	00f42400 	.word	0x00f42400
 8005844:	017d7840 	.word	0x017d7840

08005848 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800584c:	4b03      	ldr	r3, [pc, #12]	@ (800585c <HAL_RCC_GetHCLKFreq+0x14>)
 800584e:	681b      	ldr	r3, [r3, #0]
}
 8005850:	4618      	mov	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	20000000 	.word	0x20000000

08005860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005864:	f7ff fff0 	bl	8005848 <HAL_RCC_GetHCLKFreq>
 8005868:	4602      	mov	r2, r0
 800586a:	4b05      	ldr	r3, [pc, #20]	@ (8005880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	0a9b      	lsrs	r3, r3, #10
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	4903      	ldr	r1, [pc, #12]	@ (8005884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005876:	5ccb      	ldrb	r3, [r1, r3]
 8005878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800587c:	4618      	mov	r0, r3
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40023800 	.word	0x40023800
 8005884:	08008e9c 	.word	0x08008e9c

08005888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800588c:	f7ff ffdc 	bl	8005848 <HAL_RCC_GetHCLKFreq>
 8005890:	4602      	mov	r2, r0
 8005892:	4b05      	ldr	r3, [pc, #20]	@ (80058a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	0b5b      	lsrs	r3, r3, #13
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	4903      	ldr	r1, [pc, #12]	@ (80058ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800589e:	5ccb      	ldrb	r3, [r1, r3]
 80058a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40023800 	.word	0x40023800
 80058ac:	08008e9c 	.word	0x08008e9c

080058b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d012      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058d8:	4b69      	ldr	r3, [pc, #420]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4a68      	ldr	r2, [pc, #416]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80058e2:	6093      	str	r3, [r2, #8]
 80058e4:	4b66      	ldr	r3, [pc, #408]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ec:	4964      	ldr	r1, [pc, #400]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80058fa:	2301      	movs	r3, #1
 80058fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d017      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800590a:	4b5d      	ldr	r3, [pc, #372]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800590c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005910:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005918:	4959      	ldr	r1, [pc, #356]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005924:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005928:	d101      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800592a:	2301      	movs	r3, #1
 800592c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005936:	2301      	movs	r3, #1
 8005938:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d017      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005946:	4b4e      	ldr	r3, [pc, #312]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800594c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005954:	494a      	ldr	r1, [pc, #296]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005956:	4313      	orrs	r3, r2
 8005958:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005960:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005964:	d101      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005966:	2301      	movs	r3, #1
 8005968:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005972:	2301      	movs	r3, #1
 8005974:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005982:	2301      	movs	r3, #1
 8005984:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 808b 	beq.w	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005994:	4b3a      	ldr	r3, [pc, #232]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005998:	4a39      	ldr	r2, [pc, #228]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800599a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800599e:	6413      	str	r3, [r2, #64]	@ 0x40
 80059a0:	4b37      	ldr	r3, [pc, #220]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059a8:	60bb      	str	r3, [r7, #8]
 80059aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80059ac:	4b35      	ldr	r3, [pc, #212]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a34      	ldr	r2, [pc, #208]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b8:	f7fd f870 	bl	8002a9c <HAL_GetTick>
 80059bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80059be:	e008      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c0:	f7fd f86c 	bl	8002a9c <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b64      	cmp	r3, #100	@ 0x64
 80059cc:	d901      	bls.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e357      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80059d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0f0      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059de:	4b28      	ldr	r3, [pc, #160]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d035      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d02e      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059fc:	4b20      	ldr	r3, [pc, #128]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a06:	4b1e      	ldr	r3, [pc, #120]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a10:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a12:	4b1b      	ldr	r3, [pc, #108]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a16:	4a1a      	ldr	r2, [pc, #104]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a1c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005a1e:	4a18      	ldr	r2, [pc, #96]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a24:	4b16      	ldr	r3, [pc, #88]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d114      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a30:	f7fd f834 	bl	8002a9c <HAL_GetTick>
 8005a34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a36:	e00a      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a38:	f7fd f830 	bl	8002a9c <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e319      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0ee      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a66:	d111      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005a68:	4b05      	ldr	r3, [pc, #20]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a74:	4b04      	ldr	r3, [pc, #16]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a76:	400b      	ands	r3, r1
 8005a78:	4901      	ldr	r1, [pc, #4]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	608b      	str	r3, [r1, #8]
 8005a7e:	e00b      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005a80:	40023800 	.word	0x40023800
 8005a84:	40007000 	.word	0x40007000
 8005a88:	0ffffcff 	.word	0x0ffffcff
 8005a8c:	4baa      	ldr	r3, [pc, #680]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4aa9      	ldr	r2, [pc, #676]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a92:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a96:	6093      	str	r3, [r2, #8]
 8005a98:	4ba7      	ldr	r3, [pc, #668]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa4:	49a4      	ldr	r1, [pc, #656]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0310 	and.w	r3, r3, #16
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d010      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ab6:	4ba0      	ldr	r3, [pc, #640]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005abc:	4a9e      	ldr	r2, [pc, #632]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005abe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ac2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005ac6:	4b9c      	ldr	r3, [pc, #624]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ac8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad0:	4999      	ldr	r1, [pc, #612]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ae4:	4b94      	ldr	r3, [pc, #592]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005af2:	4991      	ldr	r1, [pc, #580]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b06:	4b8c      	ldr	r3, [pc, #560]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b14:	4988      	ldr	r1, [pc, #544]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b28:	4b83      	ldr	r3, [pc, #524]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b36:	4980      	ldr	r1, [pc, #512]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b4a:	4b7b      	ldr	r3, [pc, #492]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b58:	4977      	ldr	r1, [pc, #476]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b6c:	4b72      	ldr	r3, [pc, #456]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b72:	f023 0203 	bic.w	r2, r3, #3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	496f      	ldr	r1, [pc, #444]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b8e:	4b6a      	ldr	r3, [pc, #424]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b94:	f023 020c 	bic.w	r2, r3, #12
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b9c:	4966      	ldr	r1, [pc, #408]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bb0:	4b61      	ldr	r3, [pc, #388]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bbe:	495e      	ldr	r1, [pc, #376]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bd2:	4b59      	ldr	r3, [pc, #356]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be0:	4955      	ldr	r1, [pc, #340]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005bf4:	4b50      	ldr	r3, [pc, #320]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bfa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c02:	494d      	ldr	r1, [pc, #308]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005c16:	4b48      	ldr	r3, [pc, #288]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c1c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c24:	4944      	ldr	r1, [pc, #272]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005c38:	4b3f      	ldr	r3, [pc, #252]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c46:	493c      	ldr	r1, [pc, #240]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005c5a:	4b37      	ldr	r3, [pc, #220]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c68:	4933      	ldr	r1, [pc, #204]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c82:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c8a:	492b      	ldr	r1, [pc, #172]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d011      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c9e:	4b26      	ldr	r3, [pc, #152]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cac:	4922      	ldr	r1, [pc, #136]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cbc:	d101      	bne.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cde:	4b16      	ldr	r3, [pc, #88]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cec:	4912      	ldr	r1, [pc, #72]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00b      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d00:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d06:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d10:	4909      	ldr	r1, [pc, #36]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d006      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 80d9 	beq.w	8005ede <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d2c:	4b02      	ldr	r3, [pc, #8]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a01      	ldr	r2, [pc, #4]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d36:	e001      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d3e:	f7fc fead 	bl	8002a9c <HAL_GetTick>
 8005d42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d44:	e008      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d46:	f7fc fea9 	bl	8002a9c <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b64      	cmp	r3, #100	@ 0x64
 8005d52:	d901      	bls.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e194      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d58:	4b6c      	ldr	r3, [pc, #432]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1f0      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d021      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d11d      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d78:	4b64      	ldr	r3, [pc, #400]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d7e:	0c1b      	lsrs	r3, r3, #16
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d86:	4b61      	ldr	r3, [pc, #388]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d8c:	0e1b      	lsrs	r3, r3, #24
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	019a      	lsls	r2, r3, #6
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	041b      	lsls	r3, r3, #16
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	061b      	lsls	r3, r3, #24
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	071b      	lsls	r3, r3, #28
 8005dac:	4957      	ldr	r1, [pc, #348]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d004      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dc8:	d00a      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d02e      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dde:	d129      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005de0:	4b4a      	ldr	r3, [pc, #296]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005de6:	0c1b      	lsrs	r3, r3, #16
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005dee:	4b47      	ldr	r3, [pc, #284]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005df4:	0f1b      	lsrs	r3, r3, #28
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	019a      	lsls	r2, r3, #6
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	041b      	lsls	r3, r3, #16
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	061b      	lsls	r3, r3, #24
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	071b      	lsls	r3, r3, #28
 8005e14:	493d      	ldr	r1, [pc, #244]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e22:	f023 021f 	bic.w	r2, r3, #31
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	4937      	ldr	r1, [pc, #220]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01d      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e40:	4b32      	ldr	r3, [pc, #200]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e46:	0e1b      	lsrs	r3, r3, #24
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e54:	0f1b      	lsrs	r3, r3, #28
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	019a      	lsls	r2, r3, #6
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	041b      	lsls	r3, r3, #16
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	061b      	lsls	r3, r3, #24
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	071b      	lsls	r3, r3, #28
 8005e74:	4925      	ldr	r1, [pc, #148]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d011      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	019a      	lsls	r2, r3, #6
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	041b      	lsls	r3, r3, #16
 8005e94:	431a      	orrs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	061b      	lsls	r3, r3, #24
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	071b      	lsls	r3, r3, #28
 8005ea4:	4919      	ldr	r1, [pc, #100]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005eac:	4b17      	ldr	r3, [pc, #92]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a16      	ldr	r2, [pc, #88]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb8:	f7fc fdf0 	bl	8002a9c <HAL_GetTick>
 8005ebc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ec0:	f7fc fdec 	bl	8002a9c <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b64      	cmp	r3, #100	@ 0x64
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e0d7      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f0      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	f040 80cd 	bne.w	8006080 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ee6:	4b09      	ldr	r3, [pc, #36]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a08      	ldr	r2, [pc, #32]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ef2:	f7fc fdd3 	bl	8002a9c <HAL_GetTick>
 8005ef6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ef8:	e00a      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005efa:	f7fc fdcf 	bl	8002a9c <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b64      	cmp	r3, #100	@ 0x64
 8005f06:	d903      	bls.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e0ba      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005f0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f10:	4b5e      	ldr	r3, [pc, #376]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f1c:	d0ed      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02e      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d12a      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f46:	4b51      	ldr	r3, [pc, #324]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4c:	0c1b      	lsrs	r3, r3, #16
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f54:	4b4d      	ldr	r3, [pc, #308]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f5a:	0f1b      	lsrs	r3, r3, #28
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	019a      	lsls	r2, r3, #6
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	041b      	lsls	r3, r3, #16
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	061b      	lsls	r3, r3, #24
 8005f74:	431a      	orrs	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	071b      	lsls	r3, r3, #28
 8005f7a:	4944      	ldr	r1, [pc, #272]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f82:	4b42      	ldr	r3, [pc, #264]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f88:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f90:	3b01      	subs	r3, #1
 8005f92:	021b      	lsls	r3, r3, #8
 8005f94:	493d      	ldr	r1, [pc, #244]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d022      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fb0:	d11d      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fb2:	4b36      	ldr	r3, [pc, #216]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb8:	0e1b      	lsrs	r3, r3, #24
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005fc0:	4b32      	ldr	r3, [pc, #200]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc6:	0f1b      	lsrs	r3, r3, #28
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	019a      	lsls	r2, r3, #6
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	041b      	lsls	r3, r3, #16
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	061b      	lsls	r3, r3, #24
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	071b      	lsls	r3, r3, #28
 8005fe6:	4929      	ldr	r1, [pc, #164]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d028      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ffa:	4b24      	ldr	r3, [pc, #144]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006000:	0e1b      	lsrs	r3, r3, #24
 8006002:	f003 030f 	and.w	r3, r3, #15
 8006006:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006008:	4b20      	ldr	r3, [pc, #128]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800600a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600e:	0c1b      	lsrs	r3, r3, #16
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	019a      	lsls	r2, r3, #6
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	041b      	lsls	r3, r3, #16
 8006020:	431a      	orrs	r2, r3
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	061b      	lsls	r3, r3, #24
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	071b      	lsls	r3, r3, #28
 800602e:	4917      	ldr	r1, [pc, #92]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006030:	4313      	orrs	r3, r2
 8006032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006036:	4b15      	ldr	r3, [pc, #84]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800603c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006044:	4911      	ldr	r1, [pc, #68]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800604c:	4b0f      	ldr	r3, [pc, #60]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a0e      	ldr	r2, [pc, #56]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006058:	f7fc fd20 	bl	8002a9c <HAL_GetTick>
 800605c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800605e:	e008      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006060:	f7fc fd1c 	bl	8002a9c <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b64      	cmp	r3, #100	@ 0x64
 800606c:	d901      	bls.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e007      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006072:	4b06      	ldr	r3, [pc, #24]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800607a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800607e:	d1ef      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	40023800 	.word	0x40023800

08006090 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80060ae:	f040 808d 	bne.w	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 80060b2:	4b93      	ldr	r3, [pc, #588]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060b8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80060c0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060c8:	d07c      	beq.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060d0:	d87b      	bhi.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d004      	beq.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060de:	d039      	beq.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80060e0:	e073      	b.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80060e2:	4b87      	ldr	r3, [pc, #540]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d108      	bne.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80060ee:	4b84      	ldr	r3, [pc, #528]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060f6:	4a83      	ldr	r2, [pc, #524]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80060f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	e007      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006100:	4b7f      	ldr	r3, [pc, #508]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006108:	4a7f      	ldr	r2, [pc, #508]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800610a:	fbb2 f3f3 	udiv	r3, r2, r3
 800610e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006110:	4b7b      	ldr	r3, [pc, #492]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006116:	0e1b      	lsrs	r3, r3, #24
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800611e:	4b78      	ldr	r3, [pc, #480]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006124:	099b      	lsrs	r3, r3, #6
 8006126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	fb03 f202 	mul.w	r2, r3, r2
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	fbb2 f3f3 	udiv	r3, r2, r3
 8006136:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006138:	4b71      	ldr	r3, [pc, #452]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800613a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	f003 031f 	and.w	r3, r3, #31
 8006144:	3301      	adds	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006150:	617b      	str	r3, [r7, #20]
        break;
 8006152:	e03b      	b.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006154:	4b6a      	ldr	r3, [pc, #424]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d108      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006160:	4b67      	ldr	r3, [pc, #412]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006168:	4a66      	ldr	r2, [pc, #408]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800616a:	fbb2 f3f3 	udiv	r3, r2, r3
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	e007      	b.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006172:	4b63      	ldr	r3, [pc, #396]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800617a:	4a63      	ldr	r2, [pc, #396]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800617c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006180:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006182:	4b5f      	ldr	r3, [pc, #380]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006184:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006188:	0e1b      	lsrs	r3, r3, #24
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006190:	4b5b      	ldr	r3, [pc, #364]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006196:	099b      	lsrs	r3, r3, #6
 8006198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	fb03 f202 	mul.w	r2, r3, r2
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80061aa:	4b55      	ldr	r3, [pc, #340]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061b0:	f003 031f 	and.w	r3, r3, #31
 80061b4:	3301      	adds	r3, #1
 80061b6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c0:	617b      	str	r3, [r7, #20]
        break;
 80061c2:	e003      	b.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80061c4:	4b51      	ldr	r3, [pc, #324]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80061c6:	617b      	str	r3, [r7, #20]
        break;
 80061c8:	e000      	b.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 80061ca:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061d2:	f040 808d 	bne.w	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 80061d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061dc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80061e4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061ec:	d07c      	beq.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061f4:	d87b      	bhi.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006202:	d039      	beq.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006204:	e073      	b.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006206:	4b3e      	ldr	r3, [pc, #248]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d108      	bne.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006212:	4b3b      	ldr	r3, [pc, #236]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800621a:	4a3a      	ldr	r2, [pc, #232]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800621c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	e007      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006224:	4b36      	ldr	r3, [pc, #216]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800622c:	4a36      	ldr	r2, [pc, #216]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800622e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006232:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006234:	4b32      	ldr	r3, [pc, #200]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800623a:	0e1b      	lsrs	r3, r3, #24
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006242:	4b2f      	ldr	r3, [pc, #188]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006248:	099b      	lsrs	r3, r3, #6
 800624a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	fb03 f202 	mul.w	r2, r3, r2
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	fbb2 f3f3 	udiv	r3, r2, r3
 800625a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800625c:	4b28      	ldr	r3, [pc, #160]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800625e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006262:	0a1b      	lsrs	r3, r3, #8
 8006264:	f003 031f 	and.w	r3, r3, #31
 8006268:	3301      	adds	r3, #1
 800626a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	fbb2 f3f3 	udiv	r3, r2, r3
 8006274:	617b      	str	r3, [r7, #20]
        break;
 8006276:	e03b      	b.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006278:	4b21      	ldr	r3, [pc, #132]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d108      	bne.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006284:	4b1e      	ldr	r3, [pc, #120]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800628c:	4a1d      	ldr	r2, [pc, #116]	@ (8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800628e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	e007      	b.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006296:	4b1a      	ldr	r3, [pc, #104]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800629e:	4a1a      	ldr	r2, [pc, #104]	@ (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80062a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80062a6:	4b16      	ldr	r3, [pc, #88]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ac:	0e1b      	lsrs	r3, r3, #24
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80062b4:	4b12      	ldr	r3, [pc, #72]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ba:	099b      	lsrs	r3, r3, #6
 80062bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	fb03 f202 	mul.w	r2, r3, r2
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062cc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80062ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062d4:	f003 031f 	and.w	r3, r3, #31
 80062d8:	3301      	adds	r3, #1
 80062da:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	617b      	str	r3, [r7, #20]
        break;
 80062e6:	e003      	b.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 80062e8:	4b08      	ldr	r3, [pc, #32]	@ (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80062ea:	617b      	str	r3, [r7, #20]
        break;
 80062ec:	e000      	b.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 80062ee:	bf00      	nop
      }
    }
  }

  return frequency;
 80062f0:	697b      	ldr	r3, [r7, #20]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40023800 	.word	0x40023800
 8006304:	00f42400 	.word	0x00f42400
 8006308:	017d7840 	.word	0x017d7840
 800630c:	00bb8000 	.word	0x00bb8000

08006310 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006318:	2300      	movs	r3, #0
 800631a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800631c:	2300      	movs	r3, #0
 800631e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e156      	b.n	80065dc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fb f922 	bl	800158c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fadd 	bl	8006910 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d00c      	beq.n	8006378 <HAL_SAI_Init+0x68>
 800635e:	2b02      	cmp	r3, #2
 8006360:	d80d      	bhi.n	800637e <HAL_SAI_Init+0x6e>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_SAI_Init+0x5c>
 8006366:	2b01      	cmp	r3, #1
 8006368:	d003      	beq.n	8006372 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800636a:	e008      	b.n	800637e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	61fb      	str	r3, [r7, #28]
      break;
 8006370:	e006      	b.n	8006380 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006372:	2310      	movs	r3, #16
 8006374:	61fb      	str	r3, [r7, #28]
      break;
 8006376:	e003      	b.n	8006380 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006378:	2320      	movs	r3, #32
 800637a:	61fb      	str	r3, [r7, #28]
      break;
 800637c:	e000      	b.n	8006380 <HAL_SAI_Init+0x70>
      break;
 800637e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2b03      	cmp	r3, #3
 8006386:	d81e      	bhi.n	80063c6 <HAL_SAI_Init+0xb6>
 8006388:	a201      	add	r2, pc, #4	@ (adr r2, 8006390 <HAL_SAI_Init+0x80>)
 800638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638e:	bf00      	nop
 8006390:	080063a1 	.word	0x080063a1
 8006394:	080063a7 	.word	0x080063a7
 8006398:	080063af 	.word	0x080063af
 800639c:	080063b7 	.word	0x080063b7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]
    }
    break;
 80063a4:	e010      	b.n	80063c8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80063a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063aa:	617b      	str	r3, [r7, #20]
    }
    break;
 80063ac:	e00c      	b.n	80063c8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80063ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80063b2:	617b      	str	r3, [r7, #20]
    }
    break;
 80063b4:	e008      	b.n	80063c8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80063b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80063ba:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f043 0301 	orr.w	r3, r3, #1
 80063c2:	61fb      	str	r3, [r7, #28]
    }
    break;
 80063c4:	e000      	b.n	80063c8 <HAL_SAI_Init+0xb8>
    default:
      break;
 80063c6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a85      	ldr	r2, [pc, #532]	@ (80065e4 <HAL_SAI_Init+0x2d4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d004      	beq.n	80063dc <HAL_SAI_Init+0xcc>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a84      	ldr	r2, [pc, #528]	@ (80065e8 <HAL_SAI_Init+0x2d8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d103      	bne.n	80063e4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80063dc:	4a83      	ldr	r2, [pc, #524]	@ (80065ec <HAL_SAI_Init+0x2dc>)
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	e002      	b.n	80063ea <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80063e4:	4a82      	ldr	r2, [pc, #520]	@ (80065f0 <HAL_SAI_Init+0x2e0>)
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d04c      	beq.n	800648c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a7a      	ldr	r2, [pc, #488]	@ (80065e4 <HAL_SAI_Init+0x2d4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d004      	beq.n	800640a <HAL_SAI_Init+0xfa>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a78      	ldr	r2, [pc, #480]	@ (80065e8 <HAL_SAI_Init+0x2d8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d104      	bne.n	8006414 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800640a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800640e:	f7ff fe3f 	bl	8006090 <HAL_RCCEx_GetPeriphCLKFreq>
 8006412:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a76      	ldr	r2, [pc, #472]	@ (80065f4 <HAL_SAI_Init+0x2e4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <HAL_SAI_Init+0x118>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a75      	ldr	r2, [pc, #468]	@ (80065f8 <HAL_SAI_Init+0x2e8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d104      	bne.n	8006432 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006428:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800642c:	f7ff fe30 	bl	8006090 <HAL_RCCEx_GetPeriphCLKFreq>
 8006430:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	461a      	mov	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	025b      	lsls	r3, r3, #9
 8006444:	fbb2 f3f3 	udiv	r3, r2, r3
 8006448:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4a6b      	ldr	r2, [pc, #428]	@ (80065fc <HAL_SAI_Init+0x2ec>)
 800644e:	fba2 2303 	umull	r2, r3, r2, r3
 8006452:	08da      	lsrs	r2, r3, #3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8006458:	68f9      	ldr	r1, [r7, #12]
 800645a:	4b68      	ldr	r3, [pc, #416]	@ (80065fc <HAL_SAI_Init+0x2ec>)
 800645c:	fba3 2301 	umull	r2, r3, r3, r1
 8006460:	08da      	lsrs	r2, r3, #3
 8006462:	4613      	mov	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	1aca      	subs	r2, r1, r3
 800646c:	2a08      	cmp	r2, #8
 800646e:	d904      	bls.n	800647a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800647e:	2b04      	cmp	r3, #4
 8006480:	d104      	bne.n	800648c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	085a      	lsrs	r2, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <HAL_SAI_Init+0x18c>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2b02      	cmp	r3, #2
 800649a:	d109      	bne.n	80064b0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_SAI_Init+0x198>
 80064a4:	2300      	movs	r3, #0
 80064a6:	e001      	b.n	80064ac <HAL_SAI_Init+0x19c>
 80064a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	e008      	b.n	80064c2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d102      	bne.n	80064be <HAL_SAI_Init+0x1ae>
 80064b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064bc:	e000      	b.n	80064c0 <HAL_SAI_Init+0x1b0>
 80064be:	2300      	movs	r3, #0
 80064c0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6819      	ldr	r1, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	4b4c      	ldr	r3, [pc, #304]	@ (8006600 <HAL_SAI_Init+0x2f0>)
 80064ce:	400b      	ands	r3, r1
 80064d0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6819      	ldr	r1, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064e6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ec:	431a      	orrs	r2, r3
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80064fa:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006506:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	051b      	lsls	r3, r3, #20
 800650e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6859      	ldr	r1, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	4b38      	ldr	r3, [pc, #224]	@ (8006604 <HAL_SAI_Init+0x2f4>)
 8006524:	400b      	ands	r3, r1
 8006526:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6859      	ldr	r1, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653c:	431a      	orrs	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6899      	ldr	r1, [r3, #8]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	4b2d      	ldr	r3, [pc, #180]	@ (8006608 <HAL_SAI_Init+0x2f8>)
 8006552:	400b      	ands	r3, r1
 8006554:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6899      	ldr	r1, [r3, #8]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006560:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006566:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800656c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8006572:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006578:	3b01      	subs	r3, #1
 800657a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800657c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68d9      	ldr	r1, [r3, #12]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8006594:	400b      	ands	r3, r1
 8006596:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68d9      	ldr	r1, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065ac:	041b      	lsls	r3, r3, #16
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065b4:	3b01      	subs	r3, #1
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3720      	adds	r7, #32
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	40015804 	.word	0x40015804
 80065e8:	40015824 	.word	0x40015824
 80065ec:	40015800 	.word	0x40015800
 80065f0:	40015c00 	.word	0x40015c00
 80065f4:	40015c04 	.word	0x40015c04
 80065f8:	40015c24 	.word	0x40015c24
 80065fc:	cccccccd 	.word	0xcccccccd
 8006600:	ff05c010 	.word	0xff05c010
 8006604:	ffff1ff0 	.word	0xffff1ff0
 8006608:	fff88000 	.word	0xfff88000

0800660c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	4613      	mov	r3, r2
 8006618:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800661a:	f7fc fa3f 	bl	8002a9c <HAL_GetTick>
 800661e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <HAL_SAI_Transmit_DMA+0x20>
 8006626:	88fb      	ldrh	r3, [r7, #6]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e093      	b.n	8006758 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	f040 808c 	bne.w	8006756 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_SAI_Transmit_DMA+0x40>
 8006648:	2302      	movs	r3, #2
 800664a:	e085      	b.n	8006758 <HAL_SAI_Transmit_DMA+0x14c>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	88fa      	ldrh	r2, [r7, #6]
 800665e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	88fa      	ldrh	r2, [r7, #6]
 8006666:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2212      	movs	r2, #18
 8006676:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800667e:	4a38      	ldr	r2, [pc, #224]	@ (8006760 <HAL_SAI_Transmit_DMA+0x154>)
 8006680:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006686:	4a37      	ldr	r2, [pc, #220]	@ (8006764 <HAL_SAI_Transmit_DMA+0x158>)
 8006688:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800668e:	4a36      	ldr	r2, [pc, #216]	@ (8006768 <HAL_SAI_Transmit_DMA+0x15c>)
 8006690:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006696:	2200      	movs	r2, #0
 8006698:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066a2:	4619      	mov	r1, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	331c      	adds	r3, #28
 80066aa:	461a      	mov	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80066b2:	f7fc fc41 	bl	8002f38 <HAL_DMA_Start_IT>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e047      	b.n	8006758 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80066c8:	2100      	movs	r1, #0
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f8ea 	bl	80068a4 <SAI_InterruptFlag>
 80066d0:	4601      	mov	r1, r0
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80066ee:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80066f0:	e015      	b.n	800671e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80066f2:	f7fc f9d3 	bl	8002a9c <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006700:	d90d      	bls.n	800671e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006708:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e01c      	b.n	8006758 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0e2      	beq.n	80066f2 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d107      	bne.n	800674a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006748:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	e000      	b.n	8006758 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8006756:	2302      	movs	r3, #2
  }
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	080069e1 	.word	0x080069e1
 8006764:	08006981 	.word	0x08006981
 8006768:	08006a79 	.word	0x08006a79

0800676c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <HAL_SAI_Receive_DMA+0x1a>
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e074      	b.n	8006874 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b01      	cmp	r3, #1
 8006794:	d16d      	bne.n	8006872 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800679c:	2b01      	cmp	r3, #1
 800679e:	d101      	bne.n	80067a4 <HAL_SAI_Receive_DMA+0x38>
 80067a0:	2302      	movs	r3, #2
 80067a2:	e067      	b.n	8006874 <HAL_SAI_Receive_DMA+0x108>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	88fa      	ldrh	r2, [r7, #6]
 80067b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	88fa      	ldrh	r2, [r7, #6]
 80067be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2222      	movs	r2, #34	@ 0x22
 80067ce:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d6:	4a29      	ldr	r2, [pc, #164]	@ (800687c <HAL_SAI_Receive_DMA+0x110>)
 80067d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067de:	4a28      	ldr	r2, [pc, #160]	@ (8006880 <HAL_SAI_Receive_DMA+0x114>)
 80067e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e6:	4a27      	ldr	r2, [pc, #156]	@ (8006884 <HAL_SAI_Receive_DMA+0x118>)
 80067e8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ee:	2200      	movs	r2, #0
 80067f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	331c      	adds	r3, #28
 80067fc:	4619      	mov	r1, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006802:	461a      	mov	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800680a:	f7fc fb95 	bl	8002f38 <HAL_DMA_Start_IT>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e029      	b.n	8006874 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006820:	2100      	movs	r1, #0
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 f83e 	bl	80068a4 <SAI_InterruptFlag>
 8006828:	4601      	mov	r1, r0
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006846:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d107      	bne.n	8006866 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006864:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	e000      	b.n	8006874 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8006872:	2302      	movs	r3, #2
  }
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	08006a5d 	.word	0x08006a5d
 8006880:	080069fd 	.word	0x080069fd
 8006884:	08006a79 	.word	0x08006a79

08006888 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006896:	b2db      	uxtb	r3, r3
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d103      	bne.n	80068c0 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f043 0308 	orr.w	r3, r3, #8
 80068be:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d10b      	bne.n	80068e0 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d003      	beq.n	80068d8 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d103      	bne.n	80068e0 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f043 0310 	orr.w	r3, r3, #16
 80068de:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d003      	beq.n	80068f0 <SAI_InterruptFlag+0x4c>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d104      	bne.n	80068fa <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	e003      	b.n	8006902 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f043 0304 	orr.w	r3, r3, #4
 8006900:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8006902:	68fb      	ldr	r3, [r7, #12]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006918:	4b17      	ldr	r3, [pc, #92]	@ (8006978 <SAI_Disable+0x68>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a17      	ldr	r2, [pc, #92]	@ (800697c <SAI_Disable+0x6c>)
 800691e:	fba2 2303 	umull	r2, r3, r2, r3
 8006922:	0b1b      	lsrs	r3, r3, #12
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800693a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	1e5a      	subs	r2, r3, #1
 8006940:	60fa      	str	r2, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10a      	bne.n	800695c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800694c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	72fb      	strb	r3, [r7, #11]
      break;
 800695a:	e006      	b.n	800696a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e8      	bne.n	800693c <SAI_Disable+0x2c>

  return status;
 800696a:	7afb      	ldrb	r3, [r7, #11]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	20000000 	.word	0x20000000
 800697c:	95cbec1b 	.word	0x95cbec1b

08006980 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006996:	d01c      	beq.n	80069d2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80069ae:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80069b0:	2100      	movs	r1, #0
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7ff ff76 	bl	80068a4 <SAI_InterruptFlag>
 80069b8:	4603      	mov	r3, r0
 80069ba:	43d9      	mvns	r1, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	400a      	ands	r2, r1
 80069c8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f7fb f8e0 	bl	8001b98 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80069d8:	bf00      	nop
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f7fb f8dc 	bl	8001bac <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a08:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a12:	d01c      	beq.n	8006a4e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006a22:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f7ff ff38 	bl	80068a4 <SAI_InterruptFlag>
 8006a34:	4603      	mov	r3, r0
 8006a36:	43d9      	mvns	r1, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	400a      	ands	r2, r1
 8006a44:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7fb f90a 	bl	8001c68 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006a54:	bf00      	nop
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a68:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f7fb f906 	bl	8001c7c <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006a70:	bf00      	nop
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a84:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a8c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d004      	beq.n	8006aaa <SAI_DMAError+0x32>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d112      	bne.n	8006ad0 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006ab8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f7ff ff28 	bl	8006910 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f7fb f875 	bl	8001bc0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006ad6:	bf00      	nop
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e025      	b.n	8006b3e <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fa fd36 	bl	8001578 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	f000 ffe0 	bl	8007ae4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6818      	ldr	r0, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	f001 f834 	bl	8007b9c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b086      	sub	sp, #24
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b58:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006b5a:	7dfb      	ldrb	r3, [r7, #23]
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d101      	bne.n	8006b64 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006b60:	2302      	movs	r3, #2
 8006b62:	e021      	b.n	8006ba8 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d002      	beq.n	8006b70 <HAL_SDRAM_SendCommand+0x2a>
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	2b05      	cmp	r3, #5
 8006b6e:	d118      	bne.n	8006ba2 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	68b9      	ldr	r1, [r7, #8]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 f875 	bl	8007c70 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d104      	bne.n	8006b98 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2205      	movs	r2, #5
 8006b92:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b96:	e006      	b.n	8006ba6 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006ba0:	e001      	b.n	8006ba6 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d101      	bne.n	8006bca <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e016      	b.n	8006bf8 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d10f      	bne.n	8006bf6 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f001 f867 	bl	8007cb8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e000      	b.n	8006bf8 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e049      	b.n	8006ca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fa fb74 	bl	8001314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	f000 f900 	bl	8006e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_TIM_ConfigClockSource+0x1c>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e0b4      	b.n	8006e36 <HAL_TIM_ConfigClockSource+0x186>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	4b56      	ldr	r3, [pc, #344]	@ (8006e40 <HAL_TIM_ConfigClockSource+0x190>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d04:	d03e      	beq.n	8006d84 <HAL_TIM_ConfigClockSource+0xd4>
 8006d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d0a:	f200 8087 	bhi.w	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d12:	f000 8086 	beq.w	8006e22 <HAL_TIM_ConfigClockSource+0x172>
 8006d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d1a:	d87f      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d1c:	2b70      	cmp	r3, #112	@ 0x70
 8006d1e:	d01a      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0xa6>
 8006d20:	2b70      	cmp	r3, #112	@ 0x70
 8006d22:	d87b      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d24:	2b60      	cmp	r3, #96	@ 0x60
 8006d26:	d050      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x11a>
 8006d28:	2b60      	cmp	r3, #96	@ 0x60
 8006d2a:	d877      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d2c:	2b50      	cmp	r3, #80	@ 0x50
 8006d2e:	d03c      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0xfa>
 8006d30:	2b50      	cmp	r3, #80	@ 0x50
 8006d32:	d873      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d34:	2b40      	cmp	r3, #64	@ 0x40
 8006d36:	d058      	beq.n	8006dea <HAL_TIM_ConfigClockSource+0x13a>
 8006d38:	2b40      	cmp	r3, #64	@ 0x40
 8006d3a:	d86f      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d3c:	2b30      	cmp	r3, #48	@ 0x30
 8006d3e:	d064      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x15a>
 8006d40:	2b30      	cmp	r3, #48	@ 0x30
 8006d42:	d86b      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	d060      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x15a>
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d867      	bhi.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d05c      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x15a>
 8006d50:	2b10      	cmp	r3, #16
 8006d52:	d05a      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x15a>
 8006d54:	e062      	b.n	8006e1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d66:	f000 f993 	bl	8007090 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	609a      	str	r2, [r3, #8]
      break;
 8006d82:	e04f      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d94:	f000 f97c 	bl	8007090 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006da6:	609a      	str	r2, [r3, #8]
      break;
 8006da8:	e03c      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006db6:	461a      	mov	r2, r3
 8006db8:	f000 f8f0 	bl	8006f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2150      	movs	r1, #80	@ 0x50
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 f949 	bl	800705a <TIM_ITRx_SetConfig>
      break;
 8006dc8:	e02c      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f000 f90f 	bl	8006ffa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2160      	movs	r1, #96	@ 0x60
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 f939 	bl	800705a <TIM_ITRx_SetConfig>
      break;
 8006de8:	e01c      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006df6:	461a      	mov	r2, r3
 8006df8:	f000 f8d0 	bl	8006f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2140      	movs	r1, #64	@ 0x40
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 f929 	bl	800705a <TIM_ITRx_SetConfig>
      break;
 8006e08:	e00c      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4619      	mov	r1, r3
 8006e14:	4610      	mov	r0, r2
 8006e16:	f000 f920 	bl	800705a <TIM_ITRx_SetConfig>
      break;
 8006e1a:	e003      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e20:	e000      	b.n	8006e24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	fffeff88 	.word	0xfffeff88

08006e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a46      	ldr	r2, [pc, #280]	@ (8006f70 <TIM_Base_SetConfig+0x12c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d013      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e62:	d00f      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a43      	ldr	r2, [pc, #268]	@ (8006f74 <TIM_Base_SetConfig+0x130>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00b      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a42      	ldr	r2, [pc, #264]	@ (8006f78 <TIM_Base_SetConfig+0x134>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d007      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a41      	ldr	r2, [pc, #260]	@ (8006f7c <TIM_Base_SetConfig+0x138>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a40      	ldr	r2, [pc, #256]	@ (8006f80 <TIM_Base_SetConfig+0x13c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d108      	bne.n	8006e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a35      	ldr	r2, [pc, #212]	@ (8006f70 <TIM_Base_SetConfig+0x12c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d02b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ea4:	d027      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a32      	ldr	r2, [pc, #200]	@ (8006f74 <TIM_Base_SetConfig+0x130>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d023      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a31      	ldr	r2, [pc, #196]	@ (8006f78 <TIM_Base_SetConfig+0x134>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d01f      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a30      	ldr	r2, [pc, #192]	@ (8006f7c <TIM_Base_SetConfig+0x138>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d01b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8006f80 <TIM_Base_SetConfig+0x13c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d017      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8006f84 <TIM_Base_SetConfig+0x140>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d013      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8006f88 <TIM_Base_SetConfig+0x144>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00f      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8006f8c <TIM_Base_SetConfig+0x148>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d00b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8006f90 <TIM_Base_SetConfig+0x14c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d007      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a2a      	ldr	r2, [pc, #168]	@ (8006f94 <TIM_Base_SetConfig+0x150>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d003      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a29      	ldr	r2, [pc, #164]	@ (8006f98 <TIM_Base_SetConfig+0x154>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d108      	bne.n	8006f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a10      	ldr	r2, [pc, #64]	@ (8006f70 <TIM_Base_SetConfig+0x12c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_Base_SetConfig+0xf8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a12      	ldr	r2, [pc, #72]	@ (8006f80 <TIM_Base_SetConfig+0x13c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d103      	bne.n	8006f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d105      	bne.n	8006f62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f023 0201 	bic.w	r2, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	611a      	str	r2, [r3, #16]
  }
}
 8006f62:	bf00      	nop
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	40010000 	.word	0x40010000
 8006f74:	40000400 	.word	0x40000400
 8006f78:	40000800 	.word	0x40000800
 8006f7c:	40000c00 	.word	0x40000c00
 8006f80:	40010400 	.word	0x40010400
 8006f84:	40014000 	.word	0x40014000
 8006f88:	40014400 	.word	0x40014400
 8006f8c:	40014800 	.word	0x40014800
 8006f90:	40001800 	.word	0x40001800
 8006f94:	40001c00 	.word	0x40001c00
 8006f98:	40002000 	.word	0x40002000

08006f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	f023 0201 	bic.w	r2, r3, #1
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f023 030a 	bic.w	r3, r3, #10
 8006fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	621a      	str	r2, [r3, #32]
}
 8006fee:	bf00      	nop
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b087      	sub	sp, #28
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	f023 0210 	bic.w	r2, r3, #16
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007024:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	031b      	lsls	r3, r3, #12
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	4313      	orrs	r3, r2
 800702e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007036:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	011b      	lsls	r3, r3, #4
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	4313      	orrs	r3, r2
 8007040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	621a      	str	r2, [r3, #32]
}
 800704e:	bf00      	nop
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	f043 0307 	orr.w	r3, r3, #7
 800707c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	609a      	str	r2, [r3, #8]
}
 8007084:	bf00      	nop
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	021a      	lsls	r2, r3, #8
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	431a      	orrs	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	609a      	str	r2, [r3, #8]
}
 80070c4:	bf00      	nop
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d101      	bne.n	80070e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070e4:	2302      	movs	r3, #2
 80070e6:	e06d      	b.n	80071c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a30      	ldr	r2, [pc, #192]	@ (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d004      	beq.n	800711c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a2f      	ldr	r2, [pc, #188]	@ (80071d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d108      	bne.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007122:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007134:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a20      	ldr	r2, [pc, #128]	@ (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d022      	beq.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800715a:	d01d      	beq.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a1d      	ldr	r2, [pc, #116]	@ (80071d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d018      	beq.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a1c      	ldr	r2, [pc, #112]	@ (80071dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d013      	beq.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a1a      	ldr	r2, [pc, #104]	@ (80071e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00e      	beq.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a15      	ldr	r2, [pc, #84]	@ (80071d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d009      	beq.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a16      	ldr	r2, [pc, #88]	@ (80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d004      	beq.n	8007198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a15      	ldr	r2, [pc, #84]	@ (80071e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d10c      	bne.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800719e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	40010000 	.word	0x40010000
 80071d4:	40010400 	.word	0x40010400
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40000800 	.word	0x40000800
 80071e0:	40000c00 	.word	0x40000c00
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40001800 	.word	0x40001800

080071ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e040      	b.n	8007280 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d106      	bne.n	8007214 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7fa f8a0 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2224      	movs	r2, #36	@ 0x24
 8007218:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0201 	bic.w	r2, r2, #1
 8007228:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fa8c 	bl	8007750 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f825 	bl	8007288 <UART_SetConfig>
 800723e:	4603      	mov	r3, r0
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e01b      	b.n	8007280 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0201 	orr.w	r2, r2, #1
 8007276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fb0b 	bl	8007894 <UART_CheckIdleState>
 800727e:	4603      	mov	r3, r0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	431a      	orrs	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	431a      	orrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4ba6      	ldr	r3, [pc, #664]	@ (800754c <UART_SetConfig+0x2c4>)
 80072b4:	4013      	ands	r3, r2
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6812      	ldr	r2, [r2, #0]
 80072ba:	6979      	ldr	r1, [r7, #20]
 80072bc:	430b      	orrs	r3, r1
 80072be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a94      	ldr	r2, [pc, #592]	@ (8007550 <UART_SetConfig+0x2c8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d120      	bne.n	8007346 <UART_SetConfig+0xbe>
 8007304:	4b93      	ldr	r3, [pc, #588]	@ (8007554 <UART_SetConfig+0x2cc>)
 8007306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	2b03      	cmp	r3, #3
 8007310:	d816      	bhi.n	8007340 <UART_SetConfig+0xb8>
 8007312:	a201      	add	r2, pc, #4	@ (adr r2, 8007318 <UART_SetConfig+0x90>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	08007329 	.word	0x08007329
 800731c:	08007335 	.word	0x08007335
 8007320:	0800732f 	.word	0x0800732f
 8007324:	0800733b 	.word	0x0800733b
 8007328:	2301      	movs	r3, #1
 800732a:	77fb      	strb	r3, [r7, #31]
 800732c:	e150      	b.n	80075d0 <UART_SetConfig+0x348>
 800732e:	2302      	movs	r3, #2
 8007330:	77fb      	strb	r3, [r7, #31]
 8007332:	e14d      	b.n	80075d0 <UART_SetConfig+0x348>
 8007334:	2304      	movs	r3, #4
 8007336:	77fb      	strb	r3, [r7, #31]
 8007338:	e14a      	b.n	80075d0 <UART_SetConfig+0x348>
 800733a:	2308      	movs	r3, #8
 800733c:	77fb      	strb	r3, [r7, #31]
 800733e:	e147      	b.n	80075d0 <UART_SetConfig+0x348>
 8007340:	2310      	movs	r3, #16
 8007342:	77fb      	strb	r3, [r7, #31]
 8007344:	e144      	b.n	80075d0 <UART_SetConfig+0x348>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a83      	ldr	r2, [pc, #524]	@ (8007558 <UART_SetConfig+0x2d0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d132      	bne.n	80073b6 <UART_SetConfig+0x12e>
 8007350:	4b80      	ldr	r3, [pc, #512]	@ (8007554 <UART_SetConfig+0x2cc>)
 8007352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007356:	f003 030c 	and.w	r3, r3, #12
 800735a:	2b0c      	cmp	r3, #12
 800735c:	d828      	bhi.n	80073b0 <UART_SetConfig+0x128>
 800735e:	a201      	add	r2, pc, #4	@ (adr r2, 8007364 <UART_SetConfig+0xdc>)
 8007360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007364:	08007399 	.word	0x08007399
 8007368:	080073b1 	.word	0x080073b1
 800736c:	080073b1 	.word	0x080073b1
 8007370:	080073b1 	.word	0x080073b1
 8007374:	080073a5 	.word	0x080073a5
 8007378:	080073b1 	.word	0x080073b1
 800737c:	080073b1 	.word	0x080073b1
 8007380:	080073b1 	.word	0x080073b1
 8007384:	0800739f 	.word	0x0800739f
 8007388:	080073b1 	.word	0x080073b1
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073b1 	.word	0x080073b1
 8007394:	080073ab 	.word	0x080073ab
 8007398:	2300      	movs	r3, #0
 800739a:	77fb      	strb	r3, [r7, #31]
 800739c:	e118      	b.n	80075d0 <UART_SetConfig+0x348>
 800739e:	2302      	movs	r3, #2
 80073a0:	77fb      	strb	r3, [r7, #31]
 80073a2:	e115      	b.n	80075d0 <UART_SetConfig+0x348>
 80073a4:	2304      	movs	r3, #4
 80073a6:	77fb      	strb	r3, [r7, #31]
 80073a8:	e112      	b.n	80075d0 <UART_SetConfig+0x348>
 80073aa:	2308      	movs	r3, #8
 80073ac:	77fb      	strb	r3, [r7, #31]
 80073ae:	e10f      	b.n	80075d0 <UART_SetConfig+0x348>
 80073b0:	2310      	movs	r3, #16
 80073b2:	77fb      	strb	r3, [r7, #31]
 80073b4:	e10c      	b.n	80075d0 <UART_SetConfig+0x348>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a68      	ldr	r2, [pc, #416]	@ (800755c <UART_SetConfig+0x2d4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d120      	bne.n	8007402 <UART_SetConfig+0x17a>
 80073c0:	4b64      	ldr	r3, [pc, #400]	@ (8007554 <UART_SetConfig+0x2cc>)
 80073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80073ca:	2b30      	cmp	r3, #48	@ 0x30
 80073cc:	d013      	beq.n	80073f6 <UART_SetConfig+0x16e>
 80073ce:	2b30      	cmp	r3, #48	@ 0x30
 80073d0:	d814      	bhi.n	80073fc <UART_SetConfig+0x174>
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	d009      	beq.n	80073ea <UART_SetConfig+0x162>
 80073d6:	2b20      	cmp	r3, #32
 80073d8:	d810      	bhi.n	80073fc <UART_SetConfig+0x174>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <UART_SetConfig+0x15c>
 80073de:	2b10      	cmp	r3, #16
 80073e0:	d006      	beq.n	80073f0 <UART_SetConfig+0x168>
 80073e2:	e00b      	b.n	80073fc <UART_SetConfig+0x174>
 80073e4:	2300      	movs	r3, #0
 80073e6:	77fb      	strb	r3, [r7, #31]
 80073e8:	e0f2      	b.n	80075d0 <UART_SetConfig+0x348>
 80073ea:	2302      	movs	r3, #2
 80073ec:	77fb      	strb	r3, [r7, #31]
 80073ee:	e0ef      	b.n	80075d0 <UART_SetConfig+0x348>
 80073f0:	2304      	movs	r3, #4
 80073f2:	77fb      	strb	r3, [r7, #31]
 80073f4:	e0ec      	b.n	80075d0 <UART_SetConfig+0x348>
 80073f6:	2308      	movs	r3, #8
 80073f8:	77fb      	strb	r3, [r7, #31]
 80073fa:	e0e9      	b.n	80075d0 <UART_SetConfig+0x348>
 80073fc:	2310      	movs	r3, #16
 80073fe:	77fb      	strb	r3, [r7, #31]
 8007400:	e0e6      	b.n	80075d0 <UART_SetConfig+0x348>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a56      	ldr	r2, [pc, #344]	@ (8007560 <UART_SetConfig+0x2d8>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d120      	bne.n	800744e <UART_SetConfig+0x1c6>
 800740c:	4b51      	ldr	r3, [pc, #324]	@ (8007554 <UART_SetConfig+0x2cc>)
 800740e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007412:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007416:	2bc0      	cmp	r3, #192	@ 0xc0
 8007418:	d013      	beq.n	8007442 <UART_SetConfig+0x1ba>
 800741a:	2bc0      	cmp	r3, #192	@ 0xc0
 800741c:	d814      	bhi.n	8007448 <UART_SetConfig+0x1c0>
 800741e:	2b80      	cmp	r3, #128	@ 0x80
 8007420:	d009      	beq.n	8007436 <UART_SetConfig+0x1ae>
 8007422:	2b80      	cmp	r3, #128	@ 0x80
 8007424:	d810      	bhi.n	8007448 <UART_SetConfig+0x1c0>
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <UART_SetConfig+0x1a8>
 800742a:	2b40      	cmp	r3, #64	@ 0x40
 800742c:	d006      	beq.n	800743c <UART_SetConfig+0x1b4>
 800742e:	e00b      	b.n	8007448 <UART_SetConfig+0x1c0>
 8007430:	2300      	movs	r3, #0
 8007432:	77fb      	strb	r3, [r7, #31]
 8007434:	e0cc      	b.n	80075d0 <UART_SetConfig+0x348>
 8007436:	2302      	movs	r3, #2
 8007438:	77fb      	strb	r3, [r7, #31]
 800743a:	e0c9      	b.n	80075d0 <UART_SetConfig+0x348>
 800743c:	2304      	movs	r3, #4
 800743e:	77fb      	strb	r3, [r7, #31]
 8007440:	e0c6      	b.n	80075d0 <UART_SetConfig+0x348>
 8007442:	2308      	movs	r3, #8
 8007444:	77fb      	strb	r3, [r7, #31]
 8007446:	e0c3      	b.n	80075d0 <UART_SetConfig+0x348>
 8007448:	2310      	movs	r3, #16
 800744a:	77fb      	strb	r3, [r7, #31]
 800744c:	e0c0      	b.n	80075d0 <UART_SetConfig+0x348>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a44      	ldr	r2, [pc, #272]	@ (8007564 <UART_SetConfig+0x2dc>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d125      	bne.n	80074a4 <UART_SetConfig+0x21c>
 8007458:	4b3e      	ldr	r3, [pc, #248]	@ (8007554 <UART_SetConfig+0x2cc>)
 800745a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800745e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007462:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007466:	d017      	beq.n	8007498 <UART_SetConfig+0x210>
 8007468:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800746c:	d817      	bhi.n	800749e <UART_SetConfig+0x216>
 800746e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007472:	d00b      	beq.n	800748c <UART_SetConfig+0x204>
 8007474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007478:	d811      	bhi.n	800749e <UART_SetConfig+0x216>
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <UART_SetConfig+0x1fe>
 800747e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007482:	d006      	beq.n	8007492 <UART_SetConfig+0x20a>
 8007484:	e00b      	b.n	800749e <UART_SetConfig+0x216>
 8007486:	2300      	movs	r3, #0
 8007488:	77fb      	strb	r3, [r7, #31]
 800748a:	e0a1      	b.n	80075d0 <UART_SetConfig+0x348>
 800748c:	2302      	movs	r3, #2
 800748e:	77fb      	strb	r3, [r7, #31]
 8007490:	e09e      	b.n	80075d0 <UART_SetConfig+0x348>
 8007492:	2304      	movs	r3, #4
 8007494:	77fb      	strb	r3, [r7, #31]
 8007496:	e09b      	b.n	80075d0 <UART_SetConfig+0x348>
 8007498:	2308      	movs	r3, #8
 800749a:	77fb      	strb	r3, [r7, #31]
 800749c:	e098      	b.n	80075d0 <UART_SetConfig+0x348>
 800749e:	2310      	movs	r3, #16
 80074a0:	77fb      	strb	r3, [r7, #31]
 80074a2:	e095      	b.n	80075d0 <UART_SetConfig+0x348>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a2f      	ldr	r2, [pc, #188]	@ (8007568 <UART_SetConfig+0x2e0>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d125      	bne.n	80074fa <UART_SetConfig+0x272>
 80074ae:	4b29      	ldr	r3, [pc, #164]	@ (8007554 <UART_SetConfig+0x2cc>)
 80074b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80074b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074bc:	d017      	beq.n	80074ee <UART_SetConfig+0x266>
 80074be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074c2:	d817      	bhi.n	80074f4 <UART_SetConfig+0x26c>
 80074c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074c8:	d00b      	beq.n	80074e2 <UART_SetConfig+0x25a>
 80074ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074ce:	d811      	bhi.n	80074f4 <UART_SetConfig+0x26c>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <UART_SetConfig+0x254>
 80074d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074d8:	d006      	beq.n	80074e8 <UART_SetConfig+0x260>
 80074da:	e00b      	b.n	80074f4 <UART_SetConfig+0x26c>
 80074dc:	2301      	movs	r3, #1
 80074de:	77fb      	strb	r3, [r7, #31]
 80074e0:	e076      	b.n	80075d0 <UART_SetConfig+0x348>
 80074e2:	2302      	movs	r3, #2
 80074e4:	77fb      	strb	r3, [r7, #31]
 80074e6:	e073      	b.n	80075d0 <UART_SetConfig+0x348>
 80074e8:	2304      	movs	r3, #4
 80074ea:	77fb      	strb	r3, [r7, #31]
 80074ec:	e070      	b.n	80075d0 <UART_SetConfig+0x348>
 80074ee:	2308      	movs	r3, #8
 80074f0:	77fb      	strb	r3, [r7, #31]
 80074f2:	e06d      	b.n	80075d0 <UART_SetConfig+0x348>
 80074f4:	2310      	movs	r3, #16
 80074f6:	77fb      	strb	r3, [r7, #31]
 80074f8:	e06a      	b.n	80075d0 <UART_SetConfig+0x348>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a1b      	ldr	r2, [pc, #108]	@ (800756c <UART_SetConfig+0x2e4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d138      	bne.n	8007576 <UART_SetConfig+0x2ee>
 8007504:	4b13      	ldr	r3, [pc, #76]	@ (8007554 <UART_SetConfig+0x2cc>)
 8007506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800750a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800750e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007512:	d017      	beq.n	8007544 <UART_SetConfig+0x2bc>
 8007514:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007518:	d82a      	bhi.n	8007570 <UART_SetConfig+0x2e8>
 800751a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800751e:	d00b      	beq.n	8007538 <UART_SetConfig+0x2b0>
 8007520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007524:	d824      	bhi.n	8007570 <UART_SetConfig+0x2e8>
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <UART_SetConfig+0x2aa>
 800752a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800752e:	d006      	beq.n	800753e <UART_SetConfig+0x2b6>
 8007530:	e01e      	b.n	8007570 <UART_SetConfig+0x2e8>
 8007532:	2300      	movs	r3, #0
 8007534:	77fb      	strb	r3, [r7, #31]
 8007536:	e04b      	b.n	80075d0 <UART_SetConfig+0x348>
 8007538:	2302      	movs	r3, #2
 800753a:	77fb      	strb	r3, [r7, #31]
 800753c:	e048      	b.n	80075d0 <UART_SetConfig+0x348>
 800753e:	2304      	movs	r3, #4
 8007540:	77fb      	strb	r3, [r7, #31]
 8007542:	e045      	b.n	80075d0 <UART_SetConfig+0x348>
 8007544:	2308      	movs	r3, #8
 8007546:	77fb      	strb	r3, [r7, #31]
 8007548:	e042      	b.n	80075d0 <UART_SetConfig+0x348>
 800754a:	bf00      	nop
 800754c:	efff69f3 	.word	0xefff69f3
 8007550:	40011000 	.word	0x40011000
 8007554:	40023800 	.word	0x40023800
 8007558:	40004400 	.word	0x40004400
 800755c:	40004800 	.word	0x40004800
 8007560:	40004c00 	.word	0x40004c00
 8007564:	40005000 	.word	0x40005000
 8007568:	40011400 	.word	0x40011400
 800756c:	40007800 	.word	0x40007800
 8007570:	2310      	movs	r3, #16
 8007572:	77fb      	strb	r3, [r7, #31]
 8007574:	e02c      	b.n	80075d0 <UART_SetConfig+0x348>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a72      	ldr	r2, [pc, #456]	@ (8007744 <UART_SetConfig+0x4bc>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d125      	bne.n	80075cc <UART_SetConfig+0x344>
 8007580:	4b71      	ldr	r3, [pc, #452]	@ (8007748 <UART_SetConfig+0x4c0>)
 8007582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007586:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800758a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800758e:	d017      	beq.n	80075c0 <UART_SetConfig+0x338>
 8007590:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007594:	d817      	bhi.n	80075c6 <UART_SetConfig+0x33e>
 8007596:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800759a:	d00b      	beq.n	80075b4 <UART_SetConfig+0x32c>
 800759c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075a0:	d811      	bhi.n	80075c6 <UART_SetConfig+0x33e>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <UART_SetConfig+0x326>
 80075a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075aa:	d006      	beq.n	80075ba <UART_SetConfig+0x332>
 80075ac:	e00b      	b.n	80075c6 <UART_SetConfig+0x33e>
 80075ae:	2300      	movs	r3, #0
 80075b0:	77fb      	strb	r3, [r7, #31]
 80075b2:	e00d      	b.n	80075d0 <UART_SetConfig+0x348>
 80075b4:	2302      	movs	r3, #2
 80075b6:	77fb      	strb	r3, [r7, #31]
 80075b8:	e00a      	b.n	80075d0 <UART_SetConfig+0x348>
 80075ba:	2304      	movs	r3, #4
 80075bc:	77fb      	strb	r3, [r7, #31]
 80075be:	e007      	b.n	80075d0 <UART_SetConfig+0x348>
 80075c0:	2308      	movs	r3, #8
 80075c2:	77fb      	strb	r3, [r7, #31]
 80075c4:	e004      	b.n	80075d0 <UART_SetConfig+0x348>
 80075c6:	2310      	movs	r3, #16
 80075c8:	77fb      	strb	r3, [r7, #31]
 80075ca:	e001      	b.n	80075d0 <UART_SetConfig+0x348>
 80075cc:	2310      	movs	r3, #16
 80075ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075d8:	d15b      	bne.n	8007692 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80075da:	7ffb      	ldrb	r3, [r7, #31]
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d828      	bhi.n	8007632 <UART_SetConfig+0x3aa>
 80075e0:	a201      	add	r2, pc, #4	@ (adr r2, 80075e8 <UART_SetConfig+0x360>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	08007615 	.word	0x08007615
 80075f0:	0800761d 	.word	0x0800761d
 80075f4:	08007633 	.word	0x08007633
 80075f8:	08007623 	.word	0x08007623
 80075fc:	08007633 	.word	0x08007633
 8007600:	08007633 	.word	0x08007633
 8007604:	08007633 	.word	0x08007633
 8007608:	0800762b 	.word	0x0800762b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800760c:	f7fe f928 	bl	8005860 <HAL_RCC_GetPCLK1Freq>
 8007610:	61b8      	str	r0, [r7, #24]
        break;
 8007612:	e013      	b.n	800763c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007614:	f7fe f938 	bl	8005888 <HAL_RCC_GetPCLK2Freq>
 8007618:	61b8      	str	r0, [r7, #24]
        break;
 800761a:	e00f      	b.n	800763c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800761c:	4b4b      	ldr	r3, [pc, #300]	@ (800774c <UART_SetConfig+0x4c4>)
 800761e:	61bb      	str	r3, [r7, #24]
        break;
 8007620:	e00c      	b.n	800763c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007622:	f7fe f84b 	bl	80056bc <HAL_RCC_GetSysClockFreq>
 8007626:	61b8      	str	r0, [r7, #24]
        break;
 8007628:	e008      	b.n	800763c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800762a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800762e:	61bb      	str	r3, [r7, #24]
        break;
 8007630:	e004      	b.n	800763c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	77bb      	strb	r3, [r7, #30]
        break;
 800763a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d074      	beq.n	800772c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	005a      	lsls	r2, r3, #1
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	085b      	lsrs	r3, r3, #1
 800764c:	441a      	add	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	fbb2 f3f3 	udiv	r3, r2, r3
 8007656:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	2b0f      	cmp	r3, #15
 800765c:	d916      	bls.n	800768c <UART_SetConfig+0x404>
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007664:	d212      	bcs.n	800768c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	b29b      	uxth	r3, r3
 800766a:	f023 030f 	bic.w	r3, r3, #15
 800766e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	085b      	lsrs	r3, r3, #1
 8007674:	b29b      	uxth	r3, r3
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	b29a      	uxth	r2, r3
 800767c:	89fb      	ldrh	r3, [r7, #14]
 800767e:	4313      	orrs	r3, r2
 8007680:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	89fa      	ldrh	r2, [r7, #14]
 8007688:	60da      	str	r2, [r3, #12]
 800768a:	e04f      	b.n	800772c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	77bb      	strb	r3, [r7, #30]
 8007690:	e04c      	b.n	800772c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007692:	7ffb      	ldrb	r3, [r7, #31]
 8007694:	2b08      	cmp	r3, #8
 8007696:	d828      	bhi.n	80076ea <UART_SetConfig+0x462>
 8007698:	a201      	add	r2, pc, #4	@ (adr r2, 80076a0 <UART_SetConfig+0x418>)
 800769a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769e:	bf00      	nop
 80076a0:	080076c5 	.word	0x080076c5
 80076a4:	080076cd 	.word	0x080076cd
 80076a8:	080076d5 	.word	0x080076d5
 80076ac:	080076eb 	.word	0x080076eb
 80076b0:	080076db 	.word	0x080076db
 80076b4:	080076eb 	.word	0x080076eb
 80076b8:	080076eb 	.word	0x080076eb
 80076bc:	080076eb 	.word	0x080076eb
 80076c0:	080076e3 	.word	0x080076e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076c4:	f7fe f8cc 	bl	8005860 <HAL_RCC_GetPCLK1Freq>
 80076c8:	61b8      	str	r0, [r7, #24]
        break;
 80076ca:	e013      	b.n	80076f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076cc:	f7fe f8dc 	bl	8005888 <HAL_RCC_GetPCLK2Freq>
 80076d0:	61b8      	str	r0, [r7, #24]
        break;
 80076d2:	e00f      	b.n	80076f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076d4:	4b1d      	ldr	r3, [pc, #116]	@ (800774c <UART_SetConfig+0x4c4>)
 80076d6:	61bb      	str	r3, [r7, #24]
        break;
 80076d8:	e00c      	b.n	80076f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076da:	f7fd ffef 	bl	80056bc <HAL_RCC_GetSysClockFreq>
 80076de:	61b8      	str	r0, [r7, #24]
        break;
 80076e0:	e008      	b.n	80076f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076e6:	61bb      	str	r3, [r7, #24]
        break;
 80076e8:	e004      	b.n	80076f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	77bb      	strb	r3, [r7, #30]
        break;
 80076f2:	bf00      	nop
    }

    if (pclk != 0U)
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d018      	beq.n	800772c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	085a      	lsrs	r2, r3, #1
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	441a      	add	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	fbb2 f3f3 	udiv	r3, r2, r3
 800770c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	2b0f      	cmp	r3, #15
 8007712:	d909      	bls.n	8007728 <UART_SetConfig+0x4a0>
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800771a:	d205      	bcs.n	8007728 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	b29a      	uxth	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60da      	str	r2, [r3, #12]
 8007726:	e001      	b.n	800772c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007738:	7fbb      	ldrb	r3, [r7, #30]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3720      	adds	r7, #32
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	40007c00 	.word	0x40007c00
 8007748:	40023800 	.word	0x40023800
 800774c:	00f42400 	.word	0x00f42400

08007750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00a      	beq.n	800777a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00a      	beq.n	800779c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00a      	beq.n	80077be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c2:	f003 0304 	and.w	r3, r3, #4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00a      	beq.n	80077e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e4:	f003 0310 	and.w	r3, r3, #16
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00a      	beq.n	8007802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007806:	f003 0320 	and.w	r3, r3, #32
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00a      	beq.n	8007824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01a      	beq.n	8007866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800784e:	d10a      	bne.n	8007866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	605a      	str	r2, [r3, #4]
  }
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08c      	sub	sp, #48	@ 0x30
 8007898:	af02      	add	r7, sp, #8
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078a4:	f7fb f8fa 	bl	8002a9c <HAL_GetTick>
 80078a8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0308 	and.w	r3, r3, #8
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d12e      	bne.n	8007916 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c0:	2200      	movs	r2, #0
 80078c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f83b 	bl	8007942 <UART_WaitOnFlagUntilTimeout>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d021      	beq.n	8007916 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	60fb      	str	r3, [r7, #12]
   return(result);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078e6:	623b      	str	r3, [r7, #32]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	61fb      	str	r3, [r7, #28]
 80078f2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	69b9      	ldr	r1, [r7, #24]
 80078f6:	69fa      	ldr	r2, [r7, #28]
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	617b      	str	r3, [r7, #20]
   return(result);
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e6      	bne.n	80078d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2220      	movs	r2, #32
 8007908:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e011      	b.n	800793a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2220      	movs	r2, #32
 8007920:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3728      	adds	r7, #40	@ 0x28
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	60b9      	str	r1, [r7, #8]
 800794c:	603b      	str	r3, [r7, #0]
 800794e:	4613      	mov	r3, r2
 8007950:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007952:	e04f      	b.n	80079f4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795a:	d04b      	beq.n	80079f4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800795c:	f7fb f89e 	bl	8002a9c <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	429a      	cmp	r2, r3
 800796a:	d302      	bcc.n	8007972 <UART_WaitOnFlagUntilTimeout+0x30>
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e04e      	b.n	8007a14 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	2b00      	cmp	r3, #0
 8007982:	d037      	beq.n	80079f4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b80      	cmp	r3, #128	@ 0x80
 8007988:	d034      	beq.n	80079f4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2b40      	cmp	r3, #64	@ 0x40
 800798e:	d031      	beq.n	80079f4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f003 0308 	and.w	r3, r3, #8
 800799a:	2b08      	cmp	r3, #8
 800799c:	d110      	bne.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2208      	movs	r2, #8
 80079a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f838 	bl	8007a1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2208      	movs	r2, #8
 80079b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e029      	b.n	8007a14 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079ce:	d111      	bne.n	80079f4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 f81e 	bl	8007a1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e00f      	b.n	8007a14 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	69da      	ldr	r2, [r3, #28]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	4013      	ands	r3, r2
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	bf0c      	ite	eq
 8007a04:	2301      	moveq	r3, #1
 8007a06:	2300      	movne	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d0a0      	beq.n	8007954 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b095      	sub	sp, #84	@ 0x54
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a42:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e6      	bne.n	8007a24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	f023 0301 	bic.w	r3, r3, #1
 8007a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3308      	adds	r3, #8
 8007a74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e5      	bne.n	8007a56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d118      	bne.n	8007ac4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f023 0310 	bic.w	r3, r3, #16
 8007aa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	461a      	mov	r2, r3
 8007aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ab0:	61bb      	str	r3, [r7, #24]
 8007ab2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6979      	ldr	r1, [r7, #20]
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	613b      	str	r3, [r7, #16]
   return(result);
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e6      	bne.n	8007a92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007ad8:	bf00      	nop
 8007ada:	3754      	adds	r7, #84	@ 0x54
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d121      	bne.n	8007b3a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	4b27      	ldr	r3, [pc, #156]	@ (8007b98 <FMC_SDRAM_Init+0xb4>)
 8007afc:	4013      	ands	r3, r2
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	6851      	ldr	r1, [r2, #4]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	6892      	ldr	r2, [r2, #8]
 8007b06:	4311      	orrs	r1, r2
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	68d2      	ldr	r2, [r2, #12]
 8007b0c:	4311      	orrs	r1, r2
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	6912      	ldr	r2, [r2, #16]
 8007b12:	4311      	orrs	r1, r2
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	6952      	ldr	r2, [r2, #20]
 8007b18:	4311      	orrs	r1, r2
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	6992      	ldr	r2, [r2, #24]
 8007b1e:	4311      	orrs	r1, r2
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	69d2      	ldr	r2, [r2, #28]
 8007b24:	4311      	orrs	r1, r2
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	6a12      	ldr	r2, [r2, #32]
 8007b2a:	4311      	orrs	r1, r2
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b30:	430a      	orrs	r2, r1
 8007b32:	431a      	orrs	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	e026      	b.n	8007b88 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	69d9      	ldr	r1, [r3, #28]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	4319      	orrs	r1, r3
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b50:	430b      	orrs	r3, r1
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007b98 <FMC_SDRAM_Init+0xb4>)
 8007b5e:	4013      	ands	r3, r2
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	6851      	ldr	r1, [r2, #4]
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	6892      	ldr	r2, [r2, #8]
 8007b68:	4311      	orrs	r1, r2
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	68d2      	ldr	r2, [r2, #12]
 8007b6e:	4311      	orrs	r1, r2
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	6912      	ldr	r2, [r2, #16]
 8007b74:	4311      	orrs	r1, r2
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	6952      	ldr	r2, [r2, #20]
 8007b7a:	4311      	orrs	r1, r2
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	6992      	ldr	r2, [r2, #24]
 8007b80:	430a      	orrs	r2, r1
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	ffff8000 	.word	0xffff8000

08007b9c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d128      	bne.n	8007c00 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	1e59      	subs	r1, r3, #1
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	011b      	lsls	r3, r3, #4
 8007bc4:	4319      	orrs	r1, r3
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	021b      	lsls	r3, r3, #8
 8007bce:	4319      	orrs	r1, r3
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	031b      	lsls	r3, r3, #12
 8007bd8:	4319      	orrs	r1, r3
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	041b      	lsls	r3, r3, #16
 8007be2:	4319      	orrs	r1, r3
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	051b      	lsls	r3, r3, #20
 8007bec:	4319      	orrs	r1, r3
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	061b      	lsls	r3, r3, #24
 8007bf6:	430b      	orrs	r3, r1
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	609a      	str	r2, [r3, #8]
 8007bfe:	e02d      	b.n	8007c5c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	689a      	ldr	r2, [r3, #8]
 8007c04:	4b19      	ldr	r3, [pc, #100]	@ (8007c6c <FMC_SDRAM_Timing_Init+0xd0>)
 8007c06:	4013      	ands	r3, r2
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	68d2      	ldr	r2, [r2, #12]
 8007c0c:	3a01      	subs	r2, #1
 8007c0e:	0311      	lsls	r1, r2, #12
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	6952      	ldr	r2, [r2, #20]
 8007c14:	3a01      	subs	r2, #1
 8007c16:	0512      	lsls	r2, r2, #20
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	1e59      	subs	r1, r3, #1
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	4319      	orrs	r1, r3
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	4319      	orrs	r1, r3
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	041b      	lsls	r3, r3, #16
 8007c4a:	4319      	orrs	r1, r3
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	061b      	lsls	r3, r3, #24
 8007c54:	430b      	orrs	r3, r1
 8007c56:	431a      	orrs	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	ff0f0fff 	.word	0xff0f0fff

08007c70 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	691a      	ldr	r2, [r3, #16]
 8007c80:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb4 <FMC_SDRAM_SendCommand+0x44>)
 8007c82:	4013      	ands	r3, r2
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	6811      	ldr	r1, [r2, #0]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	6852      	ldr	r2, [r2, #4]
 8007c8c:	4311      	orrs	r1, r2
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	6892      	ldr	r2, [r2, #8]
 8007c92:	3a01      	subs	r2, #1
 8007c94:	0152      	lsls	r2, r2, #5
 8007c96:	4311      	orrs	r1, r2
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	68d2      	ldr	r2, [r2, #12]
 8007c9c:	0252      	lsls	r2, r2, #9
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	ffc00000 	.word	0xffc00000

08007cb8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	695a      	ldr	r2, [r3, #20]
 8007cc6:	4b07      	ldr	r3, [pc, #28]	@ (8007ce4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8007cc8:	4013      	ands	r3, r2
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	0052      	lsls	r2, r2, #1
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	ffffc001 	.word	0xffffc001

08007ce8 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	607b      	str	r3, [r7, #4]
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	81fb      	strh	r3, [r7, #14]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	81bb      	strh	r3, [r7, #12]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8007d00:	89bb      	ldrh	r3, [r7, #12]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8007d06:	89bb      	ldrh	r3, [r7, #12]
 8007d08:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007d0c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8007d12:	f7f9 fed7 	bl	8001ac4 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8007d16:	89fb      	ldrh	r3, [r7, #14]
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2203      	movs	r2, #3
 8007d1c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 f82f 	bl	8008d84 <CODEC_IO_Write>
 8007d26:	4603      	mov	r3, r0
 8007d28:	461a      	mov	r2, r3
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8007d30:	89fb      	ldrh	r3, [r7, #14]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2200      	movs	r2, #0
 8007d36:	f640 0117 	movw	r1, #2071	@ 0x817
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f001 f822 	bl	8008d84 <CODEC_IO_Write>
 8007d40:	4603      	mov	r3, r0
 8007d42:	461a      	mov	r2, r3
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	4413      	add	r3, r2
 8007d48:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8007d4a:	89fb      	ldrh	r3, [r7, #14]
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 f815 	bl	8008d84 <CODEC_IO_Write>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	4413      	add	r3, r2
 8007d62:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8007d64:	89fb      	ldrh	r3, [r7, #14]
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	226c      	movs	r2, #108	@ 0x6c
 8007d6a:	2139      	movs	r1, #57	@ 0x39
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f001 f809 	bl	8008d84 <CODEC_IO_Write>
 8007d72:	4603      	mov	r3, r0
 8007d74:	461a      	mov	r2, r3
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	4413      	add	r3, r2
 8007d7a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8007d7c:	8afb      	ldrh	r3, [r7, #22]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00c      	beq.n	8007d9c <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8007d82:	89fb      	ldrh	r3, [r7, #14]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2213      	movs	r2, #19
 8007d88:	2101      	movs	r1, #1
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 fffa 	bl	8008d84 <CODEC_IO_Write>
 8007d90:	4603      	mov	r3, r0
 8007d92:	461a      	mov	r2, r3
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	4413      	add	r3, r2
 8007d98:	61fb      	str	r3, [r7, #28]
 8007d9a:	e00b      	b.n	8007db4 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8007d9c:	89fb      	ldrh	r3, [r7, #14]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2203      	movs	r2, #3
 8007da2:	2101      	movs	r1, #1
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 ffed 	bl	8008d84 <CODEC_IO_Write>
 8007daa:	4603      	mov	r3, r0
 8007dac:	461a      	mov	r2, r3
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	4413      	add	r3, r2
 8007db2:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8007db4:	2032      	movs	r0, #50	@ 0x32
 8007db6:	f7f9 feb9 	bl	8001b2c <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8007dba:	8b3b      	ldrh	r3, [r7, #24]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 815f 	beq.w	8008080 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8007dc2:	4bae      	ldr	r3, [pc, #696]	@ (800807c <wm8994_Init+0x394>)
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8007dc8:	8b3b      	ldrh	r3, [r7, #24]
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	f000 808c 	beq.w	8007ee8 <wm8994_Init+0x200>
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	f300 8111 	bgt.w	8007ff8 <wm8994_Init+0x310>
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d002      	beq.n	8007de0 <wm8994_Init+0xf8>
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d042      	beq.n	8007e64 <wm8994_Init+0x17c>
 8007dde:	e10b      	b.n	8007ff8 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8007de0:	89fb      	ldrh	r3, [r7, #14]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8007de8:	2105      	movs	r1, #5
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 ffca 	bl	8008d84 <CODEC_IO_Write>
 8007df0:	4603      	mov	r3, r0
 8007df2:	461a      	mov	r2, r3
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	4413      	add	r3, r2
 8007df8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8007dfa:	89fb      	ldrh	r3, [r7, #14]
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f240 6101 	movw	r1, #1537	@ 0x601
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 ffbd 	bl	8008d84 <CODEC_IO_Write>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	4413      	add	r3, r2
 8007e12:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8007e14:	89fb      	ldrh	r3, [r7, #14]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f240 6102 	movw	r1, #1538	@ 0x602
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 ffb0 	bl	8008d84 <CODEC_IO_Write>
 8007e24:	4603      	mov	r3, r0
 8007e26:	461a      	mov	r2, r3
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8007e2e:	89fb      	ldrh	r3, [r7, #14]
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2202      	movs	r2, #2
 8007e34:	f240 6104 	movw	r1, #1540	@ 0x604
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 ffa3 	bl	8008d84 <CODEC_IO_Write>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	461a      	mov	r2, r3
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	4413      	add	r3, r2
 8007e46:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8007e48:	89fb      	ldrh	r3, [r7, #14]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	f240 6105 	movw	r1, #1541	@ 0x605
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 ff96 	bl	8008d84 <CODEC_IO_Write>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	4413      	add	r3, r2
 8007e60:	61fb      	str	r3, [r7, #28]
      break;
 8007e62:	e110      	b.n	8008086 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8007e64:	89fb      	ldrh	r3, [r7, #14]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	f240 3203 	movw	r2, #771	@ 0x303
 8007e6c:	2105      	movs	r1, #5
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 ff88 	bl	8008d84 <CODEC_IO_Write>
 8007e74:	4603      	mov	r3, r0
 8007e76:	461a      	mov	r2, r3
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8007e7e:	89fb      	ldrh	r3, [r7, #14]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2201      	movs	r2, #1
 8007e84:	f240 6101 	movw	r1, #1537	@ 0x601
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 ff7b 	bl	8008d84 <CODEC_IO_Write>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	461a      	mov	r2, r3
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	4413      	add	r3, r2
 8007e96:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8007e98:	89fb      	ldrh	r3, [r7, #14]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f240 6102 	movw	r1, #1538	@ 0x602
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 ff6e 	bl	8008d84 <CODEC_IO_Write>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	461a      	mov	r2, r3
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	4413      	add	r3, r2
 8007eb0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8007eb2:	89fb      	ldrh	r3, [r7, #14]
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f240 6104 	movw	r1, #1540	@ 0x604
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 ff61 	bl	8008d84 <CODEC_IO_Write>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	4413      	add	r3, r2
 8007eca:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8007ecc:	89fb      	ldrh	r3, [r7, #14]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f240 6105 	movw	r1, #1541	@ 0x605
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 ff54 	bl	8008d84 <CODEC_IO_Write>
 8007edc:	4603      	mov	r3, r0
 8007ede:	461a      	mov	r2, r3
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	61fb      	str	r3, [r7, #28]
      break;
 8007ee6:	e0ce      	b.n	8008086 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8007ee8:	8afb      	ldrh	r3, [r7, #22]
 8007eea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007eee:	d141      	bne.n	8007f74 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8007ef0:	89fb      	ldrh	r3, [r7, #14]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8007ef8:	2105      	movs	r1, #5
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 ff42 	bl	8008d84 <CODEC_IO_Write>
 8007f00:	4603      	mov	r3, r0
 8007f02:	461a      	mov	r2, r3
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	4413      	add	r3, r2
 8007f08:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8007f0a:	89fb      	ldrh	r3, [r7, #14]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2203      	movs	r2, #3
 8007f10:	f240 6101 	movw	r1, #1537	@ 0x601
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 ff35 	bl	8008d84 <CODEC_IO_Write>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	4413      	add	r3, r2
 8007f22:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8007f24:	89fb      	ldrh	r3, [r7, #14]
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2203      	movs	r2, #3
 8007f2a:	f240 6102 	movw	r1, #1538	@ 0x602
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 ff28 	bl	8008d84 <CODEC_IO_Write>
 8007f34:	4603      	mov	r3, r0
 8007f36:	461a      	mov	r2, r3
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8007f3e:	89fb      	ldrh	r3, [r7, #14]
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2203      	movs	r2, #3
 8007f44:	f240 6104 	movw	r1, #1540	@ 0x604
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 ff1b 	bl	8008d84 <CODEC_IO_Write>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	461a      	mov	r2, r3
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	4413      	add	r3, r2
 8007f56:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8007f58:	89fb      	ldrh	r3, [r7, #14]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	f240 6105 	movw	r1, #1541	@ 0x605
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 ff0e 	bl	8008d84 <CODEC_IO_Write>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	4413      	add	r3, r2
 8007f70:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8007f72:	e088      	b.n	8008086 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8007f74:	89fb      	ldrh	r3, [r7, #14]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8007f7c:	2105      	movs	r1, #5
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 ff00 	bl	8008d84 <CODEC_IO_Write>
 8007f84:	4603      	mov	r3, r0
 8007f86:	461a      	mov	r2, r3
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8007f8e:	89fb      	ldrh	r3, [r7, #14]
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2201      	movs	r2, #1
 8007f94:	f240 6101 	movw	r1, #1537	@ 0x601
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 fef3 	bl	8008d84 <CODEC_IO_Write>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8007fa8:	89fb      	ldrh	r3, [r7, #14]
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2201      	movs	r2, #1
 8007fae:	f240 6102 	movw	r1, #1538	@ 0x602
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fee6 	bl	8008d84 <CODEC_IO_Write>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	461a      	mov	r2, r3
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8007fc2:	89fb      	ldrh	r3, [r7, #14]
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f240 6104 	movw	r1, #1540	@ 0x604
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 fed9 	bl	8008d84 <CODEC_IO_Write>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	4413      	add	r3, r2
 8007fda:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8007fdc:	89fb      	ldrh	r3, [r7, #14]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	f240 6105 	movw	r1, #1541	@ 0x605
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 fecc 	bl	8008d84 <CODEC_IO_Write>
 8007fec:	4603      	mov	r3, r0
 8007fee:	461a      	mov	r2, r3
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	61fb      	str	r3, [r7, #28]
      break;
 8007ff6:	e046      	b.n	8008086 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8007ff8:	89fb      	ldrh	r3, [r7, #14]
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	f240 3203 	movw	r2, #771	@ 0x303
 8008000:	2105      	movs	r1, #5
 8008002:	4618      	mov	r0, r3
 8008004:	f000 febe 	bl	8008d84 <CODEC_IO_Write>
 8008008:	4603      	mov	r3, r0
 800800a:	461a      	mov	r2, r3
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	4413      	add	r3, r2
 8008010:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8008012:	89fb      	ldrh	r3, [r7, #14]
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2201      	movs	r2, #1
 8008018:	f240 6101 	movw	r1, #1537	@ 0x601
 800801c:	4618      	mov	r0, r3
 800801e:	f000 feb1 	bl	8008d84 <CODEC_IO_Write>
 8008022:	4603      	mov	r3, r0
 8008024:	461a      	mov	r2, r3
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	4413      	add	r3, r2
 800802a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800802c:	89fb      	ldrh	r3, [r7, #14]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2201      	movs	r2, #1
 8008032:	f240 6102 	movw	r1, #1538	@ 0x602
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fea4 	bl	8008d84 <CODEC_IO_Write>
 800803c:	4603      	mov	r3, r0
 800803e:	461a      	mov	r2, r3
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	4413      	add	r3, r2
 8008044:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8008046:	89fb      	ldrh	r3, [r7, #14]
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2200      	movs	r2, #0
 800804c:	f240 6104 	movw	r1, #1540	@ 0x604
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fe97 	bl	8008d84 <CODEC_IO_Write>
 8008056:	4603      	mov	r3, r0
 8008058:	461a      	mov	r2, r3
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	4413      	add	r3, r2
 800805e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8008060:	89fb      	ldrh	r3, [r7, #14]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2200      	movs	r2, #0
 8008066:	f240 6105 	movw	r1, #1541	@ 0x605
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fe8a 	bl	8008d84 <CODEC_IO_Write>
 8008070:	4603      	mov	r3, r0
 8008072:	461a      	mov	r2, r3
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	4413      	add	r3, r2
 8008078:	61fb      	str	r3, [r7, #28]
      break;
 800807a:	e004      	b.n	8008086 <wm8994_Init+0x39e>
 800807c:	200018fc 	.word	0x200018fc
    }
  }
  else
  {
    outputEnabled = 0;
 8008080:	4b99      	ldr	r3, [pc, #612]	@ (80082e8 <wm8994_Init+0x600>)
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8008086:	8afb      	ldrh	r3, [r7, #22]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 81ab 	beq.w	80083e4 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800808e:	4b97      	ldr	r3, [pc, #604]	@ (80082ec <wm8994_Init+0x604>)
 8008090:	2201      	movs	r2, #1
 8008092:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8008094:	8afb      	ldrh	r3, [r7, #22]
 8008096:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800809a:	f000 8129 	beq.w	80082f0 <wm8994_Init+0x608>
 800809e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080a2:	f300 819b 	bgt.w	80083dc <wm8994_Init+0x6f4>
 80080a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080aa:	d05a      	beq.n	8008162 <wm8994_Init+0x47a>
 80080ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080b0:	f300 8194 	bgt.w	80083dc <wm8994_Init+0x6f4>
 80080b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080b8:	f000 80c6 	beq.w	8008248 <wm8994_Init+0x560>
 80080bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080c0:	f040 818c 	bne.w	80083dc <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80080c4:	89fb      	ldrh	r3, [r7, #14]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 80080cc:	2104      	movs	r1, #4
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 fe58 	bl	8008d84 <CODEC_IO_Write>
 80080d4:	4603      	mov	r3, r0
 80080d6:	461a      	mov	r2, r3
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	4413      	add	r3, r2
 80080dc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80080de:	89fb      	ldrh	r3, [r7, #14]
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	22db      	movs	r2, #219	@ 0xdb
 80080e4:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 fe4b 	bl	8008d84 <CODEC_IO_Write>
 80080ee:	4603      	mov	r3, r0
 80080f0:	461a      	mov	r2, r3
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	4413      	add	r3, r2
 80080f6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80080f8:	89fb      	ldrh	r3, [r7, #14]
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8008100:	2102      	movs	r1, #2
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fe3e 	bl	8008d84 <CODEC_IO_Write>
 8008108:	4603      	mov	r3, r0
 800810a:	461a      	mov	r2, r3
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	4413      	add	r3, r2
 8008110:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8008112:	89fb      	ldrh	r3, [r7, #14]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2202      	movs	r2, #2
 8008118:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 800811c:	4618      	mov	r0, r3
 800811e:	f000 fe31 	bl	8008d84 <CODEC_IO_Write>
 8008122:	4603      	mov	r3, r0
 8008124:	461a      	mov	r2, r3
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	4413      	add	r3, r2
 800812a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800812c:	89fb      	ldrh	r3, [r7, #14]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2202      	movs	r2, #2
 8008132:	f240 6109 	movw	r1, #1545	@ 0x609
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fe24 	bl	8008d84 <CODEC_IO_Write>
 800813c:	4603      	mov	r3, r0
 800813e:	461a      	mov	r2, r3
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	4413      	add	r3, r2
 8008144:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8008146:	89fb      	ldrh	r3, [r7, #14]
 8008148:	b2db      	uxtb	r3, r3
 800814a:	220e      	movs	r2, #14
 800814c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8008150:	4618      	mov	r0, r3
 8008152:	f000 fe17 	bl	8008d84 <CODEC_IO_Write>
 8008156:	4603      	mov	r3, r0
 8008158:	461a      	mov	r2, r3
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	4413      	add	r3, r2
 800815e:	61fb      	str	r3, [r7, #28]
      break;
 8008160:	e143      	b.n	80083ea <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8008162:	89fb      	ldrh	r3, [r7, #14]
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2211      	movs	r2, #17
 8008168:	2128      	movs	r1, #40	@ 0x28
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fe0a 	bl	8008d84 <CODEC_IO_Write>
 8008170:	4603      	mov	r3, r0
 8008172:	461a      	mov	r2, r3
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	4413      	add	r3, r2
 8008178:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800817a:	89fb      	ldrh	r3, [r7, #14]
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2235      	movs	r2, #53	@ 0x35
 8008180:	2129      	movs	r1, #41	@ 0x29
 8008182:	4618      	mov	r0, r3
 8008184:	f000 fdfe 	bl	8008d84 <CODEC_IO_Write>
 8008188:	4603      	mov	r3, r0
 800818a:	461a      	mov	r2, r3
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	4413      	add	r3, r2
 8008190:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8008192:	89fb      	ldrh	r3, [r7, #14]
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2235      	movs	r2, #53	@ 0x35
 8008198:	212a      	movs	r1, #42	@ 0x2a
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fdf2 	bl	8008d84 <CODEC_IO_Write>
 80081a0:	4603      	mov	r3, r0
 80081a2:	461a      	mov	r2, r3
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	4413      	add	r3, r2
 80081a8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80081aa:	89fb      	ldrh	r3, [r7, #14]
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	f240 3203 	movw	r2, #771	@ 0x303
 80081b2:	2104      	movs	r1, #4
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 fde5 	bl	8008d84 <CODEC_IO_Write>
 80081ba:	4603      	mov	r3, r0
 80081bc:	461a      	mov	r2, r3
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80081c4:	89fb      	ldrh	r3, [r7, #14]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	22db      	movs	r2, #219	@ 0xdb
 80081ca:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fdd8 	bl	8008d84 <CODEC_IO_Write>
 80081d4:	4603      	mov	r3, r0
 80081d6:	461a      	mov	r2, r3
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	4413      	add	r3, r2
 80081dc:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80081de:	89fb      	ldrh	r3, [r7, #14]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	f246 3250 	movw	r2, #25424	@ 0x6350
 80081e6:	2102      	movs	r1, #2
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fdcb 	bl	8008d84 <CODEC_IO_Write>
 80081ee:	4603      	mov	r3, r0
 80081f0:	461a      	mov	r2, r3
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	4413      	add	r3, r2
 80081f6:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80081f8:	89fb      	ldrh	r3, [r7, #14]
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2202      	movs	r2, #2
 80081fe:	f240 6106 	movw	r1, #1542	@ 0x606
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fdbe 	bl	8008d84 <CODEC_IO_Write>
 8008208:	4603      	mov	r3, r0
 800820a:	461a      	mov	r2, r3
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	4413      	add	r3, r2
 8008210:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8008212:	89fb      	ldrh	r3, [r7, #14]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2202      	movs	r2, #2
 8008218:	f240 6107 	movw	r1, #1543	@ 0x607
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fdb1 	bl	8008d84 <CODEC_IO_Write>
 8008222:	4603      	mov	r3, r0
 8008224:	461a      	mov	r2, r3
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	4413      	add	r3, r2
 800822a:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800822c:	89fb      	ldrh	r3, [r7, #14]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	220d      	movs	r2, #13
 8008232:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fda4 	bl	8008d84 <CODEC_IO_Write>
 800823c:	4603      	mov	r3, r0
 800823e:	461a      	mov	r2, r3
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	4413      	add	r3, r2
 8008244:	61fb      	str	r3, [r7, #28]
      break;
 8008246:	e0d0      	b.n	80083ea <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8008248:	89fb      	ldrh	r3, [r7, #14]
 800824a:	b2db      	uxtb	r3, r3
 800824c:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8008250:	2104      	movs	r1, #4
 8008252:	4618      	mov	r0, r3
 8008254:	f000 fd96 	bl	8008d84 <CODEC_IO_Write>
 8008258:	4603      	mov	r3, r0
 800825a:	461a      	mov	r2, r3
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	4413      	add	r3, r2
 8008260:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8008262:	89fb      	ldrh	r3, [r7, #14]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	22db      	movs	r2, #219	@ 0xdb
 8008268:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fd89 	bl	8008d84 <CODEC_IO_Write>
 8008272:	4603      	mov	r3, r0
 8008274:	461a      	mov	r2, r3
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	4413      	add	r3, r2
 800827a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800827c:	89fb      	ldrh	r3, [r7, #14]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	f246 3250 	movw	r2, #25424	@ 0x6350
 8008284:	2102      	movs	r1, #2
 8008286:	4618      	mov	r0, r3
 8008288:	f000 fd7c 	bl	8008d84 <CODEC_IO_Write>
 800828c:	4603      	mov	r3, r0
 800828e:	461a      	mov	r2, r3
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	4413      	add	r3, r2
 8008294:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8008296:	89fb      	ldrh	r3, [r7, #14]
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2202      	movs	r2, #2
 800829c:	f240 6106 	movw	r1, #1542	@ 0x606
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fd6f 	bl	8008d84 <CODEC_IO_Write>
 80082a6:	4603      	mov	r3, r0
 80082a8:	461a      	mov	r2, r3
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	4413      	add	r3, r2
 80082ae:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80082b0:	89fb      	ldrh	r3, [r7, #14]
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2202      	movs	r2, #2
 80082b6:	f240 6107 	movw	r1, #1543	@ 0x607
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 fd62 	bl	8008d84 <CODEC_IO_Write>
 80082c0:	4603      	mov	r3, r0
 80082c2:	461a      	mov	r2, r3
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	4413      	add	r3, r2
 80082c8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80082ca:	89fb      	ldrh	r3, [r7, #14]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	220d      	movs	r2, #13
 80082d0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fd55 	bl	8008d84 <CODEC_IO_Write>
 80082da:	4603      	mov	r3, r0
 80082dc:	461a      	mov	r2, r3
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	4413      	add	r3, r2
 80082e2:	61fb      	str	r3, [r7, #28]
      break; 
 80082e4:	e081      	b.n	80083ea <wm8994_Init+0x702>
 80082e6:	bf00      	nop
 80082e8:	200018fc 	.word	0x200018fc
 80082ec:	20001900 	.word	0x20001900
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80082f0:	89fb      	ldrh	r3, [r7, #14]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80082f8:	2104      	movs	r1, #4
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fd42 	bl	8008d84 <CODEC_IO_Write>
 8008300:	4603      	mov	r3, r0
 8008302:	461a      	mov	r2, r3
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	4413      	add	r3, r2
 8008308:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800830a:	89fb      	ldrh	r3, [r7, #14]
 800830c:	b2db      	uxtb	r3, r3
 800830e:	22db      	movs	r2, #219	@ 0xdb
 8008310:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8008314:	4618      	mov	r0, r3
 8008316:	f000 fd35 	bl	8008d84 <CODEC_IO_Write>
 800831a:	4603      	mov	r3, r0
 800831c:	461a      	mov	r2, r3
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	4413      	add	r3, r2
 8008322:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8008324:	89fb      	ldrh	r3, [r7, #14]
 8008326:	b2db      	uxtb	r3, r3
 8008328:	22db      	movs	r2, #219	@ 0xdb
 800832a:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fd28 	bl	8008d84 <CODEC_IO_Write>
 8008334:	4603      	mov	r3, r0
 8008336:	461a      	mov	r2, r3
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	4413      	add	r3, r2
 800833c:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800833e:	89fb      	ldrh	r3, [r7, #14]
 8008340:	b2db      	uxtb	r3, r3
 8008342:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8008346:	2102      	movs	r1, #2
 8008348:	4618      	mov	r0, r3
 800834a:	f000 fd1b 	bl	8008d84 <CODEC_IO_Write>
 800834e:	4603      	mov	r3, r0
 8008350:	461a      	mov	r2, r3
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	4413      	add	r3, r2
 8008356:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8008358:	89fb      	ldrh	r3, [r7, #14]
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2202      	movs	r2, #2
 800835e:	f240 6106 	movw	r1, #1542	@ 0x606
 8008362:	4618      	mov	r0, r3
 8008364:	f000 fd0e 	bl	8008d84 <CODEC_IO_Write>
 8008368:	4603      	mov	r3, r0
 800836a:	461a      	mov	r2, r3
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	4413      	add	r3, r2
 8008370:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8008372:	89fb      	ldrh	r3, [r7, #14]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2202      	movs	r2, #2
 8008378:	f240 6107 	movw	r1, #1543	@ 0x607
 800837c:	4618      	mov	r0, r3
 800837e:	f000 fd01 	bl	8008d84 <CODEC_IO_Write>
 8008382:	4603      	mov	r3, r0
 8008384:	461a      	mov	r2, r3
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	4413      	add	r3, r2
 800838a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800838c:	89fb      	ldrh	r3, [r7, #14]
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2202      	movs	r2, #2
 8008392:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8008396:	4618      	mov	r0, r3
 8008398:	f000 fcf4 	bl	8008d84 <CODEC_IO_Write>
 800839c:	4603      	mov	r3, r0
 800839e:	461a      	mov	r2, r3
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	4413      	add	r3, r2
 80083a4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80083a6:	89fb      	ldrh	r3, [r7, #14]
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2202      	movs	r2, #2
 80083ac:	f240 6109 	movw	r1, #1545	@ 0x609
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 fce7 	bl	8008d84 <CODEC_IO_Write>
 80083b6:	4603      	mov	r3, r0
 80083b8:	461a      	mov	r2, r3
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	4413      	add	r3, r2
 80083be:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80083c0:	89fb      	ldrh	r3, [r7, #14]
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	220d      	movs	r2, #13
 80083c6:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 fcda 	bl	8008d84 <CODEC_IO_Write>
 80083d0:	4603      	mov	r3, r0
 80083d2:	461a      	mov	r2, r3
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	4413      	add	r3, r2
 80083d8:	61fb      	str	r3, [r7, #28]
      break;    
 80083da:	e006      	b.n	80083ea <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	3301      	adds	r3, #1
 80083e0:	61fb      	str	r3, [r7, #28]
      break;
 80083e2:	e002      	b.n	80083ea <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 80083e4:	4ba4      	ldr	r3, [pc, #656]	@ (8008678 <wm8994_Init+0x990>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4aa3      	ldr	r2, [pc, #652]	@ (800867c <wm8994_Init+0x994>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d079      	beq.n	80084e6 <wm8994_Init+0x7fe>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4aa1      	ldr	r2, [pc, #644]	@ (800867c <wm8994_Init+0x994>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	f200 80ad 	bhi.w	8008556 <wm8994_Init+0x86e>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8008402:	4293      	cmp	r3, r2
 8008404:	d061      	beq.n	80084ca <wm8994_Init+0x7e2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800840c:	4293      	cmp	r3, r2
 800840e:	f200 80a2 	bhi.w	8008556 <wm8994_Init+0x86e>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8008418:	4293      	cmp	r3, r2
 800841a:	f000 808e 	beq.w	800853a <wm8994_Init+0x852>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8008424:	4293      	cmp	r3, r2
 8008426:	f200 8096 	bhi.w	8008556 <wm8994_Init+0x86e>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8008430:	d03d      	beq.n	80084ae <wm8994_Init+0x7c6>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8008438:	f200 808d 	bhi.w	8008556 <wm8994_Init+0x86e>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8008442:	4293      	cmp	r3, r2
 8008444:	d06b      	beq.n	800851e <wm8994_Init+0x836>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f245 6222 	movw	r2, #22050	@ 0x5622
 800844c:	4293      	cmp	r3, r2
 800844e:	f200 8082 	bhi.w	8008556 <wm8994_Init+0x86e>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8008458:	d01b      	beq.n	8008492 <wm8994_Init+0x7aa>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8008460:	d879      	bhi.n	8008556 <wm8994_Init+0x86e>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8008468:	d005      	beq.n	8008476 <wm8994_Init+0x78e>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8008470:	4293      	cmp	r3, r2
 8008472:	d046      	beq.n	8008502 <wm8994_Init+0x81a>
 8008474:	e06f      	b.n	8008556 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8008476:	89fb      	ldrh	r3, [r7, #14]
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2203      	movs	r2, #3
 800847c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008480:	4618      	mov	r0, r3
 8008482:	f000 fc7f 	bl	8008d84 <CODEC_IO_Write>
 8008486:	4603      	mov	r3, r0
 8008488:	461a      	mov	r2, r3
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	4413      	add	r3, r2
 800848e:	61fb      	str	r3, [r7, #28]
    break;
 8008490:	e06f      	b.n	8008572 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8008492:	89fb      	ldrh	r3, [r7, #14]
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2233      	movs	r2, #51	@ 0x33
 8008498:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fc71 	bl	8008d84 <CODEC_IO_Write>
 80084a2:	4603      	mov	r3, r0
 80084a4:	461a      	mov	r2, r3
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	4413      	add	r3, r2
 80084aa:	61fb      	str	r3, [r7, #28]
    break;
 80084ac:	e061      	b.n	8008572 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80084ae:	89fb      	ldrh	r3, [r7, #14]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2263      	movs	r2, #99	@ 0x63
 80084b4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 fc63 	bl	8008d84 <CODEC_IO_Write>
 80084be:	4603      	mov	r3, r0
 80084c0:	461a      	mov	r2, r3
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	4413      	add	r3, r2
 80084c6:	61fb      	str	r3, [r7, #28]
    break;
 80084c8:	e053      	b.n	8008572 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80084ca:	89fb      	ldrh	r3, [r7, #14]
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2283      	movs	r2, #131	@ 0x83
 80084d0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 fc55 	bl	8008d84 <CODEC_IO_Write>
 80084da:	4603      	mov	r3, r0
 80084dc:	461a      	mov	r2, r3
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	4413      	add	r3, r2
 80084e2:	61fb      	str	r3, [r7, #28]
    break;
 80084e4:	e045      	b.n	8008572 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80084e6:	89fb      	ldrh	r3, [r7, #14]
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	22a3      	movs	r2, #163	@ 0xa3
 80084ec:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fc47 	bl	8008d84 <CODEC_IO_Write>
 80084f6:	4603      	mov	r3, r0
 80084f8:	461a      	mov	r2, r3
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	4413      	add	r3, r2
 80084fe:	61fb      	str	r3, [r7, #28]
    break;
 8008500:	e037      	b.n	8008572 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8008502:	89fb      	ldrh	r3, [r7, #14]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2213      	movs	r2, #19
 8008508:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fc39 	bl	8008d84 <CODEC_IO_Write>
 8008512:	4603      	mov	r3, r0
 8008514:	461a      	mov	r2, r3
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	4413      	add	r3, r2
 800851a:	61fb      	str	r3, [r7, #28]
    break;
 800851c:	e029      	b.n	8008572 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800851e:	89fb      	ldrh	r3, [r7, #14]
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2243      	movs	r2, #67	@ 0x43
 8008524:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fc2b 	bl	8008d84 <CODEC_IO_Write>
 800852e:	4603      	mov	r3, r0
 8008530:	461a      	mov	r2, r3
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	4413      	add	r3, r2
 8008536:	61fb      	str	r3, [r7, #28]
    break;
 8008538:	e01b      	b.n	8008572 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800853a:	89fb      	ldrh	r3, [r7, #14]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2273      	movs	r2, #115	@ 0x73
 8008540:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fc1d 	bl	8008d84 <CODEC_IO_Write>
 800854a:	4603      	mov	r3, r0
 800854c:	461a      	mov	r2, r3
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	4413      	add	r3, r2
 8008552:	61fb      	str	r3, [r7, #28]
    break; 
 8008554:	e00d      	b.n	8008572 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8008556:	89fb      	ldrh	r3, [r7, #14]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2283      	movs	r2, #131	@ 0x83
 800855c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008560:	4618      	mov	r0, r3
 8008562:	f000 fc0f 	bl	8008d84 <CODEC_IO_Write>
 8008566:	4603      	mov	r3, r0
 8008568:	461a      	mov	r2, r3
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	4413      	add	r3, r2
 800856e:	61fb      	str	r3, [r7, #28]
    break; 
 8008570:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8008572:	8afb      	ldrh	r3, [r7, #22]
 8008574:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008578:	d10e      	bne.n	8008598 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800857a:	89fb      	ldrh	r3, [r7, #14]
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f244 0218 	movw	r2, #16408	@ 0x4018
 8008582:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fbfc 	bl	8008d84 <CODEC_IO_Write>
 800858c:	4603      	mov	r3, r0
 800858e:	461a      	mov	r2, r3
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	4413      	add	r3, r2
 8008594:	61fb      	str	r3, [r7, #28]
 8008596:	e00d      	b.n	80085b4 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8008598:	89fb      	ldrh	r3, [r7, #14]
 800859a:	b2db      	uxtb	r3, r3
 800859c:	f244 0210 	movw	r2, #16400	@ 0x4010
 80085a0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 fbed 	bl	8008d84 <CODEC_IO_Write>
 80085aa:	4603      	mov	r3, r0
 80085ac:	461a      	mov	r2, r3
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	4413      	add	r3, r2
 80085b2:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80085b4:	89fb      	ldrh	r3, [r7, #14]
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2200      	movs	r2, #0
 80085ba:	f240 3102 	movw	r1, #770	@ 0x302
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fbe0 	bl	8008d84 <CODEC_IO_Write>
 80085c4:	4603      	mov	r3, r0
 80085c6:	461a      	mov	r2, r3
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	4413      	add	r3, r2
 80085cc:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80085ce:	89fb      	ldrh	r3, [r7, #14]
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	220a      	movs	r2, #10
 80085d4:	f44f 7102 	mov.w	r1, #520	@ 0x208
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fbd3 	bl	8008d84 <CODEC_IO_Write>
 80085de:	4603      	mov	r3, r0
 80085e0:	461a      	mov	r2, r3
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	4413      	add	r3, r2
 80085e6:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80085e8:	89fb      	ldrh	r3, [r7, #14]
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	2201      	movs	r2, #1
 80085ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fbc6 	bl	8008d84 <CODEC_IO_Write>
 80085f8:	4603      	mov	r3, r0
 80085fa:	461a      	mov	r2, r3
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	4413      	add	r3, r2
 8008600:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8008602:	8b3b      	ldrh	r3, [r7, #24]
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 817b 	beq.w	8008900 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800860a:	8b3b      	ldrh	r3, [r7, #24]
 800860c:	2b02      	cmp	r3, #2
 800860e:	d157      	bne.n	80086c0 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8008610:	89fb      	ldrh	r3, [r7, #14]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008618:	212d      	movs	r1, #45	@ 0x2d
 800861a:	4618      	mov	r0, r3
 800861c:	f000 fbb2 	bl	8008d84 <CODEC_IO_Write>
 8008620:	4603      	mov	r3, r0
 8008622:	461a      	mov	r2, r3
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	4413      	add	r3, r2
 8008628:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 800862a:	89fb      	ldrh	r3, [r7, #14]
 800862c:	b2db      	uxtb	r3, r3
 800862e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008632:	212e      	movs	r1, #46	@ 0x2e
 8008634:	4618      	mov	r0, r3
 8008636:	f000 fba5 	bl	8008d84 <CODEC_IO_Write>
 800863a:	4603      	mov	r3, r0
 800863c:	461a      	mov	r2, r3
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	4413      	add	r3, r2
 8008642:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8008644:	4b0e      	ldr	r3, [pc, #56]	@ (8008680 <wm8994_Init+0x998>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01b      	beq.n	8008684 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 800864c:	89fb      	ldrh	r3, [r7, #14]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8008654:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8008658:	4618      	mov	r0, r3
 800865a:	f000 fb93 	bl	8008d84 <CODEC_IO_Write>
 800865e:	4603      	mov	r3, r0
 8008660:	461a      	mov	r2, r3
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	4413      	add	r3, r2
 8008666:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8008668:	4b05      	ldr	r3, [pc, #20]	@ (8008680 <wm8994_Init+0x998>)
 800866a:	2200      	movs	r2, #0
 800866c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800866e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008672:	f7f9 fa5b 	bl	8001b2c <AUDIO_IO_Delay>
 8008676:	e016      	b.n	80086a6 <wm8994_Init+0x9be>
 8008678:	20001900 	.word	0x20001900
 800867c:	00017700 	.word	0x00017700
 8008680:	20000015 	.word	0x20000015
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8008684:	89fb      	ldrh	r3, [r7, #14]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	f248 1208 	movw	r2, #33032	@ 0x8108
 800868c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fb77 	bl	8008d84 <CODEC_IO_Write>
 8008696:	4603      	mov	r3, r0
 8008698:	461a      	mov	r2, r3
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	4413      	add	r3, r2
 800869e:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80086a0:	2032      	movs	r0, #50	@ 0x32
 80086a2:	f7f9 fa43 	bl	8001b2c <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80086a6:	89fb      	ldrh	r3, [r7, #14]
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2200      	movs	r2, #0
 80086ac:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 fb67 	bl	8008d84 <CODEC_IO_Write>
 80086b6:	4603      	mov	r3, r0
 80086b8:	461a      	mov	r2, r3
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	4413      	add	r3, r2
 80086be:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80086c0:	89fb      	ldrh	r3, [r7, #14]
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80086c8:	2103      	movs	r1, #3
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fb5a 	bl	8008d84 <CODEC_IO_Write>
 80086d0:	4603      	mov	r3, r0
 80086d2:	461a      	mov	r2, r3
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	4413      	add	r3, r2
 80086d8:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80086da:	89fb      	ldrh	r3, [r7, #14]
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2200      	movs	r2, #0
 80086e0:	2122      	movs	r1, #34	@ 0x22
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 fb4e 	bl	8008d84 <CODEC_IO_Write>
 80086e8:	4603      	mov	r3, r0
 80086ea:	461a      	mov	r2, r3
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	4413      	add	r3, r2
 80086f0:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80086f2:	89fb      	ldrh	r3, [r7, #14]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2200      	movs	r2, #0
 80086f8:	2123      	movs	r1, #35	@ 0x23
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fb42 	bl	8008d84 <CODEC_IO_Write>
 8008700:	4603      	mov	r3, r0
 8008702:	461a      	mov	r2, r3
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	4413      	add	r3, r2
 8008708:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800870a:	89fb      	ldrh	r3, [r7, #14]
 800870c:	b2db      	uxtb	r3, r3
 800870e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8008712:	2136      	movs	r1, #54	@ 0x36
 8008714:	4618      	mov	r0, r3
 8008716:	f000 fb35 	bl	8008d84 <CODEC_IO_Write>
 800871a:	4603      	mov	r3, r0
 800871c:	461a      	mov	r2, r3
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	4413      	add	r3, r2
 8008722:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8008724:	89fb      	ldrh	r3, [r7, #14]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	f243 0203 	movw	r2, #12291	@ 0x3003
 800872c:	2101      	movs	r1, #1
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fb28 	bl	8008d84 <CODEC_IO_Write>
 8008734:	4603      	mov	r3, r0
 8008736:	461a      	mov	r2, r3
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	4413      	add	r3, r2
 800873c:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800873e:	8afb      	ldrh	r3, [r7, #22]
 8008740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008744:	d10d      	bne.n	8008762 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8008746:	89fb      	ldrh	r3, [r7, #14]
 8008748:	b2db      	uxtb	r3, r3
 800874a:	f240 2205 	movw	r2, #517	@ 0x205
 800874e:	2151      	movs	r1, #81	@ 0x51
 8008750:	4618      	mov	r0, r3
 8008752:	f000 fb17 	bl	8008d84 <CODEC_IO_Write>
 8008756:	4603      	mov	r3, r0
 8008758:	461a      	mov	r2, r3
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	4413      	add	r3, r2
 800875e:	61fb      	str	r3, [r7, #28]
 8008760:	e00b      	b.n	800877a <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8008762:	89fb      	ldrh	r3, [r7, #14]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2205      	movs	r2, #5
 8008768:	2151      	movs	r1, #81	@ 0x51
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fb0a 	bl	8008d84 <CODEC_IO_Write>
 8008770:	4603      	mov	r3, r0
 8008772:	461a      	mov	r2, r3
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	4413      	add	r3, r2
 8008778:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800877a:	8b7b      	ldrh	r3, [r7, #26]
 800877c:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8008780:	f043 0303 	orr.w	r3, r3, #3
 8008784:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8008786:	89fb      	ldrh	r3, [r7, #14]
 8008788:	b2db      	uxtb	r3, r3
 800878a:	8b7a      	ldrh	r2, [r7, #26]
 800878c:	2101      	movs	r1, #1
 800878e:	4618      	mov	r0, r3
 8008790:	f000 faf8 	bl	8008d84 <CODEC_IO_Write>
 8008794:	4603      	mov	r3, r0
 8008796:	461a      	mov	r2, r3
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	4413      	add	r3, r2
 800879c:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 800879e:	89fb      	ldrh	r3, [r7, #14]
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2222      	movs	r2, #34	@ 0x22
 80087a4:	2160      	movs	r1, #96	@ 0x60
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 faec 	bl	8008d84 <CODEC_IO_Write>
 80087ac:	4603      	mov	r3, r0
 80087ae:	461a      	mov	r2, r3
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	4413      	add	r3, r2
 80087b4:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80087b6:	89fb      	ldrh	r3, [r7, #14]
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	f649 7225 	movw	r2, #40741	@ 0x9f25
 80087be:	214c      	movs	r1, #76	@ 0x4c
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 fadf 	bl	8008d84 <CODEC_IO_Write>
 80087c6:	4603      	mov	r3, r0
 80087c8:	461a      	mov	r2, r3
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	4413      	add	r3, r2
 80087ce:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80087d0:	200f      	movs	r0, #15
 80087d2:	f7f9 f9ab 	bl	8001b2c <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80087d6:	89fb      	ldrh	r3, [r7, #14]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2201      	movs	r2, #1
 80087dc:	212d      	movs	r1, #45	@ 0x2d
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fad0 	bl	8008d84 <CODEC_IO_Write>
 80087e4:	4603      	mov	r3, r0
 80087e6:	461a      	mov	r2, r3
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	4413      	add	r3, r2
 80087ec:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80087ee:	89fb      	ldrh	r3, [r7, #14]
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2201      	movs	r2, #1
 80087f4:	212e      	movs	r1, #46	@ 0x2e
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fac4 	bl	8008d84 <CODEC_IO_Write>
 80087fc:	4603      	mov	r3, r0
 80087fe:	461a      	mov	r2, r3
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	4413      	add	r3, r2
 8008804:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8008806:	89fb      	ldrh	r3, [r7, #14]
 8008808:	b2db      	uxtb	r3, r3
 800880a:	f44f 724c 	mov.w	r2, #816	@ 0x330
 800880e:	2103      	movs	r1, #3
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fab7 	bl	8008d84 <CODEC_IO_Write>
 8008816:	4603      	mov	r3, r0
 8008818:	461a      	mov	r2, r3
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	4413      	add	r3, r2
 800881e:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8008820:	89fb      	ldrh	r3, [r7, #14]
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2233      	movs	r2, #51	@ 0x33
 8008826:	2154      	movs	r1, #84	@ 0x54
 8008828:	4618      	mov	r0, r3
 800882a:	f000 faab 	bl	8008d84 <CODEC_IO_Write>
 800882e:	4603      	mov	r3, r0
 8008830:	461a      	mov	r2, r3
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	4413      	add	r3, r2
 8008836:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8008838:	f240 1001 	movw	r0, #257	@ 0x101
 800883c:	f7f9 f976 	bl	8001b2c <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8008840:	89fb      	ldrh	r3, [r7, #14]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	22ee      	movs	r2, #238	@ 0xee
 8008846:	2160      	movs	r1, #96	@ 0x60
 8008848:	4618      	mov	r0, r3
 800884a:	f000 fa9b 	bl	8008d84 <CODEC_IO_Write>
 800884e:	4603      	mov	r3, r0
 8008850:	461a      	mov	r2, r3
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	4413      	add	r3, r2
 8008856:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8008858:	89fb      	ldrh	r3, [r7, #14]
 800885a:	b2db      	uxtb	r3, r3
 800885c:	22c0      	movs	r2, #192	@ 0xc0
 800885e:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fa8e 	bl	8008d84 <CODEC_IO_Write>
 8008868:	4603      	mov	r3, r0
 800886a:	461a      	mov	r2, r3
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	4413      	add	r3, r2
 8008870:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8008872:	89fb      	ldrh	r3, [r7, #14]
 8008874:	b2db      	uxtb	r3, r3
 8008876:	22c0      	movs	r2, #192	@ 0xc0
 8008878:	f240 6111 	movw	r1, #1553	@ 0x611
 800887c:	4618      	mov	r0, r3
 800887e:	f000 fa81 	bl	8008d84 <CODEC_IO_Write>
 8008882:	4603      	mov	r3, r0
 8008884:	461a      	mov	r2, r3
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	4413      	add	r3, r2
 800888a:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800888c:	89fb      	ldrh	r3, [r7, #14]
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2210      	movs	r2, #16
 8008892:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fa74 	bl	8008d84 <CODEC_IO_Write>
 800889c:	4603      	mov	r3, r0
 800889e:	461a      	mov	r2, r3
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	4413      	add	r3, r2
 80088a4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80088a6:	89fb      	ldrh	r3, [r7, #14]
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	22c0      	movs	r2, #192	@ 0xc0
 80088ac:	f240 6112 	movw	r1, #1554	@ 0x612
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 fa67 	bl	8008d84 <CODEC_IO_Write>
 80088b6:	4603      	mov	r3, r0
 80088b8:	461a      	mov	r2, r3
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	4413      	add	r3, r2
 80088be:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80088c0:	89fb      	ldrh	r3, [r7, #14]
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	22c0      	movs	r2, #192	@ 0xc0
 80088c6:	f240 6113 	movw	r1, #1555	@ 0x613
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fa5a 	bl	8008d84 <CODEC_IO_Write>
 80088d0:	4603      	mov	r3, r0
 80088d2:	461a      	mov	r2, r3
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	4413      	add	r3, r2
 80088d8:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80088da:	89fb      	ldrh	r3, [r7, #14]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2210      	movs	r2, #16
 80088e0:	f240 4122 	movw	r1, #1058	@ 0x422
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 fa4d 	bl	8008d84 <CODEC_IO_Write>
 80088ea:	4603      	mov	r3, r0
 80088ec:	461a      	mov	r2, r3
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	4413      	add	r3, r2
 80088f2:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80088f4:	7afa      	ldrb	r2, [r7, #11]
 80088f6:	89fb      	ldrh	r3, [r7, #14]
 80088f8:	4611      	mov	r1, r2
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 f8b0 	bl	8008a60 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8008900:	8afb      	ldrh	r3, [r7, #22]
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 80a6 	beq.w	8008a54 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8008908:	8afb      	ldrh	r3, [r7, #22]
 800890a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800890e:	d003      	beq.n	8008918 <wm8994_Init+0xc30>
 8008910:	8afb      	ldrh	r3, [r7, #22]
 8008912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008916:	d12b      	bne.n	8008970 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8008918:	8b7b      	ldrh	r3, [r7, #26]
 800891a:	f043 0313 	orr.w	r3, r3, #19
 800891e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8008920:	89fb      	ldrh	r3, [r7, #14]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	8b7a      	ldrh	r2, [r7, #26]
 8008926:	2101      	movs	r1, #1
 8008928:	4618      	mov	r0, r3
 800892a:	f000 fa2b 	bl	8008d84 <CODEC_IO_Write>
 800892e:	4603      	mov	r3, r0
 8008930:	461a      	mov	r2, r3
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	4413      	add	r3, r2
 8008936:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8008938:	89fb      	ldrh	r3, [r7, #14]
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2202      	movs	r2, #2
 800893e:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fa1e 	bl	8008d84 <CODEC_IO_Write>
 8008948:	4603      	mov	r3, r0
 800894a:	461a      	mov	r2, r3
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	4413      	add	r3, r2
 8008950:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8008952:	89fb      	ldrh	r3, [r7, #14]
 8008954:	b2db      	uxtb	r3, r3
 8008956:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800895a:	f240 4111 	movw	r1, #1041	@ 0x411
 800895e:	4618      	mov	r0, r3
 8008960:	f000 fa10 	bl	8008d84 <CODEC_IO_Write>
 8008964:	4603      	mov	r3, r0
 8008966:	461a      	mov	r2, r3
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	4413      	add	r3, r2
 800896c:	61fb      	str	r3, [r7, #28]
 800896e:	e06b      	b.n	8008a48 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8008970:	8afb      	ldrh	r3, [r7, #22]
 8008972:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008976:	d139      	bne.n	80089ec <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8008978:	8b7b      	ldrh	r3, [r7, #26]
 800897a:	f043 0313 	orr.w	r3, r3, #19
 800897e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8008980:	89fb      	ldrh	r3, [r7, #14]
 8008982:	b2db      	uxtb	r3, r3
 8008984:	8b7a      	ldrh	r2, [r7, #26]
 8008986:	2101      	movs	r1, #1
 8008988:	4618      	mov	r0, r3
 800898a:	f000 f9fb 	bl	8008d84 <CODEC_IO_Write>
 800898e:	4603      	mov	r3, r0
 8008990:	461a      	mov	r2, r3
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	4413      	add	r3, r2
 8008996:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8008998:	89fb      	ldrh	r3, [r7, #14]
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2202      	movs	r2, #2
 800899e:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f9ee 	bl	8008d84 <CODEC_IO_Write>
 80089a8:	4603      	mov	r3, r0
 80089aa:	461a      	mov	r2, r3
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	4413      	add	r3, r2
 80089b0:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80089b2:	89fb      	ldrh	r3, [r7, #14]
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80089ba:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 f9e0 	bl	8008d84 <CODEC_IO_Write>
 80089c4:	4603      	mov	r3, r0
 80089c6:	461a      	mov	r2, r3
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	4413      	add	r3, r2
 80089cc:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 80089ce:	89fb      	ldrh	r3, [r7, #14]
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80089d6:	f240 4111 	movw	r1, #1041	@ 0x411
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 f9d2 	bl	8008d84 <CODEC_IO_Write>
 80089e0:	4603      	mov	r3, r0
 80089e2:	461a      	mov	r2, r3
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	4413      	add	r3, r2
 80089e8:	61fb      	str	r3, [r7, #28]
 80089ea:	e02d      	b.n	8008a48 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80089ec:	8afb      	ldrh	r3, [r7, #22]
 80089ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089f2:	d003      	beq.n	80089fc <wm8994_Init+0xd14>
 80089f4:	8afb      	ldrh	r3, [r7, #22]
 80089f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089fa:	d125      	bne.n	8008a48 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80089fc:	89fb      	ldrh	r3, [r7, #14]
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	220b      	movs	r2, #11
 8008a02:	2118      	movs	r1, #24
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 f9bd 	bl	8008d84 <CODEC_IO_Write>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	4413      	add	r3, r2
 8008a12:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8008a14:	89fb      	ldrh	r3, [r7, #14]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	220b      	movs	r2, #11
 8008a1a:	211a      	movs	r1, #26
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 f9b1 	bl	8008d84 <CODEC_IO_Write>
 8008a22:	4603      	mov	r3, r0
 8008a24:	461a      	mov	r2, r3
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	4413      	add	r3, r2
 8008a2a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8008a2c:	89fb      	ldrh	r3, [r7, #14]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8008a34:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 f9a3 	bl	8008d84 <CODEC_IO_Write>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	461a      	mov	r2, r3
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	4413      	add	r3, r2
 8008a46:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8008a48:	7afa      	ldrb	r2, [r7, #11]
 8008a4a:	89fb      	ldrh	r3, [r7, #14]
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 f806 	bl	8008a60 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8008a54:	69fb      	ldr	r3, [r7, #28]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3720      	adds	r7, #32
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop

08008a60 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	460a      	mov	r2, r1
 8008a6a:	80fb      	strh	r3, [r7, #6]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8008a74:	797b      	ldrb	r3, [r7, #5]
 8008a76:	2b64      	cmp	r3, #100	@ 0x64
 8008a78:	d80b      	bhi.n	8008a92 <wm8994_SetVolume+0x32>
 8008a7a:	797a      	ldrb	r2, [r7, #5]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	019b      	lsls	r3, r3, #6
 8008a80:	1a9b      	subs	r3, r3, r2
 8008a82:	4a86      	ldr	r2, [pc, #536]	@ (8008c9c <wm8994_SetVolume+0x23c>)
 8008a84:	fb82 1203 	smull	r1, r2, r2, r3
 8008a88:	1152      	asrs	r2, r2, #5
 8008a8a:	17db      	asrs	r3, r3, #31
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	e000      	b.n	8008a94 <wm8994_SetVolume+0x34>
 8008a92:	2364      	movs	r3, #100	@ 0x64
 8008a94:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8008a96:	4b82      	ldr	r3, [pc, #520]	@ (8008ca0 <wm8994_SetVolume+0x240>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 809b 	beq.w	8008bd6 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8008aa0:	7afb      	ldrb	r3, [r7, #11]
 8008aa2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008aa4:	d93d      	bls.n	8008b22 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8008aa6:	88fb      	ldrh	r3, [r7, #6]
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 f8fc 	bl	8008ca8 <wm8994_SetMute>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8008ab8:	88fb      	ldrh	r3, [r7, #6]
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	f240 127f 	movw	r2, #383	@ 0x17f
 8008ac0:	211c      	movs	r1, #28
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 f95e 	bl	8008d84 <CODEC_IO_Write>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	461a      	mov	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4413      	add	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8008ad2:	88fb      	ldrh	r3, [r7, #6]
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	f240 127f 	movw	r2, #383	@ 0x17f
 8008ada:	211d      	movs	r1, #29
 8008adc:	4618      	mov	r0, r3
 8008ade:	f000 f951 	bl	8008d84 <CODEC_IO_Write>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4413      	add	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8008aec:	88fb      	ldrh	r3, [r7, #6]
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	f240 127f 	movw	r2, #383	@ 0x17f
 8008af4:	2126      	movs	r1, #38	@ 0x26
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 f944 	bl	8008d84 <CODEC_IO_Write>
 8008afc:	4603      	mov	r3, r0
 8008afe:	461a      	mov	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4413      	add	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8008b06:	88fb      	ldrh	r3, [r7, #6]
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	f240 127f 	movw	r2, #383	@ 0x17f
 8008b0e:	2127      	movs	r1, #39	@ 0x27
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 f937 	bl	8008d84 <CODEC_IO_Write>
 8008b16:	4603      	mov	r3, r0
 8008b18:	461a      	mov	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	e059      	b.n	8008bd6 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8008b22:	797b      	ldrb	r3, [r7, #5]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d109      	bne.n	8008b3c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8008b28:	88fb      	ldrh	r3, [r7, #6]
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f000 f8bb 	bl	8008ca8 <wm8994_SetMute>
 8008b32:	4602      	mov	r2, r0
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	e04c      	b.n	8008bd6 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8008b3c:	88fb      	ldrh	r3, [r7, #6]
 8008b3e:	2100      	movs	r1, #0
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 f8b1 	bl	8008ca8 <wm8994_SetMute>
 8008b46:	4602      	mov	r2, r0
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8008b4e:	88fb      	ldrh	r3, [r7, #6]
 8008b50:	b2d8      	uxtb	r0, r3
 8008b52:	7afb      	ldrb	r3, [r7, #11]
 8008b54:	b21b      	sxth	r3, r3
 8008b56:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8008b5a:	b21b      	sxth	r3, r3
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	211c      	movs	r1, #28
 8008b62:	f000 f90f 	bl	8008d84 <CODEC_IO_Write>
 8008b66:	4603      	mov	r3, r0
 8008b68:	461a      	mov	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8008b70:	88fb      	ldrh	r3, [r7, #6]
 8008b72:	b2d8      	uxtb	r0, r3
 8008b74:	7afb      	ldrb	r3, [r7, #11]
 8008b76:	b21b      	sxth	r3, r3
 8008b78:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8008b7c:	b21b      	sxth	r3, r3
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	461a      	mov	r2, r3
 8008b82:	211d      	movs	r1, #29
 8008b84:	f000 f8fe 	bl	8008d84 <CODEC_IO_Write>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4413      	add	r3, r2
 8008b90:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8008b92:	88fb      	ldrh	r3, [r7, #6]
 8008b94:	b2d8      	uxtb	r0, r3
 8008b96:	7afb      	ldrb	r3, [r7, #11]
 8008b98:	b21b      	sxth	r3, r3
 8008b9a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8008b9e:	b21b      	sxth	r3, r3
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	2126      	movs	r1, #38	@ 0x26
 8008ba6:	f000 f8ed 	bl	8008d84 <CODEC_IO_Write>
 8008baa:	4603      	mov	r3, r0
 8008bac:	461a      	mov	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8008bb4:	88fb      	ldrh	r3, [r7, #6]
 8008bb6:	b2d8      	uxtb	r0, r3
 8008bb8:	7afb      	ldrb	r3, [r7, #11]
 8008bba:	b21b      	sxth	r3, r3
 8008bbc:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8008bc0:	b21b      	sxth	r3, r3
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	2127      	movs	r1, #39	@ 0x27
 8008bc8:	f000 f8dc 	bl	8008d84 <CODEC_IO_Write>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	461a      	mov	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8008bd6:	4b33      	ldr	r3, [pc, #204]	@ (8008ca4 <wm8994_SetVolume+0x244>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d059      	beq.n	8008c92 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8008bde:	797b      	ldrb	r3, [r7, #5]
 8008be0:	2b63      	cmp	r3, #99	@ 0x63
 8008be2:	d80c      	bhi.n	8008bfe <wm8994_SetVolume+0x19e>
 8008be4:	797a      	ldrb	r2, [r7, #5]
 8008be6:	4613      	mov	r3, r2
 8008be8:	011b      	lsls	r3, r3, #4
 8008bea:	1a9b      	subs	r3, r3, r2
 8008bec:	011b      	lsls	r3, r3, #4
 8008bee:	4a2b      	ldr	r2, [pc, #172]	@ (8008c9c <wm8994_SetVolume+0x23c>)
 8008bf0:	fb82 1203 	smull	r1, r2, r2, r3
 8008bf4:	1152      	asrs	r2, r2, #5
 8008bf6:	17db      	asrs	r3, r3, #31
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	e000      	b.n	8008c00 <wm8994_SetVolume+0x1a0>
 8008bfe:	23ef      	movs	r3, #239	@ 0xef
 8008c00:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8008c02:	88fb      	ldrh	r3, [r7, #6]
 8008c04:	b2d8      	uxtb	r0, r3
 8008c06:	7afb      	ldrb	r3, [r7, #11]
 8008c08:	b21b      	sxth	r3, r3
 8008c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c0e:	b21b      	sxth	r3, r3
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	461a      	mov	r2, r3
 8008c14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008c18:	f000 f8b4 	bl	8008d84 <CODEC_IO_Write>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8008c26:	88fb      	ldrh	r3, [r7, #6]
 8008c28:	b2d8      	uxtb	r0, r3
 8008c2a:	7afb      	ldrb	r3, [r7, #11]
 8008c2c:	b21b      	sxth	r3, r3
 8008c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c32:	b21b      	sxth	r3, r3
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	461a      	mov	r2, r3
 8008c38:	f240 4101 	movw	r1, #1025	@ 0x401
 8008c3c:	f000 f8a2 	bl	8008d84 <CODEC_IO_Write>
 8008c40:	4603      	mov	r3, r0
 8008c42:	461a      	mov	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4413      	add	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8008c4a:	88fb      	ldrh	r3, [r7, #6]
 8008c4c:	b2d8      	uxtb	r0, r3
 8008c4e:	7afb      	ldrb	r3, [r7, #11]
 8008c50:	b21b      	sxth	r3, r3
 8008c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c56:	b21b      	sxth	r3, r3
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	f240 4104 	movw	r1, #1028	@ 0x404
 8008c60:	f000 f890 	bl	8008d84 <CODEC_IO_Write>
 8008c64:	4603      	mov	r3, r0
 8008c66:	461a      	mov	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8008c6e:	88fb      	ldrh	r3, [r7, #6]
 8008c70:	b2d8      	uxtb	r0, r3
 8008c72:	7afb      	ldrb	r3, [r7, #11]
 8008c74:	b21b      	sxth	r3, r3
 8008c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c7a:	b21b      	sxth	r3, r3
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	461a      	mov	r2, r3
 8008c80:	f240 4105 	movw	r1, #1029	@ 0x405
 8008c84:	f000 f87e 	bl	8008d84 <CODEC_IO_Write>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4413      	add	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8008c92:	68fb      	ldr	r3, [r7, #12]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	51eb851f 	.word	0x51eb851f
 8008ca0:	200018fc 	.word	0x200018fc
 8008ca4:	20001900 	.word	0x20001900

08008ca8 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	6039      	str	r1, [r7, #0]
 8008cb2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8008cb8:	4b21      	ldr	r3, [pc, #132]	@ (8008d40 <wm8994_SetMute+0x98>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d039      	beq.n	8008d34 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d11c      	bne.n	8008d00 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8008cc6:	88fb      	ldrh	r3, [r7, #6]
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cce:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 f856 	bl	8008d84 <CODEC_IO_Write>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	461a      	mov	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	4413      	add	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8008ce2:	88fb      	ldrh	r3, [r7, #6]
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cea:	f240 4122 	movw	r1, #1058	@ 0x422
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 f848 	bl	8008d84 <CODEC_IO_Write>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	60fb      	str	r3, [r7, #12]
 8008cfe:	e019      	b.n	8008d34 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8008d00:	88fb      	ldrh	r3, [r7, #6]
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2210      	movs	r2, #16
 8008d06:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 f83a 	bl	8008d84 <CODEC_IO_Write>
 8008d10:	4603      	mov	r3, r0
 8008d12:	461a      	mov	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4413      	add	r3, r2
 8008d18:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8008d1a:	88fb      	ldrh	r3, [r7, #6]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2210      	movs	r2, #16
 8008d20:	f240 4122 	movw	r1, #1058	@ 0x422
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 f82d 	bl	8008d84 <CODEC_IO_Write>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	4413      	add	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8008d34:	68fb      	ldr	r3, [r7, #12]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	200018fc 	.word	0x200018fc

08008d44 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8008d52:	88fb      	ldrh	r3, [r7, #6]
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2200      	movs	r2, #0
 8008d58:	2100      	movs	r1, #0
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 f812 	bl	8008d84 <CODEC_IO_Write>
 8008d60:	4603      	mov	r3, r0
 8008d62:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8008d64:	4b05      	ldr	r3, [pc, #20]	@ (8008d7c <wm8994_Reset+0x38>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8008d6a:	4b05      	ldr	r3, [pc, #20]	@ (8008d80 <wm8994_Reset+0x3c>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]

  return counter;
 8008d70:	68fb      	ldr	r3, [r7, #12]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	200018fc 	.word	0x200018fc
 8008d80:	20001900 	.word	0x20001900

08008d84 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	71fb      	strb	r3, [r7, #7]
 8008d8e:	460b      	mov	r3, r1
 8008d90:	80bb      	strh	r3, [r7, #4]
 8008d92:	4613      	mov	r3, r2
 8008d94:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8008d9a:	887a      	ldrh	r2, [r7, #2]
 8008d9c:	88b9      	ldrh	r1, [r7, #4]
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7f8 fe99 	bl	8001ad8 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	b2db      	uxtb	r3, r3
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <memset>:
 8008db2:	4402      	add	r2, r0
 8008db4:	4603      	mov	r3, r0
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d100      	bne.n	8008dbc <memset+0xa>
 8008dba:	4770      	bx	lr
 8008dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8008dc0:	e7f9      	b.n	8008db6 <memset+0x4>
	...

08008dc4 <__libc_init_array>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8008dfc <__libc_init_array+0x38>)
 8008dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8008e00 <__libc_init_array+0x3c>)
 8008dca:	1b64      	subs	r4, r4, r5
 8008dcc:	10a4      	asrs	r4, r4, #2
 8008dce:	2600      	movs	r6, #0
 8008dd0:	42a6      	cmp	r6, r4
 8008dd2:	d109      	bne.n	8008de8 <__libc_init_array+0x24>
 8008dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8008e04 <__libc_init_array+0x40>)
 8008dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8008e08 <__libc_init_array+0x44>)
 8008dd8:	f000 f818 	bl	8008e0c <_init>
 8008ddc:	1b64      	subs	r4, r4, r5
 8008dde:	10a4      	asrs	r4, r4, #2
 8008de0:	2600      	movs	r6, #0
 8008de2:	42a6      	cmp	r6, r4
 8008de4:	d105      	bne.n	8008df2 <__libc_init_array+0x2e>
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dec:	4798      	blx	r3
 8008dee:	3601      	adds	r6, #1
 8008df0:	e7ee      	b.n	8008dd0 <__libc_init_array+0xc>
 8008df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df6:	4798      	blx	r3
 8008df8:	3601      	adds	r6, #1
 8008dfa:	e7f2      	b.n	8008de2 <__libc_init_array+0x1e>
 8008dfc:	0800a96c 	.word	0x0800a96c
 8008e00:	0800a96c 	.word	0x0800a96c
 8008e04:	0800a96c 	.word	0x0800a96c
 8008e08:	0800a970 	.word	0x0800a970

08008e0c <_init>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	bf00      	nop
 8008e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e12:	bc08      	pop	{r3}
 8008e14:	469e      	mov	lr, r3
 8008e16:	4770      	bx	lr

08008e18 <_fini>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	bf00      	nop
 8008e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1e:	bc08      	pop	{r3}
 8008e20:	469e      	mov	lr, r3
 8008e22:	4770      	bx	lr
